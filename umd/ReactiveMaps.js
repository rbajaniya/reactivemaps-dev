(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object')
    module.exports = factory(require("react"), require("react-dom"), require("ws"));
  else if (typeof define === 'function' && define.amd)
    define(["react", "react-dom", "ws"], factory);
  else if (typeof exports === 'object')
    exports["ReactiveMaps"] = factory(require("react"), require("react-dom"), require("ws"));
  else
    root["ReactiveMaps"] = factory(root["React"], root["ReactDOM"], root["ws"]);
})(this, function (__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_30__, __WEBPACK_EXTERNAL_MODULE_475__) {
  return /******/ (function (modules) { // webpackBootstrap
      /******/ // The module cache
      /******/
      var installedModules = {};

      /******/ // The require function
      /******/
      function __webpack_require__(moduleId) {

        /******/ // Check if module is in cache
        /******/
        if (installedModules[moduleId])
        /******/
          return installedModules[moduleId].exports;

        /******/ // Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
          /******/
          exports: {},
          /******/
          id: moduleId,
          /******/
          loaded: false
            /******/
        };

        /******/ // Execute the module function
        /******/
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

        /******/ // Flag the module as loaded
        /******/
        module.loaded = true;

        /******/ // Return the exports of the module
        /******/
        return module.exports;
        /******/
      }


      /******/ // expose the modules object (__webpack_modules__)
      /******/
      __webpack_require__.m = modules;

      /******/ // expose the module cache
      /******/
      __webpack_require__.c = installedModules;

      /******/ // __webpack_public_path__
      /******/
      __webpack_require__.p = "";

      /******/ // Load entry module and return exports
      /******/
      return __webpack_require__(0);
      /******/
    })
    /************************************************************************/
    /******/
    ([
      /* 0 */
      /***/
      (function (module, exports, __webpack_require__) {

        __webpack_require__(1);
        module.exports = __webpack_require__(1);


        /***/
      }),
      /* 1 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var _ReactiveMap = __webpack_require__(2);

        var _ReactiveMap2 = _interopRequireDefault(_ReactiveMap);

        var _GeoDistanceSlider = __webpack_require__(565);

        var _GeoDistanceSlider2 = _interopRequireDefault(_GeoDistanceSlider);

        var _GeoDistanceDropdown = __webpack_require__(591);

        var _GeoDistanceDropdown2 = _interopRequireDefault(_GeoDistanceDropdown);

        var _PlacesSearch = __webpack_require__(592);

        var _PlacesSearch2 = _interopRequireDefault(_PlacesSearch);

        var _reactivebase = __webpack_require__(57);

        var _reactivebase2 = _interopRequireDefault(_reactivebase);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        var combineObj = {
          ReactiveMap: _ReactiveMap2.default,
          GeoDistanceSlider: _GeoDistanceSlider2.default,
          GeoDistanceDropdown: _GeoDistanceDropdown2.default,
          PlacesSearch: _PlacesSearch2.default
        }; // actuators


        for (var component in _reactivebase2.default) {
          combineObj[component] = _reactivebase2.default[component];
        }

        module.exports = combineObj;

        /***/
      }),
      /* 2 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactGoogleMaps = __webpack_require__(4);

        var _MarkerClusterer = __webpack_require__(52);

        var _MarkerClusterer2 = _interopRequireDefault(_MarkerClusterer);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _reactivebase = __webpack_require__(57);

        var _SearchAsMove = __webpack_require__(554);

        var _MapStyles = __webpack_require__(556);

        var _ReactiveMapHelper = __webpack_require__(564);

        var ReactiveMapHelper = _interopRequireWildcard(_ReactiveMapHelper);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint max-lines: 0 */


        var ReactiveMap = function (_Component) {
          _inherits(ReactiveMap, _Component);

          function ReactiveMap(props) {
            _classCallCheck(this, ReactiveMap);

            var _this = _possibleConstructorReturn(this, (ReactiveMap.__proto__ || Object.getPrototypeOf(ReactiveMap)).call(this, props));

            _this.state = {
              markers: [],
              selectedMarker: null,
              streamingStatus: "Initializing..",
              defaultCenter: _this.props.defaultCenter ? _this.props.defaultCenter : { lat: 37.74, lon: -122.45 },
              center: _this.props.defaultCenter,
              query: {},
              rawData: {
                hits: {
                  hits: []
                }
              },
              currentData: [],
              externalData: {},
              mapBounds: null
            };
            _this.geoRelatedEvents = ["onDragend", "onZoomChanged"];
            _this.previousSelectedSensor = {};
            _this.searchAsMoveChange = _this.searchAsMoveChange.bind(_this);
            _this.mapStyleChange = _this.mapStyleChange.bind(_this);
            _this.geoCustomQuery = _this.geoCustomQuery.bind(_this);
            _this.handleMarkerClose = _this.handleMarkerClose.bind(_this);
            _this.queryStartTime = 0;
            _this.reposition = false;
            _this.mapDefaultHeight = "700px";
            return _this;
          }

          _createClass(ReactiveMap, [{
            key: "getMapStyle",
            value: function getMapStyle(styleName) {
              var selectedStyle = _MapStyles.mapStylesCollection.filter(function (style) {
                return style.key === styleName;
              });

              if (selectedStyle.length) {
                return selectedStyle[0].value;
              }
              return null;
            }
          }, {
            key: "componentDidMount",
            value: function componentDidMount() {
              this.streamProp = this.props.stream;
              this.sizeProp = this.props.size;
              this.initialize();
            }
          }, {
            key: "initialize",
            value: function initialize() {
              var updateExecute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              this.setGeoQueryInfo();
              this.createChannel(updateExecute);
              var currentMapStyle = this.getMapStyle(this.props.defaultMapStyle);
              this.initialMapBoundQuery = this.props.defaultCenter ? true : false;
              this.applyGeoQuery = this.props.applyGeoQuery ? this.props.applyGeoQuery : this.props.setSearchAsMove;
              this.setState({
                currentMapStyle: currentMapStyle
              });
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              if (nextProps.defaultMapStyle !== this.props.defaultMapStyle) {
                this.mapStyleChange(this.getMapStyle(nextProps.defaultMapStyle));
              }
            }
          }, {
            key: "componentWillUpdate",
            value: function componentWillUpdate() {
              var _this2 = this;

              setTimeout(function () {
                if (_this2.streamProp !== _this2.props.stream) {
                  _this2.streamProp = _this2.props.stream;
                  _this2.removeChannel();
                  _this2.initialize();
                }
                if (_this2.sizeProp !== _this2.props.size) {
                  _this2.sizeProp = _this2.props.size;
                  _this2.removeChannel();
                  _this2.initialize(true);
                }
              }, 300);
            }

            // stop streaming request and remove listener when component will unmount

          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              this.removeChannel();
            }
          }, {
            key: "removeChannel",
            value: function removeChannel() {
              if (this.channelId) {
                _reactivebase.AppbaseChannelManager.stopStream(this.channelId);
                this.channelId = null;
              }
              if (this.channelListener) {
                this.channelListener.remove();
              }
            }

            // Create a channel which passes the actuate and receive results whenever actuate changes

          }, {
            key: "createChannel",
            value: function createChannel() {
              var _this3 = this;

              // Set the actuate - add self aggregation query as well with actuate
              var react = this.props.react ? this.props.react : {};
              var reactOr = ["geoQuery"];
              var reactAnd = ["streamChanges"];
              react = _reactivebase.AppbaseSensorHelper.setupReact(react, reactAnd);
              react = ReactiveMapHelper.setupOrReact(react, reactOr);
              // create a channel and listen the changes
              var channelObj = _reactivebase.AppbaseChannelManager.create(this.context.appbaseRef, this.context.type, react, this.props.size, this.props.from, this.props.stream);
              this.channelId = channelObj.channelId;
              this.channelListener = channelObj.emitter.addListener(channelObj.channelId, function (res) {
                var data = res.data;
                // implementation to prevent initialize query issue if old query response is late then the newer query
                // then we will consider the response of new query and prevent to apply changes for old query response.
                // if queryStartTime of channel response is greater than the previous one only then apply changes

                function checkAndGo() {
                  if (res.mode === "historic" && res.startTime > this.queryStartTime) {
                    this.afterChannelResponse(res);
                  } else if (res.mode === "streaming") {
                    this.afterChannelResponse(res);
                  }
                }

                function initialize() {
                  if (res.error && res.startTime > this.queryStartTime) {
                    if (this.props.onAllData) {
                      var modifiedData = _reactivebase.AppbaseSensorHelper.prepareResultData(res);
                      this.props.onAllData(modifiedData.res, modifiedData.err);
                    }
                  } else if (res.appliedQuery) {
                    if (!this.state.mapBounds) {
                      checkAndGo.call(this);
                    } else if (this.props.autoMapRender) {
                      checkAndGo.call(this);
                    } else if (data.hits.hits.length) {
                      checkAndGo.call(this);
                    }
                  }
                }

                initialize.call(_this3);
              });
              var obj = {
                key: "streamChanges",
                value: ""
              };
              _reactivebase.AppbaseSensorHelper.selectedSensor.set(obj, true);
            }
          }, {
            key: "afterChannelResponse",
            value: function afterChannelResponse(res) {
              var _this4 = this;

              var getResult = ReactiveMapHelper.afterChannelResponse(res, this.state.rawData, this.props.appbaseField, this.state.markersData);
              this.reposition = true;
              this.streamFlag = getResult.streamFlag;
              this.queryStartTime = getResult.queryStartTime ? getResult.queryStartTime : 0;
              this.setState({
                rawData: getResult.rawData,
                markersData: getResult.markersData
              }, function () {
                if (_this4.props.onAllData) {
                  // Pass the historic or streaming data in index method
                  res.allMarkers = getResult.rawData;
                  var modifiedData = JSON.parse(JSON.stringify(res));
                  modifiedData.newData = getResult.newData;
                  modifiedData.currentData = getResult.currentData;
                  delete modifiedData.data;
                  modifiedData = _reactivebase.AppbaseSensorHelper.prepareResultData(modifiedData, res.data);
                  if (_this4.props.onAllData) {
                    if (modifiedData.res) {
                      modifiedData.res.mapRef = _this4.mapRef;
                    }
                    var generatedData = _this4.props.onAllData(modifiedData.res, modifiedData.err);
                    _this4.setState({
                      externalData: generatedData
                    });
                  }
                }
                if (_this4.streamFlag) {
                  _this4.streamMarkerInterval();
                }
              });
            }

            // set the query type and input data

          }, {
            key: "setGeoQueryInfo",
            value: function setGeoQueryInfo() {
              var obj = {
                key: "geoQuery",
                value: {
                  queryType: "geo_bounding_box",
                  inputData: this.props.appbaseField,
                  customQuery: this.geoCustomQuery
                }
              };
              var obj1 = {
                key: "updateExecute",
                value: {
                  queryType: "random",
                  inputData: this.props.appbaseField
                }
              };

              _reactivebase.AppbaseSensorHelper.selectedSensor.setSensorInfo(obj);
              _reactivebase.AppbaseSensorHelper.selectedSensor.setSensorInfo(obj1);
            }
          }, {
            key: "geoCustomQuery",
            value: function geoCustomQuery(value) {
              var query = null;
              if (value && (this.initialMapBoundQuery || this.searchAsMove)) {
                query = {
                  geo_bounding_box: _defineProperty({}, this.props.appbaseField, value)
                };
                if (this.geoRelatedEventsChange) {
                  this.geoRelatedEventsChange = false;
                } else if (this.applyGeoQuery) {
                  this.applyGeoQuery = false;
                }
                this.initialMapBoundQuery = false;
              }
              return query;
            }
          }, {
            key: "updateExecute",
            value: function updateExecute() {
              setTimeout(function () {
                var obj = {
                  key: "updateExecute",
                  value: Math.random()
                };
                _reactivebase.AppbaseSensorHelper.selectedSensor.set(obj, true);
              }, 1000);
            }

            // Show InfoWindow and re-renders component

          }, {
            key: "handleMarkerClick",
            value: function handleMarkerClick(marker) {
              var _this5 = this;

              marker.showInfo = true;
              this.reposition = false;
              this.setState({
                rerender: true
              }, function () {
                if (_this5.props.popoverTTL) {
                  _this5.watchPopoverTTL(marker);
                }
              });
            }

            // Close info window

          }, {
            key: "handleMarkerClose",
            value: function handleMarkerClose(marker) {
              marker.showInfo = false;
              this.reposition = false;
              this.setState(this.state);
            }

            // watch and close popover on timeout

          }, {
            key: "watchPopoverTTL",
            value: function watchPopoverTTL(marker) {
              var _this6 = this;

              this.popoverTTLStore = this.popoverTTLStore ? this.popoverTTLStore : {};
              if (this.popoverTTLStore[marker._type + marker._id]) {
                this.clearTTL(marker._type + marker._id);
              } else {
                this.popoverTTLStore[marker._type + marker._id] = setTimeout(function () {
                  _this6.handleMarkerClose(marker);
                  _this6.clearTTL(marker._type + marker._id);
                }, this.props.popoverTTL * 1000);
              }
            }
          }, {
            key: "clearTTL",
            value: function clearTTL(id) {
              clearTimeout(this.popoverTTLStore[id]);
              delete this.popoverTTLStore[id];
            }

            // render info window

          }, {
            key: "renderInfoWindow",
            value: function renderInfoWindow(ref, marker) {
              var _this7 = this;

              var onPopoverTrigger = this.props.onPopoverTrigger ? this.props.onPopoverTrigger(marker) : "Popver";
              return _react2.default.createElement(
                _reactGoogleMaps.InfoWindow, {
                  zIndex: 500,
                  key: ref + "_info_window",
                  onCloseclick: function onCloseclick() {
                    return _this7.handleMarkerClose(marker);
                  }
                },
                _react2.default.createElement(
                  "div",
                  null,
                  onPopoverTrigger
                )
              );
            }

            // Handle function which is fired when map is moved and reaches to idle position

          }, {
            key: "handleOnIdle",
            value: function handleOnIdle() {
              var mapBounds = this.mapRef ? this.mapRef.getBounds() : null;
              if (mapBounds) {
                var north = mapBounds.getNorthEast().lat();
                var south = mapBounds.getSouthWest().lat();
                var east = mapBounds.getNorthEast().lng();
                var west = mapBounds.getSouthWest().lng();
                var boundingBoxCoordinates = {
                  top_left: [west, north],
                  bottom_right: [east, south]
                };
                var stateObj = {
                  mapBounds: mapBounds
                };
                if (this.props.onIdle) {
                  var generatedData = this.props.onIdle(this.mapRef, {
                    boundingBoxCoordinates: boundingBoxCoordinates,
                    mapBounds: mapBounds
                  });
                  stateObj.externalData = generatedData;
                }
                if (this.initialMapBoundQuery || this.applyGeoQuery || this.geoRelatedEventsChange && this.searchAsMove && !this.searchQueryProgress) {
                  var flag = this.initialMapBoundQuery ? true : this.applyGeoQuery ? this.applyGeoQuery : this.searchAsMove;
                  this.setValue(boundingBoxCoordinates, flag);
                }
                this.setState(stateObj);
              }
            }

            // Handle function which is fired when map is dragged

          }, {
            key: "handleOnDrage",
            value: function handleOnDrage() {
              this.storeCenter = null;
            }

            // set value

          }, {
            key: "setValue",
            value: function setValue(value) {
              var isExecuteQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

              var obj = {
                key: "geoQuery",
                value: value
              };
              _reactivebase.AppbaseSensorHelper.selectedSensor.set(obj, isExecuteQuery);
            }

            // on change of selecting

          }, {
            key: "searchAsMoveChange",
            value: function searchAsMoveChange(value) {
              this.searchAsMove = value;
              if (value && this.mapRef) {
                this.geoRelatedEventsChange = true;
                this.handleOnIdle();
              }
            }

            // mapStyle changes

          }, {
            key: "mapStyleChange",
            value: function mapStyleChange(style) {
              this.setState({
                currentMapStyle: style
              });
            }

            // Handler function for bounds changed which udpates the map center

          }, {
            key: "handleBoundsChanged",
            value: function handleBoundsChanged() {
              var _this8 = this;

              if (!this.searchQueryProgress) {
                // this.setState({
                //   center: this.mapRef.getCenter()
                // });
              } else {
                setTimeout(function () {
                  _this8.searchQueryProgress = false;
                }, 1000 * 1);
              }
            }

            // Check if stream data exists in markersData
            // and if exists the call streamToNormal.

          }, {
            key: "streamMarkerInterval",
            value: function streamMarkerInterval() {
              var _this9 = this;

              var markersData = this.state.markersData;
              var isStreamData = markersData.filter(function (hit) {
                return hit.stream && hit.streamStart;
              });
              if (isStreamData.length) {
                this.isStreamDataExists = true;
                setTimeout(function () {
                  return _this9.streamToNormal();
                }, this.props.streamTTL * 1000);
              } else {
                this.isStreamDataExists = false;
              }
            }

            // Check the difference between current time and attached stream time
            // if difference is equal to streamTTL then delete stream and starStream property of marker

          }, {
            key: "streamToNormal",
            value: function streamToNormal() {
              var _this10 = this;

              var markersData = this.state.markersData;
              var isStreamData = markersData.filter(function (hit) {
                return hit.stream && hit.streamStart;
              });
              if (isStreamData.length) {
                markersData = markersData.map(function (hit) {
                  if (hit.stream && hit.streamStart) {
                    var currentTime = new Date();
                    var timeDiff = (currentTime.getTime() - hit.streamStart.getTime()) / 1000;
                    if (timeDiff >= _this10.props.streamTTL) {
                      delete hit.stream;
                      delete hit.streamStart;
                    }
                  }
                  return hit;
                });
                this.setState({
                  markersData: markersData
                });
              } else {
                this.isStreamDataExists = false;
              }
            }
          }, {
            key: "getIcon",
            value: function getIcon(hit) {
              return hit.stream ? this.props.streamMarkerImage : this.props.defaultMarkerImage;
            }
          }, {
            key: "chooseIcon",
            value: function chooseIcon(hit) {
              var icon = hit.external_icon ? hit.external_icon : this.getIcon(hit);
              icon = this.props.onData ? this.props.onData(hit) : icon;
              var isSvg = !!((typeof icon === "undefined" ? "undefined" : _typeof(icon)) === "object" && "path" in icon);
              if (isSvg) {
                icon = JSON.parse(JSON.stringify(icon));
                if (this.props.autoMarkerPosition) {
                  var deg = hit.angleDeg ? hit.angleDeg : 0;
                  icon.rotation = deg;
                }
              }
              return icon;
            }

            // here we accepts marker props which we received from onAllData and apply those external props in Marker component

          }, {
            key: "combineProps",
            value: function combineProps(hit) {
              var externalProps = void 0;
              var markerProp = {};
              if (this.state.externalData && this.state.externalData.markers && this.state.externalData.markers[hit._id]) {
                externalProps = this.state.externalData.markers[hit._id];
                Object.keys(externalProps).forEach(function (externalP) {
                  hit["external_" + externalP] = externalProps[externalP];
                  markerProp[externalP] = externalProps[externalP];
                });
              }
              markerProp.icon = this.chooseIcon(hit);
              return markerProp;
            }
          }, {
            key: "generateMarkers",
            value: function generateMarkers() {
              var _this11 = this;

              var self = this;
              var markersData = this.state.markersData;
              var response = {
                markerComponent: [],
                defaultCenter: null,
                convertedGeo: []
              };
              if (markersData && markersData.length) {
                markersData = markersData.filter(function (hit) {
                  return ReactiveMapHelper.identifyGeoData(hit._source[self.props.appbaseField]);
                });
                response.markerComponent = markersData.map(function (hit, index) {
                  var field = ReactiveMapHelper.identifyGeoData(hit._source[self.props.appbaseField]);
                  response.convertedGeo.push(field);
                  var position = {
                    position: field
                  };
                  var ref = "marker_ref_" + index;
                  var popoverEvent = void 0;
                  if (_this11.props.showPopoverOn) {
                    popoverEvent = {};
                    var eventName = _this11.props.showPopoverOn.split("");
                    eventName[0] = eventName[0].toUpperCase();
                    eventName = eventName.join("");
                    popoverEvent["on" + eventName] = _this11.handleMarkerClick.bind(_this11, hit);
                  } else {
                    popoverEvent = {};
                    popoverEvent.onClick = _this11.handleMarkerClick.bind(_this11, hit);
                  }
                  var defaultFn = function defaultFn() {};
                  var events = {
                    onClick: _this11.props.markerOnClick ? _this11.props.markerOnClick : defaultFn,
                    onDblclick: _this11.props.markerOnDblclick ? _this11.props.markerOnDblclick : defaultFn,
                    onMouseover: _this11.props.onMouseover ? _this11.props.onMouseover : defaultFn,
                    onMouseout: _this11.props.onMouseout ? _this11.props.onMouseout : defaultFn
                  };
                  return _react2.default.createElement(
                    _reactGoogleMaps.Marker,
                    _extends({}, position, {
                      key: hit._id,
                      zIndex: 1,
                      ref: ref
                    }, self.combineProps(hit), {
                      onClick: function onClick() {
                        return events.onClick(hit._source);
                      },
                      onDblclick: function onDblclick() {
                        return events.onDblclick(hit._source);
                      },
                      onMouseover: function onMouseover() {
                        return events.onMouseover(hit._source);
                      },
                      onMouseout: function onMouseout() {
                        return events.onMouseout(hit._source);
                      }
                    }, popoverEvent),
                    hit.showInfo ? self.renderInfoWindow(ref, hit) : null
                  );
                });
                if (response.convertedGeo[0]) {
                  response.defaultCenter = {
                    lat: response.convertedGeo[0].lat,
                    lng: response.convertedGeo[0].lng
                  };
                }
              }
              if (!this.props.showMarkers) {
                response.markerComponent = [];
              }
              return response;
            }
          }, {
            key: "externalData",
            value: function externalData() {
              var _this12 = this;

              var recordList = [];
              if (this.state.externalData) {
                Object.keys(this.state.externalData).forEach(function (record) {
                  if (record !== "markers") {
                    recordList = recordList.concat(_this12.state.externalData[record]);
                  }
                });
              }
              return recordList;
            }
          }, {
            key: "mapEvents",
            value: function mapEvents(eventName) {
              if (this.geoRelatedEvents.indexOf(eventName) > -1) {
                this.geoRelatedEventsChange = true;
              }
              if (this.props[eventName]) {
                var externalData = this.props[eventName](this.mapRef);
                if (externalData) {
                  this.setState({
                    externalData: externalData
                  });
                }
              }
            }
          }, {
            key: "getStoreCenter",
            value: function getStoreCenter() {
              return this.storeCenter ? this.storeCenter : this.state.center;
            }
          }, {
            key: "render",
            value: function render() {
              var _this13 = this;

              var markerComponent = void 0,
                showSearchAsMove = void 0,
                showMapStyles = void 0;
              var title = null,
                center = null;
              var centerComponent = {};
              var generatedMarkers = this.generateMarkers();
              if (this.props.setMarkerCluster) {
                markerComponent = _react2.default.createElement(
                  _MarkerClusterer2.default, { averageCenter: true, enableRetinaIcons: true, gridSize: 60 },
                  generatedMarkers.markerComponent
                );
              } else {
                markerComponent = generatedMarkers.markerComponent;
              }
              // Auto center using markers data
              var streamCenterFlag = true;
              if (this.channelMethod === "streaming" && !this.props.streamAutoCenter) {
                streamCenterFlag = false;
              }
              if (this.props.autoCenter && this.reposition && streamCenterFlag) {
                center = generatedMarkers.defaultCenter ? generatedMarkers.defaultCenter : this.getStoreCenter();
                this.storeCenter = center;
                this.reposition = false;
                centerComponent.center = ReactiveMapHelper.normalizeCenter(center);
              } else if (this.storeCenter) {
                center = this.storeCenter;
                centerComponent.center = ReactiveMapHelper.normalizeCenter(center);
              } else {
                center = null;
              }

              // include searchasMove component
              if (this.props.showSearchAsMove) {
                showSearchAsMove = _react2.default.createElement(_SearchAsMove.SearchAsMove, { searchAsMoveDefault: this.props.setSearchAsMove, searchAsMoveChange: this.searchAsMoveChange });
              }
              // include mapStyle choose component
              if (this.props.showMapStyles) {
                showMapStyles = _react2.default.createElement(_MapStyles.MapStyles, { defaultSelected: this.props.defaultMapStyle, mapStyleChange: this.mapStyleChange });
              }
              // include title if exists
              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 m8 col-xs-12 col-sm-8" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title
              });

              return _react2.default.createElement(
                "div", { className: "rbc rbc-reactivemap col s12 col-xs-12 card thumbnail " + cx, style: ReactiveMapHelper.mapPropsStyles(this.props.componentStyle, "component") },
                title,
                showMapStyles,
                _react2.default.createElement(_reactGoogleMaps.GoogleMapLoader, {
                  containerElement: _react2.default.createElement("div", {
                    className: "rbc-container col s12 col-xs-12",
                    style: ReactiveMapHelper.mapPropsStyles(this.props.componentStyle, "map", this.mapDefaultHeight)
                  }),
                  googleMapElement: _react2.default.createElement(
                    _reactGoogleMaps.GoogleMap,
                    _extends({
                      ref: function ref(map) {
                        _this13.mapRef = map;
                      }
                    }, centerComponent, ReactiveMapHelper.normalizeProps(this.props), {
                      options: {
                        styles: this.state.currentMapStyle
                      },
                      defaultCenter: ReactiveMapHelper.normalizeCenter(this.state.defaultCenter),
                      onDragstart: function onDragstart() {
                        _this13.handleOnDrage();
                        _this13.mapEvents("onDragstart");
                      },
                      onIdle: function onIdle() {
                        return _this13.handleOnIdle();
                      },
                      onClick: function onClick() {
                        return _this13.mapEvents("onClick");
                      },
                      onDblclick: function onDblclick() {
                        return _this13.mapEvents("onDblclick");
                      },
                      onDrag: function onDrag() {
                        return _this13.mapEvents("onDrag");
                      },
                      onDragend: function onDragend() {
                        return _this13.mapEvents("onDragend");
                      },
                      onMousemove: function onMousemove() {
                        return _this13.mapEvents("onMousemove");
                      },
                      onMouseout: function onMouseout() {
                        return _this13.mapEvents("onMouseout");
                      },
                      onMouseover: function onMouseover() {
                        return _this13.mapEvents("onMouseover");
                      },
                      onResize: function onResize() {
                        return _this13.mapEvents("onResize");
                      },
                      onRightclick: function onRightclick() {
                        return _this13.mapEvents("onRightclick");
                      },
                      onTilesloaded: function onTilesloaded() {
                        return _this13.mapEvents("onTilesloaded");
                      },
                      onBoundsChanged: function onBoundsChanged() {
                        return _this13.mapEvents("onBoundsChanged");
                      },
                      onCenterChanged: function onCenterChanged() {
                        return _this13.mapEvents("onCenterChanged");
                      },
                      onProjectionChanged: function onProjectionChanged() {
                        return _this13.mapEvents("onProjectionChanged");
                      },
                      onTiltChanged: function onTiltChanged() {
                        return _this13.mapEvents("onTiltChanged");
                      },
                      onZoomChanged: function onZoomChanged() {
                        return _this13.mapEvents("onZoomChanged");
                      }
                    }),
                    markerComponent,
                    this.externalData()
                  )
                }),
                showSearchAsMove,
                _react2.default.createElement(_reactivebase.PoweredBy, null)
              );
            }
          }]);

          return ReactiveMap;
        }(_react.Component);

        exports.default = ReactiveMap;


        ReactiveMap.propTypes = {
          appbaseField: _react2.default.PropTypes.string.isRequired,
          onIdle: _react2.default.PropTypes.func,
          onAllData: _react2.default.PropTypes.func,
          onData: _react2.default.PropTypes.func,
          onPopoverTrigger: _react2.default.PropTypes.func,
          setMarkerCluster: _react2.default.PropTypes.bool,
          autoMarkerPosition: _react2.default.PropTypes.bool,
          showMarkers: _react2.default.PropTypes.bool,
          streamTTL: ReactiveMapHelper.validation.streamTTL,
          popoverTTL: ReactiveMapHelper.validation.popoverTTL,
          size: _reactivebase.AppbaseSensorHelper.sizeValidation,
          from: ReactiveMapHelper.validation.fromValidation,
          autoMapRender: _react2.default.PropTypes.bool,
          componentStyle: _react2.default.PropTypes.object,
          autoCenter: _react2.default.PropTypes.bool,
          showSearchAsMove: _react2.default.PropTypes.bool,
          setSearchAsMove: _react2.default.PropTypes.bool,
          defaultMapStyle: _react2.default.PropTypes.oneOf(["Standard", "Blue Essence", "Blue Water", "Flat Map", "Light Monochrome", "Midnight Commander", "Unsaturated Browns"]),
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          streamAutoCenter: _react2.default.PropTypes.bool,
          defaultMarkerImage: _react2.default.PropTypes.string,
          streamMarkerImage: _react2.default.PropTypes.string,
          stream: _react2.default.PropTypes.bool,
          defaultZoom: ReactiveMapHelper.validation.defaultZoom,
          applyGeoQuery: _react2.default.PropTypes.bool,
          showPopoverOn: _react2.default.PropTypes.oneOf(["click", "mouseover"]),
          defaultCenter: _react2.default.PropTypes.shape({
            lat: ReactiveMapHelper.validation.validCenter,
            lon: ReactiveMapHelper.validation.validCenter
          }),
          react: _react2.default.PropTypes.object,
          markerOnClick: _react2.default.PropTypes.func,
          markerOnDblclick: _react2.default.PropTypes.func,
          onMouseover: _react2.default.PropTypes.func,
          onMouseout: _react2.default.PropTypes.func,
          showMapStyles: _react2.default.PropTypes.bool
        };

        ReactiveMap.defaultProps = {
          setMarkerCluster: true,
          autoCenter: true,
          showSearchAsMove: true,
          setSearchAsMove: false,
          showMapStyles: true,
          defaultMapStyle: "Standard",
          from: 0,
          size: 100,
          streamTTL: 5,
          streamAutoCenter: false,
          autoMarkerPosition: false,
          showMarkers: true,
          autoMapRender: true,
          defaultMarkerImage: "https://opensource.appbase.io/reactivemaps/dist/images/historic-pin.png",
          streamMarkerImage: "https://opensource.appbase.io/reactivemaps/dist/images/stream-pin.png",
          componentStyle: {},
          stream: false,
          applyGeoQuery: false,
          defaultZoom: 13
        };

        ReactiveMap.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired
        };

        /***/
      }),
      /* 3 */
      /***/
      (function (module, exports) {

        module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

        /***/
      }),
      /* 4 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        function _interopRequire(obj) { return obj && obj.__esModule ? obj["default"] : obj; }

        var _GoogleMapLoader = __webpack_require__(5);

        exports.GoogleMapLoader = _interopRequire(_GoogleMapLoader);

        var _GoogleMap = __webpack_require__(15);

        exports.GoogleMap = _interopRequire(_GoogleMap);

        var _Circle = __webpack_require__(16);

        exports.Circle = _interopRequire(_Circle);

        var _DirectionsRenderer = __webpack_require__(20);

        exports.DirectionsRenderer = _interopRequire(_DirectionsRenderer);

        var _DrawingManager = __webpack_require__(23);

        exports.DrawingManager = _interopRequire(_DrawingManager);

        var _InfoWindow = __webpack_require__(26);

        exports.InfoWindow = _interopRequire(_InfoWindow);

        var _KmlLayer = __webpack_require__(31);

        exports.KmlLayer = _interopRequire(_KmlLayer);

        var _Marker = __webpack_require__(34);

        exports.Marker = _interopRequire(_Marker);

        var _OverlayView = __webpack_require__(37);

        exports.OverlayView = _interopRequire(_OverlayView);

        var _Polygon = __webpack_require__(40);

        exports.Polygon = _interopRequire(_Polygon);

        var _Polyline = __webpack_require__(43);

        exports.Polyline = _interopRequire(_Polyline);

        var _Rectangle = __webpack_require__(46);

        exports.Rectangle = _interopRequire(_Rectangle);

        var _SearchBox = __webpack_require__(49);

        exports.SearchBox = _interopRequire(_SearchBox);

        /***/
      }),
      /* 5 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i]; } return target; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _creatorsGoogleMapHolder = __webpack_require__(6);

        var _creatorsGoogleMapHolder2 = _interopRequireDefault(_creatorsGoogleMapHolder);

        var USE_NEW_BEHAVIOR_TAG_NAME = "__new_behavior__"; /* CIRCULAR_DEPENDENCY */

        var GoogleMapLoader = (function (_Component) {
          _inherits(GoogleMapLoader, _Component);

          function GoogleMapLoader() {
            _classCallCheck(this, GoogleMapLoader);

            _get(Object.getPrototypeOf(GoogleMapLoader.prototype), "constructor", this).apply(this, arguments);

            this.state = {
              map: null
            };
          }

          _createClass(GoogleMapLoader, [{
            key: "mountGoogleMap",
            value: function mountGoogleMap(domEl) {
              if (this.state.map || domEl === null) {
                return;
              }
              var _props$googleMapElement$props = this.props.googleMapElement.props;
              var children = _props$googleMapElement$props.children;

              var mapProps = _objectWithoutProperties(_props$googleMapElement$props, ["children"]);

              //
              // Create google.maps.Map instance so that dom is initialized before
              // React's children creators.
              //
              var map = _creatorsGoogleMapHolder2["default"]._createMap(domEl, mapProps);
              this.setState({ map: map });
            }
          }, {
            key: "renderChild",
            value: function renderChild() {
              if (this.state.map) {
                // Notice: implementation details
                //
                // In this state, the DOM of google.maps.Map is already initialized in
                // my innerHTML. Adding extra React components will not clean it
                // in current version*. It will use prepend to add DOM of
                // GoogleMapHolder and become a sibling of the DOM of google.maps.Map
                // Not sure this is subject to change
                //
                // *current version: 0.13.3, 0.14.2
                //
                return _react2["default"].cloneElement(this.props.googleMapElement, {
                  map: this.state.map,
                  // ------------ Deprecated ------------
                  containerTagName: USE_NEW_BEHAVIOR_TAG_NAME
                });
              }
            }
          }, {
            key: "render",
            value: function render() {
              return _react2["default"].cloneElement(this.props.containerElement, {
                ref: this.mountGoogleMap.bind(this)
              }, this.renderChild());
            }
          }], [{
            key: "propTypes",
            value: {
              containerElement: _react.PropTypes.node.isRequired,
              googleMapElement: _react.PropTypes.element.isRequired
            },
            enumerable: true
          }, {
            key: "defaultProps",
            /* CIRCULAR_DEPENDENCY. Uncomment when 5.0.0 comes: propTypesElementOfType(GoogleMap).isRequired, */
            value: {
              containerElement: _react2["default"].createElement("div", null)
            },
            enumerable: true
          }]);

          return GoogleMapLoader;
        })(_react.Component);

        exports["default"] = GoogleMapLoader;
        module.exports = exports["default"];

        /***/
      }),
      /* 6 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _warning = __webpack_require__(7);

        var _warning2 = _interopRequireDefault(_warning);

        var _eventListsGoogleMapEventList = __webpack_require__(8);

        var _eventListsGoogleMapEventList2 = _interopRequireDefault(_eventListsGoogleMapEventList);

        var _utilsEventHandlerCreator = __webpack_require__(9);

        var _utilsEventHandlerCreator2 = _interopRequireDefault(_utilsEventHandlerCreator);

        var _utilsDefaultPropsCreator = __webpack_require__(10);

        var _utilsDefaultPropsCreator2 = _interopRequireDefault(_utilsDefaultPropsCreator);

        var _utilsComposeOptions = __webpack_require__(12);

        var _utilsComposeOptions2 = _interopRequireDefault(_utilsComposeOptions);

        var _utilsComponentLifecycleDecorator = __webpack_require__(14);

        var _utilsComponentLifecycleDecorator2 = _interopRequireDefault(_utilsComponentLifecycleDecorator);

        var mapControlledPropTypes = {
          // NOTICE!!!!!!
          //
          // Only expose those with getters & setters in the table as controlled props.
          //
          // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^set/) && !it.match(/^setMap/); })
          //
          // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Map
          center: _react.PropTypes.object,
          heading: _react.PropTypes.number,
          mapTypeId: _react.PropTypes.any,
          options: _react.PropTypes.object,
          streetView: _react.PropTypes.any,
          tilt: _react.PropTypes.number,
          zoom: _react.PropTypes.number
        };

        exports.mapControlledPropTypes = mapControlledPropTypes;
        var mapDefaultPropTypes = (0, _utilsDefaultPropsCreator2["default"])(mapControlledPropTypes);

        exports.mapDefaultPropTypes = mapDefaultPropTypes;
        var mapUpdaters = {
          center: function center(_center, component) {
            component.getMap().setCenter(_center);
          },
          heading: function heading(_heading, component) {
            component.getMap().setHeading(_heading);
          },
          mapTypeId: function mapTypeId(_mapTypeId, component) {
            component.getMap().setMapTypeId(_mapTypeId);
          },
          options: function options(_options, component) {
            component.getMap().setOptions(_options);
          },
          streetView: function streetView(_streetView, component) {
            component.getMap().setStreetView(_streetView);
          },
          tilt: function tilt(_tilt, component) {
            component.getMap().setTilt(_tilt);
          },
          zoom: function zoom(_zoom, component) {
            component.getMap().setZoom(_zoom);
          }
        };

        var _eventHandlerCreator = (0, _utilsEventHandlerCreator2["default"])(_eventListsGoogleMapEventList2["default"]);

        var eventPropTypes = _eventHandlerCreator.eventPropTypes;
        var registerEvents = _eventHandlerCreator.registerEvents;
        var mapEventPropTypes = eventPropTypes;

        exports.mapEventPropTypes = mapEventPropTypes;

        var GoogleMapHolder = (function (_Component) {
          _inherits(GoogleMapHolder, _Component);

          function GoogleMapHolder() {
            _classCallCheck(this, _GoogleMapHolder);

            _get(Object.getPrototypeOf(_GoogleMapHolder.prototype), "constructor", this).apply(this, arguments);
          }

          _createClass(GoogleMapHolder, [{
            key: "getMap",
            value: function getMap() {
              return this.props.map;
            }
          }, {
            key: "render",
            value: function render() {
              var _this = this;

              return _react2["default"].createElement(
                "div",
                null,
                _react.Children.map(this.props.children, function (childElement) {
                  if (_react2["default"].isValidElement(childElement)) {
                    return _react2["default"].cloneElement(childElement, {
                      mapHolderRef: _this
                    });
                  } else {
                    return childElement;
                  }
                })
              );
            }
          }], [{
            key: "_createMap",
            value: function _createMap(domEl, mapProps) {
              (0, _warning2["default"])("undefined" !== typeof google, "Make sure you've put a <script> tag in your <head> element to load Google Maps JavaScript API v3.\n If you're looking for built-in support to load it for you, use the \"async/ScriptjsLoader\" instead.\n See https://github.com/tomchentw/react-google-maps/pull/168");
              // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Map
              return new google.maps.Map(domEl, (0, _utilsComposeOptions2["default"])(mapProps, mapControlledPropTypes));
            }
          }, {
            key: "propTypes",
            value: {
              map: _react.PropTypes.object.isRequired
            },
            enumerable: true
          }]);

          var _GoogleMapHolder = GoogleMapHolder;
          GoogleMapHolder = (0, _utilsComponentLifecycleDecorator2["default"])({
            registerEvents: registerEvents,
            instanceMethodName: "getMap",
            updaters: mapUpdaters
          })(GoogleMapHolder) || GoogleMapHolder;
          return GoogleMapHolder;
        })(_react.Component);

        exports["default"] = GoogleMapHolder;

        /***/
      }),
      /* 7 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright 2014-2015, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         */

        'use strict';

        /**
         * Similar to invariant but only logs a warning if the condition is not met.
         * This can be used to log issues in development environments in critical
         * paths. Removing the logging code for production environments will keep the
         * same logic and follow the same code paths.
         */

        var warning = function () {};

        if ((undefined) !== 'production') {
          warning = function (condition, format, args) {
            var len = arguments.length;
            args = new Array(len > 2 ? len - 2 : 0);
            for (var key = 2; key < len; key++) {
              args[key - 2] = arguments[key];
            }
            if (format === undefined) {
              throw new Error(
                '`warning(condition, format, ...args)` requires a warning ' +
                'message argument'
              );
            }

            if (format.length < 10 || (/^[s\W]*$/).test(format)) {
              throw new Error(
                'The warning format should be able to uniquely identify this ' +
                'warning. Please, use a more descriptive format than: ' + format
              );
            }

            if (!condition) {
              var argIndex = 0;
              var message = 'Warning: ' +
                format.replace(/%s/g, function () {
                  return args[argIndex++];
                });
              if (typeof console !== 'undefined') {
                console.error(message);
              }
              try {
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
              } catch (x) {}
            }
          };
        }

        module.exports = warning;


        /***/
      }),
      /* 8 */
      /***/
      (function (module, exports) {

        // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Map
        // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; })
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = ["bounds_changed", "center_changed", "click", "dblclick", "drag", "dragend", "dragstart", "heading_changed", "idle", "maptypeid_changed", "mousemove", "mouseout", "mouseover", "projection_changed", "resize", "rightclick", "tilesloaded", "tilt_changed", "zoom_changed"];
        module.exports = exports["default"];

        /***/
      }),
      /* 9 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = eventHandlerCreator;

        var _react = __webpack_require__(3);

        function groupToUpperCase(match, group) {
          return group.toUpperCase();
        }

        function toOnEventName(rawName) {
          return "on" + rawName.replace(/^(.)/, groupToUpperCase).replace(/_(.)/g, groupToUpperCase);
        }

        function eventHandlerCreator(rawNameList) {
          var eventPropTypes = {};
          var onEventNameByRawName = {};

          rawNameList.forEach(function (rawName) {
            var onEventName = toOnEventName(rawName);
            eventPropTypes[onEventName] = _react.PropTypes.func;
            onEventNameByRawName[rawName] = onEventName;
          });

          function registerEvents(event, props, googleMapInstance) {
            var registered = rawNameList.reduce(function (acc, rawName) {
              var onEventName = onEventNameByRawName[rawName];

              if (Object.prototype.hasOwnProperty.call(props, onEventName)) {
                acc.push(event.addListener(googleMapInstance, rawName, props[onEventName]));
              }
              return acc;
            }, []);

            return registered.forEach.bind(registered, event.removeListener, event);
          }

          return {
            eventPropTypes: eventPropTypes,
            registerEvents: registerEvents
          };
        }

        module.exports = exports["default"];

        /***/
      }),
      /* 10 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = defaultPropsCreator;

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var _addDefaultPrefix = __webpack_require__(11);

        var _addDefaultPrefix2 = _interopRequireDefault(_addDefaultPrefix);

        function defaultPropsCreator(propTypes) {
          return Object.keys(propTypes).reduce(function (acc, name) {
            acc[(0, _addDefaultPrefix2["default"])(name)] = propTypes[name];
            return acc;
          }, {});
        }

        module.exports = exports["default"];

        /***/
      }),
      /* 11 */
      /***/
      (function (module, exports) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = addDefaultPrefix;

        function addDefaultPrefix(name) {
          return "default" + (name[0].toUpperCase() + name.slice(1));
        }

        module.exports = exports["default"];

        /***/
      }),
      /* 12 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        exports["default"] = composeOptions;

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var _controlledOrDefault = __webpack_require__(13);

        var _controlledOrDefault2 = _interopRequireDefault(_controlledOrDefault);

        function composeOptions(props, controlledPropTypes) {
          var optionNameList = Object.keys(controlledPropTypes);
          var getter = (0, _controlledOrDefault2["default"])(props);

          // props from arguments may contain unknow props.
          // We only interested those in optionNameList
          return optionNameList.reduce(function (acc, optionName) {
            if ("options" !== optionName) {
              var value = getter(optionName);
              if ("undefined" !== typeof value) {
                acc[optionName] = value;
              }
            }
            return acc;
          }, _extends({}, getter("options")));
        }

        module.exports = exports["default"];

        /***/
      }),
      /* 13 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = controlledOrDefault;

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var _addDefaultPrefix = __webpack_require__(11);

        var _addDefaultPrefix2 = _interopRequireDefault(_addDefaultPrefix);

        function controlledOrDefault(props) {
          return function (name) {
            if (Object.prototype.hasOwnProperty.call(props, name)) {
              return props[name];
            } else {
              return props[(0, _addDefaultPrefix2["default"])(name)];
            }
          };
        }

        module.exports = exports["default"];

        /***/
      }),
      /* 14 */
      /***/
      (function (module, exports) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = componentLifecycleDecorator;

        function componentLifecycleDecorator(_ref) {
          var registerEvents = _ref.registerEvents;
          var instanceMethodName = _ref.instanceMethodName;
          var updaters = _ref.updaters;

          // This modify the Component.prototype directly
          return function (Component) {
            function register() {
              this._unregisterEvents = registerEvents(google.maps.event, this.props, this[instanceMethodName]());
            }

            function unregister() {
              if (this._unregisterEvents) {
                this._unregisterEvents();
                this._unregisterEvents = null;
              }
            }

            function noop() {}

            // Stash component's own lifecycle methods to be invoked later
            var componentDidMount = Component.prototype.hasOwnProperty("componentDidMount") ? Component.prototype.componentDidMount : noop;
            var componentDidUpdate = Component.prototype.hasOwnProperty("componentDidUpdate") ? Component.prototype.componentDidUpdate : noop;
            var componentWillUnmount = Component.prototype.hasOwnProperty("componentWillUnmount") ? Component.prototype.componentWillUnmount : noop;

            Object.defineProperty(Component.prototype, "componentDidMount", {
              enumerable: false,
              configurable: true,
              writable: true,
              value: function value() {
                // Hook into client's implementation, if it has any
                componentDidMount.call(this);

                register.call(this);
              }
            });

            Object.defineProperty(Component.prototype, "componentDidUpdate", {
              enumerable: false,
              configurable: true,
              writable: true,
              value: function value(prevProps) {
                unregister.call(this);

                for (var _name in updaters) {
                  if (Object.prototype.hasOwnProperty.call(this.props, _name)) {
                    updaters[_name](this.props[_name], this);
                  }
                }

                // Hook into client's implementation, if it has any
                componentDidUpdate.call(this, prevProps);

                register.call(this);
              }
            });

            Object.defineProperty(Component.prototype, "componentWillUnmount", {
              enumerable: false,
              configurable: true,
              writable: true,
              value: function value() {
                // Hook into client's implementation, if it has any
                componentWillUnmount.call(this);

                unregister.call(this);
                var instance = this[instanceMethodName]();
                if ("setMap" in instance) {
                  instance.setMap(null);
                }
              }
            });

            return Component;
          };
        }

        module.exports = exports["default"];

        /***/
      }),
      /* 15 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i]; } return target; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _warning = __webpack_require__(7);

        var _warning2 = _interopRequireDefault(_warning);

        var _creatorsGoogleMapHolder = __webpack_require__(6);

        var _creatorsGoogleMapHolder2 = _interopRequireDefault(_creatorsGoogleMapHolder);

        var _GoogleMapLoader = __webpack_require__(5);

        var _GoogleMapLoader2 = _interopRequireDefault(_GoogleMapLoader);

        var USE_NEW_BEHAVIOR_TAG_NAME = "__new_behavior__";

        var GoogleMap = (function (_Component) {
          _inherits(GoogleMap, _Component);

          function GoogleMap() {
            _classCallCheck(this, GoogleMap);

            _get(Object.getPrototypeOf(GoogleMap.prototype), "constructor", this).apply(this, arguments);
          }

          _createClass(GoogleMap, [{
            key: "getBounds",

            // Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Map
            //
            // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^get/) && !it.match(/Map$/); })
            value: function getBounds() {
              return (this.props.map || this.refs.delegate).getBounds();
            }
          }, {
            key: "getCenter",
            value: function getCenter() {
              return (this.props.map || this.refs.delegate).getCenter();
            }
          }, {
            key: "getDiv",
            value: function getDiv() {
              return (this.props.map || this.refs.delegate).getDiv();
            }
          }, {
            key: "getHeading",
            value: function getHeading() {
              return (this.props.map || this.refs.delegate).getHeading();
            }
          }, {
            key: "getMapTypeId",
            value: function getMapTypeId() {
              return (this.props.map || this.refs.delegate).getMapTypeId();
            }
          }, {
            key: "getProjection",
            value: function getProjection() {
              return (this.props.map || this.refs.delegate).getProjection();
            }
          }, {
            key: "getStreetView",
            value: function getStreetView() {
              return (this.props.map || this.refs.delegate).getStreetView();
            }
          }, {
            key: "getTilt",
            value: function getTilt() {
              return (this.props.map || this.refs.delegate).getTilt();
            }
          }, {
            key: "getZoom",
            value: function getZoom() {
              return (this.props.map || this.refs.delegate).getZoom();
            }

            // END - Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Map
            //
            // Public APIs - Use this carefully
            // See discussion in https://github.com/tomchentw/react-google-maps/issues/62
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Map
            //
            // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return !it.match(/^get/) && !it.match(/^set/) && !it.match(/Map$/); })
          }, {
            key: "fitBounds",
            value: function fitBounds(bounds) {
              return (this.props.map || this.refs.delegate).fitBounds(bounds);
            }
          }, {
            key: "panBy",
            value: function panBy(x, y) {
              return (this.props.map || this.refs.delegate).panBy(x, y);
            }
          }, {
            key: "panTo",
            value: function panTo(latLng) {
              return (this.props.map || this.refs.delegate).panTo(latLng);
            }
          }, {
            key: "panToBounds",
            value: function panToBounds(latLngBounds) {
              return (this.props.map || this.refs.delegate).panToBounds(latLngBounds);
            }

            // END - Public APIs - Use this carefully
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Map

          }, {
            key: "componentWillMount",
            value: function componentWillMount() {
              var containerTagName = this.props.containerTagName;

              var isUsingNewBehavior = USE_NEW_BEHAVIOR_TAG_NAME === containerTagName;

              (0, _warning2["default"])(isUsingNewBehavior, "\"GoogleMap\" with containerTagName is deprecated now and will be removed in next major release (5.0.0).\nUse \"GoogleMapLoader\" instead. See https://github.com/tomchentw/react-google-maps/pull/157 for more details.");
            }
          }, {
            key: "render",
            value: function render() {
              var _props = this.props;
              var containerTagName = _props.containerTagName;
              var _props$containerProps = _props.containerProps;
              var containerProps = _props$containerProps === undefined ? {} : _props$containerProps;
              var children = _props.children;

              var mapProps = _objectWithoutProperties(_props, ["containerTagName", "containerProps", "children"]);

              var isUsingNewBehavior = USE_NEW_BEHAVIOR_TAG_NAME === containerTagName;

              if (isUsingNewBehavior) {
                return _react2["default"].createElement(
                  _creatorsGoogleMapHolder2["default"],
                  mapProps,
                  children
                );
              } else {
                // ------------ Deprecated ------------
                var realContainerTagName = containerTagName === undefined || containerTagName === null ? "div" : containerTagName;

                return _react2["default"].createElement(_GoogleMapLoader2["default"], {
                  ref: "loader",
                  containerElement: _react2["default"].createElement(realContainerTagName, containerProps),
                  googleMapElement: _react2["default"].createElement(
                    GoogleMap,
                    _extends({ ref: "delegate", containerTagName: USE_NEW_BEHAVIOR_TAG_NAME }, mapProps),
                    children
                  )
                });
              }
            }
          }], [{
            key: "propTypes",
            value: _extends({
              containerTagName: _react.PropTypes.string,
              containerProps: _react.PropTypes.object,
              map: _react.PropTypes.object
            }, _creatorsGoogleMapHolder.mapDefaultPropTypes, _creatorsGoogleMapHolder.mapControlledPropTypes, _creatorsGoogleMapHolder.mapEventPropTypes),
            enumerable: true
          }]);

          return GoogleMap;
        })(_react.Component);

        exports["default"] = GoogleMap;
        module.exports = exports["default"];
        // Uncontrolled default[props] - used only in componentDidMount

        // Controlled [props] - used in componentDidMount/componentDidUpdate

        // Event [onEventName]

        /***/
      }),
      /* 16 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _canUseDom = __webpack_require__(17);

        var _canUseDom2 = _interopRequireDefault(_canUseDom);

        var _creatorsCircleCreator = __webpack_require__(18);

        var _creatorsCircleCreator2 = _interopRequireDefault(_creatorsCircleCreator);

        var Circle = (function (_Component) {
          _inherits(Circle, _Component);

          function Circle() {
            _classCallCheck(this, Circle);

            _get(Object.getPrototypeOf(Circle.prototype), "constructor", this).apply(this, arguments);

            this.state = {};
          }

          _createClass(Circle, [{
            key: "getBounds",

            // Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Circle
            //
            // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^get/) && !it.match(/^getMap/); })
            value: function getBounds() {
              return this.state.circle.getBounds();
            }
          }, {
            key: "getCenter",
            value: function getCenter() {
              return this.state.circle.getCenter();
            }
          }, {
            key: "getDraggable",
            value: function getDraggable() {
              return this.state.circle.getDraggable();
            }
          }, {
            key: "getEditable",
            value: function getEditable() {
              return this.state.circle.getEditable();
            }
          }, {
            key: "getMap",
            value: function getMap() {
              return this.state.circle.getMap();
            }
          }, {
            key: "getRadius",
            value: function getRadius() {
              return this.state.circle.getRadius();
            }
          }, {
            key: "getVisible",
            value: function getVisible() {
              return this.state.circle.getVisible();
            }

            // END - Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Circle

          }, {
            key: "componentWillMount",
            value: function componentWillMount() {
              if (!_canUseDom2["default"]) {
                return;
              }
              var circle = _creatorsCircleCreator2["default"]._createCircle(this.props);

              this.setState({ circle: circle });
            }
          }, {
            key: "render",
            value: function render() {
              if (this.state.circle) {
                return _react2["default"].createElement(
                  _creatorsCircleCreator2["default"],
                  _extends({ circle: this.state.circle }, this.props),
                  this.props.children
                );
              } else {
                return _react2["default"].createElement("noscript", null);
              }
            }
          }], [{
            key: "propTypes",
            value: _extends({}, _creatorsCircleCreator.circleDefaultPropTypes, _creatorsCircleCreator.circleControlledPropTypes, _creatorsCircleCreator.circleEventPropTypes),
            enumerable: true
          }]);

          return Circle;
        })(_react.Component);

        exports["default"] = Circle;
        module.exports = exports["default"];

        // Uncontrolled default[props] - used only in componentDidMount

        // Controlled [props] - used in componentDidMount/componentDidUpdate

        // Event [onEventName]

        /***/
      }),
      /* 17 */
      /***/
      (function (module, exports) {

        var canUseDOM = !!(
          typeof window !== 'undefined' &&
          window.document &&
          window.document.createElement
        );

        module.exports = canUseDOM;

        /***/
      }),
      /* 18 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _eventListsCircleEventList = __webpack_require__(19);

        var _eventListsCircleEventList2 = _interopRequireDefault(_eventListsCircleEventList);

        var _utilsEventHandlerCreator = __webpack_require__(9);

        var _utilsEventHandlerCreator2 = _interopRequireDefault(_utilsEventHandlerCreator);

        var _utilsDefaultPropsCreator = __webpack_require__(10);

        var _utilsDefaultPropsCreator2 = _interopRequireDefault(_utilsDefaultPropsCreator);

        var _utilsComposeOptions = __webpack_require__(12);

        var _utilsComposeOptions2 = _interopRequireDefault(_utilsComposeOptions);

        var _utilsComponentLifecycleDecorator = __webpack_require__(14);

        var _utilsComponentLifecycleDecorator2 = _interopRequireDefault(_utilsComponentLifecycleDecorator);

        var _GoogleMapHolder = __webpack_require__(6);

        var _GoogleMapHolder2 = _interopRequireDefault(_GoogleMapHolder);

        var circleControlledPropTypes = {
          // NOTICE!!!!!!
          //
          // Only expose those with getters & setters in the table as controlled props.
          //
          // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^set/) && !it.match(/^setMap/); })
          //
          // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Circle
          center: _react.PropTypes.any,
          draggable: _react.PropTypes.bool,
          editable: _react.PropTypes.bool,
          options: _react.PropTypes.object,
          radius: _react.PropTypes.number,
          visible: _react.PropTypes.bool
        };

        exports.circleControlledPropTypes = circleControlledPropTypes;
        var circleDefaultPropTypes = (0, _utilsDefaultPropsCreator2["default"])(circleControlledPropTypes);

        exports.circleDefaultPropTypes = circleDefaultPropTypes;
        var circleUpdaters = {
          center: function center(_center, component) {
            component.getCircle().setCenter(_center);
          },
          draggable: function draggable(_draggable, component) {
            component.getCircle().setDraggable(_draggable);
          },
          editable: function editable(_editable, component) {
            component.getCircle().setEditable(_editable);
          },
          options: function options(_options, component) {
            component.getCircle().setOptions(_options);
          },
          radius: function radius(_radius, component) {
            component.getCircle().setRadius(_radius);
          },
          visible: function visible(_visible, component) {
            component.getCircle().setVisible(_visible);
          }
        };

        var _eventHandlerCreator = (0, _utilsEventHandlerCreator2["default"])(_eventListsCircleEventList2["default"]);

        var eventPropTypes = _eventHandlerCreator.eventPropTypes;
        var registerEvents = _eventHandlerCreator.registerEvents;
        var circleEventPropTypes = eventPropTypes;

        exports.circleEventPropTypes = circleEventPropTypes;

        var CircleCreator = (function (_Component) {
          _inherits(CircleCreator, _Component);

          function CircleCreator() {
            _classCallCheck(this, _CircleCreator);

            _get(Object.getPrototypeOf(_CircleCreator.prototype), "constructor", this).apply(this, arguments);
          }

          _createClass(CircleCreator, [{
            key: "getCircle",
            value: function getCircle() {
              return this.props.circle;
            }
          }, {
            key: "render",
            value: function render() {
              return _react2["default"].createElement("noscript", null);
            }
          }], [{
            key: "_createCircle",
            value: function _createCircle(circleProps) {
              var mapHolderRef = circleProps.mapHolderRef;

              // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Circle
              var circle = new google.maps.Circle((0, _utilsComposeOptions2["default"])(circleProps, circleControlledPropTypes));

              circle.setMap(mapHolderRef.getMap());

              return circle;
            }
          }, {
            key: "propTypes",
            value: {
              mapHolderRef: _react.PropTypes.instanceOf(_GoogleMapHolder2["default"]).isRequired,
              circle: _react.PropTypes.object.isRequired
            },
            enumerable: true
          }]);

          var _CircleCreator = CircleCreator;
          CircleCreator = (0, _utilsComponentLifecycleDecorator2["default"])({
            registerEvents: registerEvents,
            instanceMethodName: "getCircle",
            updaters: circleUpdaters
          })(CircleCreator) || CircleCreator;
          return CircleCreator;
        })(_react.Component);

        exports["default"] = CircleCreator;

        /***/
      }),
      /* 19 */
      /***/
      (function (module, exports) {

        // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Circle
        // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; })
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = ["center_changed", "click", "dblclick", "drag", "dragend", "dragstart", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "radius_changed", "rightclick"];
        module.exports = exports["default"];

        /***/
      }),
      /* 20 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _canUseDom = __webpack_require__(17);

        var _canUseDom2 = _interopRequireDefault(_canUseDom);

        var _creatorsDirectionsRendererCreator = __webpack_require__(21);

        var _creatorsDirectionsRendererCreator2 = _interopRequireDefault(_creatorsDirectionsRendererCreator);

        /*
         * Original author: @alexishevia
         * Original PR: https://github.com/tomchentw/react-google-maps/pull/22
         */

        var DirectionsRenderer = (function (_Component) {
          _inherits(DirectionsRenderer, _Component);

          function DirectionsRenderer() {
            _classCallCheck(this, DirectionsRenderer);

            _get(Object.getPrototypeOf(DirectionsRenderer.prototype), "constructor", this).apply(this, arguments);

            this.state = {};
          }

          _createClass(DirectionsRenderer, [{
            key: "getDirections",

            // Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#DirectionsRenderer
            //
            // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^get/) && !it.match(/^getMap/); })
            value: function getDirections() {
              return this.state.directionsRenderer.getDirections();
            }
          }, {
            key: "getPanel",
            value: function getPanel() {
              return this.state.directionsRenderer.getPanel();
            }
          }, {
            key: "getRouteIndex",
            value: function getRouteIndex() {
              return this.state.directionsRenderer.getRouteIndex();
            }

            // END - Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#DirectionsRenderer

          }, {
            key: "componentWillMount",
            value: function componentWillMount() {
              if (!_canUseDom2["default"]) {
                return;
              }
              var directionsRenderer = _creatorsDirectionsRendererCreator2["default"]._createDirectionsRenderer(this.props);

              this.setState({ directionsRenderer: directionsRenderer });
            }
          }, {
            key: "render",
            value: function render() {
              if (this.state.directionsRenderer) {
                return _react2["default"].createElement(
                  _creatorsDirectionsRendererCreator2["default"],
                  _extends({ directionsRenderer: this.state.directionsRenderer }, this.props),
                  this.props.children
                );
              } else {
                return _react2["default"].createElement("noscript", null);
              }
            }
          }], [{
            key: "propTypes",
            value: _extends({}, _creatorsDirectionsRendererCreator.directionsRendererDefaultPropTypes, _creatorsDirectionsRendererCreator.directionsRendererControlledPropTypes, _creatorsDirectionsRendererCreator.directionsRendererEventPropTypes),
            enumerable: true
          }]);

          return DirectionsRenderer;
        })(_react.Component);

        exports["default"] = DirectionsRenderer;
        module.exports = exports["default"];

        // Uncontrolled default[props] - used only in componentDidMount

        // Controlled [props] - used in componentDidMount/componentDidUpdate

        // Event [onEventName]

        /***/
      }),
      /* 21 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _eventListsDirectionsRendererEventList = __webpack_require__(22);

        var _eventListsDirectionsRendererEventList2 = _interopRequireDefault(_eventListsDirectionsRendererEventList);

        var _utilsEventHandlerCreator = __webpack_require__(9);

        var _utilsEventHandlerCreator2 = _interopRequireDefault(_utilsEventHandlerCreator);

        var _utilsDefaultPropsCreator = __webpack_require__(10);

        var _utilsDefaultPropsCreator2 = _interopRequireDefault(_utilsDefaultPropsCreator);

        var _utilsComposeOptions = __webpack_require__(12);

        var _utilsComposeOptions2 = _interopRequireDefault(_utilsComposeOptions);

        var _utilsComponentLifecycleDecorator = __webpack_require__(14);

        var _utilsComponentLifecycleDecorator2 = _interopRequireDefault(_utilsComponentLifecycleDecorator);

        var _GoogleMapHolder = __webpack_require__(6);

        var _GoogleMapHolder2 = _interopRequireDefault(_GoogleMapHolder);

        var directionsRendererControlledPropTypes = {
          // NOTICE!!!!!!
          //
          // Only expose those with getters & setters in the table as controlled props.
          //
          // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^set/) && !it.match(/^setMap/); })
          //
          // https://developers.google.com/maps/documentation/javascript/3.exp/reference#DirectionsRenderer
          directions: _react.PropTypes.any,
          options: _react.PropTypes.object,
          panel: _react.PropTypes.object,
          routeIndex: _react.PropTypes.number
        };

        exports.directionsRendererControlledPropTypes = directionsRendererControlledPropTypes;
        var directionsRendererDefaultPropTypes = (0, _utilsDefaultPropsCreator2["default"])(directionsRendererControlledPropTypes);

        exports.directionsRendererDefaultPropTypes = directionsRendererDefaultPropTypes;
        var directionsRendererUpdaters = {
          directions: function directions(_directions, component) {
            component.getDirectionsRenderer().setDirections(_directions);
          },
          options: function options(_options, component) {
            component.getDirectionsRenderer().setOptions(_options);
          },
          panel: function panel(_panel, component) {
            component.getDirectionsRenderer().setPanel(_panel);
          },
          routeIndex: function routeIndex(_routeIndex, component) {
            component.getDirectionsRenderer().setRouteIndex(_routeIndex);
          }
        };

        var _eventHandlerCreator = (0, _utilsEventHandlerCreator2["default"])(_eventListsDirectionsRendererEventList2["default"]);

        var eventPropTypes = _eventHandlerCreator.eventPropTypes;
        var registerEvents = _eventHandlerCreator.registerEvents;
        var directionsRendererEventPropTypes = eventPropTypes;

        exports.directionsRendererEventPropTypes = directionsRendererEventPropTypes;

        var DirectionsRendererCreator = (function (_Component) {
          _inherits(DirectionsRendererCreator, _Component);

          function DirectionsRendererCreator() {
            _classCallCheck(this, _DirectionsRendererCreator);

            _get(Object.getPrototypeOf(_DirectionsRendererCreator.prototype), "constructor", this).apply(this, arguments);
          }

          _createClass(DirectionsRendererCreator, [{
            key: "getDirectionsRenderer",
            value: function getDirectionsRenderer() {
              return this.props.directionsRenderer;
            }
          }, {
            key: "render",
            value: function render() {
              var children = this.props.children;

              if (_react.Children.count(children) > 0) {
                // TODO: take a look at DirectionsRendererOptions#infoWindow and DirectionsRendererOptions#markerOptions ?
                return _react2["default"].createElement(
                  "div",
                  null,
                  children
                );
              } else {
                return _react2["default"].createElement("noscript", null);
              }
            }
          }], [{
            key: "_createDirectionsRenderer",
            value: function _createDirectionsRenderer(directionsRendererProps) {
              var mapHolderRef = directionsRendererProps.mapHolderRef;

              // https://developers.google.com/maps/documentation/javascript/3.exp/reference#DirectionsRenderer
              var directionsRenderer = new google.maps.DirectionsRenderer((0, _utilsComposeOptions2["default"])(directionsRendererProps, directionsRendererControlledPropTypes));

              directionsRenderer.setMap(mapHolderRef.getMap());

              return directionsRenderer;
            }
          }, {
            key: "propTypes",
            value: {
              mapHolderRef: _react.PropTypes.instanceOf(_GoogleMapHolder2["default"]).isRequired,
              directionsRenderer: _react.PropTypes.object.isRequired
            },
            enumerable: true
          }]);

          var _DirectionsRendererCreator = DirectionsRendererCreator;
          DirectionsRendererCreator = (0, _utilsComponentLifecycleDecorator2["default"])({
            registerEvents: registerEvents,
            instanceMethodName: "getDirectionsRenderer",
            updaters: directionsRendererUpdaters
          })(DirectionsRendererCreator) || DirectionsRendererCreator;
          return DirectionsRendererCreator;
        })(_react.Component);

        exports["default"] = DirectionsRendererCreator;

        /***/
      }),
      /* 22 */
      /***/
      (function (module, exports) {

        // https://developers.google.com/maps/documentation/javascript/3.exp/reference#DirectionsRenderer
        // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; })
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = ["directions_changed"];
        module.exports = exports["default"];

        /***/
      }),
      /* 23 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _canUseDom = __webpack_require__(17);

        var _canUseDom2 = _interopRequireDefault(_canUseDom);

        var _creatorsDrawingManagerCreator = __webpack_require__(24);

        var _creatorsDrawingManagerCreator2 = _interopRequireDefault(_creatorsDrawingManagerCreator);

        /*
         * Original author: @idolize
         * Original PR: https://github.com/tomchentw/react-google-maps/pull/46
         */

        var DrawingManager = (function (_Component) {
          _inherits(DrawingManager, _Component);

          function DrawingManager() {
            _classCallCheck(this, DrawingManager);

            _get(Object.getPrototypeOf(DrawingManager.prototype), "constructor", this).apply(this, arguments);

            this.state = {};
          }

          _createClass(DrawingManager, [{
            key: "getDrawingMode",

            // Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#DrawingManager
            //
            // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^get/) && !it.match(/^getMap/); })
            value: function getDrawingMode() {
              return this.state.drawingManager.getDrawingMode();
            }

            // END - Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#DrawingManager

          }, {
            key: "componentWillMount",
            value: function componentWillMount() {
              if (!_canUseDom2["default"]) {
                return;
              }
              var drawingManager = _creatorsDrawingManagerCreator2["default"]._createDrawingManager(this.props);

              this.setState({ drawingManager: drawingManager });
            }
          }, {
            key: "render",
            value: function render() {
              if (this.state.drawingManager) {
                return _react2["default"].createElement(
                  _creatorsDrawingManagerCreator2["default"],
                  _extends({ drawingManager: this.state.drawingManager }, this.props),
                  this.props.children
                );
              } else {
                return _react2["default"].createElement("noscript", null);
              }
            }
          }], [{
            key: "propTypes",
            value: _extends({}, _creatorsDrawingManagerCreator.drawingManagerDefaultPropTypes, _creatorsDrawingManagerCreator.drawingManagerControlledPropTypes, _creatorsDrawingManagerCreator.drawingManagerEventPropTypes),
            enumerable: true
          }]);

          return DrawingManager;
        })(_react.Component);

        exports["default"] = DrawingManager;
        module.exports = exports["default"];

        // Uncontrolled default[props] - used only in componentDidMount

        // Controlled [props] - used in componentDidMount/componentDidUpdate

        // Event [onEventName]

        /***/
      }),
      /* 24 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _eventListsDrawingManagerEventList = __webpack_require__(25);

        var _eventListsDrawingManagerEventList2 = _interopRequireDefault(_eventListsDrawingManagerEventList);

        var _utilsEventHandlerCreator = __webpack_require__(9);

        var _utilsEventHandlerCreator2 = _interopRequireDefault(_utilsEventHandlerCreator);

        var _utilsDefaultPropsCreator = __webpack_require__(10);

        var _utilsDefaultPropsCreator2 = _interopRequireDefault(_utilsDefaultPropsCreator);

        var _utilsComposeOptions = __webpack_require__(12);

        var _utilsComposeOptions2 = _interopRequireDefault(_utilsComposeOptions);

        var _utilsComponentLifecycleDecorator = __webpack_require__(14);

        var _utilsComponentLifecycleDecorator2 = _interopRequireDefault(_utilsComponentLifecycleDecorator);

        var _GoogleMapHolder = __webpack_require__(6);

        var _GoogleMapHolder2 = _interopRequireDefault(_GoogleMapHolder);

        var drawingManagerControlledPropTypes = {
          // NOTICE!!!!!!
          //
          // Only expose those with getters & setters in the table as controlled props.
          //
          // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^set/) && !it.match(/^setMap/); })
          //
          // https://developers.google.com/maps/documentation/javascript/3.exp/reference#DrawingManager
          drawingMode: _react.PropTypes.any,
          options: _react.PropTypes.object
        };

        exports.drawingManagerControlledPropTypes = drawingManagerControlledPropTypes;
        var drawingManagerDefaultPropTypes = (0, _utilsDefaultPropsCreator2["default"])(drawingManagerControlledPropTypes);

        exports.drawingManagerDefaultPropTypes = drawingManagerDefaultPropTypes;
        var drawingManagerUpdaters = {
          drawingMode: function drawingMode(_drawingMode, component) {
            component.getDrawingManager().setDrawingMode(_drawingMode);
          },
          options: function options(_options, component) {
            component.getDrawingManager().setOptions(_options);
          }
        };

        var _eventHandlerCreator = (0, _utilsEventHandlerCreator2["default"])(_eventListsDrawingManagerEventList2["default"]);

        var eventPropTypes = _eventHandlerCreator.eventPropTypes;
        var registerEvents = _eventHandlerCreator.registerEvents;
        var drawingManagerEventPropTypes = eventPropTypes;

        exports.drawingManagerEventPropTypes = drawingManagerEventPropTypes;

        var DrawingManagerCreator = (function (_Component) {
          _inherits(DrawingManagerCreator, _Component);

          function DrawingManagerCreator() {
            _classCallCheck(this, _DrawingManagerCreator);

            _get(Object.getPrototypeOf(_DrawingManagerCreator.prototype), "constructor", this).apply(this, arguments);
          }

          _createClass(DrawingManagerCreator, [{
            key: "getDrawingManager",
            value: function getDrawingManager() {
              return this.props.drawingManager;
            }
          }, {
            key: "render",
            value: function render() {
              return _react2["default"].createElement("noscript", null);
            }
          }], [{
            key: "_createDrawingManager",
            value: function _createDrawingManager(drawingManagerProps) {
              var mapHolderRef = drawingManagerProps.mapHolderRef;

              // https://developers.google.com/maps/documentation/javascript/3.exp/reference#DrawingManager
              var drawingManager = new google.maps.drawing.DrawingManager((0, _utilsComposeOptions2["default"])(drawingManagerProps, drawingManagerControlledPropTypes));

              drawingManager.setMap(mapHolderRef.getMap());

              return drawingManager;
            }
          }, {
            key: "propTypes",
            value: {
              mapHolderRef: _react.PropTypes.instanceOf(_GoogleMapHolder2["default"]).isRequired,
              drawingManager: _react.PropTypes.object.isRequired
            },
            enumerable: true
          }]);

          var _DrawingManagerCreator = DrawingManagerCreator;
          DrawingManagerCreator = (0, _utilsComponentLifecycleDecorator2["default"])({
            registerEvents: registerEvents,
            instanceMethodName: "getDrawingManager",
            updaters: drawingManagerUpdaters
          })(DrawingManagerCreator) || DrawingManagerCreator;
          return DrawingManagerCreator;
        })(_react.Component);

        exports["default"] = DrawingManagerCreator;

        /***/
      }),
      /* 25 */
      /***/
      (function (module, exports) {

        // https://developers.google.com/maps/documentation/javascript/3.exp/reference#DrawingManager
        // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; })
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = ["circlecomplete", "markercomplete", "overlaycomplete", "polygoncomplete", "polylinecomplete", "rectanglecomplete"];
        module.exports = exports["default"];

        /***/
      }),
      /* 26 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _canUseDom = __webpack_require__(17);

        var _canUseDom2 = _interopRequireDefault(_canUseDom);

        var _creatorsInfoWindowCreator = __webpack_require__(27);

        var _creatorsInfoWindowCreator2 = _interopRequireDefault(_creatorsInfoWindowCreator);

        var InfoWindow = (function (_Component) {
          _inherits(InfoWindow, _Component);

          function InfoWindow() {
            _classCallCheck(this, InfoWindow);

            _get(Object.getPrototypeOf(InfoWindow.prototype), "constructor", this).apply(this, arguments);

            this.state = {};
          }

          _createClass(InfoWindow, [{
            key: "getContent",

            // Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#InfoWindow
            //
            // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^get/) && !it.match(/^getMap/); })
            value: function getContent() { /* TODO: children */ }
          }, {
            key: "getPosition",
            value: function getPosition() {
              return this.state.infoWindow.getPosition();
            }
          }, {
            key: "getZIndex",
            value: function getZIndex() {
              return this.state.infoWindow.getZIndex();
            }

            // END - Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#InfoWindow

          }, {
            key: "componentWillMount",
            value: function componentWillMount() {
              if (!_canUseDom2["default"]) {
                return;
              }
              var infoWindow = _creatorsInfoWindowCreator2["default"]._createInfoWindow(this.props);

              this.setState({ infoWindow: infoWindow });
            }
          }, {
            key: "render",
            value: function render() {
              if (this.state.infoWindow) {
                return _react2["default"].createElement(
                  _creatorsInfoWindowCreator2["default"],
                  _extends({ infoWindow: this.state.infoWindow }, this.props),
                  this.props.children
                );
              } else {
                return _react2["default"].createElement("noscript", null);
              }
            }
          }], [{
            key: "propTypes",
            value: _extends({}, _creatorsInfoWindowCreator.infoWindowDefaultPropTypes, _creatorsInfoWindowCreator.infoWindowControlledPropTypes, _creatorsInfoWindowCreator.infoWindowEventPropTypes),
            enumerable: true
          }]);

          return InfoWindow;
        })(_react.Component);

        exports["default"] = InfoWindow;
        module.exports = exports["default"];

        // Uncontrolled default[props] - used only in componentDidMount

        // Controlled [props] - used in componentDidMount/componentDidUpdate

        // Event [onEventName]

        /***/
      }),
      /* 27 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _eventListsInfoWindowEventList = __webpack_require__(28);

        var _eventListsInfoWindowEventList2 = _interopRequireDefault(_eventListsInfoWindowEventList);

        var _utilsEventHandlerCreator = __webpack_require__(9);

        var _utilsEventHandlerCreator2 = _interopRequireDefault(_utilsEventHandlerCreator);

        var _utilsDefaultPropsCreator = __webpack_require__(10);

        var _utilsDefaultPropsCreator2 = _interopRequireDefault(_utilsDefaultPropsCreator);

        var _utilsComposeOptions = __webpack_require__(12);

        var _utilsComposeOptions2 = _interopRequireDefault(_utilsComposeOptions);

        var _utilsSetContentForOptionalReactElement = __webpack_require__(29);

        var _utilsSetContentForOptionalReactElement2 = _interopRequireDefault(_utilsSetContentForOptionalReactElement);

        var _utilsComponentLifecycleDecorator = __webpack_require__(14);

        var _utilsComponentLifecycleDecorator2 = _interopRequireDefault(_utilsComponentLifecycleDecorator);

        var _GoogleMapHolder = __webpack_require__(6);

        var _GoogleMapHolder2 = _interopRequireDefault(_GoogleMapHolder);

        var infoWindowControlledPropTypes = {
          // NOTICE!!!!!!
          //
          // Only expose those with getters & setters in the table as controlled props.
          //
          // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^set/) && !it.match(/^setMap/); })
          //
          // https://developers.google.com/maps/documentation/javascript/3.exp/reference#InfoWindow
          content: _react.PropTypes.any,
          options: _react.PropTypes.object,
          position: _react.PropTypes.any,
          zIndex: _react.PropTypes.number
        };

        exports.infoWindowControlledPropTypes = infoWindowControlledPropTypes;
        var infoWindowDefaultPropTypes = (0, _utilsDefaultPropsCreator2["default"])(infoWindowControlledPropTypes);

        exports.infoWindowDefaultPropTypes = infoWindowDefaultPropTypes;
        var infoWindowUpdaters = {
          children: function children(_children, component) {
            (0, _utilsSetContentForOptionalReactElement2["default"])(_children, component.getInfoWindow());
          },
          content: function content(_content, component) {
            component.getInfoWindow().setContent(_content);
          },
          options: function options(_options, component) {
            component.getInfoWindow().setOptions(_options);
          },
          position: function position(_position, component) {
            component.getInfoWindow().setPosition(_position);
          },
          zIndex: function zIndex(_zIndex, component) {
            component.getInfoWindow().setZIndex(_zIndex);
          }
        };

        var _eventHandlerCreator = (0, _utilsEventHandlerCreator2["default"])(_eventListsInfoWindowEventList2["default"]);

        var eventPropTypes = _eventHandlerCreator.eventPropTypes;
        var registerEvents = _eventHandlerCreator.registerEvents;
        var infoWindowEventPropTypes = eventPropTypes;

        exports.infoWindowEventPropTypes = infoWindowEventPropTypes;

        var InfoWindowCreator = (function (_Component) {
          _inherits(InfoWindowCreator, _Component);

          function InfoWindowCreator() {
            _classCallCheck(this, _InfoWindowCreator);

            _get(Object.getPrototypeOf(_InfoWindowCreator.prototype), "constructor", this).apply(this, arguments);
          }

          _createClass(InfoWindowCreator, [{
            key: "getInfoWindow",
            value: function getInfoWindow() {
              return this.props.infoWindow;
            }
          }, {
            key: "render",
            value: function render() {
              return _react2["default"].createElement("noscript", null);
            }
          }], [{
            key: "_createInfoWindow",
            value: function _createInfoWindow(infoWindowProps) {
              var mapHolderRef = infoWindowProps.mapHolderRef;
              var anchorHolderRef = infoWindowProps.anchorHolderRef;

              // https://developers.google.com/maps/documentation/javascript/3.exp/reference#InfoWindow
              var infoWindow = new google.maps.InfoWindow((0, _utilsComposeOptions2["default"])(infoWindowProps, infoWindowControlledPropTypes));

              if (infoWindowProps.children) {
                (0, _utilsSetContentForOptionalReactElement2["default"])(infoWindowProps.children, infoWindow);
              }

              if (anchorHolderRef) {
                infoWindow.open(mapHolderRef.getMap(), anchorHolderRef.getAnchor());
              } else {
                infoWindow.setMap(mapHolderRef.getMap());
              }

              return infoWindow;
            }
          }, {
            key: "propTypes",
            value: {
              mapHolderRef: _react.PropTypes.instanceOf(_GoogleMapHolder2["default"]).isRequired,
              infoWindow: _react.PropTypes.object.isRequired,
              anchorHolderRef: _react.PropTypes.object
            },
            enumerable: true
          }]);

          var _InfoWindowCreator = InfoWindowCreator;
          InfoWindowCreator = (0, _utilsComponentLifecycleDecorator2["default"])({
            registerEvents: registerEvents,
            instanceMethodName: "getInfoWindow",
            updaters: infoWindowUpdaters
          })(InfoWindowCreator) || InfoWindowCreator;
          return InfoWindowCreator;
        })(_react.Component);

        exports["default"] = InfoWindowCreator;

        /***/
      }),
      /* 28 */
      /***/
      (function (module, exports) {

        // https://developers.google.com/maps/documentation/javascript/3.exp/reference#InfoWindow
        // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; })
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = ["closeclick", "content_changed", "domready", "position_changed", "zindex_changed"];
        module.exports = exports["default"];

        /***/
      }),
      /* 29 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = setContentForOptionalReactElement;

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactDom = __webpack_require__(30);

        function renderElement(contentElement, possiblePrevContent) {
          var prevContent = possiblePrevContent;
          if ("[object HTMLDivElement]" !== Object.prototype.toString.call(prevContent)) {
            prevContent = document.createElement("div");
          }

          (0, _reactDom.render)(contentElement, prevContent);
          return prevContent;
        }

        function setContentForOptionalReactElement(contentOptionalReactElement, infoWindowLikeInstance) {
          if (_react2["default"].isValidElement(contentOptionalReactElement)) {
            var contentElement = _react.Children.only(contentOptionalReactElement);
            var prevContent = infoWindowLikeInstance.getContent();

            var domEl = renderElement(contentElement, prevContent);
            infoWindowLikeInstance.setContent(domEl);
          } else {
            infoWindowLikeInstance.setContent(contentOptionalReactElement);
          }
        }

        module.exports = exports["default"];

        /***/
      }),
      /* 30 */
      /***/
      (function (module, exports) {

        module.exports = __WEBPACK_EXTERNAL_MODULE_30__;

        /***/
      }),
      /* 31 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _canUseDom = __webpack_require__(17);

        var _canUseDom2 = _interopRequireDefault(_canUseDom);

        var _creatorsKmlLayerCreator = __webpack_require__(32);

        var _creatorsKmlLayerCreator2 = _interopRequireDefault(_creatorsKmlLayerCreator);

        var KmlLayer = (function (_Component) {
          _inherits(KmlLayer, _Component);

          function KmlLayer() {
            _classCallCheck(this, KmlLayer);

            _get(Object.getPrototypeOf(KmlLayer.prototype), "constructor", this).apply(this, arguments);

            this.state = {};
          }

          _createClass(KmlLayer, [{
            key: "getDefaultViewport",

            // Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#KmlLayer
            //
            // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^get/) && !it.match(/Map$/); })
            value: function getDefaultViewport() {
              return this.state.kmlLayer.getDefaultViewport();
            }
          }, {
            key: "getMetadata",
            value: function getMetadata() {
              return this.state.kmlLayer.getMetadata();
            }
          }, {
            key: "getStatus",
            value: function getStatus() {
              return this.state.kmlLayer.getStatus();
            }
          }, {
            key: "getUrl",
            value: function getUrl() {
              return this.state.kmlLayer.getUrl();
            }
          }, {
            key: "getZIndex",
            value: function getZIndex() {
              return this.state.marker.getZIndex();
            }

            // END - Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#KmlLayer

          }, {
            key: "componentWillMount",
            value: function componentWillMount() {
              if (!_canUseDom2["default"]) {
                return;
              }
              var kmlLayer = _creatorsKmlLayerCreator2["default"]._createKmlLayer(this.props);

              this.setState({ kmlLayer: kmlLayer });
            }
          }, {
            key: "render",
            value: function render() {
              if (this.state.kmlLayer) {
                return _react2["default"].createElement(
                  _creatorsKmlLayerCreator2["default"],
                  _extends({ kmlLayer: this.state.kmlLayer }, this.props),
                  this.props.children
                );
              } else {
                return _react2["default"].createElement("noscript", null);
              }
            }
          }], [{
            key: "propTypes",
            value: _extends({}, _creatorsKmlLayerCreator.kmlLayerDefaultPropTypes, _creatorsKmlLayerCreator.kmlLayerControlledPropTypes, _creatorsKmlLayerCreator.kmlLayerEventPropTypes),
            enumerable: true
          }]);

          return KmlLayer;
        })(_react.Component);

        exports["default"] = KmlLayer;
        module.exports = exports["default"];

        // Uncontrolled default[props] - used only in componentDidMount

        // Controlled [props] - used in componentDidMount/componentDidUpdate

        // Event [onEventName]

        /***/
      }),
      /* 32 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _eventListsKmlLayerEventList = __webpack_require__(33);

        var _eventListsKmlLayerEventList2 = _interopRequireDefault(_eventListsKmlLayerEventList);

        var _utilsEventHandlerCreator = __webpack_require__(9);

        var _utilsEventHandlerCreator2 = _interopRequireDefault(_utilsEventHandlerCreator);

        var _utilsDefaultPropsCreator = __webpack_require__(10);

        var _utilsDefaultPropsCreator2 = _interopRequireDefault(_utilsDefaultPropsCreator);

        var _utilsComposeOptions = __webpack_require__(12);

        var _utilsComposeOptions2 = _interopRequireDefault(_utilsComposeOptions);

        var _utilsComponentLifecycleDecorator = __webpack_require__(14);

        var _utilsComponentLifecycleDecorator2 = _interopRequireDefault(_utilsComponentLifecycleDecorator);

        var _GoogleMapHolder = __webpack_require__(6);

        var _GoogleMapHolder2 = _interopRequireDefault(_GoogleMapHolder);

        var kmlLayerControlledPropTypes = {
          // NOTICE!!!!!!
          //
          // Only expose those with getters & setters in the table as controlled props.
          //
          // [].map.call($0.querySelectorAll("tr>td>code", function(it){ return it.textContent; }).filter(function(it){ return it.match(/^set/) && !it.match(/^setMap/); })
          //
          // https://developers.google.com/maps/documentation/javascript/3.exp/reference#KmlLayer
          defaultViewport: _react.PropTypes.any,
          metadata: _react.PropTypes.any,
          status: _react.PropTypes.any,
          url: _react.PropTypes.string,
          zIndex: _react.PropTypes.number
        };

        exports.kmlLayerControlledPropTypes = kmlLayerControlledPropTypes;
        var kmlLayerDefaultPropTypes = (0, _utilsDefaultPropsCreator2["default"])(kmlLayerControlledPropTypes);

        exports.kmlLayerDefaultPropTypes = kmlLayerDefaultPropTypes;
        var kmlLayerUpdaters = {
          defaultViewport: function defaultViewport(_defaultViewport, component) {
            component.getKmlLayer().setDefaultViewport(_defaultViewport);
          },
          metadata: function metadata(_metadata, component) {
            component.getKmlLayer().setMetadata(_metadata);
          },
          status: function status(_status, component) {
            component.getKmlLayer().setStatus(_status);
          },
          url: function url(_url, component) {
            component.getKmlLayer().setUrl(_url);
          },
          zIndex: function zIndex(_zIndex, component) {
            component.getKmlLayer().setZIndex(_zIndex);
          }
        };

        var _eventHandlerCreator = (0, _utilsEventHandlerCreator2["default"])(_eventListsKmlLayerEventList2["default"]);

        var eventPropTypes = _eventHandlerCreator.eventPropTypes;
        var registerEvents = _eventHandlerCreator.registerEvents;
        var kmlLayerEventPropTypes = eventPropTypes;

        exports.kmlLayerEventPropTypes = kmlLayerEventPropTypes;

        var KmlLayerCreator = (function (_Component) {
          _inherits(KmlLayerCreator, _Component);

          function KmlLayerCreator() {
            _classCallCheck(this, _KmlLayerCreator);

            _get(Object.getPrototypeOf(_KmlLayerCreator.prototype), "constructor", this).apply(this, arguments);
          }

          _createClass(KmlLayerCreator, [{
            key: "getKmlLayer",
            value: function getKmlLayer() {
              return this.props.kmlLayer;
            }
          }, {
            key: "render",
            value: function render() {
              var _props = this.props;
              var mapHolderRef = _props.mapHolderRef;
              var children = _props.children;

              if (_react.Children.count(children) > 0) {
                return _react2["default"].createElement(
                  "div",
                  null,
                  _react.Children.map(children, function (childElement) {
                    return childElement && _react2["default"].cloneElement(childElement, {
                      mapHolderRef: mapHolderRef
                    });
                  })
                );
              } else {
                return _react2["default"].createElement("noscript", null);
              }
            }
          }], [{
            key: "_createKmlLayer",
            value: function _createKmlLayer(kmlLayerProps) {
              var mapHolderRef = kmlLayerProps.mapHolderRef;

              // https://developers.google.com/maps/documentation/javascript/3.exp/reference#KmlLayer
              var kmlLayer = new google.maps.KmlLayer((0, _utilsComposeOptions2["default"])(kmlLayerProps, kmlLayerControlledPropTypes));

              kmlLayer.setMap(mapHolderRef.getMap());

              return kmlLayer;
            }
          }, {
            key: "propTypes",
            value: {
              mapHolderRef: _react.PropTypes.instanceOf(_GoogleMapHolder2["default"]).isRequired,
              kmlLayer: _react.PropTypes.object.isRequired
            },
            enumerable: true
          }]);

          var _KmlLayerCreator = KmlLayerCreator;
          KmlLayerCreator = (0, _utilsComponentLifecycleDecorator2["default"])({
            registerEvents: registerEvents,
            instanceMethodName: "getKmlLayer",
            updaters: kmlLayerUpdaters
          })(KmlLayerCreator) || KmlLayerCreator;
          return KmlLayerCreator;
        })(_react.Component);

        exports["default"] = KmlLayerCreator;

        /***/
      }),
      /* 33 */
      /***/
      (function (module, exports) {

        // https://developers.google.com/maps/documentation/javascript/3.exp/reference#KmlLayer
        // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; })
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = ["click", "defaultviewport_changed", "status_changed"];
        module.exports = exports["default"];

        /***/
      }),
      /* 34 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _canUseDom = __webpack_require__(17);

        var _canUseDom2 = _interopRequireDefault(_canUseDom);

        var _creatorsMarkerCreator = __webpack_require__(35);

        var _creatorsMarkerCreator2 = _interopRequireDefault(_creatorsMarkerCreator);

        var Marker = (function (_Component) {
          _inherits(Marker, _Component);

          function Marker() {
            _classCallCheck(this, Marker);

            _get(Object.getPrototypeOf(Marker.prototype), "constructor", this).apply(this, arguments);

            this.state = {};
          }

          _createClass(Marker, [{
            key: "getAnimation",

            // Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Marker
            //
            // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^get/) && !it.match(/Map$/); })
            value: function getAnimation() {
              return this.state.marker.getAnimation();
            }
          }, {
            key: "getAttribution",
            value: function getAttribution() {
              return this.state.marker.getAttribution();
            }
          }, {
            key: "getClickable",
            value: function getClickable() {
              return this.state.marker.getClickable();
            }
          }, {
            key: "getCursor",
            value: function getCursor() {
              return this.state.marker.getCursor();
            }
          }, {
            key: "getDraggable",
            value: function getDraggable() {
              return this.state.marker.getDraggable();
            }
          }, {
            key: "getIcon",
            value: function getIcon() {
              return this.state.marker.getIcon();
            }
          }, {
            key: "getLabel",
            value: function getLabel() {
              return this.state.marker.getLabel();
            }
          }, {
            key: "getOpacity",
            value: function getOpacity() {
              return this.state.marker.getOpacity();
            }
          }, {
            key: "getPlace",
            value: function getPlace() {
              return this.state.marker.getPlace();
            }
          }, {
            key: "getPosition",
            value: function getPosition() {
              return this.state.marker.getPosition();
            }
          }, {
            key: "getShape",
            value: function getShape() {
              return this.state.marker.getShape();
            }
          }, {
            key: "getTitle",
            value: function getTitle() {
              return this.state.marker.getTitle();
            }
          }, {
            key: "getVisible",
            value: function getVisible() {
              return this.state.marker.getVisible();
            }
          }, {
            key: "getZIndex",
            value: function getZIndex() {
              return this.state.marker.getZIndex();
            }

            // END - Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Marker

          }, {
            key: "componentWillMount",
            value: function componentWillMount() {
              if (!_canUseDom2["default"]) {
                return;
              }
              var marker = _creatorsMarkerCreator2["default"]._createMarker(this.props);

              this.setState({ marker: marker });
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (!_canUseDom2["default"]) {
                return;
              }

              var anchorHolderRef = this.props.anchorHolderRef;
              var marker = this.state.marker;

              if (anchorHolderRef) {
                if ("MarkerClusterer" === anchorHolderRef.getAnchorType()) {
                  anchorHolderRef.getAnchor().removeMarker(marker);
                }
              }
            }
          }, {
            key: "render",
            value: function render() {
              if (this.state.marker) {
                return _react2["default"].createElement(
                  _creatorsMarkerCreator2["default"],
                  _extends({ marker: this.state.marker }, this.props),
                  this.props.children
                );
              } else {
                return _react2["default"].createElement("noscript", null);
              }
            }
          }], [{
            key: "propTypes",
            value: _extends({}, _creatorsMarkerCreator.markerDefaultPropTypes, _creatorsMarkerCreator.markerControlledPropTypes, _creatorsMarkerCreator.markerEventPropTypes),
            enumerable: true
          }]);

          return Marker;
        })(_react.Component);

        exports["default"] = Marker;
        module.exports = exports["default"];

        // Uncontrolled default[props] - used only in componentDidMount

        // Controlled [props] - used in componentDidMount/componentDidUpdate

        // Event [onEventName]

        /***/
      }),
      /* 35 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _eventListsMarkerEventList = __webpack_require__(36);

        var _eventListsMarkerEventList2 = _interopRequireDefault(_eventListsMarkerEventList);

        var _utilsEventHandlerCreator = __webpack_require__(9);

        var _utilsEventHandlerCreator2 = _interopRequireDefault(_utilsEventHandlerCreator);

        var _utilsDefaultPropsCreator = __webpack_require__(10);

        var _utilsDefaultPropsCreator2 = _interopRequireDefault(_utilsDefaultPropsCreator);

        var _utilsComposeOptions = __webpack_require__(12);

        var _utilsComposeOptions2 = _interopRequireDefault(_utilsComposeOptions);

        var _utilsComponentLifecycleDecorator = __webpack_require__(14);

        var _utilsComponentLifecycleDecorator2 = _interopRequireDefault(_utilsComponentLifecycleDecorator);

        var _GoogleMapHolder = __webpack_require__(6);

        var _GoogleMapHolder2 = _interopRequireDefault(_GoogleMapHolder);

        var markerControlledPropTypes = {
          // NOTICE!!!!!!
          //
          // Only expose those with getters & setters in the table as controlled props.
          //
          // [].map.call($0.querySelectorAll("tr>td>code", function(it){ return it.textContent; }).filter(function(it){ return it.match(/^set/) && !it.match(/^setMap/); })
          //
          // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Marker
          animation: _react.PropTypes.any,
          attribution: _react.PropTypes.any,
          clickable: _react.PropTypes.bool,
          cursor: _react.PropTypes.string,
          draggable: _react.PropTypes.bool,
          icon: _react.PropTypes.any,
          label: _react.PropTypes.any,
          opacity: _react.PropTypes.number,
          options: _react.PropTypes.object,
          place: _react.PropTypes.any,
          position: _react.PropTypes.any,
          shape: _react.PropTypes.any,
          title: _react.PropTypes.string,
          visible: _react.PropTypes.bool,
          zIndex: _react.PropTypes.number
        };

        exports.markerControlledPropTypes = markerControlledPropTypes;
        var markerDefaultPropTypes = (0, _utilsDefaultPropsCreator2["default"])(markerControlledPropTypes);

        exports.markerDefaultPropTypes = markerDefaultPropTypes;
        var markerUpdaters = {
          animation: function animation(_animation, component) {
            component.getMarker().setAnimation(_animation);
          },
          attribution: function attribution(_attribution, component) {
            component.getMarker().setAttribution(_attribution);
          },
          clickable: function clickable(_clickable, component) {
            component.getMarker().setClickable(_clickable);
          },
          cursor: function cursor(_cursor, component) {
            component.getMarker().setCursor(_cursor);
          },
          draggable: function draggable(_draggable, component) {
            component.getMarker().setDraggable(_draggable);
          },
          icon: function icon(_icon, component) {
            component.getMarker().setIcon(_icon);
          },
          label: function label(_label, component) {
            component.getMarker().setLabel(_label);
          },
          opacity: function opacity(_opacity, component) {
            component.getMarker().setOpacity(_opacity);
          },
          options: function options(_options, component) {
            component.getMarker().setOptions(_options);
          },
          place: function place(_place, component) {
            component.getMarker().setPlace(_place);
          },
          position: function position(_position, component) {
            component.getMarker().setPosition(_position);
          },
          shape: function shape(_shape, component) {
            component.getMarker().setShape(_shape);
          },
          title: function title(_title, component) {
            component.getMarker().setTitle(_title);
          },
          visible: function visible(_visible, component) {
            component.getMarker().setVisible(_visible);
          },
          zIndex: function zIndex(_zIndex, component) {
            component.getMarker().setZIndex(_zIndex);
          }
        };

        var _eventHandlerCreator = (0, _utilsEventHandlerCreator2["default"])(_eventListsMarkerEventList2["default"]);

        var eventPropTypes = _eventHandlerCreator.eventPropTypes;
        var registerEvents = _eventHandlerCreator.registerEvents;
        var markerEventPropTypes = eventPropTypes;

        exports.markerEventPropTypes = markerEventPropTypes;

        var MarkerCreator = (function (_Component) {
          _inherits(MarkerCreator, _Component);

          function MarkerCreator() {
            _classCallCheck(this, _MarkerCreator);

            _get(Object.getPrototypeOf(_MarkerCreator.prototype), "constructor", this).apply(this, arguments);
          }

          _createClass(MarkerCreator, [{
            key: "getMarker",
            value: function getMarker() {
              return this.props.marker;
            }

            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#InfoWindowOptions
            // In the core API, the only anchor is the Marker class.
          }, {
            key: "getAnchor",
            value: function getAnchor() {
              return this.props.marker;
            }
          }, {
            key: "render",
            value: function render() {
              var _this = this;

              var _props = this.props;
              var mapHolderRef = _props.mapHolderRef;
              var children = _props.children;

              if (_react.Children.count(children) > 0) {
                return _react2["default"].createElement(
                  "div",
                  null,
                  _react.Children.map(children, function (childElement) {
                    return childElement && _react2["default"].cloneElement(childElement, {
                      mapHolderRef: mapHolderRef,
                      anchorHolderRef: _this
                    });
                  })
                );
              } else {
                return _react2["default"].createElement("noscript", null);
              }
            }
          }], [{
            key: "_createMarker",
            value: function _createMarker(markerProps) {
              var mapHolderRef = markerProps.mapHolderRef;
              var anchorHolderRef = markerProps.anchorHolderRef;

              // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Marker
              var marker = new google.maps.Marker((0, _utilsComposeOptions2["default"])(markerProps, markerControlledPropTypes));

              if (anchorHolderRef) {
                if ("MarkerClusterer" === anchorHolderRef.getAnchorType()) {
                  anchorHolderRef.getAnchor().addMarker(marker);
                }
              } else {
                marker.setMap(mapHolderRef.getMap());
              }

              return marker;
            }
          }, {
            key: "propTypes",
            value: {
              mapHolderRef: _react.PropTypes.instanceOf(_GoogleMapHolder2["default"]).isRequired,
              marker: _react.PropTypes.object.isRequired
            },
            enumerable: true
          }]);

          var _MarkerCreator = MarkerCreator;
          MarkerCreator = (0, _utilsComponentLifecycleDecorator2["default"])({
            registerEvents: registerEvents,
            instanceMethodName: "getMarker",
            updaters: markerUpdaters
          })(MarkerCreator) || MarkerCreator;
          return MarkerCreator;
        })(_react.Component);

        exports["default"] = MarkerCreator;

        /***/
      }),
      /* 36 */
      /***/
      (function (module, exports) {

        // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Marker
        // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; })
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = ["animation_changed", "click", "clickable_changed", "cursor_changed", "dblclick", "drag", "dragend", "draggable_changed", "dragstart", "flat_changed", "icon_changed", "mousedown", "mouseout", "mouseover", "mouseup", "position_changed", "rightclick", "shape_changed", "title_changed", "visible_changed", "zindex_changed"];
        module.exports = exports["default"];

        /***/
      }),
      /* 37 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _canUseDom = __webpack_require__(17);

        var _canUseDom2 = _interopRequireDefault(_canUseDom);

        var _creatorsOverlayViewCreator = __webpack_require__(38);

        var _creatorsOverlayViewCreator2 = _interopRequireDefault(_creatorsOverlayViewCreator);

        /*
         * Original author: @petebrowne
         * Original PR: https://github.com/tomchentw/react-google-maps/pull/63
         */

        var OverlayView = (function (_Component) {
          _inherits(OverlayView, _Component);

          function OverlayView() {
            _classCallCheck(this, OverlayView);

            _get(Object.getPrototypeOf(OverlayView.prototype), "constructor", this).apply(this, arguments);

            this.state = {};
          }

          _createClass(OverlayView, [{
            key: "getPanes",

            // Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#OverlayView
            //
            // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^get/) && !it.match(/^getMap/); })
            value: function getPanes() {
              return this.state.overlayView.getPanes();
            }
          }, {
            key: "getProjection",
            value: function getProjection() {
              return this.state.overlayView.getProjection();
            }

            // END - Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#OverlayView

          }, {
            key: "componentWillMount",
            value: function componentWillMount() {
              if (!_canUseDom2["default"]) {
                return;
              }
              var overlayView = _creatorsOverlayViewCreator2["default"]._createOverlayView(this.props);

              this.setState({ overlayView: overlayView });
            }
          }, {
            key: "render",
            value: function render() {
              if (this.state.overlayView) {
                return _react2["default"].createElement(
                  _creatorsOverlayViewCreator2["default"],
                  _extends({ overlayView: this.state.overlayView }, this.props),
                  this.props.children
                );
              } else {
                return _react2["default"].createElement("noscript", null);
              }
            }
          }], [{
            key: "FLOAT_PANE",
            value: "floatPane",
            enumerable: true
          }, {
            key: "MAP_PANE",
            value: "mapPane",
            enumerable: true
          }, {
            key: "MARKER_LAYER",
            value: "markerLayer",
            enumerable: true
          }, {
            key: "OVERLAY_LAYER",
            value: "overlayLayer",
            enumerable: true
          }, {
            key: "OVERLAY_MOUSE_TARGET",
            value: "overlayMouseTarget",
            enumerable: true
          }, {
            key: "propTypes",
            value: _extends({}, _creatorsOverlayViewCreator.overlayViewDefaultPropTypes, _creatorsOverlayViewCreator.overlayViewControlledPropTypes),
            enumerable: true
          }, {
            key: "defaultProps",
            value: {
              mapPaneName: OverlayView.OVERLAY_LAYER
            },
            enumerable: true
          }]);

          return OverlayView;
        })(_react.Component);

        exports["default"] = OverlayView;
        module.exports = exports["default"];

        // Uncontrolled default[props] - used only in componentDidMount

        // Controlled [props] - used in componentDidMount/componentDidUpdate

        /***/
      }),
      /* 38 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactDom = __webpack_require__(30);

        var _invariant = __webpack_require__(39);

        var _invariant2 = _interopRequireDefault(_invariant);

        var _utilsDefaultPropsCreator = __webpack_require__(10);

        var _utilsDefaultPropsCreator2 = _interopRequireDefault(_utilsDefaultPropsCreator);

        var _utilsComposeOptions = __webpack_require__(12);

        var _utilsComposeOptions2 = _interopRequireDefault(_utilsComposeOptions);

        var _GoogleMapHolder = __webpack_require__(6);

        var _GoogleMapHolder2 = _interopRequireDefault(_GoogleMapHolder);

        var overlayViewControlledPropTypes = {
          // CustomProps
          mapPaneName: _react.PropTypes.string,
          getPixelPositionOffset: _react.PropTypes.func,
          position: _react.PropTypes.object,
          children: _react.PropTypes.node,
          bounds: _react.PropTypes.object
        };

        exports.overlayViewControlledPropTypes = overlayViewControlledPropTypes;
        // NOTICE!!!!!!
        //
        // Only expose those with getters & setters in the table as controlled props.
        //
        // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^set/) && !it.match(/^setMap/); })
        //
        // https://developers.google.com/maps/documentation/javascript/3.exp/reference
        var overlayViewDefaultPropTypes = (0, _utilsDefaultPropsCreator2["default"])(overlayViewControlledPropTypes);

        exports.overlayViewDefaultPropTypes = overlayViewDefaultPropTypes;

        var OverlayViewCreator = (function (_Component) {
          _inherits(OverlayViewCreator, _Component);

          function OverlayViewCreator() {
            _classCallCheck(this, OverlayViewCreator);

            _get(Object.getPrototypeOf(OverlayViewCreator.prototype), "constructor", this).apply(this, arguments);
          }

          _createClass(OverlayViewCreator, [{
            key: "getOverlayView",
            value: function getOverlayView() {
              return this.props.overlayView;
            }
          }, {
            key: "componentDidMount",
            value: function componentDidMount() {
              this.getOverlayView().setMap(this.props.mapHolderRef.getMap());
            }
          }, {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
              this.getOverlayView().setValues(this.props);
              this.getOverlayView()._redraw(this.props.mapPaneName !== prevProps.mapPaneName);
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              this.getOverlayView().setMap(null);
            }
          }, {
            key: "render",
            value: function render() {
              return _react2["default"].createElement("noscript", null);
            }
          }], [{
            key: "_createOverlayView",
            value: function _createOverlayView(overlayViewProps) {
              // https://developers.google.com/maps/documentation/javascript/3.exp/reference#OverlayView
              var overlayView = new google.maps.OverlayView();
              overlayView.setValues((0, _utilsComposeOptions2["default"])(overlayViewProps, overlayViewControlledPropTypes));

              overlayView.onAdd = function onAdd() {
                this._containerElement = document.createElement("div");
                this._containerElement.style.position = "absolute";
              };

              overlayView.draw = function draw() {
                this._mountContainerToPane();
                this._renderContent();
              };

              overlayView.onRemove = function onRemove() {
                (0, _reactDom.unmountComponentAtNode)(this._containerElement);
                this._unmountContainerFromPane();
                this._containerElement = null;
              };

              overlayView._redraw = function _redraw(mapPaneNameChanged) {
                if (mapPaneNameChanged) {
                  this._unmountContainerFromPane();
                  this._mountContainerToPane();
                }
                this._renderContent();
              };

              overlayView._renderContent = function _renderContent() {
                if (this._containerElement) {
                  (0, _reactDom.render)(_react.Children.only(this.get("children")), this._containerElement, this._positionContainerElement.bind(this));
                }
              };

              overlayView._mountContainerToPane = function _mountContainerToPane() {
                var mapPaneName = this.get("mapPaneName");
                (0, _invariant2["default"])(!!mapPaneName, "OverlayView requires a mapPaneName/defaultMapPaneName in your props instead of %s", mapPaneName);

                this.getPanes()[mapPaneName].appendChild(this._containerElement);
              };

              overlayView._unmountContainerFromPane = function _unmountContainerFromPane() {
                this._containerElement.parentNode.removeChild(this._containerElement);
              };

              overlayView._positionContainerElement = function _positionContainerElement() {
                var left = undefined;
                var top = undefined;
                var offset = this._getOffset();
                if (this.get("bounds")) {
                  var bounds = this._getPixelBounds();
                  if (bounds) {
                    var sw = bounds.sw;
                    var ne = bounds.ne;

                    if (offset) {
                      sw.x += offset.x;
                      ne.y += offset.y;
                    }
                    left = sw.x + "px";
                    top = ne.y + "px";
                    this._containerElement.style.width = ne.x - sw.x + "px";
                    this._containerElement.style.height = sw.y - ne.y + "px";
                  }
                } else {
                  var position = this._getPixelPosition();
                  if (position) {
                    var x = position.x;
                    var y = position.y;

                    if (offset) {
                      x += offset.x;
                      y += offset.y;
                    }
                    left = x + "px";
                    top = y + "px";
                  }
                }

                this._containerElement.style.left = left;
                this._containerElement.style.top = top;
              };

              overlayView._getPixelPosition = function _getPixelPosition() {
                var projection = this.getProjection();
                var position = this.get("position");
                (0, _invariant2["default"])(!!position, "OverlayView requires a position/defaultPosition in your props instead of %s", position);
                if (projection && position) {
                  if (!(position instanceof google.maps.LatLng)) {
                    position = new google.maps.LatLng(position.lat, position.lng);
                  }
                  return projection.fromLatLngToDivPixel(position);
                }
              };

              overlayView._getPixelBounds = function _getPixelBounds() {
                var projection = this.getProjection();
                var bounds = this.get("bounds");
                (0, _invariant2["default"])(!!bounds, "OverlayView requires a bounds in your props instead of %s", bounds);
                if (projection && bounds) {
                  if (!(bounds instanceof google.maps.LatLngBounds)) {
                    bounds = new google.maps.LatLngBounds(new google.maps.LatLng(bounds.ne.lat, bounds.ne.lng), new google.maps.LatLng(bounds.sw.lat, bounds.sw.lng));
                  }
                  return {
                    sw: projection.fromLatLngToDivPixel(this.bounds.getSouthWest()),
                    ne: projection.fromLatLngToDivPixel(this.bounds.getNorthEast())
                  };
                }
              };

              overlayView._getOffset = function _getOffset() {
                // Allows the component to control the visual position of the OverlayView
                // relative to the LatLng pixel position.
                var getPixelPositionOffset = this.get("getPixelPositionOffset");
                if (getPixelPositionOffset) {
                  return getPixelPositionOffset(this._containerElement.offsetWidth, this._containerElement.offsetHeight);
                }
              };

              // If we're inside a MarkerClusterer, allow ourselves to be clustered
              if (overlayViewProps.anchorHolderRef) {
                if ("MarkerClusterer" === overlayViewProps.anchorHolderRef.getAnchorType()) {
                  overlayView.getDraggable = function getDraggable() {
                    return !!overlayViewProps.draggable;
                  };

                  overlayView.getPosition = function getPosition() {
                    return new google.maps.LatLng(this.position);
                  };

                  overlayViewProps.anchorHolderRef.getAnchor().addMarker(overlayView);
                }
              }

              return overlayView;
            }
          }, {
            key: "propTypes",
            value: {
              mapHolderRef: _react.PropTypes.instanceOf(_GoogleMapHolder2["default"]).isRequired,
              mapPaneName: _react.PropTypes.string,
              overlayView: _react.PropTypes.object.isRequired
            },
            enumerable: true
          }]);

          return OverlayViewCreator;
        })(_react.Component);

        exports["default"] = OverlayViewCreator;

        /***/
      }),
      /* 39 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright 2013-2015, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         */

        'use strict';

        /**
         * Use invariant() to assert state which your program assumes to be true.
         *
         * Provide sprintf-style format (only %s is supported) and arguments
         * to provide information about what broke and what you were
         * expecting.
         *
         * The invariant message will be stripped in production, but the invariant
         * will remain to ensure logic does not differ in production.
         */

        var invariant = function (condition, format, a, b, c, d, e, f) {
          if ((undefined) !== 'production') {
            if (format === undefined) {
              throw new Error('invariant requires an error message argument');
            }
          }

          if (!condition) {
            var error;
            if (format === undefined) {
              error = new Error(
                'Minified exception occurred; use the non-minified dev environment ' +
                'for the full error message and additional helpful warnings.'
              );
            } else {
              var args = [a, b, c, d, e, f];
              var argIndex = 0;
              error = new Error(
                format.replace(/%s/g, function () { return args[argIndex++]; })
              );
              error.name = 'Invariant Violation';
            }

            error.framesToPop = 1; // we don't care about invariant's own frame
            throw error;
          }
        };

        module.exports = invariant;


        /***/
      }),
      /* 40 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _canUseDom = __webpack_require__(17);

        var _canUseDom2 = _interopRequireDefault(_canUseDom);

        var _creatorsPolygonCreator = __webpack_require__(41);

        var _creatorsPolygonCreator2 = _interopRequireDefault(_creatorsPolygonCreator);

        var Polygon = (function (_Component) {
          _inherits(Polygon, _Component);

          function Polygon() {
            _classCallCheck(this, Polygon);

            _get(Object.getPrototypeOf(Polygon.prototype), "constructor", this).apply(this, arguments);

            this.state = {};
          }

          _createClass(Polygon, [{
            key: "getDraggable",

            // Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Polygon
            //
            // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^get/) && !it.match(/^getMap/); })
            value: function getDraggable() {
              return this.state.polygon.getDraggable();
            }
          }, {
            key: "getEditable",
            value: function getEditable() {
              return this.state.polygon.getEditable();
            }
          }, {
            key: "getPath",
            value: function getPath() {
              return this.state.polygon.getPath();
            }
          }, {
            key: "getPaths",
            value: function getPaths() {
              return this.state.polygon.getPaths();
            }
          }, {
            key: "getVisible",
            value: function getVisible() {
              return this.state.polygon.getVisible();
            }

            // END - Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Polygon

          }, {
            key: "componentWillMount",
            value: function componentWillMount() {
              if (!_canUseDom2["default"]) {
                return;
              }
              var polygon = _creatorsPolygonCreator2["default"]._createPolygon(this.props);

              this.setState({ polygon: polygon });
            }
          }, {
            key: "render",
            value: function render() {
              if (this.state.polygon) {
                return _react2["default"].createElement(
                  _creatorsPolygonCreator2["default"],
                  _extends({ polygon: this.state.polygon }, this.props),
                  this.props.children
                );
              } else {
                return _react2["default"].createElement("noscript", null);
              }
            }
          }], [{
            key: "propTypes",
            value: _extends({}, _creatorsPolygonCreator.polygonDefaultPropTypes, _creatorsPolygonCreator.polygonControlledPropTypes, _creatorsPolygonCreator.polygonEventPropTypes),
            enumerable: true
          }]);

          return Polygon;
        })(_react.Component);

        exports["default"] = Polygon;
        module.exports = exports["default"];

        // Uncontrolled default[props] - used only in componentDidMount

        // Controlled [props] - used in componentDidMount/componentDidUpdate

        // Event [onEventName]

        /***/
      }),
      /* 41 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _eventListsPolygonEventList = __webpack_require__(42);

        var _eventListsPolygonEventList2 = _interopRequireDefault(_eventListsPolygonEventList);

        var _utilsEventHandlerCreator = __webpack_require__(9);

        var _utilsEventHandlerCreator2 = _interopRequireDefault(_utilsEventHandlerCreator);

        var _utilsDefaultPropsCreator = __webpack_require__(10);

        var _utilsDefaultPropsCreator2 = _interopRequireDefault(_utilsDefaultPropsCreator);

        var _utilsComposeOptions = __webpack_require__(12);

        var _utilsComposeOptions2 = _interopRequireDefault(_utilsComposeOptions);

        var _utilsComponentLifecycleDecorator = __webpack_require__(14);

        var _utilsComponentLifecycleDecorator2 = _interopRequireDefault(_utilsComponentLifecycleDecorator);

        var _GoogleMapHolder = __webpack_require__(6);

        var _GoogleMapHolder2 = _interopRequireDefault(_GoogleMapHolder);

        var polygonControlledPropTypes = {
          // NOTICE!!!!!!
          //
          // Only expose those with getters & setters in the table as controlled props.
          //
          // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^set/) && !it.match(/^setMap/); })
          //
          // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Polygon
          draggable: _react.PropTypes.bool,
          editable: _react.PropTypes.bool,
          options: _react.PropTypes.object,
          path: _react.PropTypes.any,
          paths: _react.PropTypes.any,
          visible: _react.PropTypes.bool
        };

        exports.polygonControlledPropTypes = polygonControlledPropTypes;
        var polygonDefaultPropTypes = (0, _utilsDefaultPropsCreator2["default"])(polygonControlledPropTypes);

        exports.polygonDefaultPropTypes = polygonDefaultPropTypes;
        var polygonUpdaters = {
          draggable: function draggable(_draggable, component) {
            component.getPolygon().setDraggable(_draggable);
          },
          editable: function editable(_editable, component) {
            component.getPolygon().setEditable(_editable);
          },
          options: function options(_options, component) {
            component.getPolygon().setOptions(_options);
          },
          path: function path(_path, component) {
            component.getPolygon().setPath(_path);
          },
          paths: function paths(_paths, component) {
            component.getPolygon().setPaths(_paths);
          },
          visible: function visible(_visible, component) {
            component.getPolygon().setVisible(_visible);
          }
        };

        var _eventHandlerCreator = (0, _utilsEventHandlerCreator2["default"])(_eventListsPolygonEventList2["default"]);

        var eventPropTypes = _eventHandlerCreator.eventPropTypes;
        var registerEvents = _eventHandlerCreator.registerEvents;
        var polygonEventPropTypes = eventPropTypes;

        exports.polygonEventPropTypes = polygonEventPropTypes;

        var PolygonCreator = (function (_Component) {
          _inherits(PolygonCreator, _Component);

          function PolygonCreator() {
            _classCallCheck(this, _PolygonCreator);

            _get(Object.getPrototypeOf(_PolygonCreator.prototype), "constructor", this).apply(this, arguments);
          }

          _createClass(PolygonCreator, [{
            key: "getPolygon",
            value: function getPolygon() {
              return this.props.polygon;
            }
          }, {
            key: "render",
            value: function render() {
              return _react2["default"].createElement("noscript", null);
            }
          }], [{
            key: "_createPolygon",
            value: function _createPolygon(polygonProps) {
              var mapHolderRef = polygonProps.mapHolderRef;

              // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Polygon
              var polygon = new google.maps.Polygon((0, _utilsComposeOptions2["default"])(polygonProps, polygonControlledPropTypes));

              polygon.setMap(mapHolderRef.getMap());

              return polygon;
            }
          }, {
            key: "propTypes",
            value: {
              mapHolderRef: _react.PropTypes.instanceOf(_GoogleMapHolder2["default"]).isRequired,
              polygon: _react.PropTypes.object.isRequired
            },
            enumerable: true
          }]);

          var _PolygonCreator = PolygonCreator;
          PolygonCreator = (0, _utilsComponentLifecycleDecorator2["default"])({
            registerEvents: registerEvents,
            instanceMethodName: "getPolygon",
            updaters: polygonUpdaters
          })(PolygonCreator) || PolygonCreator;
          return PolygonCreator;
        })(_react.Component);

        exports["default"] = PolygonCreator;

        /***/
      }),
      /* 42 */
      /***/
      (function (module, exports) {

        // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Polygon
        // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; })
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = ["click", "dblclick", "drag", "dragend", "dragstart", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "rightclick"];
        module.exports = exports["default"];

        /***/
      }),
      /* 43 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _canUseDom = __webpack_require__(17);

        var _canUseDom2 = _interopRequireDefault(_canUseDom);

        var _creatorsPolylineCreator = __webpack_require__(44);

        var _creatorsPolylineCreator2 = _interopRequireDefault(_creatorsPolylineCreator);

        var Polyline = (function (_Component) {
          _inherits(Polyline, _Component);

          function Polyline() {
            _classCallCheck(this, Polyline);

            _get(Object.getPrototypeOf(Polyline.prototype), "constructor", this).apply(this, arguments);

            this.state = {};
          }

          _createClass(Polyline, [{
            key: "getDraggable",

            // Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Polyline
            //
            // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^get/) && !it.match(/^getMap/); })
            value: function getDraggable() {
              return this.state.polyline.getDraggable();
            }
          }, {
            key: "getEditable",
            value: function getEditable() {
              return this.state.polyline.getEditable();
            }
          }, {
            key: "getPath",
            value: function getPath() {
              return this.state.polyline.getPath();
            }
          }, {
            key: "getVisible",
            value: function getVisible() {
              return this.state.polyline.getVisible();
            }

            // END - Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Polyline

          }, {
            key: "componentWillMount",
            value: function componentWillMount() {
              if (!_canUseDom2["default"]) {
                return;
              }
              var polyline = _creatorsPolylineCreator2["default"]._createPolyline(this.props);

              this.setState({ polyline: polyline });
            }
          }, {
            key: "render",
            value: function render() {
              if (this.state.polyline) {
                return _react2["default"].createElement(
                  _creatorsPolylineCreator2["default"],
                  _extends({ polyline: this.state.polyline }, this.props),
                  this.props.children
                );
              } else {
                return _react2["default"].createElement("noscript", null);
              }
            }
          }], [{
            key: "propTypes",
            value: _extends({}, _creatorsPolylineCreator.polylineDefaultPropTypes, _creatorsPolylineCreator.polylineControlledPropTypes, _creatorsPolylineCreator.polylineEventPropTypes),
            enumerable: true
          }]);

          return Polyline;
        })(_react.Component);

        exports["default"] = Polyline;
        module.exports = exports["default"];

        // Uncontrolled default[props] - used only in componentDidMount

        // Controlled [props] - used in componentDidMount/componentDidUpdate

        // Event [onEventName]

        /***/
      }),
      /* 44 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _eventListsPolylineEventList = __webpack_require__(45);

        var _eventListsPolylineEventList2 = _interopRequireDefault(_eventListsPolylineEventList);

        var _utilsEventHandlerCreator = __webpack_require__(9);

        var _utilsEventHandlerCreator2 = _interopRequireDefault(_utilsEventHandlerCreator);

        var _utilsDefaultPropsCreator = __webpack_require__(10);

        var _utilsDefaultPropsCreator2 = _interopRequireDefault(_utilsDefaultPropsCreator);

        var _utilsComposeOptions = __webpack_require__(12);

        var _utilsComposeOptions2 = _interopRequireDefault(_utilsComposeOptions);

        var _utilsComponentLifecycleDecorator = __webpack_require__(14);

        var _utilsComponentLifecycleDecorator2 = _interopRequireDefault(_utilsComponentLifecycleDecorator);

        var _GoogleMapHolder = __webpack_require__(6);

        var _GoogleMapHolder2 = _interopRequireDefault(_GoogleMapHolder);

        var polylineControlledPropTypes = {
          // NOTICE!!!!!!
          //
          // Only expose those with getters & setters in the table as controlled props.
          //
          // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^set/) && !it.match(/^setMap/); })
          //
          // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Polyline
          draggable: _react.PropTypes.bool,
          editable: _react.PropTypes.bool,
          options: _react.PropTypes.object,
          path: _react.PropTypes.any,
          visible: _react.PropTypes.bool
        };

        exports.polylineControlledPropTypes = polylineControlledPropTypes;
        var polylineDefaultPropTypes = (0, _utilsDefaultPropsCreator2["default"])(polylineControlledPropTypes);

        exports.polylineDefaultPropTypes = polylineDefaultPropTypes;
        var polylineUpdaters = {
          draggable: function draggable(_draggable, component) {
            component.getPolyline().setDraggable(_draggable);
          },
          editable: function editable(_editable, component) {
            component.getPolyline().setEditable(_editable);
          },
          options: function options(_options, component) {
            component.getPolyline().setOptions(_options);
          },
          path: function path(_path, component) {
            component.getPolyline().setPath(_path);
          },
          visible: function visible(_visible, component) {
            component.getPolyline().setVisible(_visible);
          }
        };

        var _eventHandlerCreator = (0, _utilsEventHandlerCreator2["default"])(_eventListsPolylineEventList2["default"]);

        var eventPropTypes = _eventHandlerCreator.eventPropTypes;
        var registerEvents = _eventHandlerCreator.registerEvents;
        var polylineEventPropTypes = eventPropTypes;

        exports.polylineEventPropTypes = polylineEventPropTypes;

        var PolylineCreator = (function (_Component) {
          _inherits(PolylineCreator, _Component);

          function PolylineCreator() {
            _classCallCheck(this, _PolylineCreator);

            _get(Object.getPrototypeOf(_PolylineCreator.prototype), "constructor", this).apply(this, arguments);
          }

          _createClass(PolylineCreator, [{
            key: "getPolyline",
            value: function getPolyline() {
              return this.props.polyline;
            }
          }, {
            key: "render",
            value: function render() {
              return _react2["default"].createElement("noscript", null);
            }
          }], [{
            key: "_createPolyline",
            value: function _createPolyline(polylineProps) {
              var mapHolderRef = polylineProps.mapHolderRef;

              // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Polyline
              var polyline = new google.maps.Polyline((0, _utilsComposeOptions2["default"])(polylineProps, polylineControlledPropTypes));

              polyline.setMap(mapHolderRef.getMap());

              return polyline;
            }
          }, {
            key: "propTypes",
            value: {
              mapHolderRef: _react.PropTypes.instanceOf(_GoogleMapHolder2["default"]).isRequired,
              polyline: _react.PropTypes.object.isRequired
            },
            enumerable: true
          }]);

          var _PolylineCreator = PolylineCreator;
          PolylineCreator = (0, _utilsComponentLifecycleDecorator2["default"])({
            registerEvents: registerEvents,
            instanceMethodName: "getPolyline",
            updaters: polylineUpdaters
          })(PolylineCreator) || PolylineCreator;
          return PolylineCreator;
        })(_react.Component);

        exports["default"] = PolylineCreator;

        /***/
      }),
      /* 45 */
      /***/
      (function (module, exports) {

        // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Polyline
        // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; })
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = ["click", "dblclick", "drag", "dragend", "dragstart", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "rightclick"];
        module.exports = exports["default"];

        /***/
      }),
      /* 46 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _canUseDom = __webpack_require__(17);

        var _canUseDom2 = _interopRequireDefault(_canUseDom);

        var _creatorsRectangleCreator = __webpack_require__(47);

        var _creatorsRectangleCreator2 = _interopRequireDefault(_creatorsRectangleCreator);

        /*
         * Original author: @alistairjcbrown
         * Original PR: https://github.com/tomchentw/react-google-maps/pull/80
         */

        var Rectangle = (function (_Component) {
          _inherits(Rectangle, _Component);

          function Rectangle() {
            _classCallCheck(this, Rectangle);

            _get(Object.getPrototypeOf(Rectangle.prototype), "constructor", this).apply(this, arguments);

            this.state = {};
          }

          _createClass(Rectangle, [{
            key: "getBounds",

            // Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Rectangle
            //
            // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^get/) && !it.match(/^getMap/); })
            value: function getBounds() {
              return this.state.rectangle.getBounds();
            }
          }, {
            key: "getDraggable",
            value: function getDraggable() {
              return this.state.rectangle.getDraggable();
            }
          }, {
            key: "getEditable",
            value: function getEditable() {
              return this.state.rectangle.getEditable();
            }
          }, {
            key: "getVisible",
            value: function getVisible() {
              return this.state.rectangle.getVisible();
            }

            // END - Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Rectangle

          }, {
            key: "componentWillMount",
            value: function componentWillMount() {
              if (!_canUseDom2["default"]) {
                return;
              }
              var rectangle = _creatorsRectangleCreator2["default"]._createRectangle(this.props);

              this.setState({ rectangle: rectangle });
            }
          }, {
            key: "render",
            value: function render() {
              if (this.state.rectangle) {
                return _react2["default"].createElement(
                  _creatorsRectangleCreator2["default"],
                  _extends({ rectangle: this.state.rectangle }, this.props),
                  this.props.children
                );
              } else {
                return _react2["default"].createElement("noscript", null);
              }
            }
          }], [{
            key: "propTypes",
            value: _extends({}, _creatorsRectangleCreator.rectangleDefaultPropTypes, _creatorsRectangleCreator.rectangleControlledPropTypes, _creatorsRectangleCreator.rectangleEventPropTypes),
            enumerable: true
          }]);

          return Rectangle;
        })(_react.Component);

        exports["default"] = Rectangle;
        module.exports = exports["default"];

        // Uncontrolled default[props] - used only in componentDidMount

        // Controlled [props] - used in componentDidMount/componentDidUpdate

        // Event [onEventName]

        /***/
      }),
      /* 47 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _eventListsRectangleEventList = __webpack_require__(48);

        var _eventListsRectangleEventList2 = _interopRequireDefault(_eventListsRectangleEventList);

        var _utilsEventHandlerCreator = __webpack_require__(9);

        var _utilsEventHandlerCreator2 = _interopRequireDefault(_utilsEventHandlerCreator);

        var _utilsDefaultPropsCreator = __webpack_require__(10);

        var _utilsDefaultPropsCreator2 = _interopRequireDefault(_utilsDefaultPropsCreator);

        var _utilsComposeOptions = __webpack_require__(12);

        var _utilsComposeOptions2 = _interopRequireDefault(_utilsComposeOptions);

        var _utilsComponentLifecycleDecorator = __webpack_require__(14);

        var _utilsComponentLifecycleDecorator2 = _interopRequireDefault(_utilsComponentLifecycleDecorator);

        var _GoogleMapHolder = __webpack_require__(6);

        var _GoogleMapHolder2 = _interopRequireDefault(_GoogleMapHolder);

        var rectangleControlledPropTypes = {
          // NOTICE!!!!!!
          //
          // Only expose those with getters & setters in the table as controlled props.
          //
          // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^set/) && !it.match(/^setMap/); })
          //
          // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Rectangle
          bounds: _react.PropTypes.any,
          draggable: _react.PropTypes.bool,
          editable: _react.PropTypes.bool,
          options: _react.PropTypes.object,
          visible: _react.PropTypes.bool
        };

        exports.rectangleControlledPropTypes = rectangleControlledPropTypes;
        var rectangleDefaultPropTypes = (0, _utilsDefaultPropsCreator2["default"])(rectangleControlledPropTypes);

        exports.rectangleDefaultPropTypes = rectangleDefaultPropTypes;
        var rectangleUpdaters = {
          bounds: function bounds(_bounds, component) {
            component.getRectangle().setBounds(_bounds);
          },
          draggable: function draggable(_draggable, component) {
            component.getRectangle().setDraggable(_draggable);
          },
          editable: function editable(_editable, component) {
            component.getRectangle().setEditable(_editable);
          },
          options: function options(_options, component) {
            component.getRectangle().setOptions(_options);
          },
          visible: function visible(_visible, component) {
            component.getRectangle().setVisible(_visible);
          }
        };

        var _eventHandlerCreator = (0, _utilsEventHandlerCreator2["default"])(_eventListsRectangleEventList2["default"]);

        var eventPropTypes = _eventHandlerCreator.eventPropTypes;
        var registerEvents = _eventHandlerCreator.registerEvents;
        var rectangleEventPropTypes = eventPropTypes;

        exports.rectangleEventPropTypes = rectangleEventPropTypes;

        var RectangleCreator = (function (_Component) {
          _inherits(RectangleCreator, _Component);

          function RectangleCreator() {
            _classCallCheck(this, _RectangleCreator);

            _get(Object.getPrototypeOf(_RectangleCreator.prototype), "constructor", this).apply(this, arguments);
          }

          _createClass(RectangleCreator, [{
            key: "getRectangle",
            value: function getRectangle() {
              return this.props.rectangle;
            }
          }, {
            key: "render",
            value: function render() {
              return _react2["default"].createElement("noscript", null);
            }
          }], [{
            key: "_createRectangle",
            value: function _createRectangle(rectangleProps) {
              var mapHolderRef = rectangleProps.mapHolderRef;

              // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Rectangle
              var rectangle = new google.maps.Rectangle((0, _utilsComposeOptions2["default"])(rectangleProps, rectangleControlledPropTypes));

              rectangle.setMap(mapHolderRef.getMap());

              return rectangle;
            }
          }, {
            key: "propTypes",
            value: {
              mapHolderRef: _react.PropTypes.instanceOf(_GoogleMapHolder2["default"]).isRequired,
              rectangle: _react.PropTypes.object.isRequired
            },
            enumerable: true
          }]);

          var _RectangleCreator = RectangleCreator;
          RectangleCreator = (0, _utilsComponentLifecycleDecorator2["default"])({
            registerEvents: registerEvents,
            instanceMethodName: "getRectangle",
            updaters: rectangleUpdaters
          })(RectangleCreator) || RectangleCreator;
          return RectangleCreator;
        })(_react.Component);

        exports["default"] = RectangleCreator;

        /***/
      }),
      /* 48 */
      /***/
      (function (module, exports) {

        // https://developers.google.com/maps/documentation/javascript/3.exp/reference#Rectangle
        // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; })
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = ["bounds_changed", "click", "dblclick", "drag", "dragend", "dragstart", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "rightclick"];
        module.exports = exports["default"];

        /***/
      }),
      /* 49 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i]; } return target; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _canUseDom = __webpack_require__(17);

        var _canUseDom2 = _interopRequireDefault(_canUseDom);

        var _creatorsSearchBoxCreator = __webpack_require__(50);

        var _creatorsSearchBoxCreator2 = _interopRequireDefault(_creatorsSearchBoxCreator);

        /*
         * Original author: @eyebraus
         * Original PR: https://github.com/tomchentw/react-google-maps/pull/110
         */

        var SearchBox = (function (_Component) {
          _inherits(SearchBox, _Component);

          function SearchBox() {
            _classCallCheck(this, SearchBox);

            _get(Object.getPrototypeOf(SearchBox.prototype), "constructor", this).apply(this, arguments);

            this.state = {};
          }

          _createClass(SearchBox, [{
            key: "getBounds",

            // Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#SearchBox
            //
            // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; }).filter(function(it){ return it.match(/^get/) && !it.match(/Map$/); })
            value: function getBounds() {
              return this.state.searchBox.getBounds();
            }
          }, {
            key: "getPlaces",
            value: function getPlaces() {
              return this.state.searchBox.getPlaces();
            }

            // END - Public APIs
            //
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#SearchBox

          }, {
            key: "componentWillMount",
            value: function componentWillMount() {
              if (!_canUseDom2["default"]) {
                return;
              }
              var _props = this.props;
              var mapHolderRef = _props.mapHolderRef;
              var classes = _props.classes;
              var style = _props.style;
              var placeholder = _props.placeholder;

              var searchBoxProps = _objectWithoutProperties(_props, ["mapHolderRef", "classes", "style", "placeholder"]);

              // Cannot create input via component - Google Maps will mess with React's internal state by detaching/attaching.
              // Allow developers to style the "hidden element" via inputClasses.
              var domEl = document.createElement("input");
              domEl.className = classes;
              domEl.type = "text";
              domEl.placeholder = placeholder;

              for (var propKey in style) {
                if (style.hasOwnProperty(propKey)) {
                  domEl.style[propKey] = style[propKey];
                }
              }

              var searchBox = _creatorsSearchBoxCreator2["default"]._createSearchBox(domEl, searchBoxProps);

              this.setState({
                inputElement: domEl,
                searchBox: searchBox
              });
            }
          }, {
            key: "render",
            value: function render() {
              var _props2 = this.props;
              var mapHolderRef = _props2.mapHolderRef;
              var controlPosition = _props2.controlPosition;

              return this.state.searchBox ? _react2["default"].createElement(
                _creatorsSearchBoxCreator2["default"],
                _extends({ controlPosition: controlPosition, inputElement: this.state.inputElement, mapHolderRef: mapHolderRef, searchBox: this.state.searchBox }, this.props),
                this.props.children
              ) : _react2["default"].createElement("noscript", null);
            }
          }], [{
            key: "propTypes",
            value: _extends({}, _creatorsSearchBoxCreator.searchBoxDefaultPropTypes, _creatorsSearchBoxCreator.searchBoxControlledPropTypes, _creatorsSearchBoxCreator.searchBoxEventPropTypes),
            enumerable: true
          }]);

          return SearchBox;
        })(_react.Component);

        exports["default"] = SearchBox;
        module.exports = exports["default"];

        // Uncontrolled default[props] - used only in componentDidMount

        // Controlled [props] - used in componentDidMount/componentDidUpdate

        // Event [onEventName]

        /***/
      }),
      /* 50 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _eventListsSearchBoxEventList = __webpack_require__(51);

        var _eventListsSearchBoxEventList2 = _interopRequireDefault(_eventListsSearchBoxEventList);

        var _utilsEventHandlerCreator = __webpack_require__(9);

        var _utilsEventHandlerCreator2 = _interopRequireDefault(_utilsEventHandlerCreator);

        var _utilsDefaultPropsCreator = __webpack_require__(10);

        var _utilsDefaultPropsCreator2 = _interopRequireDefault(_utilsDefaultPropsCreator);

        var _utilsComposeOptions = __webpack_require__(12);

        var _utilsComposeOptions2 = _interopRequireDefault(_utilsComposeOptions);

        var _utilsComponentLifecycleDecorator = __webpack_require__(14);

        var _utilsComponentLifecycleDecorator2 = _interopRequireDefault(_utilsComponentLifecycleDecorator);

        var _GoogleMapHolder = __webpack_require__(6);

        var _GoogleMapHolder2 = _interopRequireDefault(_GoogleMapHolder);

        var searchBoxControlledPropTypes = {
          // NOTICE!!!!!!
          //
          // Only expose those with getters & setters in the table as controlled props.
          //
          bounds: _react.PropTypes.any
        };

        exports.searchBoxControlledPropTypes = searchBoxControlledPropTypes;
        var searchBoxDefaultPropTypes = (0, _utilsDefaultPropsCreator2["default"])(searchBoxControlledPropTypes);

        exports.searchBoxDefaultPropTypes = searchBoxDefaultPropTypes;
        var searchBoxUpdaters = {
          bounds: function bounds(_bounds, component) {
            component.getSearchBox().setBounds(_bounds);
          }
        };

        var _eventHandlerCreator = (0, _utilsEventHandlerCreator2["default"])(_eventListsSearchBoxEventList2["default"]);

        var eventPropTypes = _eventHandlerCreator.eventPropTypes;
        var registerEvents = _eventHandlerCreator.registerEvents;
        var searchBoxEventPropTypes = eventPropTypes;

        exports.searchBoxEventPropTypes = searchBoxEventPropTypes;

        var SearchBoxCreator = (function (_Component) {
          _inherits(SearchBoxCreator, _Component);

          function SearchBoxCreator() {
            _classCallCheck(this, _SearchBoxCreator);

            _get(Object.getPrototypeOf(_SearchBoxCreator.prototype), "constructor", this).apply(this, arguments);
          }

          _createClass(SearchBoxCreator, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this._mountComponentToMap(this.props.controlPosition);
            }
          }, {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
              if (this.props.controlPosition !== prevProps.controlPosition) {
                this._unmountComponentFromMap(prevProps.controlPosition);
                this._mountComponentToMap(this.props.controlPosition);
              }
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              this._unmountComponentFromMap(this.props.controlPosition);
            }
          }, {
            key: "_mountComponentToMap",
            value: function _mountComponentToMap(controlPosition) {
              var _props = this.props;
              var mapHolderRef = _props.mapHolderRef;
              var inputElement = _props.inputElement;

              mapHolderRef.getMap().controls[controlPosition].push(inputElement);
            }
          }, {
            key: "_unmountComponentFromMap",
            value: function _unmountComponentFromMap(controlPosition) {
              var _props2 = this.props;
              var mapHolderRef = _props2.mapHolderRef;
              var inputElement = _props2.inputElement;

              var index = mapHolderRef.getMap().controls[controlPosition].getArray().indexOf(inputElement);
              mapHolderRef.getMap().controls[controlPosition].removeAt(index);
            }
          }, {
            key: "getSearchBox",
            value: function getSearchBox() {
              return this.props.searchBox;
            }
          }, {
            key: "render",
            value: function render() {
              return _react2["default"].createElement("noscript", null);
            }
          }], [{
            key: "_createSearchBox",
            value: function _createSearchBox(inputElement, searchBoxProps) {
              var searchBox = new google.maps.places.SearchBox(inputElement, (0, _utilsComposeOptions2["default"])(searchBoxProps, searchBoxControlledPropTypes));

              return searchBox;
            }
          }, {
            key: "propTypes",
            value: {
              mapHolderRef: _react.PropTypes.instanceOf(_GoogleMapHolder2["default"]).isRequired,
              searchBox: _react.PropTypes.object.isRequired
            },
            enumerable: true
          }]);

          var _SearchBoxCreator = SearchBoxCreator;
          SearchBoxCreator = (0, _utilsComponentLifecycleDecorator2["default"])({
            registerEvents: registerEvents,
            instanceMethodName: "getSearchBox",
            updaters: searchBoxUpdaters
          })(SearchBoxCreator) || SearchBoxCreator;
          return SearchBoxCreator;
        })(_react.Component);

        exports["default"] = SearchBoxCreator;

        /***/
      }),
      /* 51 */
      /***/
      (function (module, exports) {

        // https://developers.google.com/maps/documentation/javascript/3.exp/reference#SearchBox
        // [].map.call($0.querySelectorAll("tr>td>code"), function(it){ return it.textContent; })
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = ["places_changed"];
        module.exports = exports["default"];

        /***/
      }),
      /* 52 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x5, _x6, _x7) { var _again = true;
          _function: while (_again) { var object = _x5,
              property = _x6,
              receiver = _x7;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x5 = parent;
                _x6 = property;
                _x7 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i]; } return target; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _canUseDom = __webpack_require__(17);

        var _canUseDom2 = _interopRequireDefault(_canUseDom);

        var _addonsCreatorsMarkerClustererCreator = __webpack_require__(53);

        var _addonsCreatorsMarkerClustererCreator2 = _interopRequireDefault(_addonsCreatorsMarkerClustererCreator);

        var MarkerClusterer = (function (_Component) {
          _inherits(MarkerClusterer, _Component);

          function MarkerClusterer() {
            _classCallCheck(this, MarkerClusterer);

            _get(Object.getPrototypeOf(MarkerClusterer.prototype), 'constructor', this).apply(this, arguments);

            this.state = {};
          }

          _createClass(MarkerClusterer, [{
            key: 'getAverageCenter',

            // Public APIs
            // http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclustererplus/docs/reference.html#events
            value: function getAverageCenter() {
              return this.state.markerClusterer.getAverageCenter();
            }
          }, {
            key: 'getBatchSizeIE',
            value: function getBatchSizeIE() {
              return this.state.markerClusterer.getBatchSizeIE();
            }
          }, {
            key: 'getCalculator',
            value: function getCalculator() {
              return this.state.markerClusterer.getCalculator();
            }
          }, {
            key: 'getClusterClass',
            value: function getClusterClass() {
              return this.state.markerClusterer.getClusterClass();
            }
          }, {
            key: 'getClusters',
            value: function getClusters() {
              return this.state.markerClusterer.getClusters();
            }
          }, {
            key: 'getEnableRetinaIcons',
            value: function getEnableRetinaIcons() {
              return this.state.markerClusterer.getEnableRetinaIcons();
            }
          }, {
            key: 'getGridSize',
            value: function getGridSize() {
              return this.state.markerClusterer.getGridSize();
            }
          }, {
            key: 'getIgnoreHidden',
            value: function getIgnoreHidden() {
              return this.state.markerClusterer.getIgnoreHidden();
            }
          }, {
            key: 'getImageExtension',
            value: function getImageExtension() {
              return this.state.markerClusterer.getImageExtension();
            }
          }, {
            key: 'getImagePath',
            value: function getImagePath() {
              return this.state.markerClusterer.getImagePath();
            }
          }, {
            key: 'getImageSize',
            value: function getImageSize() {
              return this.state.markerClusterer.getImageSize();
            }
          }, {
            key: 'getMarkers',
            value: function getMarkers() {
              return this.state.markerClusterer.getMarkers();
            }
          }, {
            key: 'getMaxZoom',
            value: function getMaxZoom() {
              return this.state.markerClusterer.getMaxZoom();
            }
          }, {
            key: 'getMinimumClusterSize',
            value: function getMinimumClusterSize() {
              return this.state.markerClusterer.getMinimumClusterSize();
            }
          }, {
            key: 'getStyles',
            value: function getStyles() {
              return this.state.markerClusterer.getStyles();
            }
          }, {
            key: 'getTitle',
            value: function getTitle() {
              return this.state.markerClusterer.getTitle();
            }
          }, {
            key: 'getTotalClusters',
            value: function getTotalClusters() {
              return this.state.markerClusterer.getTotalClusters();
            }
          }, {
            key: 'getZoomOnClick',
            value: function getZoomOnClick() {
              return this.state.markerClusterer.getZoomOnClick();
            }

            // Public APIs - Use this carefully
          }, {
            key: 'addMarker',
            value: function addMarker(marker) {
              var nodraw = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
              return this.state.markerClusterer.addMarker(marker, nodraw);
            }
          }, {
            key: 'addMarkers',
            value: function addMarkers(markers) {
              var nodraw = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
              return this.state.markerClusterer.addMarkers(markers, nodraw);
            }
          }, {
            key: 'removeMarker',
            value: function removeMarker(marker) {
              var nodraw = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
              return this.state.markerClusterer.removeMarker(marker, nodraw);
            }
          }, {
            key: 'removeMarkers',
            value: function removeMarkers(markers) {
              var nodraw = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
              return this.state.markerClusterer.removeMarkers(markers, nodraw);
            }
          }, {
            key: 'clearMarkers',
            value: function clearMarkers() {
              return this.state.markerClusterer.clearMarkers();
            }
          }, {
            key: 'fitMapToMarkers',
            value: function fitMapToMarkers() {
              return this.state.markerClusterer.fitMapToMarkers();
            }
          }, {
            key: 'repaint',
            value: function repaint() {
              return this.state.markerClusterer.repaint();
            }
          }, {
            key: 'componentWillMount',
            value: function componentWillMount() {
              if (!_canUseDom2['default']) {
                return;
              }

              var _props = this.props;
              var mapHolderRef = _props.mapHolderRef;

              var markerClustererProps = _objectWithoutProperties(_props, ['mapHolderRef']);

              var markerClusterer = _addonsCreatorsMarkerClustererCreator2['default']._createMarkerClusterer(mapHolderRef, markerClustererProps);

              this.setState({ markerClusterer: markerClusterer });
            }
          }, {
            key: 'render',
            value: function render() {
              if (this.state.markerClusterer) {
                return _react2['default'].createElement(
                  _addonsCreatorsMarkerClustererCreator2['default'],
                  _extends({ markerClusterer: this.state.markerClusterer }, this.props),
                  this.props.children
                );
              } else {
                return _react2['default'].createElement('noscript', null);
              }
            }
          }], [{
            key: 'propTypes',
            value: _extends({}, _addonsCreatorsMarkerClustererCreator.markerClusterDefaultPropTypes, _addonsCreatorsMarkerClustererCreator.markerClusterControlledPropTypes, _addonsCreatorsMarkerClustererCreator.markerClusterEventPropTypes),
            enumerable: true
          }]);

          return MarkerClusterer;
        })(_react.Component);

        exports['default'] = MarkerClusterer;
        module.exports = exports['default'];

        /***/
      }),
      /* 53 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true
        });

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _addonsEventListsMarkerClustererEventList = __webpack_require__(54);

        var _addonsEventListsMarkerClustererEventList2 = _interopRequireDefault(_addonsEventListsMarkerClustererEventList);

        var _utilsEventHandlerCreator = __webpack_require__(9);

        var _utilsEventHandlerCreator2 = _interopRequireDefault(_utilsEventHandlerCreator);

        var _utilsDefaultPropsCreator = __webpack_require__(10);

        var _utilsDefaultPropsCreator2 = _interopRequireDefault(_utilsDefaultPropsCreator);

        var _utilsComposeOptions = __webpack_require__(12);

        var _utilsComposeOptions2 = _interopRequireDefault(_utilsComposeOptions);

        var _utilsComponentLifecycleDecorator = __webpack_require__(14);

        var _utilsComponentLifecycleDecorator2 = _interopRequireDefault(_utilsComponentLifecycleDecorator);

        var _creatorsGoogleMapHolder = __webpack_require__(6);

        var _creatorsGoogleMapHolder2 = _interopRequireDefault(_creatorsGoogleMapHolder);

        var markerClustererControlledPropTypes = {
          // http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclustererplus/docs/reference.html
          averageCenter: _react.PropTypes.bool,
          batchSizeIE: _react.PropTypes.number,
          calculator: _react.PropTypes.func,
          clusterClass: _react.PropTypes.string,
          enableRetinaIcons: _react.PropTypes.bool,
          gridSize: _react.PropTypes.number,
          ignoreHidden: _react.PropTypes.bool,
          imageExtension: _react.PropTypes.string,
          imagePath: _react.PropTypes.string,
          imageSizes: _react.PropTypes.array,
          maxZoom: _react.PropTypes.number,
          minimumClusterSize: _react.PropTypes.number,
          styles: _react.PropTypes.array,
          title: _react.PropTypes.string,
          zoomOnClick: _react.PropTypes.bool
        };

        exports.markerClustererControlledPropTypes = markerClustererControlledPropTypes;
        var markerClustererDefaultPropTypes = (0, _utilsDefaultPropsCreator2['default'])(markerClustererControlledPropTypes);

        exports.markerClustererDefaultPropTypes = markerClustererDefaultPropTypes;
        var markerClustererUpdaters = {
          averageCenter: function averageCenter(_averageCenter, component) {
            component.getMarkerClusterer().setAverageCenter(_averageCenter);
          },

          batchSizeIE: function batchSizeIE(_batchSizeIE, component) {
            component.getMarkerClusterer().setBatchSizeIE(_batchSizeIE);
          },

          calculator: function calculator(_calculator, component) {
            component.getMarkerClusterer().setCalculator(_calculator);
          },

          enableRetinaIcons: function enableRetinaIcons(_enableRetinaIcons, component) {
            component.getMarkerClusterer().setEnableRetinaIcons(_enableRetinaIcons);
          },

          gridSize: function gridSize(_gridSize, component) {
            component.getMarkerClusterer().setGridSize(_gridSize);
          },

          ignoreHidden: function ignoreHidden(_ignoreHidden, component) {
            component.getMarkerClusterer().setIgnoreHidden(_ignoreHidden);
          },

          imageExtension: function imageExtension(_imageExtension, component) {
            component.getMarkerClusterer().setImageExtension(_imageExtension);
          },

          imagePath: function imagePath(_imagePath, component) {
            component.getMarkerClusterer().setImagePath(_imagePath);
          },

          imageSizes: function imageSizes(_imageSizes, component) {
            component.getMarkerClusterer().setImageSizes(_imageSizes);
          },

          maxZoom: function maxZoom(_maxZoom, component) {
            component.getMarkerClusterer().setMaxZoom(_maxZoom);
          },

          minimumClusterSize: function minimumClusterSize(_minimumClusterSize, component) {
            component.getMarkerClusterer().setMinimumClusterSize(_minimumClusterSize);
          },

          styles: function styles(_styles, component) {
            component.getMarkerClusterer().setStyles(_styles);
          },

          title: function title(_title, component) {
            component.getMarkerClusterer().setTitle(_title);
          },

          zoomOnClick: function zoomOnClick(_zoomOnClick, component) {
            component.getMarkerClusterer().setZoomOnClick(_zoomOnClick);
          }
        };

        var _eventHandlerCreator = (0, _utilsEventHandlerCreator2['default'])(_addonsEventListsMarkerClustererEventList2['default']);

        var eventPropTypes = _eventHandlerCreator.eventPropTypes;
        var registerEvents = _eventHandlerCreator.registerEvents;
        var markerClustererEventPropTypes = eventPropTypes;

        exports.markerClustererEventPropTypes = markerClustererEventPropTypes;

        var MarkerClustererCreator = (function (_Component) {
          _inherits(MarkerClustererCreator, _Component);

          function MarkerClustererCreator() {
            _classCallCheck(this, _MarkerClustererCreator);

            _get(Object.getPrototypeOf(_MarkerClustererCreator.prototype), 'constructor', this).apply(this, arguments);
          }

          _createClass(MarkerClustererCreator, [{
            key: 'getMarkerClusterer',
            value: function getMarkerClusterer() {
              return this.props.markerClusterer;
            }
          }, {
            key: 'componentDidUpdate',
            value: function componentDidUpdate(prevProps) {
              this.props.markerClusterer.repaint();
            }
          }, {
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
              this.props.markerClusterer.setMap(null);
            }
          }, {
            key: 'getAnchor',
            value: function getAnchor() {
              return this.props.markerClusterer;
            }
          }, {
            key: 'getAnchorType',
            value: function getAnchorType() {
              return 'MarkerClusterer';
            }
          }, {
            key: 'render',
            value: function render() {
              var _this = this;

              var _props = this.props;
              var mapHolderRef = _props.mapHolderRef;
              var children = _props.children;

              if (_react.Children.count(children) > 0) {
                return _react2['default'].createElement(
                  'div',
                  null,
                  _react.Children.map(children, function (childElement) {
                    if (_react2['default'].isValidElement(childElement)) {
                      return _react2['default'].cloneElement(childElement, {
                        mapHolderRef: mapHolderRef,
                        anchorHolderRef: _this
                      });
                    } else {
                      return childElement;
                    }
                  })
                );
              } else {
                return _react2['default'].createElement('noscript', null);
              }
            }
          }], [{
            key: '_createMarkerClusterer',
            value: function _createMarkerClusterer(mapHolderRef, markerClustererProps) {
              var GoogleMarkerClusterer = __webpack_require__(55);

              // http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclustererplus/docs/reference.html#events
              var markerClusterer = new GoogleMarkerClusterer(mapHolderRef.getMap(), [], (0, _utilsComposeOptions2['default'])(markerClustererProps, markerClustererControlledPropTypes));

              return markerClusterer;
            }
          }, {
            key: 'PropTypes',
            value: {
              mapHolderRef: _react.PropTypes.instanceOf(_creatorsGoogleMapHolder2['default']).isRequired,
              markerClusterer: _react.PropTypes.object.isRequired
            },
            enumerable: true
          }]);

          var _MarkerClustererCreator = MarkerClustererCreator;
          MarkerClustererCreator = (0, _utilsComponentLifecycleDecorator2['default'])({
            registerEvents: registerEvents,
            instanceMethodName: 'getMarkerClusterer',
            updaters: markerClustererUpdaters
          })(MarkerClustererCreator) || MarkerClustererCreator;
          return MarkerClustererCreator;
        })(_react.Component);

        exports['default'] = MarkerClustererCreator;

        /***/
      }),
      /* 54 */
      /***/
      (function (module, exports) {

        // http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclustererplus/docs/reference.html
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = ["click", "clusteringbegin", "clusteringend", "mouseout", "mouseover"];
        module.exports = exports["default"];

        /***/
      }),
      /* 55 */
      /***/
      (function (module, exports) {

        /**
         * @name MarkerClustererPlus for Google Maps V3
         * @version 2.1.2 [May 28, 2014]
         * @author Gary Little
         * @fileoverview
         * The library creates and manages per-zoom-level clusters for large amounts of markers.
         * <p>
         * This is an enhanced V3 implementation of the
         * <a href="http://gmaps-utility-library-dev.googlecode.com/svn/tags/markerclusterer/"
         * >V2 MarkerClusterer</a> by Xiaoxi Wu. It is based on the
         * <a href="http://google-maps-utility-library-v3.googlecode.com/svn/tags/markerclusterer/"
         * >V3 MarkerClusterer</a> port by Luke Mahe. MarkerClustererPlus was created by Gary Little.
         * <p>
         * v2.0 release: MarkerClustererPlus v2.0 is backward compatible with MarkerClusterer v1.0. It
         *  adds support for the <code>ignoreHidden</code>, <code>title</code>, <code>batchSizeIE</code>,
         *  and <code>calculator</code> properties as well as support for four more events. It also allows
         *  greater control over the styling of the text that appears on the cluster marker. The
         *  documentation has been significantly improved and the overall code has been simplified and
         *  polished. Very large numbers of markers can now be managed without causing Javascript timeout
         *  errors on Internet Explorer. Note that the name of the <code>clusterclick</code> event has been
         *  deprecated. The new name is <code>click</code>, so please change your application code now.
         */

        /**
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *     http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */


        /**
         * @name ClusterIconStyle
         * @class This class represents the object for values in the <code>styles</code> array passed
         *  to the {@link MarkerClusterer} constructor. The element in this array that is used to
         *  style the cluster icon is determined by calling the <code>calculator</code> function.
         *
         * @property {string} url The URL of the cluster icon image file. Required.
         * @property {number} height The display height (in pixels) of the cluster icon. Required.
         * @property {number} width The display width (in pixels) of the cluster icon. Required.
         * @property {Array} [anchorText] The position (in pixels) from the center of the cluster icon to
         *  where the text label is to be centered and drawn. The format is <code>[yoffset, xoffset]</code>
         *  where <code>yoffset</code> increases as you go down from center and <code>xoffset</code>
         *  increases to the right of center. The default is <code>[0, 0]</code>.
         * @property {Array} [anchorIcon] The anchor position (in pixels) of the cluster icon. This is the
         *  spot on the cluster icon that is to be aligned with the cluster position. The format is
         *  <code>[yoffset, xoffset]</code> where <code>yoffset</code> increases as you go down and
         *  <code>xoffset</code> increases to the right of the top-left corner of the icon. The default
         *  anchor position is the center of the cluster icon.
         * @property {string} [textColor="black"] The color of the label text shown on the
         *  cluster icon.
         * @property {number} [textSize=11] The size (in pixels) of the label text shown on the
         *  cluster icon.
         * @property {string} [textDecoration="none"] The value of the CSS <code>text-decoration</code>
         *  property for the label text shown on the cluster icon.
         * @property {string} [fontWeight="bold"] The value of the CSS <code>font-weight</code>
         *  property for the label text shown on the cluster icon.
         * @property {string} [fontStyle="normal"] The value of the CSS <code>font-style</code>
         *  property for the label text shown on the cluster icon.
         * @property {string} [fontFamily="Arial,sans-serif"] The value of the CSS <code>font-family</code>
         *  property for the label text shown on the cluster icon.
         * @property {string} [backgroundPosition="0 0"] The position of the cluster icon image
         *  within the image defined by <code>url</code>. The format is <code>"xpos ypos"</code>
         *  (the same format as for the CSS <code>background-position</code> property). You must set
         *  this property appropriately when the image defined by <code>url</code> represents a sprite
         *  containing multiple images. Note that the position <i>must</i> be specified in px units.
         */
        /**
         * @name ClusterIconInfo
         * @class This class is an object containing general information about a cluster icon. This is
         *  the object that a <code>calculator</code> function returns.
         *
         * @property {string} text The text of the label to be shown on the cluster icon.
         * @property {number} index The index plus 1 of the element in the <code>styles</code>
         *  array to be used to style the cluster icon.
         * @property {string} title The tooltip to display when the mouse moves over the cluster icon.
         *  If this value is <code>undefined</code> or <code>""</code>, <code>title</code> is set to the
         *  value of the <code>title</code> property passed to the MarkerClusterer.
         */
        /**
         * A cluster icon.
         *
         * @constructor
         * @extends google.maps.OverlayView
         * @param {Cluster} cluster The cluster with which the icon is to be associated.
         * @param {Array} [styles] An array of {@link ClusterIconStyle} defining the cluster icons
         *  to use for various cluster sizes.
         * @private
         */
        function ClusterIcon(cluster, styles) {
          cluster.getMarkerClusterer().extend(ClusterIcon, google.maps.OverlayView);

          this.cluster_ = cluster;
          this.className_ = cluster.getMarkerClusterer().getClusterClass();
          this.styles_ = styles;
          this.center_ = null;
          this.div_ = null;
          this.sums_ = null;
          this.visible_ = false;

          this.setMap(cluster.getMap()); // Note: this causes onAdd to be called
        }


        /**
         * Adds the icon to the DOM.
         */
        ClusterIcon.prototype.onAdd = function () {
          var cClusterIcon = this;
          var cMouseDownInCluster;
          var cDraggingMapByCluster;

          this.div_ = document.createElement("div");
          this.div_.className = this.className_;
          if (this.visible_) {
            this.show();
          }

          this.getPanes().overlayMouseTarget.appendChild(this.div_);

          // Fix for Issue 157
          this.boundsChangedListener_ = google.maps.event.addListener(this.getMap(), "bounds_changed", function () {
            cDraggingMapByCluster = cMouseDownInCluster;
          });

          google.maps.event.addDomListener(this.div_, "mousedown", function () {
            cMouseDownInCluster = true;
            cDraggingMapByCluster = false;
          });

          google.maps.event.addDomListener(this.div_, "click", function (e) {
            cMouseDownInCluster = false;
            if (!cDraggingMapByCluster) {
              var theBounds;
              var mz;
              var mc = cClusterIcon.cluster_.getMarkerClusterer();
              /**
               * This event is fired when a cluster marker is clicked.
               * @name MarkerClusterer#click
               * @param {Cluster} c The cluster that was clicked.
               * @event
               */
              google.maps.event.trigger(mc, "click", cClusterIcon.cluster_);
              google.maps.event.trigger(mc, "clusterclick", cClusterIcon.cluster_); // deprecated name

              // The default click handler follows. Disable it by setting
              // the zoomOnClick property to false.
              if (mc.getZoomOnClick()) {
                // Zoom into the cluster.
                mz = mc.getMaxZoom();
                theBounds = cClusterIcon.cluster_.getBounds();
                mc.getMap().fitBounds(theBounds);
                // There is a fix for Issue 170 here:
                setTimeout(function () {
                  mc.getMap().fitBounds(theBounds);
                  // Don't zoom beyond the max zoom level
                  if (mz !== null && (mc.getMap().getZoom() > mz)) {
                    mc.getMap().setZoom(mz + 1);
                  }
                }, 100);
              }

              // Prevent event propagation to the map:
              e.cancelBubble = true;
              if (e.stopPropagation) {
                e.stopPropagation();
              }
            }
          });

          google.maps.event.addDomListener(this.div_, "mouseover", function () {
            var mc = cClusterIcon.cluster_.getMarkerClusterer();
            /**
             * This event is fired when the mouse moves over a cluster marker.
             * @name MarkerClusterer#mouseover
             * @param {Cluster} c The cluster that the mouse moved over.
             * @event
             */
            google.maps.event.trigger(mc, "mouseover", cClusterIcon.cluster_);
          });

          google.maps.event.addDomListener(this.div_, "mouseout", function () {
            var mc = cClusterIcon.cluster_.getMarkerClusterer();
            /**
             * This event is fired when the mouse moves out of a cluster marker.
             * @name MarkerClusterer#mouseout
             * @param {Cluster} c The cluster that the mouse moved out of.
             * @event
             */
            google.maps.event.trigger(mc, "mouseout", cClusterIcon.cluster_);
          });
        };


        /**
         * Removes the icon from the DOM.
         */
        ClusterIcon.prototype.onRemove = function () {
          if (this.div_ && this.div_.parentNode) {
            this.hide();
            google.maps.event.removeListener(this.boundsChangedListener_);
            google.maps.event.clearInstanceListeners(this.div_);
            this.div_.parentNode.removeChild(this.div_);
            this.div_ = null;
          }
        };


        /**
         * Draws the icon.
         */
        ClusterIcon.prototype.draw = function () {
          if (this.visible_) {
            var pos = this.getPosFromLatLng_(this.center_);
            this.div_.style.top = pos.y + "px";
            this.div_.style.left = pos.x + "px";
          }
        };


        /**
         * Hides the icon.
         */
        ClusterIcon.prototype.hide = function () {
          if (this.div_) {
            this.div_.style.display = "none";
          }
          this.visible_ = false;
        };


        /**
         * Positions and shows the icon.
         */
        ClusterIcon.prototype.show = function () {
          if (this.div_) {
            var img = "";
            // NOTE: values must be specified in px units
            var bp = this.backgroundPosition_.split(" ");
            var spriteH = parseInt(bp[0].replace(/^\s+|\s+$/g, ""), 10);
            var spriteV = parseInt(bp[1].replace(/^\s+|\s+$/g, ""), 10);
            var pos = this.getPosFromLatLng_(this.center_);
            this.div_.style.cssText = this.createCss(pos);
            img = "<img src='" + this.url_ + "' style='position: absolute; top: " + spriteV + "px; left: " + spriteH + "px; ";
            if (!this.cluster_.getMarkerClusterer().enableRetinaIcons_) {
              img += "clip: rect(" + (-1 * spriteV) + "px, " + ((-1 * spriteH) + this.width_) + "px, " +
                ((-1 * spriteV) + this.height_) + "px, " + (-1 * spriteH) + "px);";
            }
            img += "'>";
            this.div_.innerHTML = img + "<div style='" +
              "position: absolute;" +
              "top: " + this.anchorText_[0] + "px;" +
              "left: " + this.anchorText_[1] + "px;" +
              "color: " + this.textColor_ + ";" +
              "font-size: " + this.textSize_ + "px;" +
              "font-family: " + this.fontFamily_ + ";" +
              "font-weight: " + this.fontWeight_ + ";" +
              "font-style: " + this.fontStyle_ + ";" +
              "text-decoration: " + this.textDecoration_ + ";" +
              "text-align: center;" +
              "width: " + this.width_ + "px;" +
              "line-height:" + this.height_ + "px;" +
              "'>" + this.sums_.text + "</div>";
            if (typeof this.sums_.title === "undefined" || this.sums_.title === "") {
              this.div_.title = this.cluster_.getMarkerClusterer().getTitle();
            } else {
              this.div_.title = this.sums_.title;
            }
            this.div_.style.display = "";
          }
          this.visible_ = true;
        };


        /**
         * Sets the icon styles to the appropriate element in the styles array.
         *
         * @param {ClusterIconInfo} sums The icon label text and styles index.
         */
        ClusterIcon.prototype.useStyle = function (sums) {
          this.sums_ = sums;
          var index = Math.max(0, sums.index - 1);
          index = Math.min(this.styles_.length - 1, index);
          var style = this.styles_[index];
          this.url_ = style.url;
          this.height_ = style.height;
          this.width_ = style.width;
          this.anchorText_ = style.anchorText || [0, 0];
          this.anchorIcon_ = style.anchorIcon || [parseInt(this.height_ / 2, 10), parseInt(this.width_ / 2, 10)];
          this.textColor_ = style.textColor || "black";
          this.textSize_ = style.textSize || 11;
          this.textDecoration_ = style.textDecoration || "none";
          this.fontWeight_ = style.fontWeight || "bold";
          this.fontStyle_ = style.fontStyle || "normal";
          this.fontFamily_ = style.fontFamily || "Arial,sans-serif";
          this.backgroundPosition_ = style.backgroundPosition || "0 0";
        };


        /**
         * Sets the position at which to center the icon.
         *
         * @param {google.maps.LatLng} center The latlng to set as the center.
         */
        ClusterIcon.prototype.setCenter = function (center) {
          this.center_ = center;
        };


        /**
         * Creates the cssText style parameter based on the position of the icon.
         *
         * @param {google.maps.Point} pos The position of the icon.
         * @return {string} The CSS style text.
         */
        ClusterIcon.prototype.createCss = function (pos) {
          var style = [];
          style.push("cursor: pointer;");
          style.push("position: absolute; top: " + pos.y + "px; left: " + pos.x + "px;");
          style.push("width: " + this.width_ + "px; height: " + this.height_ + "px;");
          return style.join("");
        };


        /**
         * Returns the position at which to place the DIV depending on the latlng.
         *
         * @param {google.maps.LatLng} latlng The position in latlng.
         * @return {google.maps.Point} The position in pixels.
         */
        ClusterIcon.prototype.getPosFromLatLng_ = function (latlng) {
          var pos = this.getProjection().fromLatLngToDivPixel(latlng);
          pos.x -= this.anchorIcon_[1];
          pos.y -= this.anchorIcon_[0];
          pos.x = parseInt(pos.x, 10);
          pos.y = parseInt(pos.y, 10);
          return pos;
        };


        /**
         * Creates a single cluster that manages a group of proximate markers.
         *  Used internally, do not call this constructor directly.
         * @constructor
         * @param {MarkerClusterer} mc The <code>MarkerClusterer</code> object with which this
         *  cluster is associated.
         */
        function Cluster(mc) {
          this.markerClusterer_ = mc;
          this.map_ = mc.getMap();
          this.gridSize_ = mc.getGridSize();
          this.minClusterSize_ = mc.getMinimumClusterSize();
          this.averageCenter_ = mc.getAverageCenter();
          this.markers_ = [];
          this.center_ = null;
          this.bounds_ = null;
          this.clusterIcon_ = new ClusterIcon(this, mc.getStyles());
        }


        /**
         * Returns the number of markers managed by the cluster. You can call this from
         * a <code>click</code>, <code>mouseover</code>, or <code>mouseout</code> event handler
         * for the <code>MarkerClusterer</code> object.
         *
         * @return {number} The number of markers in the cluster.
         */
        Cluster.prototype.getSize = function () {
          return this.markers_.length;
        };


        /**
         * Returns the array of markers managed by the cluster. You can call this from
         * a <code>click</code>, <code>mouseover</code>, or <code>mouseout</code> event handler
         * for the <code>MarkerClusterer</code> object.
         *
         * @return {Array} The array of markers in the cluster.
         */
        Cluster.prototype.getMarkers = function () {
          return this.markers_;
        };


        /**
         * Returns the center of the cluster. You can call this from
         * a <code>click</code>, <code>mouseover</code>, or <code>mouseout</code> event handler
         * for the <code>MarkerClusterer</code> object.
         *
         * @return {google.maps.LatLng} The center of the cluster.
         */
        Cluster.prototype.getCenter = function () {
          return this.center_;
        };


        /**
         * Returns the map with which the cluster is associated.
         *
         * @return {google.maps.Map} The map.
         * @ignore
         */
        Cluster.prototype.getMap = function () {
          return this.map_;
        };


        /**
         * Returns the <code>MarkerClusterer</code> object with which the cluster is associated.
         *
         * @return {MarkerClusterer} The associated marker clusterer.
         * @ignore
         */
        Cluster.prototype.getMarkerClusterer = function () {
          return this.markerClusterer_;
        };


        /**
         * Returns the bounds of the cluster.
         *
         * @return {google.maps.LatLngBounds} the cluster bounds.
         * @ignore
         */
        Cluster.prototype.getBounds = function () {
          var i;
          var bounds = new google.maps.LatLngBounds(this.center_, this.center_);
          var markers = this.getMarkers();
          for (i = 0; i < markers.length; i++) {
            bounds.extend(markers[i].getPosition());
          }
          return bounds;
        };


        /**
         * Removes the cluster from the map.
         *
         * @ignore
         */
        Cluster.prototype.remove = function () {
          this.clusterIcon_.setMap(null);
          this.markers_ = [];
          delete this.markers_;
        };


        /**
         * Adds a marker to the cluster.
         *
         * @param {google.maps.Marker} marker The marker to be added.
         * @return {boolean} True if the marker was added.
         * @ignore
         */
        Cluster.prototype.addMarker = function (marker) {
          var i;
          var mCount;
          var mz;

          if (this.isMarkerAlreadyAdded_(marker)) {
            return false;
          }

          if (!this.center_) {
            this.center_ = marker.getPosition();
            this.calculateBounds_();
          } else {
            if (this.averageCenter_) {
              var l = this.markers_.length + 1;
              var lat = (this.center_.lat() * (l - 1) + marker.getPosition().lat()) / l;
              var lng = (this.center_.lng() * (l - 1) + marker.getPosition().lng()) / l;
              this.center_ = new google.maps.LatLng(lat, lng);
              this.calculateBounds_();
            }
          }

          marker.isAdded = true;
          this.markers_.push(marker);

          mCount = this.markers_.length;
          mz = this.markerClusterer_.getMaxZoom();
          if (mz !== null && this.map_.getZoom() > mz) {
            // Zoomed in past max zoom, so show the marker.
            if (marker.getMap() !== this.map_) {
              marker.setMap(this.map_);
            }
          } else if (mCount < this.minClusterSize_) {
            // Min cluster size not reached so show the marker.
            if (marker.getMap() !== this.map_) {
              marker.setMap(this.map_);
            }
          } else if (mCount === this.minClusterSize_) {
            // Hide the markers that were showing.
            for (i = 0; i < mCount; i++) {
              this.markers_[i].setMap(null);
            }
          } else {
            marker.setMap(null);
          }

          this.updateIcon_();
          return true;
        };


        /**
         * Determines if a marker lies within the cluster's bounds.
         *
         * @param {google.maps.Marker} marker The marker to check.
         * @return {boolean} True if the marker lies in the bounds.
         * @ignore
         */
        Cluster.prototype.isMarkerInClusterBounds = function (marker) {
          return this.bounds_.contains(marker.getPosition());
        };


        /**
         * Calculates the extended bounds of the cluster with the grid.
         */
        Cluster.prototype.calculateBounds_ = function () {
          var bounds = new google.maps.LatLngBounds(this.center_, this.center_);
          this.bounds_ = this.markerClusterer_.getExtendedBounds(bounds);
        };


        /**
         * Updates the cluster icon.
         */
        Cluster.prototype.updateIcon_ = function () {
          var mCount = this.markers_.length;
          var mz = this.markerClusterer_.getMaxZoom();

          if (mz !== null && this.map_.getZoom() > mz) {
            this.clusterIcon_.hide();
            return;
          }

          if (mCount < this.minClusterSize_) {
            // Min cluster size not yet reached.
            this.clusterIcon_.hide();
            return;
          }

          var numStyles = this.markerClusterer_.getStyles().length;
          var sums = this.markerClusterer_.getCalculator()(this.markers_, numStyles);
          this.clusterIcon_.setCenter(this.center_);
          this.clusterIcon_.useStyle(sums);
          this.clusterIcon_.show();
        };


        /**
         * Determines if a marker has already been added to the cluster.
         *
         * @param {google.maps.Marker} marker The marker to check.
         * @return {boolean} True if the marker has already been added.
         */
        Cluster.prototype.isMarkerAlreadyAdded_ = function (marker) {
          var i;
          if (this.markers_.indexOf) {
            return this.markers_.indexOf(marker) !== -1;
          } else {
            for (i = 0; i < this.markers_.length; i++) {
              if (marker === this.markers_[i]) {
                return true;
              }
            }
          }
          return false;
        };


        /**
         * @name MarkerClustererOptions
         * @class This class represents the optional parameter passed to
         *  the {@link MarkerClusterer} constructor.
         * @property {number} [gridSize=60] The grid size of a cluster in pixels. The grid is a square.
         * @property {number} [maxZoom=null] The maximum zoom level at which clustering is enabled or
         *  <code>null</code> if clustering is to be enabled at all zoom levels.
         * @property {boolean} [zoomOnClick=true] Whether to zoom the map when a cluster marker is
         *  clicked. You may want to set this to <code>false</code> if you have installed a handler
         *  for the <code>click</code> event and it deals with zooming on its own.
         * @property {boolean} [averageCenter=false] Whether the position of a cluster marker should be
         *  the average position of all markers in the cluster. If set to <code>false</code>, the
         *  cluster marker is positioned at the location of the first marker added to the cluster.
         * @property {number} [minimumClusterSize=2] The minimum number of markers needed in a cluster
         *  before the markers are hidden and a cluster marker appears.
         * @property {boolean} [ignoreHidden=false] Whether to ignore hidden markers in clusters. You
         *  may want to set this to <code>true</code> to ensure that hidden markers are not included
         *  in the marker count that appears on a cluster marker (this count is the value of the
         *  <code>text</code> property of the result returned by the default <code>calculator</code>).
         *  If set to <code>true</code> and you change the visibility of a marker being clustered, be
         *  sure to also call <code>MarkerClusterer.repaint()</code>.
         * @property {string} [title=""] The tooltip to display when the mouse moves over a cluster
         *  marker. (Alternatively, you can use a custom <code>calculator</code> function to specify a
         *  different tooltip for each cluster marker.)
         * @property {function} [calculator=MarkerClusterer.CALCULATOR] The function used to determine
         *  the text to be displayed on a cluster marker and the index indicating which style to use
         *  for the cluster marker. The input parameters for the function are (1) the array of markers
         *  represented by a cluster marker and (2) the number of cluster icon styles. It returns a
         *  {@link ClusterIconInfo} object. The default <code>calculator</code> returns a
         *  <code>text</code> property which is the number of markers in the cluster and an
         *  <code>index</code> property which is one higher than the lowest integer such that
         *  <code>10^i</code> exceeds the number of markers in the cluster, or the size of the styles
         *  array, whichever is less. The <code>styles</code> array element used has an index of
         *  <code>index</code> minus 1. For example, the default <code>calculator</code> returns a
         *  <code>text</code> value of <code>"125"</code> and an <code>index</code> of <code>3</code>
         *  for a cluster icon representing 125 markers so the element used in the <code>styles</code>
         *  array is <code>2</code>. A <code>calculator</code> may also return a <code>title</code>
         *  property that contains the text of the tooltip to be used for the cluster marker. If
         *   <code>title</code> is not defined, the tooltip is set to the value of the <code>title</code>
         *   property for the MarkerClusterer.
         * @property {string} [clusterClass="cluster"] The name of the CSS class defining general styles
         *  for the cluster markers. Use this class to define CSS styles that are not set up by the code
         *  that processes the <code>styles</code> array.
         * @property {Array} [styles] An array of {@link ClusterIconStyle} elements defining the styles
         *  of the cluster markers to be used. The element to be used to style a given cluster marker
         *  is determined by the function defined by the <code>calculator</code> property.
         *  The default is an array of {@link ClusterIconStyle} elements whose properties are derived
         *  from the values for <code>imagePath</code>, <code>imageExtension</code>, and
         *  <code>imageSizes</code>.
         * @property {boolean} [enableRetinaIcons=false] Whether to allow the use of cluster icons that
         * have sizes that are some multiple (typically double) of their actual display size. Icons such
         * as these look better when viewed on high-resolution monitors such as Apple's Retina displays.
         * Note: if this property is <code>true</code>, sprites cannot be used as cluster icons.
         * @property {number} [batchSize=MarkerClusterer.BATCH_SIZE] Set this property to the
         *  number of markers to be processed in a single batch when using a browser other than
         *  Internet Explorer (for Internet Explorer, use the batchSizeIE property instead).
         * @property {number} [batchSizeIE=MarkerClusterer.BATCH_SIZE_IE] When Internet Explorer is
         *  being used, markers are processed in several batches with a small delay inserted between
         *  each batch in an attempt to avoid Javascript timeout errors. Set this property to the
         *  number of markers to be processed in a single batch; select as high a number as you can
         *  without causing a timeout error in the browser. This number might need to be as low as 100
         *  if 15,000 markers are being managed, for example.
         * @property {string} [imagePath=MarkerClusterer.IMAGE_PATH]
         *  The full URL of the root name of the group of image files to use for cluster icons.
         *  The complete file name is of the form <code>imagePath</code>n.<code>imageExtension</code>
         *  where n is the image file number (1, 2, etc.).
         * @property {string} [imageExtension=MarkerClusterer.IMAGE_EXTENSION]
         *  The extension name for the cluster icon image files (e.g., <code>"png"</code> or
         *  <code>"jpg"</code>).
         * @property {Array} [imageSizes=MarkerClusterer.IMAGE_SIZES]
         *  An array of numbers containing the widths of the group of
         *  <code>imagePath</code>n.<code>imageExtension</code> image files.
         *  (The images are assumed to be square.)
         */
        /**
         * Creates a MarkerClusterer object with the options specified in {@link MarkerClustererOptions}.
         * @constructor
         * @extends google.maps.OverlayView
         * @param {google.maps.Map} map The Google map to attach to.
         * @param {Array.<google.maps.Marker>} [opt_markers] The markers to be added to the cluster.
         * @param {MarkerClustererOptions} [opt_options] The optional parameters.
         */
        function MarkerClusterer(map, opt_markers, opt_options) {
          // MarkerClusterer implements google.maps.OverlayView interface. We use the
          // extend function to extend MarkerClusterer with google.maps.OverlayView
          // because it might not always be available when the code is defined so we
          // look for it at the last possible moment. If it doesn't exist now then
          // there is no point going ahead :)
          this.extend(MarkerClusterer, google.maps.OverlayView);

          opt_markers = opt_markers || [];
          opt_options = opt_options || {};

          this.markers_ = [];
          this.clusters_ = [];
          this.listeners_ = [];
          this.activeMap_ = null;
          this.ready_ = false;

          this.gridSize_ = opt_options.gridSize || 60;
          this.minClusterSize_ = opt_options.minimumClusterSize || 2;
          this.maxZoom_ = opt_options.maxZoom || null;
          this.styles_ = opt_options.styles || [];
          this.title_ = opt_options.title || "";
          this.zoomOnClick_ = true;
          if (opt_options.zoomOnClick !== undefined) {
            this.zoomOnClick_ = opt_options.zoomOnClick;
          }
          this.averageCenter_ = false;
          if (opt_options.averageCenter !== undefined) {
            this.averageCenter_ = opt_options.averageCenter;
          }
          this.ignoreHidden_ = false;
          if (opt_options.ignoreHidden !== undefined) {
            this.ignoreHidden_ = opt_options.ignoreHidden;
          }
          this.enableRetinaIcons_ = false;
          if (opt_options.enableRetinaIcons !== undefined) {
            this.enableRetinaIcons_ = opt_options.enableRetinaIcons;
          }
          this.imagePath_ = opt_options.imagePath || MarkerClusterer.IMAGE_PATH;
          this.imageExtension_ = opt_options.imageExtension || MarkerClusterer.IMAGE_EXTENSION;
          this.imageSizes_ = opt_options.imageSizes || MarkerClusterer.IMAGE_SIZES;
          this.calculator_ = opt_options.calculator || MarkerClusterer.CALCULATOR;
          this.batchSize_ = opt_options.batchSize || MarkerClusterer.BATCH_SIZE;
          this.batchSizeIE_ = opt_options.batchSizeIE || MarkerClusterer.BATCH_SIZE_IE;
          this.clusterClass_ = opt_options.clusterClass || "cluster";

          if (navigator.userAgent.toLowerCase().indexOf("msie") !== -1) {
            // Try to avoid IE timeout when processing a huge number of markers:
            this.batchSize_ = this.batchSizeIE_;
          }

          this.setupStyles_();

          this.addMarkers(opt_markers, true);
          this.setMap(map); // Note: this causes onAdd to be called
        }


        /**
         * Implementation of the onAdd interface method.
         * @ignore
         */
        MarkerClusterer.prototype.onAdd = function () {
          var cMarkerClusterer = this;

          this.activeMap_ = this.getMap();
          this.ready_ = true;

          this.repaint();

          // Add the map event listeners
          this.listeners_ = [
            google.maps.event.addListener(this.getMap(), "zoom_changed", function () {
              cMarkerClusterer.resetViewport_(false);
              // Workaround for this Google bug: when map is at level 0 and "-" of
              // zoom slider is clicked, a "zoom_changed" event is fired even though
              // the map doesn't zoom out any further. In this situation, no "idle"
              // event is triggered so the cluster markers that have been removed
              // do not get redrawn. Same goes for a zoom in at maxZoom.
              if (this.getZoom() === (this.get("minZoom") || 0) || this.getZoom() === this.get("maxZoom")) {
                google.maps.event.trigger(this, "idle");
              }
            }),
            google.maps.event.addListener(this.getMap(), "idle", function () {
              cMarkerClusterer.redraw_();
            })
          ];
        };


        /**
         * Implementation of the onRemove interface method.
         * Removes map event listeners and all cluster icons from the DOM.
         * All managed markers are also put back on the map.
         * @ignore
         */
        MarkerClusterer.prototype.onRemove = function () {
          var i;

          // Put all the managed markers back on the map:
          for (i = 0; i < this.markers_.length; i++) {
            if (this.markers_[i].getMap() !== this.activeMap_) {
              this.markers_[i].setMap(this.activeMap_);
            }
          }

          // Remove all clusters:
          for (i = 0; i < this.clusters_.length; i++) {
            this.clusters_[i].remove();
          }
          this.clusters_ = [];

          // Remove map event listeners:
          for (i = 0; i < this.listeners_.length; i++) {
            google.maps.event.removeListener(this.listeners_[i]);
          }
          this.listeners_ = [];

          this.activeMap_ = null;
          this.ready_ = false;
        };


        /**
         * Implementation of the draw interface method.
         * @ignore
         */
        MarkerClusterer.prototype.draw = function () {};


        /**
         * Sets up the styles object.
         */
        MarkerClusterer.prototype.setupStyles_ = function () {
          var i, size;
          if (this.styles_.length > 0) {
            return;
          }

          for (i = 0; i < this.imageSizes_.length; i++) {
            size = this.imageSizes_[i];
            this.styles_.push({
              url: this.imagePath_ + (i + 1) + "." + this.imageExtension_,
              height: size,
              width: size
            });
          }
        };


        /**
         *  Fits the map to the bounds of the markers managed by the clusterer.
         */
        MarkerClusterer.prototype.fitMapToMarkers = function () {
          var i;
          var markers = this.getMarkers();
          var bounds = new google.maps.LatLngBounds();
          for (i = 0; i < markers.length; i++) {
            bounds.extend(markers[i].getPosition());
          }

          this.getMap().fitBounds(bounds);
        };


        /**
         * Returns the value of the <code>gridSize</code> property.
         *
         * @return {number} The grid size.
         */
        MarkerClusterer.prototype.getGridSize = function () {
          return this.gridSize_;
        };


        /**
         * Sets the value of the <code>gridSize</code> property.
         *
         * @param {number} gridSize The grid size.
         */
        MarkerClusterer.prototype.setGridSize = function (gridSize) {
          this.gridSize_ = gridSize;
        };


        /**
         * Returns the value of the <code>minimumClusterSize</code> property.
         *
         * @return {number} The minimum cluster size.
         */
        MarkerClusterer.prototype.getMinimumClusterSize = function () {
          return this.minClusterSize_;
        };

        /**
         * Sets the value of the <code>minimumClusterSize</code> property.
         *
         * @param {number} minimumClusterSize The minimum cluster size.
         */
        MarkerClusterer.prototype.setMinimumClusterSize = function (minimumClusterSize) {
          this.minClusterSize_ = minimumClusterSize;
        };


        /**
         *  Returns the value of the <code>maxZoom</code> property.
         *
         *  @return {number} The maximum zoom level.
         */
        MarkerClusterer.prototype.getMaxZoom = function () {
          return this.maxZoom_;
        };


        /**
         *  Sets the value of the <code>maxZoom</code> property.
         *
         *  @param {number} maxZoom The maximum zoom level.
         */
        MarkerClusterer.prototype.setMaxZoom = function (maxZoom) {
          this.maxZoom_ = maxZoom;
        };


        /**
         *  Returns the value of the <code>styles</code> property.
         *
         *  @return {Array} The array of styles defining the cluster markers to be used.
         */
        MarkerClusterer.prototype.getStyles = function () {
          return this.styles_;
        };


        /**
         *  Sets the value of the <code>styles</code> property.
         *
         *  @param {Array.<ClusterIconStyle>} styles The array of styles to use.
         */
        MarkerClusterer.prototype.setStyles = function (styles) {
          this.styles_ = styles;
        };


        /**
         * Returns the value of the <code>title</code> property.
         *
         * @return {string} The content of the title text.
         */
        MarkerClusterer.prototype.getTitle = function () {
          return this.title_;
        };


        /**
         *  Sets the value of the <code>title</code> property.
         *
         *  @param {string} title The value of the title property.
         */
        MarkerClusterer.prototype.setTitle = function (title) {
          this.title_ = title;
        };


        /**
         * Returns the value of the <code>zoomOnClick</code> property.
         *
         * @return {boolean} True if zoomOnClick property is set.
         */
        MarkerClusterer.prototype.getZoomOnClick = function () {
          return this.zoomOnClick_;
        };


        /**
         *  Sets the value of the <code>zoomOnClick</code> property.
         *
         *  @param {boolean} zoomOnClick The value of the zoomOnClick property.
         */
        MarkerClusterer.prototype.setZoomOnClick = function (zoomOnClick) {
          this.zoomOnClick_ = zoomOnClick;
        };


        /**
         * Returns the value of the <code>averageCenter</code> property.
         *
         * @return {boolean} True if averageCenter property is set.
         */
        MarkerClusterer.prototype.getAverageCenter = function () {
          return this.averageCenter_;
        };


        /**
         *  Sets the value of the <code>averageCenter</code> property.
         *
         *  @param {boolean} averageCenter The value of the averageCenter property.
         */
        MarkerClusterer.prototype.setAverageCenter = function (averageCenter) {
          this.averageCenter_ = averageCenter;
        };


        /**
         * Returns the value of the <code>ignoreHidden</code> property.
         *
         * @return {boolean} True if ignoreHidden property is set.
         */
        MarkerClusterer.prototype.getIgnoreHidden = function () {
          return this.ignoreHidden_;
        };


        /**
         *  Sets the value of the <code>ignoreHidden</code> property.
         *
         *  @param {boolean} ignoreHidden The value of the ignoreHidden property.
         */
        MarkerClusterer.prototype.setIgnoreHidden = function (ignoreHidden) {
          this.ignoreHidden_ = ignoreHidden;
        };


        /**
         * Returns the value of the <code>enableRetinaIcons</code> property.
         *
         * @return {boolean} True if enableRetinaIcons property is set.
         */
        MarkerClusterer.prototype.getEnableRetinaIcons = function () {
          return this.enableRetinaIcons_;
        };


        /**
         *  Sets the value of the <code>enableRetinaIcons</code> property.
         *
         *  @param {boolean} enableRetinaIcons The value of the enableRetinaIcons property.
         */
        MarkerClusterer.prototype.setEnableRetinaIcons = function (enableRetinaIcons) {
          this.enableRetinaIcons_ = enableRetinaIcons;
        };


        /**
         * Returns the value of the <code>imageExtension</code> property.
         *
         * @return {string} The value of the imageExtension property.
         */
        MarkerClusterer.prototype.getImageExtension = function () {
          return this.imageExtension_;
        };


        /**
         *  Sets the value of the <code>imageExtension</code> property.
         *
         *  @param {string} imageExtension The value of the imageExtension property.
         */
        MarkerClusterer.prototype.setImageExtension = function (imageExtension) {
          this.imageExtension_ = imageExtension;
        };


        /**
         * Returns the value of the <code>imagePath</code> property.
         *
         * @return {string} The value of the imagePath property.
         */
        MarkerClusterer.prototype.getImagePath = function () {
          return this.imagePath_;
        };


        /**
         *  Sets the value of the <code>imagePath</code> property.
         *
         *  @param {string} imagePath The value of the imagePath property.
         */
        MarkerClusterer.prototype.setImagePath = function (imagePath) {
          this.imagePath_ = imagePath;
        };


        /**
         * Returns the value of the <code>imageSizes</code> property.
         *
         * @return {Array} The value of the imageSizes property.
         */
        MarkerClusterer.prototype.getImageSizes = function () {
          return this.imageSizes_;
        };


        /**
         *  Sets the value of the <code>imageSizes</code> property.
         *
         *  @param {Array} imageSizes The value of the imageSizes property.
         */
        MarkerClusterer.prototype.setImageSizes = function (imageSizes) {
          this.imageSizes_ = imageSizes;
        };


        /**
         * Returns the value of the <code>calculator</code> property.
         *
         * @return {function} the value of the calculator property.
         */
        MarkerClusterer.prototype.getCalculator = function () {
          return this.calculator_;
        };


        /**
         * Sets the value of the <code>calculator</code> property.
         *
         * @param {function(Array.<google.maps.Marker>, number)} calculator The value
         *  of the calculator property.
         */
        MarkerClusterer.prototype.setCalculator = function (calculator) {
          this.calculator_ = calculator;
        };


        /**
         * Returns the value of the <code>batchSizeIE</code> property.
         *
         * @return {number} the value of the batchSizeIE property.
         */
        MarkerClusterer.prototype.getBatchSizeIE = function () {
          return this.batchSizeIE_;
        };


        /**
         * Sets the value of the <code>batchSizeIE</code> property.
         *
         *  @param {number} batchSizeIE The value of the batchSizeIE property.
         */
        MarkerClusterer.prototype.setBatchSizeIE = function (batchSizeIE) {
          this.batchSizeIE_ = batchSizeIE;
        };


        /**
         * Returns the value of the <code>clusterClass</code> property.
         *
         * @return {string} the value of the clusterClass property.
         */
        MarkerClusterer.prototype.getClusterClass = function () {
          return this.clusterClass_;
        };


        /**
         * Sets the value of the <code>clusterClass</code> property.
         *
         *  @param {string} clusterClass The value of the clusterClass property.
         */
        MarkerClusterer.prototype.setClusterClass = function (clusterClass) {
          this.clusterClass_ = clusterClass;
        };


        /**
         *  Returns the array of markers managed by the clusterer.
         *
         *  @return {Array} The array of markers managed by the clusterer.
         */
        MarkerClusterer.prototype.getMarkers = function () {
          return this.markers_;
        };


        /**
         *  Returns the number of markers managed by the clusterer.
         *
         *  @return {number} The number of markers.
         */
        MarkerClusterer.prototype.getTotalMarkers = function () {
          return this.markers_.length;
        };


        /**
         * Returns the current array of clusters formed by the clusterer.
         *
         * @return {Array} The array of clusters formed by the clusterer.
         */
        MarkerClusterer.prototype.getClusters = function () {
          return this.clusters_;
        };


        /**
         * Returns the number of clusters formed by the clusterer.
         *
         * @return {number} The number of clusters formed by the clusterer.
         */
        MarkerClusterer.prototype.getTotalClusters = function () {
          return this.clusters_.length;
        };


        /**
         * Adds a marker to the clusterer. The clusters are redrawn unless
         *  <code>opt_nodraw</code> is set to <code>true</code>.
         *
         * @param {google.maps.Marker} marker The marker to add.
         * @param {boolean} [opt_nodraw] Set to <code>true</code> to prevent redrawing.
         */
        MarkerClusterer.prototype.addMarker = function (marker, opt_nodraw) {
          this.pushMarkerTo_(marker);
          if (!opt_nodraw) {
            this.redraw_();
          }
        };


        /**
         * Adds an array of markers to the clusterer. The clusters are redrawn unless
         *  <code>opt_nodraw</code> is set to <code>true</code>.
         *
         * @param {Array.<google.maps.Marker>} markers The markers to add.
         * @param {boolean} [opt_nodraw] Set to <code>true</code> to prevent redrawing.
         */
        MarkerClusterer.prototype.addMarkers = function (markers, opt_nodraw) {
          var key;
          for (key in markers) {
            if (markers.hasOwnProperty(key)) {
              this.pushMarkerTo_(markers[key]);
            }
          }
          if (!opt_nodraw) {
            this.redraw_();
          }
        };


        /**
         * Pushes a marker to the clusterer.
         *
         * @param {google.maps.Marker} marker The marker to add.
         */
        MarkerClusterer.prototype.pushMarkerTo_ = function (marker) {
          // If the marker is draggable add a listener so we can update the clusters on the dragend:
          if (marker.getDraggable()) {
            var cMarkerClusterer = this;
            google.maps.event.addListener(marker, "dragend", function () {
              if (cMarkerClusterer.ready_) {
                this.isAdded = false;
                cMarkerClusterer.repaint();
              }
            });
          }
          marker.isAdded = false;
          this.markers_.push(marker);
        };


        /**
         * Removes a marker from the cluster.  The clusters are redrawn unless
         *  <code>opt_nodraw</code> is set to <code>true</code>. Returns <code>true</code> if the
         *  marker was removed from the clusterer.
         *
         * @param {google.maps.Marker} marker The marker to remove.
         * @param {boolean} [opt_nodraw] Set to <code>true</code> to prevent redrawing.
         * @return {boolean} True if the marker was removed from the clusterer.
         */
        MarkerClusterer.prototype.removeMarker = function (marker, opt_nodraw) {
          var removed = this.removeMarker_(marker);

          if (!opt_nodraw && removed) {
            this.repaint();
          }

          return removed;
        };


        /**
         * Removes an array of markers from the cluster. The clusters are redrawn unless
         *  <code>opt_nodraw</code> is set to <code>true</code>. Returns <code>true</code> if markers
         *  were removed from the clusterer.
         *
         * @param {Array.<google.maps.Marker>} markers The markers to remove.
         * @param {boolean} [opt_nodraw] Set to <code>true</code> to prevent redrawing.
         * @return {boolean} True if markers were removed from the clusterer.
         */
        MarkerClusterer.prototype.removeMarkers = function (markers, opt_nodraw) {
          var i, r;
          var removed = false;

          for (i = 0; i < markers.length; i++) {
            r = this.removeMarker_(markers[i]);
            removed = removed || r;
          }

          if (!opt_nodraw && removed) {
            this.repaint();
          }

          return removed;
        };


        /**
         * Removes a marker and returns true if removed, false if not.
         *
         * @param {google.maps.Marker} marker The marker to remove
         * @return {boolean} Whether the marker was removed or not
         */
        MarkerClusterer.prototype.removeMarker_ = function (marker) {
          var i;
          var index = -1;
          if (this.markers_.indexOf) {
            index = this.markers_.indexOf(marker);
          } else {
            for (i = 0; i < this.markers_.length; i++) {
              if (marker === this.markers_[i]) {
                index = i;
                break;
              }
            }
          }

          if (index === -1) {
            // Marker is not in our list of markers, so do nothing:
            return false;
          }

          marker.setMap(null);
          this.markers_.splice(index, 1); // Remove the marker from the list of managed markers
          return true;
        };


        /**
         * Removes all clusters and markers from the map and also removes all markers
         *  managed by the clusterer.
         */
        MarkerClusterer.prototype.clearMarkers = function () {
          this.resetViewport_(true);
          this.markers_ = [];
        };


        /**
         * Recalculates and redraws all the marker clusters from scratch.
         *  Call this after changing any properties.
         */
        MarkerClusterer.prototype.repaint = function () {
          var oldClusters = this.clusters_.slice();
          this.clusters_ = [];
          this.resetViewport_(false);
          this.redraw_();

          // Remove the old clusters.
          // Do it in a timeout to prevent blinking effect.
          setTimeout(function () {
            var i;
            for (i = 0; i < oldClusters.length; i++) {
              oldClusters[i].remove();
            }
          }, 0);
        };


        /**
         * Returns the current bounds extended by the grid size.
         *
         * @param {google.maps.LatLngBounds} bounds The bounds to extend.
         * @return {google.maps.LatLngBounds} The extended bounds.
         * @ignore
         */
        MarkerClusterer.prototype.getExtendedBounds = function (bounds) {
          var projection = this.getProjection();

          // Turn the bounds into latlng.
          var tr = new google.maps.LatLng(bounds.getNorthEast().lat(),
            bounds.getNorthEast().lng());
          var bl = new google.maps.LatLng(bounds.getSouthWest().lat(),
            bounds.getSouthWest().lng());

          // Convert the points to pixels and the extend out by the grid size.
          var trPix = projection.fromLatLngToDivPixel(tr);
          trPix.x += this.gridSize_;
          trPix.y -= this.gridSize_;

          var blPix = projection.fromLatLngToDivPixel(bl);
          blPix.x -= this.gridSize_;
          blPix.y += this.gridSize_;

          // Convert the pixel points back to LatLng
          var ne = projection.fromDivPixelToLatLng(trPix);
          var sw = projection.fromDivPixelToLatLng(blPix);

          // Extend the bounds to contain the new bounds.
          bounds.extend(ne);
          bounds.extend(sw);

          return bounds;
        };


        /**
         * Redraws all the clusters.
         */
        MarkerClusterer.prototype.redraw_ = function () {
          this.createClusters_(0);
        };


        /**
         * Removes all clusters from the map. The markers are also removed from the map
         *  if <code>opt_hide</code> is set to <code>true</code>.
         *
         * @param {boolean} [opt_hide] Set to <code>true</code> to also remove the markers
         *  from the map.
         */
        MarkerClusterer.prototype.resetViewport_ = function (opt_hide) {
          var i, marker;
          // Remove all the clusters
          for (i = 0; i < this.clusters_.length; i++) {
            this.clusters_[i].remove();
          }
          this.clusters_ = [];

          // Reset the markers to not be added and to be removed from the map.
          for (i = 0; i < this.markers_.length; i++) {
            marker = this.markers_[i];
            marker.isAdded = false;
            if (opt_hide) {
              marker.setMap(null);
            }
          }
        };


        /**
         * Calculates the distance between two latlng locations in km.
         *
         * @param {google.maps.LatLng} p1 The first lat lng point.
         * @param {google.maps.LatLng} p2 The second lat lng point.
         * @return {number} The distance between the two points in km.
         * @see http://www.movable-type.co.uk/scripts/latlong.html
         */
        MarkerClusterer.prototype.distanceBetweenPoints_ = function (p1, p2) {
          var R = 6371; // Radius of the Earth in km
          var dLat = (p2.lat() - p1.lat()) * Math.PI / 180;
          var dLon = (p2.lng() - p1.lng()) * Math.PI / 180;
          var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
          var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
          var d = R * c;
          return d;
        };


        /**
         * Determines if a marker is contained in a bounds.
         *
         * @param {google.maps.Marker} marker The marker to check.
         * @param {google.maps.LatLngBounds} bounds The bounds to check against.
         * @return {boolean} True if the marker is in the bounds.
         */
        MarkerClusterer.prototype.isMarkerInBounds_ = function (marker, bounds) {
          return bounds.contains(marker.getPosition());
        };


        /**
         * Adds a marker to a cluster, or creates a new cluster.
         *
         * @param {google.maps.Marker} marker The marker to add.
         */
        MarkerClusterer.prototype.addToClosestCluster_ = function (marker) {
          var i, d, cluster, center;
          var distance = 40000; // Some large number
          var clusterToAddTo = null;
          for (i = 0; i < this.clusters_.length; i++) {
            cluster = this.clusters_[i];
            center = cluster.getCenter();
            if (center) {
              d = this.distanceBetweenPoints_(center, marker.getPosition());
              if (d < distance) {
                distance = d;
                clusterToAddTo = cluster;
              }
            }
          }

          if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) {
            clusterToAddTo.addMarker(marker);
          } else {
            cluster = new Cluster(this);
            cluster.addMarker(marker);
            this.clusters_.push(cluster);
          }
        };


        /**
         * Creates the clusters. This is done in batches to avoid timeout errors
         *  in some browsers when there is a huge number of markers.
         *
         * @param {number} iFirst The index of the first marker in the batch of
         *  markers to be added to clusters.
         */
        MarkerClusterer.prototype.createClusters_ = function (iFirst) {
          var i, marker;
          var mapBounds;
          var cMarkerClusterer = this;
          if (!this.ready_) {
            return;
          }

          // Cancel previous batch processing if we're working on the first batch:
          if (iFirst === 0) {
            /**
             * This event is fired when the <code>MarkerClusterer</code> begins
             *  clustering markers.
             * @name MarkerClusterer#clusteringbegin
             * @param {MarkerClusterer} mc The MarkerClusterer whose markers are being clustered.
             * @event
             */
            google.maps.event.trigger(this, "clusteringbegin", this);

            if (typeof this.timerRefStatic !== "undefined") {
              clearTimeout(this.timerRefStatic);
              delete this.timerRefStatic;
            }
          }

          // Get our current map view bounds.
          // Create a new bounds object so we don't affect the map.
          //
          // See Comments 9 & 11 on Issue 3651 relating to this workaround for a Google Maps bug:
          if (this.getMap().getZoom() > 3) {
            mapBounds = new google.maps.LatLngBounds(this.getMap().getBounds().getSouthWest(),
              this.getMap().getBounds().getNorthEast());
          } else {
            mapBounds = new google.maps.LatLngBounds(new google.maps.LatLng(85.02070771743472, -178.48388434375), new google.maps.LatLng(-85.08136444384544, 178.00048865625));
          }
          var bounds = this.getExtendedBounds(mapBounds);

          var iLast = Math.min(iFirst + this.batchSize_, this.markers_.length);

          for (i = iFirst; i < iLast; i++) {
            marker = this.markers_[i];
            if (!marker.isAdded && this.isMarkerInBounds_(marker, bounds)) {
              if (!this.ignoreHidden_ || (this.ignoreHidden_ && marker.getVisible())) {
                this.addToClosestCluster_(marker);
              }
            }
          }

          if (iLast < this.markers_.length) {
            this.timerRefStatic = setTimeout(function () {
              cMarkerClusterer.createClusters_(iLast);
            }, 0);
          } else {
            delete this.timerRefStatic;

            /**
             * This event is fired when the <code>MarkerClusterer</code> stops
             *  clustering markers.
             * @name MarkerClusterer#clusteringend
             * @param {MarkerClusterer} mc The MarkerClusterer whose markers are being clustered.
             * @event
             */
            google.maps.event.trigger(this, "clusteringend", this);
          }
        };


        /**
         * Extends an object's prototype by another's.
         *
         * @param {Object} obj1 The object to be extended.
         * @param {Object} obj2 The object to extend with.
         * @return {Object} The new extended object.
         * @ignore
         */
        MarkerClusterer.prototype.extend = function (obj1, obj2) {
          return (function (object) {
            var property;
            for (property in object.prototype) {
              this.prototype[property] = object.prototype[property];
            }
            return this;
          }).apply(obj1, [obj2]);
        };


        /**
         * The default function for determining the label text and style
         * for a cluster icon.
         *
         * @param {Array.<google.maps.Marker>} markers The array of markers represented by the cluster.
         * @param {number} numStyles The number of marker styles available.
         * @return {ClusterIconInfo} The information resource for the cluster.
         * @constant
         * @ignore
         */
        MarkerClusterer.CALCULATOR = function (markers, numStyles) {
          var index = 0;
          var title = "";
          var count = markers.length.toString();

          var dv = count;
          while (dv !== 0) {
            dv = parseInt(dv / 10, 10);
            index++;
          }

          index = Math.min(index, numStyles);
          return {
            text: count,
            index: index,
            title: title
          };
        };


        /**
         * The number of markers to process in one batch.
         *
         * @type {number}
         * @constant
         */
        MarkerClusterer.BATCH_SIZE = 2000;


        /**
         * The number of markers to process in one batch (IE only).
         *
         * @type {number}
         * @constant
         */
        MarkerClusterer.BATCH_SIZE_IE = 500;


        /**
         * The default root name for the marker cluster images.
         *
         * @type {string}
         * @constant
         */
        MarkerClusterer.IMAGE_PATH = "https://raw.githubusercontent.com/googlemaps/v3-utility-library/master/markerclustererplus/images/m";


        /**
         * The default extension name for the marker cluster images.
         *
         * @type {string}
         * @constant
         */
        MarkerClusterer.IMAGE_EXTENSION = "png";


        /**
         * The default array of sizes for the marker cluster images.
         *
         * @type {Array.<number>}
         * @constant
         */
        MarkerClusterer.IMAGE_SIZES = [53, 56, 66, 78, 90];

        module.exports = MarkerClusterer


        /***/
      }),
      /* 56 */
      /***/
      (function (module, exports, __webpack_require__) {

        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        /*!
        	  Copyright (c) 2016 Jed Watson.
        	  Licensed under the MIT License (MIT), see
        	  http://jedwatson.github.io/classnames
        	*/
        /* global define */

        (function () {
          'use strict';

          var hasOwn = {}.hasOwnProperty;

          function classNames() {
            var classes = [];

            for (var i = 0; i < arguments.length; i++) {
              var arg = arguments[i];
              if (!arg) continue;

              var argType = typeof arg;

              if (argType === 'string' || argType === 'number') {
                classes.push(arg);
              } else if (Array.isArray(arg)) {
                classes.push(classNames.apply(null, arg));
              } else if (argType === 'object') {
                for (var key in arg) {
                  if (hasOwn.call(arg, key) && arg[key]) {
                    classes.push(key);
                  }
                }
              }
            }

            return classes.join(' ');
          }

          if (typeof module !== 'undefined' && module.exports) {
            module.exports = classNames;
          } else if (true) {
            // register as 'classnames', consistent with npm package name
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
              return classNames;
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else {
            window.classNames = classNames;
          }
        }());


        /***/
      }),
      /* 57 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        var _SingleList = __webpack_require__(58);

        var _SingleList2 = _interopRequireDefault(_SingleList);

        var _MultiList = __webpack_require__(82);

        var _MultiList2 = _interopRequireDefault(_MultiList);

        var _SingleDataList = __webpack_require__(83);

        var _SingleDataList2 = _interopRequireDefault(_SingleDataList);

        var _MultiDataList = __webpack_require__(85);

        var _MultiDataList2 = _interopRequireDefault(_MultiDataList);

        var _SingleDropdownList = __webpack_require__(86);

        var _SingleDropdownList2 = _interopRequireDefault(_SingleDropdownList);

        var _MultiDropdownList = __webpack_require__(100);

        var _MultiDropdownList2 = _interopRequireDefault(_MultiDropdownList);

        var _RangeSlider = __webpack_require__(101);

        var _RangeSlider2 = _interopRequireDefault(_RangeSlider);

        var _TextField = __webpack_require__(254);

        var _TextField2 = _interopRequireDefault(_TextField);

        var _DataSearch = __webpack_require__(255);

        var _DataSearch2 = _interopRequireDefault(_DataSearch);

        var _SingleRange = __webpack_require__(269);

        var _SingleRange2 = _interopRequireDefault(_SingleRange);

        var _MultiRange = __webpack_require__(270);

        var _MultiRange2 = _interopRequireDefault(_MultiRange);

        var _SingleDropdownRange = __webpack_require__(271);

        var _SingleDropdownRange2 = _interopRequireDefault(_SingleDropdownRange);

        var _MultiDropdownRange = __webpack_require__(272);

        var _MultiDropdownRange2 = _interopRequireDefault(_MultiDropdownRange);

        var _ToggleButton = __webpack_require__(273);

        var _ToggleButton2 = _interopRequireDefault(_ToggleButton);

        var _DatePicker = __webpack_require__(274);

        var _DatePicker2 = _interopRequireDefault(_DatePicker);

        var _DateRange = __webpack_require__(455);

        var _DateRange2 = _interopRequireDefault(_DateRange);

        var _NumberBox = __webpack_require__(456);

        var _NumberBox2 = _interopRequireDefault(_NumberBox);

        var _ReactiveList = __webpack_require__(457);

        var _ReactiveList2 = _interopRequireDefault(_ReactiveList);

        var _ReactiveElement = __webpack_require__(463);

        var _ReactiveElement2 = _interopRequireDefault(_ReactiveElement);

        var _PoweredBy = __webpack_require__(459);

        var _PoweredBy2 = _interopRequireDefault(_PoweredBy);

        var _DataController = __webpack_require__(464);

        var _DataController2 = _interopRequireDefault(_DataController);

        var _SelectedFilters = __webpack_require__(465);

        var _SelectedFilters2 = _interopRequireDefault(_SelectedFilters);

        var _InitialLoader = __webpack_require__(80);

        var _InitialLoader2 = _interopRequireDefault(_InitialLoader);

        var _NoResults = __webpack_require__(460);

        var _NoResults2 = _interopRequireDefault(_NoResults);

        var _ResultStats = __webpack_require__(461);

        var _ResultStats2 = _interopRequireDefault(_ResultStats);

        var _ReactiveBase = __webpack_require__(466);

        var _ReactiveBase2 = _interopRequireDefault(_ReactiveBase);

        var _ChannelManager = __webpack_require__(63);

        var _ChannelManager2 = _interopRequireDefault(_ChannelManager);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        // addons
        // sensors
        var helper = __webpack_require__(65);

        // middleware


        module.exports = {
          SingleList: _SingleList2.default,
          MultiList: _MultiList2.default,
          SingleDataList: _SingleDataList2.default,
          MultiDataList: _MultiDataList2.default,
          SingleDropdownList: _SingleDropdownList2.default,
          MultiDropdownList: _MultiDropdownList2.default,
          RangeSlider: _RangeSlider2.default,
          TextField: _TextField2.default,
          DataSearch: _DataSearch2.default,
          SingleRange: _SingleRange2.default,
          MultiRange: _MultiRange2.default,
          SingleDropdownRange: _SingleDropdownRange2.default,
          MultiDropdownRange: _MultiDropdownRange2.default,
          ToggleButton: _ToggleButton2.default,
          DatePicker: _DatePicker2.default,
          DateRange: _DateRange2.default,
          NumberBox: _NumberBox2.default,
          ReactiveBase: _ReactiveBase2.default,
          ReactiveList: _ReactiveList2.default,
          ReactiveElement: _ReactiveElement2.default,
          AppbaseChannelManager: _ChannelManager2.default,
          AppbaseSensorHelper: helper,
          PoweredBy: _PoweredBy2.default,
          DataController: _DataController2.default,
          TYPES: TYPES,
          InitialLoader: _InitialLoader2.default,
          NoResults: _NoResults2.default,
          ResultStats: _ResultStats2.default,
          SelectedFilters: _SelectedFilters2.default
        };

        /***/
      }),
      /* 58 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        exports.default = SingleList;

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _NativeList = __webpack_require__(59);

        var _NativeList2 = _interopRequireDefault(_NativeList);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function SingleList(props) {
          return _react2.default.createElement(_NativeList2.default, _extends({}, props, {
            component: "SingleList",
            multipleSelect: false
          }));
        }

        SingleList.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          defaultSelected: _react2.default.PropTypes.string,
          size: _react2.default.PropTypes.number,
          showCount: _react2.default.PropTypes.bool,
          sortBy: _react2.default.PropTypes.string,
          showSearch: _react2.default.PropTypes.bool,
          placeholder: _react2.default.PropTypes.string,
          customQuery: _react2.default.PropTypes.func,
          initialLoader: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          react: _react2.default.PropTypes.object,
          componentStyle: _react2.default.PropTypes.object,
          showRadio: _react2.default.PropTypes.bool,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        SingleList.defaultProps = {
          showCount: true,
          sort: "count",
          size: 100,
          showSearch: false,
          title: null,
          placeholder: "Search",
          componentStyle: {},
          showRadio: true,
          URLParams: false
        };

        // context type
        SingleList.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired
        };

        SingleList.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.KEYWORD,
          react: TYPES.OBJECT,
          title: TYPES.STRING,
          defaultSelected: TYPES.STRING,
          size: TYPES.NUMBER,
          sortBy: TYPES.STRING,
          showCount: TYPES.BOOLEAN,
          showSearch: TYPES.BOOLEAN,
          placeholder: TYPES.STRING,
          customQuery: TYPES.FUNCTION,
          initialLoader: TYPES.OBJECT,
          componentStyle: TYPES.OBJECT,
          URLParams: TYPES.BOOLEAN,
          showRadio: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 59 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _ItemCheckboxList = __webpack_require__(60);

        var _ItemCheckboxList2 = _interopRequireDefault(_ItemCheckboxList);

        var _ItemList = __webpack_require__(62);

        var _ItemList2 = _interopRequireDefault(_ItemList);

        var _ChannelManager = __webpack_require__(63);

        var _ChannelManager2 = _interopRequireDefault(_ChannelManager);

        var _StaticSearch = __webpack_require__(79);

        var _InitialLoader = __webpack_require__(80);

        var _InitialLoader2 = _interopRequireDefault(_InitialLoader);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint max-lines: 0 */


        var helper = __webpack_require__(65);

        var NativeList = function (_Component) {
          _inherits(NativeList, _Component);

          function NativeList(props) {
            _classCallCheck(this, NativeList);

            var _this = _possibleConstructorReturn(this, (NativeList.__proto__ || Object.getPrototypeOf(NativeList)).call(this, props));

            _this.state = {
              items: [],
              storedItems: [],
              rawData: {
                hits: {
                  hits: []
                }
              },
              queryStart: false,
              defaultSelected: null,
              selectAll: false
            };
            _this.sortObj = {
              aggSort: _this.props.sortBy
            };
            _this.selectAllWhenReady = false;
            _this.previousSelectedSensor = {};
            _this.channelId = null;
            _this.channelListener = null;
            _this.urlParams = helper.URLParams.get(_this.props.componentId, _this.props.multipleSelect);
            _this.handleSelect = _this.handleSelect.bind(_this);
            _this.handleRemove = _this.handleRemove.bind(_this);
            _this.filterBySearch = _this.filterBySearch.bind(_this);
            _this.onSelectAll = _this.onSelectAll.bind(_this);
            _this.type = _this.props.multipleSelect ? "terms" : "term";
            _this.customQuery = _this.customQuery.bind(_this);
            _this.defaultCustomQuery = _this.defaultCustomQuery.bind(_this);
            return _this;
          }

          // Get the items from Appbase when component is mounted


          _createClass(NativeList, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.size = this.props.size;
              this.setQueryInfo();
              if (this.urlParams === null) {
                var value = this.props.multipleSelect ? null : null;
                this.handleSelect(value);
              } else {
                this.handleSelect(this.urlParams);
              }
              this.createChannel(true);
              this.defaultValue = this.urlParams !== null ? this.urlParams : this.props.defaultSelected;
              this.changeValues(this.defaultValue);
              this.listenFilter();
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              this.defaultValue = this.urlParams !== null ? nextProps.urlParams : nextProps.defaultSelected;
              this.changeValues(this.defaultValue);
            }

            // build query for this sensor only
            // execute either user defined customQuery or component default query
            // customQuery will receive 2 arguments, selected sensor value and select all.

          }, {
            key: "customQuery",
            value: function customQuery(value) {
              var defaultQuery = this.props.customQuery ? this.props.customQuery : this.defaultCustomQuery;
              return defaultQuery(value);
            }
          }, {
            key: "defaultCustomQuery",
            value: function defaultCustomQuery(value) {
              var query = null;
              if (this.state.selectAll) {
                query = {
                  exists: {
                    field: [this.props.appbaseField]
                  }
                };
              } else if (value) {
                var listQuery = _defineProperty({}, this.type, _defineProperty({}, this.props.appbaseField, value));
                query = this.props.multipleSelect ? value.length ? listQuery : null : listQuery;
              }
              return query;
            }
          }, {
            key: "changeValues",
            value: function changeValues(defaultValue) {
              var _this2 = this;

              var items = this.state.items;
              if (this.props.selectAllLabel && defaultValue === this.props.selectAllLabel) {
                this.selectAllWhenReady = true;
              } else if (defaultValue !== undefined) {
                items = items.map(function (item) {
                  item.key = item.key.toString();
                  item.status = defaultValue && defaultValue.indexOf(item.key) > -1 || _this2.selectedValue && _this2.selectedValue.indexOf(item.key) > -1;
                  return item;
                });
                this.setState({
                  items: items,
                  storedItems: items
                });
                this.handleSelect(defaultValue);
              }
              if (this.sortBy !== this.props.sortBy) {
                this.sortBy = this.props.sortBy;
                this.handleSortSelect();
              }
              if (this.size !== this.props.size) {
                this.size = this.props.size;
                this.removeChannel();
                this.createChannel();
              }
            }

            // stop streaming request and remove listener when component will unmount

          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              this.removeChannel();
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this3 = this;

              this.filterListener = helper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this3.props.componentId) {
                  _this3.changeValues(null);
                }
              });
            }
          }, {
            key: "removeChannel",
            value: function removeChannel() {
              if (this.channelId) {
                _ChannelManager2.default.stopStream(this.channelId);
              }
              if (this.channelListener) {
                this.channelListener.remove();
              }
              if (this.loadListener) {
                this.loadListener.remove();
              }
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField,
                  customQuery: this.customQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: this.props.component
                }
              };
              helper.selectedSensor.setSensorInfo(obj);
            }
          }, {
            key: "includeAggQuery",
            value: function includeAggQuery() {
              var obj = {
                key: this.props.componentId + "-sort",
                value: this.sortObj
              };
              helper.selectedSensor.setSortInfo(obj);
            }
          }, {
            key: "handleSortSelect",
            value: function handleSortSelect() {
              this.sortObj = {
                aggSort: this.props.sortBy
              };
              var obj = {
                key: this.props.componentId + "-sort",
                value: this.sortObj
              };
              helper.selectedSensor.set(obj, true, "sortChange");
            }

            // Create a channel which passes the react and receive results whenever react changes

          }, {
            key: "createChannel",
            value: function createChannel() {
              var _this4 = this;

              var executeChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              // Set the react - add self aggs query as well with react
              var react = this.props.react ? this.props.react : {};
              react.aggs = {
                key: this.props.appbaseField,
                sort: this.props.sortBy,
                size: this.props.size,
                sortRef: this.props.componentId + "-sort"
              };
              var reactAnd = [this.props.componentId + "-sort", "nativeListChanges"];
              react = helper.setupReact(react, reactAnd);
              this.includeAggQuery();
              // create a channel and listen the changes
              var channelObj = _ChannelManager2.default.create(this.context.appbaseRef, this.context.type, react, 100, 0, false, this.props.componentId);
              this.channelId = channelObj.channelId;
              this.channelListener = channelObj.emitter.addListener(this.channelId, function (res) {
                if (res.error) {
                  _this4.setState({
                    queryStart: false
                  });
                }
                if (res.appliedQuery) {
                  var data = res.data;
                  var rawData = void 0;
                  if (res.mode === "streaming") {
                    rawData = _this4.state.rawData;
                    rawData.hits.hits.push(res.data);
                  } else if (res.mode === "historic") {
                    rawData = data;
                  }
                  _this4.setState({
                    queryStart: false,
                    rawData: rawData
                  });
                  _this4.setData(rawData);
                }
              });
              if (executeChannel) {
                setTimeout(function () {
                  var obj = {
                    key: "nativeListChanges",
                    value: ""
                  };
                  helper.selectedSensor.set(obj, true);
                }, 100);
              }
              this.listenLoadingChannel(channelObj);
            }
          }, {
            key: "listenLoadingChannel",
            value: function listenLoadingChannel(channelObj) {
              var _this5 = this;

              this.loadListener = channelObj.emitter.addListener(channelObj.channelId + "-query", function (res) {
                if (res.appliedQuery) {
                  _this5.setState({
                    queryStart: res.queryState
                  });
                }
              });
            }
          }, {
            key: "setData",
            value: function setData(data) {
              if (data.aggregations && data.aggregations[this.props.appbaseField] && data.aggregations[this.props.appbaseField].buckets) {
                this.addItemsToList(data.aggregations[this.props.appbaseField].buckets);
              }
            }
          }, {
            key: "addItemsToList",
            value: function addItemsToList(newItems) {
              var _this6 = this;

              var items = [];
              newItems.forEach(function (item) {
                var key = item.key.toString();
                if (key.trim() !== "") {
                  item.key = key;
                  item.status = !!(_this6.selectedValue && _this6.selectedValue.indexOf(item.key) > -1);
                  items.push(item);
                }
              });
              this.setState({
                items: items,
                storedItems: items
              }, function () {
                if (_this6.selectAllWhenReady) {
                  _this6.onSelectAll(_this6.props.selectAllLabel);
                }
              });
            }

            // Handler function when a value is selected

          }, {
            key: "handleSelect",
            value: function handleSelect(handleValue) {
              this.setValue(handleValue, true);
            }

            // Handler function when a value is deselected or removed

          }, {
            key: "handleRemove",
            value: function handleRemove(value) {
              this.setValue(value, true);
            }

            // set value

          }, {
            key: "setValue",
            value: function setValue(value) {
              var _this7 = this;

              var isExecuteQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

              var onUpdate = function onUpdate() {
                if (_this7.props.onValueChange) {
                  _this7.props.onValueChange(obj.value);
                }
                var selectedValue = typeof value === "string" ? value.trim() ? value : null : value;
                helper.URLParams.update(_this7.props.componentId, selectedValue, _this7.props.URLParams);
                helper.selectedSensor.set(obj, isExecuteQuery);
              };

              var obj = {
                key: this.props.componentId,
                value: value
              };
              this.selectedValue = value;
              if (this.props.multipleSelect) {
                var items = this.state.items.map(function (item) {
                  if (value && value.indexOf(item.key) > -1) {
                    item.status = true;
                  } else {
                    item.status = false;
                  }
                  return item;
                });
                value = value && value.length ? value : null;
                obj.value = value;
                var isSelectAll = !!(this.selectedValue && this.selectedValue.indexOf(this.props.selectAllLabel) >= 0);
                this.setState({
                  items: items,
                  defaultSelected: isSelectAll ? [this.props.selectAllLabel] : this.selectedValue,
                  selectAll: isSelectAll
                }, function () {
                  onUpdate();
                });
              } else {
                this.setState({
                  defaultSelected: this.selectedValue,
                  selectAll: this.selectedValue && this.selectedValue === this.props.selectAllLabel
                }, function () {
                  onUpdate();
                });
              }
            }
          }, {
            key: "onSelectAll",
            value: function onSelectAll(selectedValue) {
              var _this8 = this;

              var items = this.state.items.map(function (item) {
                item.status = true;
                return item;
              });
              this.selectedValue = selectedValue;
              this.setState({
                items: items,
                storedItems: items,
                selectAll: true
              }, function () {
                _this8.setValue(selectedValue, true);
              });
            }

            // filter

          }, {
            key: "filterBySearch",
            value: function filterBySearch(value) {
              if (value) {
                var items = this.state.storedItems.map(function (item) {
                  item.visible = !!(item.key && item.key.toLowerCase().indexOf(value.toLowerCase()) > -1);
                  return item;
                });
                this.setState({
                  items: items
                });
              } else {
                var _items = this.state.storedItems.map(function (item) {
                  item.visible = true;
                  return item;
                });
                this.setState({
                  items: _items
                });
              }
            }
          }, {
            key: "render",
            value: function render() {
              // Checking if component is single select or multiple select
              var listComponent = void 0,
                searchComponent = null,
                title = null;

              if (this.state.items.length === 0) {
                return null;
              }

              if (this.props.multipleSelect) {
                listComponent = _react2.default.createElement(_ItemCheckboxList2.default, {
                  items: this.state.items,
                  onSelect: this.handleSelect,
                  onRemove: this.handleRemove,
                  showCount: this.props.showCount,
                  showCheckbox: this.props.showCheckbox,
                  defaultSelected: this.state.defaultSelected,
                  selectAllLabel: this.props.selectAllLabel,
                  selectAll: this.state.selectAll,
                  onSelectAll: this.onSelectAll
                });
              } else {
                listComponent = _react2.default.createElement(_ItemList2.default, {
                  items: this.state.items,
                  onSelect: this.handleSelect,
                  onRemove: this.handleRemove,
                  showCount: this.props.showCount,
                  showRadio: this.props.showRadio,
                  defaultSelected: this.state.defaultSelected,
                  selectAllLabel: this.props.selectAllLabel,
                  selectAll: this.state.selectAll,
                  onSelectAll: this.onSelectAll
                });
              }

              // set static search
              if (this.props.showSearch) {
                searchComponent = _react2.default.createElement(_StaticSearch.StaticSearch, {
                  placeholder: this.props.placeholder,
                  changeCallback: this.filterBySearch
                });
              }

              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-search-active": this.props.showSearch,
                "rbc-search-inactive": !this.props.showSearch,
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-placeholder-active": this.props.placeholder,
                "rbc-placeholder-inactive": !this.props.placeholder,
                "rbc-singlelist": !this.props.multipleSelect,
                "rbc-multilist": this.props.multipleSelect,
                "rbc-initialloader-active": this.props.initialLoader,
                "rbc-initialloader-inactive": !this.props.initialLoader
              });

              return _react2.default.createElement(
                "div", { className: "rbc col s12 col-xs-12 card thumbnail " + cx, style: this.props.componentStyle },
                title,
                searchComponent,
                listComponent,
                this.props.initialLoader && this.state.queryStart ? _react2.default.createElement(_InitialLoader2.default, { defaultText: this.props.initialLoader }) : null
              );
            }
          }]);

          return NativeList;
        }(_react.Component);

        exports.default = NativeList;


        NativeList.propTypes = {
          appbaseField: _react2.default.PropTypes.string.isRequired,
          componentId: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          size: helper.sizeValidation,
          showCount: _react2.default.PropTypes.bool,
          multipleSelect: _react2.default.PropTypes.bool,
          sortBy: _react2.default.PropTypes.oneOf(["asc", "desc", "count"]),
          showSearch: _react2.default.PropTypes.bool,
          placeholder: _react2.default.PropTypes.string,
          selectAllLabel: _react2.default.PropTypes.string,
          customQuery: _react2.default.PropTypes.func,
          initialLoader: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          defaultSelected: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.number, _react2.default.PropTypes.array]),
          react: _react2.default.PropTypes.object,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          showRadio: _react2.default.PropTypes.bool,
          showCheckbox: _react2.default.PropTypes.bool,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        NativeList.defaultProps = {
          showCount: true,
          multipleSelect: true,
          sortBy: "count",
          size: 100,
          showSearch: false,
          title: null,
          placeholder: "Search",
          selectAllLabel: null,
          componentStyle: {},
          showRadio: true,
          showCheckbox: true,
          URLParams: false,
          allowFilter: true
        };

        // context type
        NativeList.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        /***/
      }),
      /* 60 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _ListItem = __webpack_require__(61);

        var _ListItem2 = _interopRequireDefault(_ListItem);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var ItemCheckboxList = function (_Component) {
          _inherits(ItemCheckboxList, _Component);

          function ItemCheckboxList(props) {
            _classCallCheck(this, ItemCheckboxList);

            var _this = _possibleConstructorReturn(this, (ItemCheckboxList.__proto__ || Object.getPrototypeOf(ItemCheckboxList)).call(this, props));

            _this.state = {
              selectedItems: [],
              selectAll: false
            };
            _this.refStore = {};
            _this.handleListClick = _this.handleListClick.bind(_this);
            _this.removeItem = _this.removeItem.bind(_this);
            _this.handleListClickAll = _this.handleListClickAll.bind(_this);
            return _this;
          }

          _createClass(ItemCheckboxList, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              var _this2 = this;

              if (Array.isArray(this.props.defaultSelected)) {
                if (this.props.defaultSelected.indexOf(this.props.selectAllLabel) >= 0) {
                  this.handleListClickAll(this.props.selectAllLabel, true);
                } else {
                  var items = [];
                  this.props.items.forEach(function (item) {
                    if (_this2.props.defaultSelected.indexOf(item.key) >= 0) {
                      items.push(item.key);
                    }
                  });
                  this.setState({
                    selectedItems: items.length ? items : null
                  }, function () {
                    _this2.props.onSelect(_this2.state.selectedItems);
                  });
                }
              }
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              if (nextProps.defaultSelected === null && !nextProps.selectAll) {
                this.setState({
                  selectedItems: []
                });
              }
            }

            // Handler function when a checkbox is clicked

          }, {
            key: "handleListClick",
            value: function handleListClick(value, selectedStatus) {
              var _this3 = this;

              var updated = void 0;
              // If the checkbox selectedStatus is true, then update selectedItems array
              if (selectedStatus) {
                updated = this.state.selectedItems;
                updated.push(value);
                this.setState({
                  selectedItems: updated
                }, function () {
                  _this3.props.onSelect(updated);
                });
              } else {
                // If the checkbox selectedStatus is false
                // Call removeItem to remove it from the selected Items
                this.removeItem(value);
              }
            }

            // Handler function when a cancel button on tag is clicked to remove it

          }, {
            key: "removeItem",
            value: function removeItem(value) {
              var _this4 = this;

              // Pass the older value props to parent components to remove older list in terms query
              var keyRef = value.toString().replace(/ /g, "_");
              var ref = "ref" + keyRef;
              var checkboxElement = this.refStore[ref];
              checkboxElement.state.status = false;

              var updated = this.state.selectedItems;
              var index = updated.indexOf(value);
              updated.splice(index, 1);

              if (this.state.selectAll) {
                index = updated.indexOf(this.props.selectAllLabel);
                updated.splice(index, 1);
              }

              this.setState({
                selectedItems: updated,
                selectAll: false
              }, function () {
                _this4.props.onRemove(_this4.state.selectedItems);
              });
            }
          }, {
            key: "getSelectedItems",
            value: function getSelectedItems() {
              // let selectedItems = this.state.selectedItems ? this.state.selectedItems : [];
              var selectedItems = [];
              this.props.items.forEach(function (item) {
                if (item.status && selectedItems.indexOf(item.key) < 0) {
                  selectedItems.push(item.key);
                }
              });

              return selectedItems;
            }

            // handler function for select all

          }, {
            key: "handleListClickAll",
            value: function handleListClickAll(value, selectedStatus) {
              var _this5 = this;

              if (selectedStatus) {
                var selectedItems = this.props.items.map(function (item) {
                  return item.key;
                });
                selectedItems = selectedStatus ? selectedItems : [];
                this.setState({
                  selectedItems: [this.props.selectAllLabel].concat(_toConsumableArray(selectedItems)),
                  selectAll: true
                }, function () {
                  _this5.props.onSelectAll(value);
                });
              } else {
                this.setState({
                  selectedItems: []
                }, function () {
                  _this5.props.onSelect(null);
                });
              }
            }
          }, {
            key: "render",
            value: function render() {
              var _this6 = this;

              var items = this.props.items;
              var ListItemsArray = [];
              // Build the array for the checkboxList items
              items.forEach(function (item, index) {
                try {
                  item.keyRef = item.key.replace(/ /g, "_");
                } catch (e) {
                  item.keyRef = index;
                }
                var visibleFlag = !("visible" in item) ? true : !!item.visible;
                ListItemsArray.push(_react2.default.createElement(_ListItem2.default, {
                  key: item.keyRef,
                  value: item.key,
                  doc_count: item.doc_count,
                  countField: _this6.props.showCount,
                  handleClick: _this6.handleListClick,
                  visible: visibleFlag,
                  showCheckbox: _this6.props.showCheckbox,
                  status: _this6.state.selectedItems.indexOf(item.key) >= 0,
                  ref: function ref(listitem) {
                    var currentItemRef = "ref" + item.keyRef;
                    _this6.refStore[currentItemRef] = listitem;
                  }
                }));
              });
              // include select all if set from parent
              if (this.props.selectAllLabel && items && items.length) {
                ListItemsArray.unshift(_react2.default.createElement(_ListItem2.default, {
                  key: "selectall",
                  value: this.props.selectAllLabel,
                  countField: false,
                  visible: true,
                  showCheckbox: this.props.showCheckbox,
                  handleClick: this.handleListClickAll,
                  status: this.props.selectAll,
                  ref: function ref(listitem) {
                    _this6.refStore.refselectall = listitem;
                  }
                }));
              }

              return _react2.default.createElement(
                "div", { className: "rbc-list-container col s12 col-xs-12" },
                _react2.default.createElement(
                  "div", { className: "row" },
                  ListItemsArray
                )
              );
            }
          }]);

          return ItemCheckboxList;
        }(_react.Component);

        exports.default = ItemCheckboxList;


        ItemCheckboxList.propTypes = {
          defaultSelected: _react2.default.PropTypes.array,
          items: _react2.default.PropTypes.array,
          onRemove: _react2.default.PropTypes.func,
          onSelect: _react2.default.PropTypes.func,
          onSelectAll: _react2.default.PropTypes.func,
          selectAllLabel: _react2.default.PropTypes.string,
          selectAll: _react2.default.PropTypes.bool,
          showCount: _react2.default.PropTypes.bool,
          defaultSelectall: _react2.default.PropTypes.bool
        };

        /***/
      }),
      /* 61 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var ListItem = function (_Component) {
          _inherits(ListItem, _Component);

          function ListItem(props) {
            _classCallCheck(this, ListItem);

            var _this = _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).call(this, props));

            _this.state = {
              initialStatus: _this.props.status,
              status: _this.props.status || false
            };
            _this.handleCheckboxChange = _this.handleCheckboxChange.bind(_this);
            return _this;
          }

          _createClass(ListItem, [{
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
              if (this.props.status !== this.state.initialStatus) {
                this.setState({
                  status: this.props.status,
                  initialStatus: this.props.status
                });
              }
            }
          }, {
            key: "handleClick",
            value: function handleClick() {
              this.setState({
                status: !this.state.status
              });
              this.props.handleClick(this.props.value, !this.state.status);
            }
          }, {
            key: "handleCheckboxChange",
            value: function handleCheckboxChange(event) {
              this.setState({
                status: event.target.checked
              });
            }
          }, {
            key: "render",
            value: function render() {
              var count = void 0;
              if (this.props.countField) {
                count = _react2.default.createElement(
                  "span", { className: "rbc-count" },
                  " ",
                  this.props.doc_count,
                  " "
                );
              }

              if (this.props.value.trim() === "") {
                return null;
              }

              var cx = (0, _classnames2.default)({
                "rbc-count-active": this.props.countField,
                "rbc-count-inactive": !this.props.countField,
                "rbc-checkbox-active": this.props.showCheckbox,
                "rbc-checkbox-inactive": !this.props.showCheckbox,
                "rbc-list-item-active": this.state.status,
                "rbc-list-item-inactive": !this.state.status
              });

              return _react2.default.createElement(
                "div", { onClick: this.handleClick.bind(this), className: "rbc-list-item row " + cx },
                _react2.default.createElement("input", {
                  type: "checkbox",
                  className: "rbc-checkbox-item",
                  checked: this.state.status,
                  onChange: this.handleCheckboxChange
                }),
                _react2.default.createElement(
                  "label", { className: "rbc-label" },
                  this.props.value,
                  " ",
                  count
                )
              );
            }
          }]);

          return ListItem;
        }(_react.Component);

        exports.default = ListItem;


        ListItem.propTypes = {
          status: _react2.default.PropTypes.bool,
          handleClick: _react2.default.PropTypes.func,
          value: _react2.default.PropTypes.string,
          countField: _react2.default.PropTypes.bool,
          doc_count: _react2.default.PropTypes.number
        };

        /***/
      }),
      /* 62 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var ItemList = function (_Component) {
          _inherits(ItemList, _Component);

          function ItemList(props) {
            _classCallCheck(this, ItemList);

            var _this = _possibleConstructorReturn(this, (ItemList.__proto__ || Object.getPrototypeOf(ItemList)).call(this, props));

            _this.state = {
              selectedItem: null
            };
            _this.defaultSelected = _this.props.defaultSelected;
            _this.defaultAllowed = true;
            _this.handleClick = _this.handleClick.bind(_this);
            _this.handleListClickAll = _this.handleListClickAll.bind(_this);
            return _this;
          }

          _createClass(ItemList, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              if (this.props.defaultSelected) {
                if (this.props.selectAllLabel === this.props.defaultSelected) {
                  this.handleListClickAll(this.props.defaultSelected, true);
                } else {
                  this.handleClick(this.props.defaultSelected, true);
                }
              }
            }
          }, {
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
              if (this.props.items.length && this.defaultAllowed) {
                this.defaultAllowed = false;
              }
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              if (nextProps.selectAll) {
                if (this.state.selectedItem !== nextProps.selectAllLabel) {
                  this.setState({
                    selectedItem: nextProps.selectAllLabel
                  });
                }
              } else if (nextProps.defaultSelected !== "undefined" && !Array.isArray(nextProps.defaultSelected) && this.defaultSelected !== nextProps.defaultSelected) {
                this.defaultSelected = nextProps.defaultSelected;
                if (nextProps.defaultSelected === null) {
                  this.setState({
                    selectedItem: null
                  });
                } else {
                  this.defaultSelection(nextProps.defaultSelected);
                }
              }
            }
          }, {
            key: "defaultSelection",
            value: function defaultSelection(defaultSelected) {
              if (defaultSelected === this.props.selectAllLabel) {
                this.handleListClickAll(this.props.selectAllLabel, true);
              } else {
                this.handleClick(defaultSelected, true);
              }
            }
          }, {
            key: "handleListClickAll",
            value: function handleListClickAll(value) {
              var _this2 = this;

              var execute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

              if (execute || this.defaultSelected !== value) {
                // const selectedItems = this.props.items.map(item => item.key);
                this.setState({
                  selectedItem: value
                }, function () {
                  _this2.props.onSelectAll(value);
                  _this2.defaultSelected = value;
                });
              } else {
                this.reset();
              }
            }

            // Handler function is called when the list item is clicked

          }, {
            key: "handleClick",
            value: function handleClick(value) {
              var _this3 = this;

              var execute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

              if (execute || this.defaultSelected !== value) {
                // Pass the new selected value to be added to the query
                this.setState({
                  selectedItem: value
                }, function () {
                  _this3.props.onSelect(value);
                  _this3.defaultSelected = value;
                });
              } else {
                this.reset();
              }
            }
          }, {
            key: "reset",
            value: function reset() {
              var _this4 = this;

              this.defaultSelected = null;
              this.setState({
                selectedItem: null
              }, function () {
                _this4.props.onSelect(null);
              });
            }
          }, {
            key: "renderItemsComponent",
            value: function renderItemsComponent() {
              var _this5 = this;

              var items = this.props.items;
              var itemsComponent = [];
              // Build the array of components for each item
              items.forEach(function (item) {
                var visibleFlag = !item.hasOwnProperty("visible") ? true : !!item.visible;
                itemsComponent.push(_react2.default.createElement(ItemRow, {
                  key: item.key,
                  value: item.key,
                  doc_count: item.doc_count,
                  countField: _this5.props.showCount,
                  handleClick: _this5.handleClick,
                  visible: visibleFlag,
                  showRadio: _this5.props.showRadio,
                  selectedItem: _this5.state.selectedItem
                }));
              });

              // include select all if set from parent
              if (this.props.selectAllLabel && items && items.length) {
                itemsComponent.unshift(_react2.default.createElement(ItemRow, {
                  key: "selectall",
                  visible: true,
                  value: this.props.selectAllLabel,
                  countField: false,
                  showRadio: this.props.showRadio,
                  handleClick: this.handleListClickAll,
                  selectedItem: this.state.selectedItem,
                  ref: "refselectall"
                }));
              }

              return itemsComponent;
            }
          }, {
            key: "render",
            value: function render() {
              return _react2.default.createElement(
                "div", { className: "rbc-list-container col s12 col-xs-12" },
                this.renderItemsComponent()
              );
            }
          }]);

          return ItemList;
        }(_react.Component);

        exports.default = ItemList;

        var ItemRow = function (_Component2) {
          _inherits(ItemRow, _Component2);

          function ItemRow() {
            _classCallCheck(this, ItemRow);

            return _possibleConstructorReturn(this, (ItemRow.__proto__ || Object.getPrototypeOf(ItemRow)).apply(this, arguments));
          }

          _createClass(ItemRow, [{
            key: "renderItem",
            value: function renderItem() {
              var count = void 0;
              // Check if user wants to show count field
              if (this.props.countField) {
                count = _react2.default.createElement(
                  "span", { className: "rbc-count" },
                  " (",
                  this.props.doc_count,
                  ") "
                );
              }
              var item = _react2.default.createElement(
                "a", { href: "javascript:void(0)", className: "col s12 col-xs-12" },
                _react2.default.createElement(
                  "span",
                  null,
                  " ",
                  this.props.value,
                  " "
                ),
                count
              );
              if (this.props.value === this.props.selectedItem) {
                item = _react2.default.createElement(
                  "a", { href: "javascript:void(0)", className: "col s12 col-xs-12" },
                  _react2.default.createElement(
                    "strong",
                    null,
                    _react2.default.createElement(
                      "span",
                      null,
                      " ",
                      this.props.value,
                      " "
                    ),
                    count
                  )
                );
              }
              return item;
            }
          }, {
            key: "renderCount",
            value: function renderCount() {
              var count = void 0;
              // Check if user wants to show count field
              if (this.props.countField) {
                count = _react2.default.createElement(
                  "span", { className: "rbc-count" },
                  " ",
                  this.props.doc_count,
                  " "
                );
              }
              return count;
            }
          }, {
            key: "render",
            value: function render() {
              var _this7 = this;

              if (this.props.value.trim() === "") {
                return null;
              }

              var cx = (0, _classnames2.default)({
                "rbc-count-active": this.props.countField,
                "rbc-count-inactive": !this.props.countField,
                "rbc-item-show": this.props.visible,
                "rbc-item-hide": !this.props.visible,
                "rbc-radio-active": this.props.showRadio,
                "rbc-radio-inactive": !this.props.showRadio,
                "rbc-list-item-active": this.props.value === this.props.selectedItem,
                "rbc-list-item-inactive": this.props.value !== this.props.selectedItem
              });
              // let activeClass = this.props.value === this.props.selectedItem ? 'active' : '';
              return _react2.default.createElement(
                "div", {
                  className: "rbc-list-item row " + cx,
                  onClick: function onClick() {
                    return _this7.props.handleClick(_this7.props.value);
                  }
                },
                _react2.default.createElement("input", {
                  type: "radio",
                  className: "rbc-radio-item",
                  checked: this.props.value === this.props.selectedItem,
                  value: this.props.value
                }),
                _react2.default.createElement(
                  "label", { className: "rbc-label" },
                  this.props.value,
                  " ",
                  this.renderCount()
                )
              );
            }
          }]);

          return ItemRow;
        }(_react.Component);

        /***/
      }),
      /* 63 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _ChannelHelper = __webpack_require__(64);

        var ChannelHelper = _interopRequireWildcard(_ChannelHelper);

        var _fbemitter = __webpack_require__(72);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var helper = __webpack_require__(65);

        var ChannelManager = function () {
          function ChannelManager() {
            _classCallCheck(this, ChannelManager);

            this.emitter = new _fbemitter.EventEmitter();
            this.channels = {};
            this.streamRef = {};
            this.queryOptions = {};
            this.appbaseRef = {};
            this.appbaseCrdentials = {};
            this.type = {};
            this.app = {};
            this.channelQueries = {};
            this.receive = this.receive.bind(this);
            this.nextPage = this.nextPage.bind(this);
            this.paginationChanges = this.paginationChanges.bind(this);
            this.sortChanges = this.sortChanges.bind(this);
          }

          _createClass(ChannelManager, [{
            key: "highlightModify",
            value: function highlightModify(data, queryObj) {
              if (queryObj && queryObj.body && queryObj.body.highlight && data && data.hits && data.hits.hits && data.hits.hits.length) {
                data.hits.hits = data.hits.hits.map(this.highlightItem);
              }
              return data;
            }
          }, {
            key: "highlightItem",
            value: function highlightItem(item) {
              if (item.highlight) {
                Object.keys(item.highlight).forEach(function (highlightItem) {
                  var highlightValue = item.highlight[highlightItem][0];
                  _lodash2.default.set(item._source, highlightItem, highlightValue);
                });
              }
              return item;
            }

            // Receive: This method will be executed whenever dependency value changes
            // It receives which dependency changes and which channeldId should be affected.

          }, {
            key: "receive",
            value: function receive(depend, channelId) {
              var _this2 = this;

              var queryOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

              var self = this;
              var channelObj = this.channels[channelId];
              var queryObj = void 0;

              function setQueryState(channelResponse) {
                var obj = JSON.parse(JSON.stringify(channelResponse));
                obj.queryState = true;
                self.emitter.emit(channelId + "-query", obj);
              }

              function activateStream(currentChannelId, currentQueryObj, appbaseRef) {
                var _this = this;

                if (this.streamRef[currentChannelId]) {
                  this.streamRef[currentChannelId].stop();
                }
                var streamQueryObj = JSON.parse(JSON.stringify(currentQueryObj));
                streamQueryObj.type = this.type[currentChannelId];
                if (streamQueryObj.body) {
                  delete streamQueryObj.body.from;
                  delete streamQueryObj.body.size;
                  delete streamQueryObj.body.sort;
                }
                this.streamRef[currentChannelId] = appbaseRef.searchStream(streamQueryObj).on("data", function (data) {
                  data = _this.highlightItem(data, currentQueryObj);
                  var obj = {
                    mode: "streaming",
                    data: data,
                    appliedQuery: currentQueryObj
                  };
                  self.emitter.emit(currentChannelId, obj);
                }).on("error", function (error) {
                  console.log(error);
                });
              }

              var appbaseQuery = function appbaseQuery(appbaseRef, searchQueryObj, channelResponse, channelObj, queryObj) {
                appbaseRef.search(searchQueryObj).on("data", function (data) {
                  channelResponse.mode = "historic";
                  channelResponse.data = _this2.highlightModify(data, channelResponse.appliedQuery);
                  self.emitter.emit(channelId, channelResponse);
                  var globalQueryOptions = self.queryOptions && self.queryOptions[channelId] ? self.queryOptions[channelId] : {};
                  self.emitter.emit("global", {
                    channelResponse: channelResponse,
                    react: channelObj.react,
                    queryOptions: globalQueryOptions
                  });
                }).on("error", function (error) {
                  var channelError = {
                    appliedQuery: channelResponse.appliedQuery,
                    error: error,
                    startTime: channelResponse.startTime
                  };
                  self.emitter.emit(channelId, channelError);
                });
                // apply searchStream query and emit streaming data
                if (channelObj.stream) {
                  activateStream.call(_this2, channelId, queryObj, appbaseRef);
                }
              };
              if (!queryOptions) {
                queryObj = ChannelHelper.queryBuild(channelObj, channelObj.previousSelectedSensor);
                this.queryOptions[channelId] = channelObj.previousSelectedSensor["channel-options-" + channelId];
              } else {
                queryObj = ChannelHelper.queryBuild(channelObj, queryOptions);
              }
              var validQuery = true;
              try {
                validQuery = queryObj && Object.keys(queryObj).length;
              } catch (e) {
                console.log(e);
              }
              if (validQuery) {
                var channelResponse = {
                  startTime: new Date().getTime(),
                  appliedQuery: queryObj
                };
                var appbaseRef = this.appbaseRef[channelId];
                if (appbaseRef) {
                  // apply search query and emit historic queryResult
                  var searchQueryObj = queryObj;
                  searchQueryObj.type = this.type[channelId] === "*" ? "" : this.type[channelId];
                  searchQueryObj.preference = this.app[channelId];
                  if (!_lodash2.default.isEqual(this.channelQueries[channelId], searchQueryObj)) {
                    this.channelQueries[channelId] = searchQueryObj;
                    setQueryState(channelResponse);
                    appbaseQuery(appbaseRef, searchQueryObj, channelResponse, channelObj, queryObj);
                  }
                } else {
                  this.channelQueries[channelId] = queryObj;
                  console.error("appbaseRef is not set for " + channelId);
                }
              } else {
                this.channelQueries[channelId] = queryObj;
                var obj = {
                  mode: "historic",
                  startTime: new Date().getTime(),
                  appliedQuery: queryObj,
                  data: {
                    _shards: {},
                    hits: {
                      hits: []
                    }
                  }
                };
                self.emitter.emit(channelId, obj);
              }
            }

            // stopStream
            // Clear channel streaming request

          }, {
            key: "stopStream",
            value: function stopStream(channelId) {
              // debugger
              if (this.streamRef[channelId]) {
                this.streamRef[channelId].stop();
              }
              if (this.channels[channelId] && this.channels[channelId].watchDependency) {
                this.channels[channelId].watchDependency.stop();
                delete this.channels[channelId];
              }
              if (this.channelQueries[channelId]) {
                delete this.channelQueries[channelId];
              }
            }
          }, {
            key: "nextPage",
            value: function nextPage(channelId) {
              var queryOptions = JSON.parse(JSON.stringify(this.channels[channelId].previousSelectedSensor));
              var options = {
                size: this.queryOptions[channelId].size,
                from: this.queryOptions[channelId].from + this.queryOptions[channelId].size
              };
              queryOptions["channel-options-" + channelId] = JSON.parse(JSON.stringify(options));
              // queryOptions["channel-options-"+channelId].from += 1;
              this.queryOptions[channelId] = options;
              this.receive("channel-options-" + channelId, channelId, queryOptions);
            }

            // callback on page number changes

          }, {
            key: "paginationChanges",
            value: function paginationChanges(pageNumber, channelId) {
              var queryOptions = JSON.parse(JSON.stringify(this.channels[channelId].previousSelectedSensor));
              var options = {
                size: this.queryOptions[channelId].size,
                from: this.getFrom(pageNumber, channelId)
              };
              queryOptions["channel-options-" + channelId] = JSON.parse(JSON.stringify(options));
              // queryOptions["channel-options-"+channelId].from += 1;
              this.queryOptions[channelId] = options;
              this.receive("channel-options-" + channelId, channelId, queryOptions);
            }
          }, {
            key: "getFrom",
            value: function getFrom(pageNumber, channelId) {
              return pageNumber !== 1 ? this.queryOptions[channelId].size * (pageNumber - 1) + 1 : 0;
            }

            // sort changes

          }, {
            key: "sortChanges",
            value: function sortChanges(channelId) {
              this.receive("channel-options-" + channelId, channelId);
            }

            // Create the channel by passing react
            // if react are same it will create single channel for them

          }, {
            key: "create",
            value: function create(appbaseRef, type, react) {
              var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;
              var from = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
              var stream = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

              var _this3 = this;

              var app = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "reactivebase";
              var appbaseCrdentials = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;

              var channelId = btoa(JSON.stringify(react));
              var optionValues = {
                size: size,
                from: from
              };
              this.queryOptions[channelId] = optionValues;
              this.type[channelId] = type;
              this.app[channelId] = app;
              this.appbaseRef[channelId] = appbaseRef;
              this.appbaseCrdentials[channelId] = appbaseCrdentials;
              react["channel-options-" + channelId] = optionValues;
              var previousSelectedSensor = _defineProperty({}, "channel-options-" + channelId, optionValues);
              var obj = {
                key: "channel-options-" + channelId,
                value: optionValues
              };
              var serializeDepends = helper.serializeDepends.serialize(react);
              helper.selectedSensor.set(obj);
              if (!(channelId in this.channels && stream === this.channels[channelId].stream)) {
                this.channels[channelId] = {
                  react: react,
                  size: size,
                  from: from,
                  stream: stream,
                  previousSelectedSensor: previousSelectedSensor,
                  serializeDepends: serializeDepends,
                  watchDependency: new helper.WatchForDependencyChange(serializeDepends.dependsList, previousSelectedSensor, this.receive, channelId, this.paginationChanges, this.sortChanges)
                };
                this.channels[channelId].watchDependency.start();
              }
              setTimeout(function () {
                if ("aggs" in react) {
                  _this3.receive("aggs", channelId);
                }
              }, 100);
              return {
                channelId: channelId,
                emitter: this.emitter
              };
            }
          }]);

          return ChannelManager;
        }();

        var manager = new ChannelManager();
        exports.default = manager;

        /***/
      }),
      /* 64 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        var helper = __webpack_require__(65);

        // queryBuild
        // Builds the query by using react object and values of sensor
        var queryBuild = exports.queryBuild = function queryBuild(channelObj, previousSelectedSensor) {
          var sortObj = [];
          var requestOptions = null;

          // check if sortinfo is availbale
          function sortAvailable(depend) {
            var sortInfo = helper.selectedSensor.get(depend, "sortInfo");
            return sortInfo;
          }

          // check if external query part is availbale (i.e. highlight)
          function isExternalQuery(depend) {
            var finalValue = null;
            var sensorInfo = helper.selectedSensor.get(depend, "sensorInfo");
            if (sensorInfo && sensorInfo.externalQuery) {
              finalValue = sensorInfo.externalQuery;
            }
            return finalValue;
          }

          // build single query or if default query present in sensor itself use that
          function singleQuery(depend) {
            var sensorInfo = helper.selectedSensor.get(depend, "sensorInfo");
            var sQuery = null;
            if (sensorInfo && sensorInfo.customQuery) {
              var sensorValue = depend in previousSelectedSensor ? previousSelectedSensor[depend] : helper.selectedSensor.get(depend);
              sQuery = sensorInfo.customQuery(sensorValue);
            } else if (previousSelectedSensor[depend]) {
              sQuery = {};
              sQuery[sensorInfo.queryType] = {};
              if (sensorInfo.queryType !== "match_all") {
                sQuery[sensorInfo.queryType][sensorInfo.inputData] = previousSelectedSensor[depend];
              }
            }
            return sQuery;
          }

          function aggsQuery(depend) {
            var aggsObj = channelObj.react[depend];
            var order = void 0,
              type = void 0;
            var query = void 0;
            if (aggsObj.customQuery) {
              query = aggsObj.customQuery(aggsObj);
            } else {
              if (aggsObj.sortRef) {
                var sortField = sortAvailable(aggsObj.sortRef);
                if (sortField && sortField.aggSort) {
                  aggsObj.sort = sortField.aggSort;
                }
              }
              if (aggsObj.sort === "count") {
                order = "desc";
                type = "_count";
              } else if (aggsObj.sort === "asc" || aggsObj.sort === "desc") {
                order = aggsObj.sort;
                type = "_term";
              }
              query = _defineProperty({}, aggsObj.key, {
                terms: {
                  field: aggsObj.key
                }
              });
              if (aggsObj.size) {
                query[aggsObj.key].terms.size = aggsObj.size;
              }
              if (aggsObj.sort) {
                query[aggsObj.key].terms.order = _defineProperty({}, type, order);
              }
            }
            return query;
          }

          function generateQuery() {
            var dependsQuery = {};
            channelObj.serializeDepends.dependsList.forEach(function (depend) {
              if (depend === "aggs") {
                dependsQuery[depend] = aggsQuery(depend);
              } else if (depend && depend.indexOf("channel-options-") > -1) {
                requestOptions = requestOptions || {};
                requestOptions = Object.assign(requestOptions, previousSelectedSensor[depend]);
              } else {
                dependsQuery[depend] = singleQuery(depend);
                var externalQuery = isExternalQuery(depend);
                if (externalQuery) {
                  requestOptions = requestOptions || {};
                  requestOptions = Object.assign(requestOptions, externalQuery);
                }
              }
              var sortField = sortAvailable(depend);
              if (sortField && !("aggSort" in sortField)) {
                sortObj.push(sortField);
              }
            });
            return dependsQuery;
          }

          function combineQuery(dependsQuery) {
            var query = helper.serializeDepends.createQuery(channelObj.serializeDepends, dependsQuery);
            if (query && query.body) {
              if (sortObj && sortObj.length) {
                query.body.sort = sortObj;
              }
              // apply request options
              if (requestOptions && Object.keys(requestOptions).length) {
                Object.keys(requestOptions).forEach(function (reqOption) {
                  query.body[reqOption] = requestOptions[reqOption];
                });
              }
            } else {
              query = {};
            }
            return query;
          }

          function initialize() {
            var dependsQuery = generateQuery();
            var query = combineQuery(dependsQuery);
            return query;
          }
          return initialize();
        };

        /***/
      }),
      /* 65 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.RecactivebaseComponents = exports.updateStats = exports.combineStreamData = exports.prepareResultData = exports.serializeDepends = exports.selectedSensor = exports.WatchForDependencyChange = exports.sensorEmitter = undefined;

        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* eslint max-lines: 0 */


        var _utils = __webpack_require__(66);

        Object.keys(_utils).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _utils[key];
            }
          });
        });

        var _URLParams = __webpack_require__(68);

        Object.keys(_URLParams).forEach(function (key) {
          if (key === "default" || key === "__esModule") return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _URLParams[key];
            }
          });
        });

        var _fbemitter = __webpack_require__(72);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        var globalI = 0;
        var sensorEmitter = exports.sensorEmitter = new _fbemitter.EventEmitter();

        var WatchForDependencyChange = exports.WatchForDependencyChange = function WatchForDependencyChange(react, previousSelectedSensor, cb, channelId, paginationCb, sortCb) {
          globalI += 1;
          this.random = globalI;
          var selectedSensor = {};
          // check if depend object already exists
          var checkDependExists = function checkDependExists(depend) {
            if (!Object.prototype.hasOwnProperty.call(previousSelectedSensor, depend)) {
              previousSelectedSensor[depend] = "";
            }
          };
          // apply depend changes when new value received
          var applyDependChange = function applyDependChange(currentReact, depend) {
            if (selectedSensor[depend] && _typeof(selectedSensor[depend]) === "object") {
              previousSelectedSensor[depend] = JSON.parse(JSON.stringify(selectedSensor[depend]));
            } else {
              previousSelectedSensor[depend] = selectedSensor[depend];
            }
            // if (!selectedSensor[depend].doNotExecute) {
            cb(depend, channelId);
            // }
          };

          // initialize the process
          this.init = function () {
            react.forEach(function (depend) {
              if (!(depend.indexOf("channel-options-") > -1 || depend.indexOf("aggs") > -1)) {
                checkDependExists(depend);
                if (_typeof(selectedSensor[depend]) === "object") {
                  if (!_lodash2.default.isEqual(selectedSensor[depend], previousSelectedSensor[depend])) {
                    applyDependChange(react, depend);
                  }
                } else if (selectedSensor[depend] !== previousSelectedSensor[depend]) {
                  applyDependChange(react, depend);
                }
              }
            });
          };

          this.start = function () {
            var self = this;
            this.sensorListener = sensorEmitter.addListener("sensorChange", function (data) {
              var foundDepend = false;

              Object.keys(data).forEach(function (item) {
                if (item.indexOf("channel-options-") < 0 && react.indexOf(item) > -1) {
                  foundDepend = true;
                }
              });

              if (foundDepend) {
                selectedSensor = data;
                self.init();
              }
            });

            this.paginationListener = sensorEmitter.addListener("paginationChange", function (data) {
              if (paginationCb) {
                if (react.indexOf(data.key) > -1) {
                  paginationCb(data.value, channelId);
                }
              }
            });

            this.sortListener = sensorEmitter.addListener("sortChange", function () {
              if (sortCb) {
                sortCb(channelId);
              }
            });
          };

          this.stop = function () {
            if (this.sensorListener) {
              this.sensorListener.remove();
            }
            if (this.paginationListener) {
              this.paginationListener.remove();
            }
            if (this.sortListener) {
              this.sortListener.remove();
            }
          };
        };

        function SelectedSensorFn() {
          var self = this;
          this.sensorInfo = {};
          this.selectedSensor = {};
          this.paginationInfo = {};
          this.selectedPagination = {};
          this.sortInfo = {};
          this.selectedSort = {};

          // Get
          var get = function get(prop, obj) {
            if (obj) {
              return self[obj][prop];
            }
            if (prop) {
              return self.selectedSensor[prop];
            }
            return self.selectedSensor;
          };

          // Set
          var set = function set(obj) {
            var isExecuteUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var setMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "sensorChange";

            var methodObj = void 0;
            switch (setMethod) {
            case "sortChange":
              self.sortInfo[obj.key] = obj.value;
              methodObj = self.sortInfo;
              break;
            case "paginationChange":
              self.selectedPagination[obj.key] = obj.value;
              methodObj = obj;
              break;
            case "sensorChange":
            default:
              self.selectedSensor[obj.key] = obj.value;
              methodObj = self.selectedSensor;
              break;
            }
            if (isExecuteUpdate) {
              sensorEmitter.emit(setMethod, methodObj);
            }
          };

          // Set fieldname
          var setSensorInfo = function setSensorInfo(obj) {
            self.sensorInfo[obj.key] = obj.value;
          };

          // Set sort info
          var setSortInfo = function setSortInfo(obj) {
            self.sortInfo[obj.key] = obj.value;
          };

          // Set pagination info
          var setPaginationInfo = function setPaginationInfo(obj) {
            self.paginationInfo[obj.key] = obj.value;
          };

          return {
            get: get,
            set: set,
            setSensorInfo: setSensorInfo,
            setSortInfo: setSortInfo,
            setPaginationInfo: setPaginationInfo
          };
        }

        var selectedSensor = exports.selectedSensor = new SelectedSensorFn();

        var SerializeDepends = function SerializeDepends() {
          var conjunctions = ["and", "or", "not"];

          this.serialize = function (depends) {
            var queries = [];
            var dependsList = [];
            var compId = 0;

            function addDependList(depend) {
              function addDep(dep) {
                if (dependsList.indexOf(dep) < 0) {
                  dependsList.push(dep);
                }
              }

              if (typeof depend === "string") {
                addDep(depend);
              } else {
                depend.forEach(function (single) {
                  addDep(single);
                });
              }
            }

            function checkConjunctions(depend, parentId) {
              Object.keys(depend).forEach(function (conjunction) {
                compId += 1;
                var res = addConjunction(conjunction, parentId, depend[conjunction], compId);
                queries.push(res);
                if (conjunctions.indexOf(conjunction) < 0) {
                  addDependList(conjunction);
                }
              });
              return queries;
            }

            function addLeaf(depend, parentId) {
              compId += 1;
              var res = {
                parentId: parentId,
                componentId: compId,
                leaf: false,
                components: null
              };
              if (Object.prototype.toString.call(depend) === "[object Array]") {
                res.components = depend;
                res.leaf = true;
                addDependList(depend);
              } else if (typeof depend === "string") {
                res.components = depend;
                res.leaf = true;
                addDependList(depend);
              } else {
                checkConjunctions(depend, parentId);
              }
              return res;
            }

            function addConjunction(conjunction, parentId, depend, currentCompId) {
              var leaf = true;
              if (conjunctions.indexOf(conjunction) > -1) {
                var dependRes = addLeaf(depend, currentCompId);
                leaf = false;
                queries.push(dependRes);
              }
              return {
                parentId: parentId,
                componentId: currentCompId,
                conjunction: conjunction,
                components: conjunction,
                leaf: leaf
              };
            }

            function initialize() {
              queries = checkConjunctions(depends, 0);
              return {
                queries: queries,
                dependsList: dependsList
              };
            }

            return initialize();
          };

          this.createQuery = function (serializeResult, dependsQuery) {
            var serializeResultQuery = serializeResult.queries.map(function (query) {
              query.checked = false;
              delete query.query;
              return query;
            });

            function setQuery(depend) {
              var subQuery = [];
              var queryArray = null;
              var getParent = serializeResultQuery.filter(function (dep) {
                return dep.componentId === depend.parentId;
              });
              if (_lodash2.default.isArray(depend.components)) {
                depend.components.forEach(function (comp) {
                  if (dependsQuery[comp]) {
                    if (queryArray) {
                      queryArray.push(dependsQuery[comp]);
                    } else {
                      queryArray = [];
                      queryArray.push(dependsQuery[comp]);
                    }
                  }
                });
              } else if (typeof depend.components === "string") {
                if (dependsQuery[depend.components]) {
                  queryArray = dependsQuery[depend.components];
                }
              }

              if (getParent && getParent.length) {
                subQuery = getParent[0].query ? adjustQuery(getParent[0].query, getParent[0].conjunction, queryArray) : createBoolQuery(getParent[0].conjunction, queryArray);
              } else {
                subQuery = queryArray;
              }
              if (subQuery) {
                serializeResultQuery = serializeResultQuery.map(function (dep) {
                  if (getParent.length && dep.componentId === getParent[0].componentId) {
                    dep.query = subQuery;
                  } else if (depend.parentId === 0 && dep.componentId === depend.componentId) {
                    dep.query = subQuery;
                  }
                  return dep;
                });
              }
            }

            function canWeProceed(componentId) {
              var children = serializeResultQuery.filter(function (query) {
                return !query.checked && query.parentId === componentId;
              });
              var flag = !children.length;
              return flag;
            }

            function mixQuery() {
              serializeResultQuery.forEach(function (sub) {
                setnewquery(sub);
              });
            }

            function setnewquery(sub) {
              if (!sub.query && sub.components) {
                sub.query = [];
                var child = serializeResultQuery.filter(function (item) {
                  return item.parentId === sub.componentId;
                });
                child.forEach(function (sub2, index2) {
                  var semiquery = setnewquery(sub2);
                  if (semiquery) {
                    if (_lodash2.default.isArray(semiquery)) {
                      if (semiquery.length) {
                        sub.query.push(semiquery);
                      }
                    } else {
                      sub.query.push(semiquery);
                    }
                  }
                  if (index2 === child.length - 1 && sub.query.length && sub.conjunction && sub.conjunction !== "aggs") {
                    sub.query = createBoolQuery(sub.conjunction, sub.query);
                  }
                });
              } else {
                return sub.query;
              }
            }

            function finalQuery() {
              var query = {};
              var aggs = null;
              serializeResultQuery.forEach(function (sub) {
                if (sub.parentId === 0) {
                  if (sub.conjunction !== "aggs") {
                    query = Object.assign(query, sub.query);
                  } else if (sub.conjunction === "aggs") {
                    aggs = sub.query;
                  }
                }
              });
              var fullQuery = null;
              if (query && Object.keys(query).length) {
                fullQuery = {
                  body: {
                    query: query
                  }
                };
              }
              if (aggs) {
                if (fullQuery) {
                  fullQuery.body.aggs = aggs;
                } else {
                  fullQuery = {
                    body: {
                      aggs: aggs
                    }
                  };
                }
              }
              return fullQuery;
            }

            function checkAndMake() {
              var uncheckedQueryFound = false;
              serializeResultQuery.forEach(function (dependParent) {
                if (!dependParent.checked && canWeProceed(dependParent.componentId)) {
                  dependParent.checked = true;
                  uncheckedQueryFound = true;
                  setQuery(dependParent);
                }
              });
              if (uncheckedQueryFound) {
                return checkAndMake();
              }
              mixQuery();
              return finalQuery();
            }

            function initialize() {
              return checkAndMake();
            }

            function getOperation(conjunction) {
              var operation = null;
              switch (conjunction) {
              case "and":
                operation = "must";
                break;
              case "or":
                operation = "should";
                break;
              case "not":
                operation = "must_not";
                break;
              default:
                operation = "must";
              }
              return operation;
            }

            function createBoolQuery(conjunction, queryArray) {
              if (!queryArray) {
                return null;
              }
              var query = queryArray;
              var operation = getOperation(conjunction);
              if (conjunctions.indexOf(conjunction) > -1) {
                query = {
                  bool: _defineProperty({}, operation, queryArray)
                };
              }
              return query;
            }

            function adjustQuery(originalQuery, conjunction, queryArray) {
              if (!queryArray) {
                return null;
              }
              var operation = getOperation(conjunction);
              var originalArray = originalQuery && originalQuery[operation] ? originalQuery[operation] : [];
              return _defineProperty({}, operation, originalArray.concat(queryArray));
            }

            return initialize();
          };
        };

        var serializeDepends = exports.serializeDepends = new SerializeDepends();

        var prepareResultData = exports.prepareResultData = function prepareResultData(data, res) {
          var response = {
            err: null,
            res: null
          };
          if (data.error) {
            response.err = data;
          } else {
            response.res = {
              mode: data.mode,
              newData: data.newData,
              currentData: data.currentData,
              appliedQuery: data.appliedQuery
            };
            if (res) {
              response.res.took = res.took ? res.took : 0;
              response.res.total = res.hits && res.hits.total ? res.hits.total : 0;
            }
          }
          return response;
        };

        var combineStreamData = exports.combineStreamData = function combineStreamData(currentData, newData) {
          if (newData) {
            if (newData._deleted) {
              var hits = currentData.filter(function (hit) {
                return hit._id !== newData._id;
              });
              currentData = hits;
            } else {
              var _hits = currentData.filter(function (hit) {
                return hit._id !== newData._id;
              });
              currentData = _hits;
              currentData.unshift(newData);
            }
          }
          return currentData;
        };

        var updateStats = exports.updateStats = function updateStats(total, newData) {
          if (newData) {
            if (newData._deleted) {
              total -= 1;
            } else if (!newData._updated) {
              total += 1;
            }
          }
          return total;
        };

        var RecactivebaseComponents = exports.RecactivebaseComponents = [];

        /***/
      }),
      /* 66 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var $ = __webpack_require__(67);

        var ResponsiveStory = exports.ResponsiveStory = function ResponsiveStory() {
          var paginationHeight = function paginationHeight() {
            return $(".rbc-pagination").length * 85;
          };

          var getHeight = function getHeight(item) {
            return item.height() ? item.height() : 0;
          };

          var handleResponsive = function handleResponsive() {
            var height = $(window).height();
            var resultHeight = height - 15;
            $(".rbc.rbc-reactivelist, .rbc.rbc-reactiveelement").css({
              maxHeight: resultHeight
            });
            var $component = [$(".rbc.rbc-singlelist"), $(".rbc.rbc-multilist"), $(".rbc.rbc-nestedlist"), $(".rbc.rbc-tagcloud")];
            $component.forEach(function (item) {
              if (item.length) {
                var itemHeader = getHeight(item.find(".rbc-title")) + getHeight(item.find(".rbc-search-container"));
                item.find(".rbc-list-container").css({ maxHeight: height - itemHeader - 35 });
              }
            });
            $(".rbc-base > .row").css({
              "margin-bottom": 0
            });
            $(".rbc-reactivemap .rbc-container").css({
              maxHeight: height
            });
          };

          handleResponsive();

          $(window).resize(function () {
            handleResponsive();
          });
        };

        var sizeValidation = exports.sizeValidation = function sizeValidation(props, propName) {
          var err = null;
          if (props[propName] < 1 || props[propName] > 1000) {
            err = new Error("Size value is invalid, it should be between 1 and 1000.");
          }
          return err;
        };

        var stepValidation = exports.stepValidation = function stepValidation(props, propName) {
          var err = null;
          if (props[propName] > Math.floor((props.range.end - props.range.start) / 2)) {
            err = new Error("Step value is invalid, it should be less than or equal to " + Math.floor((props.range.end - props.range.start) / 2) + ".");
          } else if (props[propName] <= 0) {
            err = new Error("Step value is invalid, it should be greater than 0.");
          }
          return err;
        };

        var validateThreshold = exports.validateThreshold = function validateThreshold(props, propName, componentName) {
          var err = null;
          if (!(!isNaN(props[propName]) && props.end > props.start)) {
            err = new Error("Threshold value validation has failed, end value should be greater than start value.");
          }
          if (componentName === "GeoDistanceDropdown" || componentName === "GeoDistanceSlider") {
            if (props.start <= 0) {
              err = new Error("Threshold value is invalid, it should be greater than 0.");
            }
          }
          return err;
        };

        var valueValidation = exports.valueValidation = function valueValidation(props, propName) {
          var err = null;
          var end = props.data.end ? props.data.end : props.defaultSelected;
          var start = props.data.start ? props.data.start : props.defaultSelected;
          if (!(!isNaN(props[propName]) && end >= props.defaultSelected && start <= props.defaultSelected)) {
            err = new Error("Default value validation has failed, Default value should be between start and end values.");
          }
          return err;
        };

        var validation = exports.validation = {
          resultListFrom: function resultListFrom(props, propName) {
            var err = null;
            if (props[propName] < 0) {
              err = new Error("From value is invalid, it should be greater than or equal to 0.");
            }
            return err;
          }
        };

        var pagesValidation = exports.pagesValidation = function pagesValidation(props, propName) {
          var err = null;
          if (!(!isNaN(props[propName]) && props[propName] > 2 && props[propName] < 21)) {
            err = new Error("Pages should be between 3 and 20.");
          }
          return err;
        };

        var reactiveBaseValidation = exports.reactiveBaseValidation = function reactiveBaseValidation(props, propName) {
          var err = null;
          if (!props.credentials) {
            err = new Error("ReactiveBase expects credentials as a prop instead of username:password.");
          }
          return err;
        };

        var dateFormat = exports.dateFormat = {
          "epoch_millis": "x",
          "epoch_seconds": "X",
          "date": "YYYY-MM-DD",
          "date_time": "YYYY-MM-DDTHH:mm:ss.SSSZZ",
          "date_time_no_millis": "YYYY-MM-DDTHH:mm:ssZZ",
          "basic_date": "YYYYMMDD",
          "basic_date_time": "YYYYMMDDTHHmmss.SSSZ",
          "basic_date_time_no_millis": "YYYYMMDDTHHmmssZ",
          "basic_time": "HHmmss.SSSZ",
          "basic_time_no_millis": "HHmmssZ"
        };

        var setupReact = exports.setupReact = function setupReact(react, reactAnd) {
          if (react && react.and) {
            if (typeof react.and === "string") {
              react.and = [react.and];
              react.and = react.and.concat(reactAnd);
            } else if (_.isArray(react.and)) {
              react.and = react.and.concat(reactAnd);
            } else if (_.isObject(react.and)) {
              react.and = setupReact(react.and, reactAnd);
            }
          } else {
            react.and = reactAnd;
          }
          return react;
        };

        /***/
      }),
      /* 67 */
      /***/
      (function (module, exports, __webpack_require__) {

        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        /*!
         * jQuery JavaScript Library v3.2.1
         * https://jquery.com/
         *
         * Includes Sizzle.js
         * https://sizzlejs.com/
         *
         * Copyright JS Foundation and other contributors
         * Released under the MIT license
         * https://jquery.org/license
         *
         * Date: 2017-03-20T18:59Z
         */
        (function (global, factory) {

          "use strict";

          if (typeof module === "object" && typeof module.exports === "object") {

            // For CommonJS and CommonJS-like environments where a proper `window`
            // is present, execute the factory and get jQuery.
            // For environments that do not have a `window` with a `document`
            // (such as Node.js), expose a factory as module.exports.
            // This accentuates the need for the creation of a real `window`.
            // e.g. var jQuery = require("jquery")(window);
            // See ticket #14549 for more info.
            module.exports = global.document ?
              factory(global, true) :
              function (w) {
                if (!w.document) {
                  throw new Error("jQuery requires a window with a document");
                }
                return factory(w);
              };
          } else {
            factory(global);
          }

          // Pass this if window is not defined yet
        })(typeof window !== "undefined" ? window : this, function (window, noGlobal) {

          // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
          // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
          // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
          // enough that all such attempts are guarded in a try block.
          "use strict";

          var arr = [];

          var document = window.document;

          var getProto = Object.getPrototypeOf;

          var slice = arr.slice;

          var concat = arr.concat;

          var push = arr.push;

          var indexOf = arr.indexOf;

          var class2type = {};

          var toString = class2type.toString;

          var hasOwn = class2type.hasOwnProperty;

          var fnToString = hasOwn.toString;

          var ObjectFunctionString = fnToString.call(Object);

          var support = {};



          function DOMEval(code, doc) {
            doc = doc || document;

            var script = doc.createElement("script");

            script.text = code;
            doc.head.appendChild(script).parentNode.removeChild(script);
          }
          /* global Symbol */
          // Defining this global in .eslintrc.json would create a danger of using the global
          // unguarded in another place, it seems safer to define global only for this module



          var
            version = "3.2.1",

            // Define a local copy of jQuery
            jQuery = function (selector, context) {

              // The jQuery object is actually just the init constructor 'enhanced'
              // Need init if jQuery is called (just allow error to be thrown if not included)
              return new jQuery.fn.init(selector, context);
            },

            // Support: Android <=4.0 only
            // Make sure we trim BOM and NBSP
            rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

            // Matches dashed string for camelizing
            rmsPrefix = /^-ms-/,
            rdashAlpha = /-([a-z])/g,

            // Used by jQuery.camelCase as callback to replace()
            fcamelCase = function (all, letter) {
              return letter.toUpperCase();
            };

          jQuery.fn = jQuery.prototype = {

            // The current version of jQuery being used
            jquery: version,

            constructor: jQuery,

            // The default length of a jQuery object is 0
            length: 0,

            toArray: function () {
              return slice.call(this);
            },

            // Get the Nth element in the matched element set OR
            // Get the whole matched element set as a clean array
            get: function (num) {

              // Return all the elements in a clean array
              if (num == null) {
                return slice.call(this);
              }

              // Return just the one element from the set
              return num < 0 ? this[num + this.length] : this[num];
            },

            // Take an array of elements and push it onto the stack
            // (returning the new matched element set)
            pushStack: function (elems) {

              // Build a new jQuery matched element set
              var ret = jQuery.merge(this.constructor(), elems);

              // Add the old object onto the stack (as a reference)
              ret.prevObject = this;

              // Return the newly-formed element set
              return ret;
            },

            // Execute a callback for every element in the matched set.
            each: function (callback) {
              return jQuery.each(this, callback);
            },

            map: function (callback) {
              return this.pushStack(jQuery.map(this, function (elem, i) {
                return callback.call(elem, i, elem);
              }));
            },

            slice: function () {
              return this.pushStack(slice.apply(this, arguments));
            },

            first: function () {
              return this.eq(0);
            },

            last: function () {
              return this.eq(-1);
            },

            eq: function (i) {
              var len = this.length,
                j = +i + (i < 0 ? len : 0);
              return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
            },

            end: function () {
              return this.prevObject || this.constructor();
            },

            // For internal use only.
            // Behaves like an Array's method, not like a jQuery method.
            push: push,
            sort: arr.sort,
            splice: arr.splice
          };

          jQuery.extend = jQuery.fn.extend = function () {
            var options, name, src, copy, copyIsArray, clone,
              target = arguments[0] || {},
              i = 1,
              length = arguments.length,
              deep = false;

            // Handle a deep copy situation
            if (typeof target === "boolean") {
              deep = target;

              // Skip the boolean and the target
              target = arguments[i] || {};
              i++;
            }

            // Handle case when target is a string or something (possible in deep copy)
            if (typeof target !== "object" && !jQuery.isFunction(target)) {
              target = {};
            }

            // Extend jQuery itself if only one argument is passed
            if (i === length) {
              target = this;
              i--;
            }

            for (; i < length; i++) {

              // Only deal with non-null/undefined values
              if ((options = arguments[i]) != null) {

                // Extend the base object
                for (name in options) {
                  src = target[name];
                  copy = options[name];

                  // Prevent never-ending loop
                  if (target === copy) {
                    continue;
                  }

                  // Recurse if we're merging plain objects or arrays
                  if (deep && copy && (jQuery.isPlainObject(copy) ||
                      (copyIsArray = Array.isArray(copy)))) {

                    if (copyIsArray) {
                      copyIsArray = false;
                      clone = src && Array.isArray(src) ? src : [];

                    } else {
                      clone = src && jQuery.isPlainObject(src) ? src : {};
                    }

                    // Never move original objects, clone them
                    target[name] = jQuery.extend(deep, clone, copy);

                    // Don't bring in undefined values
                  } else if (copy !== undefined) {
                    target[name] = copy;
                  }
                }
              }
            }

            // Return the modified object
            return target;
          };

          jQuery.extend({

            // Unique for each copy of jQuery on the page
            expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

            // Assume jQuery is ready without the ready module
            isReady: true,

            error: function (msg) {
              throw new Error(msg);
            },

            noop: function () {},

            isFunction: function (obj) {
              return jQuery.type(obj) === "function";
            },

            isWindow: function (obj) {
              return obj != null && obj === obj.window;
            },

            isNumeric: function (obj) {

              // As of jQuery 3.0, isNumeric is limited to
              // strings and numbers (primitives or objects)
              // that can be coerced to finite numbers (gh-2662)
              var type = jQuery.type(obj);
              return (type === "number" || type === "string") &&

                // parseFloat NaNs numeric-cast false positives ("")
                // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
                // subtraction forces infinities to NaN
                !isNaN(obj - parseFloat(obj));
            },

            isPlainObject: function (obj) {
              var proto, Ctor;

              // Detect obvious negatives
              // Use toString instead of jQuery.type to catch host objects
              if (!obj || toString.call(obj) !== "[object Object]") {
                return false;
              }

              proto = getProto(obj);

              // Objects with no prototype (e.g., `Object.create( null )`) are plain
              if (!proto) {
                return true;
              }

              // Objects with prototype are plain iff they were constructed by a global Object function
              Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
              return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
            },

            isEmptyObject: function (obj) {

              /* eslint-disable no-unused-vars */
              // See https://github.com/eslint/eslint/issues/6125
              var name;

              for (name in obj) {
                return false;
              }
              return true;
            },

            type: function (obj) {
              if (obj == null) {
                return obj + "";
              }

              // Support: Android <=2.3 only (functionish RegExp)
              return typeof obj === "object" || typeof obj === "function" ?
                class2type[toString.call(obj)] || "object" :
                typeof obj;
            },

            // Evaluates a script in a global context
            globalEval: function (code) {
              DOMEval(code);
            },

            // Convert dashed to camelCase; used by the css and data modules
            // Support: IE <=9 - 11, Edge 12 - 13
            // Microsoft forgot to hump their vendor prefix (#9572)
            camelCase: function (string) {
              return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
            },

            each: function (obj, callback) {
              var length, i = 0;

              if (isArrayLike(obj)) {
                length = obj.length;
                for (; i < length; i++) {
                  if (callback.call(obj[i], i, obj[i]) === false) {
                    break;
                  }
                }
              } else {
                for (i in obj) {
                  if (callback.call(obj[i], i, obj[i]) === false) {
                    break;
                  }
                }
              }

              return obj;
            },

            // Support: Android <=4.0 only
            trim: function (text) {
              return text == null ?
                "" :
                (text + "").replace(rtrim, "");
            },

            // results is for internal usage only
            makeArray: function (arr, results) {
              var ret = results || [];

              if (arr != null) {
                if (isArrayLike(Object(arr))) {
                  jQuery.merge(ret,
                    typeof arr === "string" ? [arr] : arr
                  );
                } else {
                  push.call(ret, arr);
                }
              }

              return ret;
            },

            inArray: function (elem, arr, i) {
              return arr == null ? -1 : indexOf.call(arr, elem, i);
            },

            // Support: Android <=4.0 only, PhantomJS 1 only
            // push.apply(_, arraylike) throws on ancient WebKit
            merge: function (first, second) {
              var len = +second.length,
                j = 0,
                i = first.length;

              for (; j < len; j++) {
                first[i++] = second[j];
              }

              first.length = i;

              return first;
            },

            grep: function (elems, callback, invert) {
              var callbackInverse,
                matches = [],
                i = 0,
                length = elems.length,
                callbackExpect = !invert;

              // Go through the array, only saving the items
              // that pass the validator function
              for (; i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                  matches.push(elems[i]);
                }
              }

              return matches;
            },

            // arg is for internal usage only
            map: function (elems, callback, arg) {
              var length, value,
                i = 0,
                ret = [];

              // Go through the array, translating each of the items to their new values
              if (isArrayLike(elems)) {
                length = elems.length;
                for (; i < length; i++) {
                  value = callback(elems[i], i, arg);

                  if (value != null) {
                    ret.push(value);
                  }
                }

                // Go through every key on the object,
              } else {
                for (i in elems) {
                  value = callback(elems[i], i, arg);

                  if (value != null) {
                    ret.push(value);
                  }
                }
              }

              // Flatten any nested arrays
              return concat.apply([], ret);
            },

            // A global GUID counter for objects
            guid: 1,

            // Bind a function to a context, optionally partially applying any
            // arguments.
            proxy: function (fn, context) {
              var tmp, args, proxy;

              if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp;
              }

              // Quick check to determine if target is callable, in the spec
              // this throws a TypeError, but we will just return undefined.
              if (!jQuery.isFunction(fn)) {
                return undefined;
              }

              // Simulated bind
              args = slice.call(arguments, 2);
              proxy = function () {
                return fn.apply(context || this, args.concat(slice.call(arguments)));
              };

              // Set the guid of unique handler to the same of original handler, so it can be removed
              proxy.guid = fn.guid = fn.guid || jQuery.guid++;

              return proxy;
            },

            now: Date.now,

            // jQuery.support is not used in Core but other projects attach their
            // properties to it so it needs to exist.
            support: support
          });

          if (typeof Symbol === "function") {
            jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
          }

          // Populate the class2type map
          jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
            function (i, name) {
              class2type["[object " + name + "]"] = name.toLowerCase();
            });

          function isArrayLike(obj) {

            // Support: real iOS 8.2 only (not reproducible in simulator)
            // `in` check used to prevent JIT error (gh-2145)
            // hasOwn isn't used here due to false negatives
            // regarding Nodelist length in IE
            var length = !!obj && "length" in obj && obj.length,
              type = jQuery.type(obj);

            if (type === "function" || jQuery.isWindow(obj)) {
              return false;
            }

            return type === "array" || length === 0 ||
              typeof length === "number" && length > 0 && (length - 1) in obj;
          }
          var Sizzle =
            /*!
             * Sizzle CSS Selector Engine v2.3.3
             * https://sizzlejs.com/
             *
             * Copyright jQuery Foundation and other contributors
             * Released under the MIT license
             * http://jquery.org/license
             *
             * Date: 2016-08-08
             */
            (function (window) {

              var i,
                support,
                Expr,
                getText,
                isXML,
                tokenize,
                compile,
                select,
                outermostContext,
                sortInput,
                hasDuplicate,

                // Local document vars
                setDocument,
                document,
                docElem,
                documentIsHTML,
                rbuggyQSA,
                rbuggyMatches,
                matches,
                contains,

                // Instance-specific data
                expando = "sizzle" + 1 * new Date(),
                preferredDoc = window.document,
                dirruns = 0,
                done = 0,
                classCache = createCache(),
                tokenCache = createCache(),
                compilerCache = createCache(),
                sortOrder = function (a, b) {
                  if (a === b) {
                    hasDuplicate = true;
                  }
                  return 0;
                },

                // Instance methods
                hasOwn = ({}).hasOwnProperty,
                arr = [],
                pop = arr.pop,
                push_native = arr.push,
                push = arr.push,
                slice = arr.slice,
                // Use a stripped-down indexOf as it's faster than native
                // https://jsperf.com/thor-indexof-vs-for/5
                indexOf = function (list, elem) {
                  var i = 0,
                    len = list.length;
                  for (; i < len; i++) {
                    if (list[i] === elem) {
                      return i;
                    }
                  }
                  return -1;
                },

                booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

                // Regular expressions

                // http://www.w3.org/TR/css3-selectors/#whitespace
                whitespace = "[\\x20\\t\\r\\n\\f]",

                // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
                identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

                // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
                attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
                // Operator (capture 2)
                "*([*^$|!~]?=)" + whitespace +
                // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
                "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
                "*\\]",

                pseudos = ":(" + identifier + ")(?:\\((" +
                // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
                // 1. quoted (capture 3; capture 4 or capture 5)
                "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
                // 2. simple (capture 6)
                "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
                // 3. anything else (capture 2)
                ".*" +
                ")\\)|)",

                // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
                rwhitespace = new RegExp(whitespace + "+", "g"),
                rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),

                rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
                rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),

                rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),

                rpseudo = new RegExp(pseudos),
                ridentifier = new RegExp("^" + identifier + "$"),

                matchExpr = {
                  "ID": new RegExp("^#(" + identifier + ")"),
                  "CLASS": new RegExp("^\\.(" + identifier + ")"),
                  "TAG": new RegExp("^(" + identifier + "|[*])"),
                  "ATTR": new RegExp("^" + attributes),
                  "PSEUDO": new RegExp("^" + pseudos),
                  "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                    "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                    "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                  "bool": new RegExp("^(?:" + booleans + ")$", "i"),
                  // For use in libraries implementing .is()
                  // We use this for POS matching in `select`
                  "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                    whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
                },

                rinputs = /^(?:input|select|textarea|button)$/i,
                rheader = /^h\d$/i,

                rnative = /^[^{]+\{\s*\[native \w/,

                // Easily-parseable/retrievable ID or TAG or CLASS selectors
                rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

                rsibling = /[+~]/,

                // CSS escapes
                // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
                runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
                funescape = function (_, escaped, escapedWhitespace) {
                  var high = "0x" + escaped - 0x10000;
                  // NaN means non-codepoint
                  // Support: Firefox<24
                  // Workaround erroneous numeric interpretation of +"0x"
                  return high !== high || escapedWhitespace ?
                    escaped :
                    high < 0 ?
                    // BMP codepoint
                    String.fromCharCode(high + 0x10000) :
                    // Supplemental Plane codepoint (surrogate pair)
                    String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
                },

                // CSS string/identifier serialization
                // https://drafts.csswg.org/cssom/#common-serializing-idioms
                rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
                fcssescape = function (ch, asCodePoint) {
                  if (asCodePoint) {

                    // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
                    if (ch === "\0") {
                      return "\uFFFD";
                    }

                    // Control characters and (dependent upon position) numbers get escaped as code points
                    return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
                  }

                  // Other potentially-special ASCII characters get backslash-escaped
                  return "\\" + ch;
                },

                // Used for iframes
                // See setDocument()
                // Removing the function wrapper causes a "Permission Denied"
                // error in IE
                unloadHandler = function () {
                  setDocument();
                },

                disabledAncestor = addCombinator(
                  function (elem) {
                    return elem.disabled === true && ("form" in elem || "label" in elem);
                  }, { dir: "parentNode", next: "legend" }
                );

              // Optimize for push.apply( _, NodeList )
              try {
                push.apply(
                  (arr = slice.call(preferredDoc.childNodes)),
                  preferredDoc.childNodes
                );
                // Support: Android<4.0
                // Detect silently failing push.apply
                arr[preferredDoc.childNodes.length].nodeType;
              } catch (e) {
                push = {
                  apply: arr.length ?

                    // Leverage slice if possible
                    function (target, els) {
                      push_native.apply(target, slice.call(els));
                    } :

                    // Support: IE<9
                    // Otherwise append directly
                    function (target, els) {
                      var j = target.length,
                        i = 0;
                      // Can't trust NodeList.length
                      while ((target[j++] = els[i++])) {}
                      target.length = j - 1;
                    }
                };
              }

              function Sizzle(selector, context, results, seed) {
                var m, i, elem, nid, match, groups, newSelector,
                  newContext = context && context.ownerDocument,

                  // nodeType defaults to 9, since context defaults to document
                  nodeType = context ? context.nodeType : 9;

                results = results || [];

                // Return early from calls with invalid selector or context
                if (typeof selector !== "string" || !selector ||
                  nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

                  return results;
                }

                // Try to shortcut find operations (as opposed to filters) in HTML documents
                if (!seed) {

                  if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                    setDocument(context);
                  }
                  context = context || document;

                  if (documentIsHTML) {

                    // If the selector is sufficiently simple, try using a "get*By*" DOM method
                    // (excepting DocumentFragment context, where the methods don't exist)
                    if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

                      // ID selector
                      if ((m = match[1])) {

                        // Document context
                        if (nodeType === 9) {
                          if ((elem = context.getElementById(m))) {

                            // Support: IE, Opera, Webkit
                            // TODO: identify versions
                            // getElementById can match elements by name instead of ID
                            if (elem.id === m) {
                              results.push(elem);
                              return results;
                            }
                          } else {
                            return results;
                          }

                          // Element context
                        } else {

                          // Support: IE, Opera, Webkit
                          // TODO: identify versions
                          // getElementById can match elements by name instead of ID
                          if (newContext && (elem = newContext.getElementById(m)) &&
                            contains(context, elem) &&
                            elem.id === m) {

                            results.push(elem);
                            return results;
                          }
                        }

                        // Type selector
                      } else if (match[2]) {
                        push.apply(results, context.getElementsByTagName(selector));
                        return results;

                        // Class selector
                      } else if ((m = match[3]) && support.getElementsByClassName &&
                        context.getElementsByClassName) {

                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                      }
                    }

                    // Take advantage of querySelectorAll
                    if (support.qsa &&
                      !compilerCache[selector + " "] &&
                      (!rbuggyQSA || !rbuggyQSA.test(selector))) {

                      if (nodeType !== 1) {
                        newContext = context;
                        newSelector = selector;

                        // qSA looks outside Element context, which is not what we want
                        // Thanks to Andrew Dupont for this workaround technique
                        // Support: IE <=8
                        // Exclude object elements
                      } else if (context.nodeName.toLowerCase() !== "object") {

                        // Capture the context ID, setting it first if necessary
                        if ((nid = context.getAttribute("id"))) {
                          nid = nid.replace(rcssescape, fcssescape);
                        } else {
                          context.setAttribute("id", (nid = expando));
                        }

                        // Prefix every selector in the list
                        groups = tokenize(selector);
                        i = groups.length;
                        while (i--) {
                          groups[i] = "#" + nid + " " + toSelector(groups[i]);
                        }
                        newSelector = groups.join(",");

                        // Expand context for sibling selectors
                        newContext = rsibling.test(selector) && testContext(context.parentNode) ||
                          context;
                      }

                      if (newSelector) {
                        try {
                          push.apply(results,
                            newContext.querySelectorAll(newSelector)
                          );
                          return results;
                        } catch (qsaError) {} finally {
                          if (nid === expando) {
                            context.removeAttribute("id");
                          }
                        }
                      }
                    }
                  }
                }

                // All others
                return select(selector.replace(rtrim, "$1"), context, results, seed);
              }

              /**
               * Create key-value caches of limited size
               * @returns {function(string, object)} Returns the Object data after storing it on itself with
               *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
               *	deleting the oldest entry
               */
              function createCache() {
                var keys = [];

                function cache(key, value) {
                  // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                  if (keys.push(key + " ") > Expr.cacheLength) {
                    // Only keep the most recent entries
                    delete cache[keys.shift()];
                  }
                  return (cache[key + " "] = value);
                }
                return cache;
              }

              /**
               * Mark a function for special use by Sizzle
               * @param {Function} fn The function to mark
               */
              function markFunction(fn) {
                fn[expando] = true;
                return fn;
              }

              /**
               * Support testing using an element
               * @param {Function} fn Passed the created element and returns a boolean result
               */
              function assert(fn) {
                var el = document.createElement("fieldset");

                try {
                  return !!fn(el);
                } catch (e) {
                  return false;
                } finally {
                  // Remove from its parent by default
                  if (el.parentNode) {
                    el.parentNode.removeChild(el);
                  }
                  // release memory in IE
                  el = null;
                }
              }

              /**
               * Adds the same handler for all of the specified attrs
               * @param {String} attrs Pipe-separated list of attributes
               * @param {Function} handler The method that will be applied
               */
              function addHandle(attrs, handler) {
                var arr = attrs.split("|"),
                  i = arr.length;

                while (i--) {
                  Expr.attrHandle[arr[i]] = handler;
                }
              }

              /**
               * Checks document order of two siblings
               * @param {Element} a
               * @param {Element} b
               * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
               */
              function siblingCheck(a, b) {
                var cur = b && a,
                  diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
                  a.sourceIndex - b.sourceIndex;

                // Use IE sourceIndex if available on both nodes
                if (diff) {
                  return diff;
                }

                // Check if b follows a
                if (cur) {
                  while ((cur = cur.nextSibling)) {
                    if (cur === b) {
                      return -1;
                    }
                  }
                }

                return a ? 1 : -1;
              }

              /**
               * Returns a function to use in pseudos for input types
               * @param {String} type
               */
              function createInputPseudo(type) {
                return function (elem) {
                  var name = elem.nodeName.toLowerCase();
                  return name === "input" && elem.type === type;
                };
              }

              /**
               * Returns a function to use in pseudos for buttons
               * @param {String} type
               */
              function createButtonPseudo(type) {
                return function (elem) {
                  var name = elem.nodeName.toLowerCase();
                  return (name === "input" || name === "button") && elem.type === type;
                };
              }

              /**
               * Returns a function to use in pseudos for :enabled/:disabled
               * @param {Boolean} disabled true for :disabled; false for :enabled
               */
              function createDisabledPseudo(disabled) {

                // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
                return function (elem) {

                  // Only certain elements can match :enabled or :disabled
                  // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
                  // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
                  if ("form" in elem) {

                    // Check for inherited disabledness on relevant non-disabled elements:
                    // * listed form-associated elements in a disabled fieldset
                    //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                    // * option elements in a disabled optgroup
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                    // All such elements have a "form" property.
                    if (elem.parentNode && elem.disabled === false) {

                      // Option elements defer to a parent optgroup if present
                      if ("label" in elem) {
                        if ("label" in elem.parentNode) {
                          return elem.parentNode.disabled === disabled;
                        } else {
                          return elem.disabled === disabled;
                        }
                      }

                      // Support: IE 6 - 11
                      // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                      return elem.isDisabled === disabled ||

                        // Where there is no isDisabled, check manually
                        /* jshint -W018 */
                        elem.isDisabled !== !disabled &&
                        disabledAncestor(elem) === disabled;
                    }

                    return elem.disabled === disabled;

                    // Try to winnow out elements that can't be disabled before trusting the disabled property.
                    // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                    // even exist on them, let alone have a boolean value.
                  } else if ("label" in elem) {
                    return elem.disabled === disabled;
                  }

                  // Remaining elements are neither :enabled nor :disabled
                  return false;
                };
              }

              /**
               * Returns a function to use in pseudos for positionals
               * @param {Function} fn
               */
              function createPositionalPseudo(fn) {
                return markFunction(function (argument) {
                  argument = +argument;
                  return markFunction(function (seed, matches) {
                    var j,
                      matchIndexes = fn([], seed.length, argument),
                      i = matchIndexes.length;

                    // Match elements found at the specified indexes
                    while (i--) {
                      if (seed[(j = matchIndexes[i])]) {
                        seed[j] = !(matches[j] = seed[j]);
                      }
                    }
                  });
                });
              }

              /**
               * Checks a node for validity as a Sizzle context
               * @param {Element|Object=} context
               * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
               */
              function testContext(context) {
                return context && typeof context.getElementsByTagName !== "undefined" && context;
              }

              // Expose support vars for convenience
              support = Sizzle.support = {};

              /**
               * Detects XML nodes
               * @param {Element|Object} elem An element or a document
               * @returns {Boolean} True iff elem is a non-HTML XML node
               */
              isXML = Sizzle.isXML = function (elem) {
                // documentElement is verified for cases where it doesn't yet exist
                // (such as loading iframes in IE - #4833)
                var documentElement = elem && (elem.ownerDocument || elem).documentElement;
                return documentElement ? documentElement.nodeName !== "HTML" : false;
              };

              /**
               * Sets document-related variables once based on the current document
               * @param {Element|Object} [doc] An element or document object to use to set the document
               * @returns {Object} Returns the current document
               */
              setDocument = Sizzle.setDocument = function (node) {
                var hasCompare, subWindow,
                  doc = node ? node.ownerDocument || node : preferredDoc;

                // Return early if doc is invalid or already selected
                if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                  return document;
                }

                // Update global variables
                document = doc;
                docElem = document.documentElement;
                documentIsHTML = !isXML(document);

                // Support: IE 9-11, Edge
                // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
                if (preferredDoc !== document &&
                  (subWindow = document.defaultView) && subWindow.top !== subWindow) {

                  // Support: IE 11, Edge
                  if (subWindow.addEventListener) {
                    subWindow.addEventListener("unload", unloadHandler, false);

                    // Support: IE 9 - 10 only
                  } else if (subWindow.attachEvent) {
                    subWindow.attachEvent("onunload", unloadHandler);
                  }
                }

                /* Attributes
                ---------------------------------------------------------------------- */

                // Support: IE<8
                // Verify that getAttribute really returns attributes and not properties
                // (excepting IE8 booleans)
                support.attributes = assert(function (el) {
                  el.className = "i";
                  return !el.getAttribute("className");
                });

                /* getElement(s)By*
                ---------------------------------------------------------------------- */

                // Check if getElementsByTagName("*") returns only elements
                support.getElementsByTagName = assert(function (el) {
                  el.appendChild(document.createComment(""));
                  return !el.getElementsByTagName("*").length;
                });

                // Support: IE<9
                support.getElementsByClassName = rnative.test(document.getElementsByClassName);

                // Support: IE<10
                // Check if getElementById returns elements by name
                // The broken getElementById methods don't pick up programmatically-set names,
                // so use a roundabout getElementsByName test
                support.getById = assert(function (el) {
                  docElem.appendChild(el).id = expando;
                  return !document.getElementsByName || !document.getElementsByName(expando).length;
                });

                // ID filter and find
                if (support.getById) {
                  Expr.filter["ID"] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                      return elem.getAttribute("id") === attrId;
                    };
                  };
                  Expr.find["ID"] = function (id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                      var elem = context.getElementById(id);
                      return elem ? [elem] : [];
                    }
                  };
                } else {
                  Expr.filter["ID"] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                      var node = typeof elem.getAttributeNode !== "undefined" &&
                        elem.getAttributeNode("id");
                      return node && node.value === attrId;
                    };
                  };

                  // Support: IE 6 - 7 only
                  // getElementById is not reliable as a find shortcut
                  Expr.find["ID"] = function (id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                      var node, i, elems,
                        elem = context.getElementById(id);

                      if (elem) {

                        // Verify the id attribute
                        node = elem.getAttributeNode("id");
                        if (node && node.value === id) {
                          return [elem];
                        }

                        // Fall back on getElementsByName
                        elems = context.getElementsByName(id);
                        i = 0;
                        while ((elem = elems[i++])) {
                          node = elem.getAttributeNode("id");
                          if (node && node.value === id) {
                            return [elem];
                          }
                        }
                      }

                      return [];
                    }
                  };
                }

                // Tag
                Expr.find["TAG"] = support.getElementsByTagName ?
                  function (tag, context) {
                    if (typeof context.getElementsByTagName !== "undefined") {
                      return context.getElementsByTagName(tag);

                      // DocumentFragment nodes don't have gEBTN
                    } else if (support.qsa) {
                      return context.querySelectorAll(tag);
                    }
                  } :

                  function (tag, context) {
                    var elem,
                      tmp = [],
                      i = 0,
                      // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                      results = context.getElementsByTagName(tag);

                    // Filter out possible comments
                    if (tag === "*") {
                      while ((elem = results[i++])) {
                        if (elem.nodeType === 1) {
                          tmp.push(elem);
                        }
                      }

                      return tmp;
                    }
                    return results;
                  };

                // Class
                Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
                  if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                    return context.getElementsByClassName(className);
                  }
                };

                /* QSA/matchesSelector
                ---------------------------------------------------------------------- */

                // QSA and matchesSelector support

                // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
                rbuggyMatches = [];

                // qSa(:focus) reports false when true (Chrome 21)
                // We allow this because of a bug in IE8/9 that throws an error
                // whenever `document.activeElement` is accessed on an iframe
                // So, we allow :focus to pass through QSA all the time to avoid the IE error
                // See https://bugs.jquery.com/ticket/13378
                rbuggyQSA = [];

                if ((support.qsa = rnative.test(document.querySelectorAll))) {
                  // Build QSA regex
                  // Regex strategy adopted from Diego Perini
                  assert(function (el) {
                    // Select is set to empty string on purpose
                    // This is to test IE's treatment of not explicitly
                    // setting a boolean content attribute,
                    // since its presence should be enough
                    // https://bugs.jquery.com/ticket/12359
                    docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" +
                      "<select id='" + expando + "-\r\\' msallowcapture=''>" +
                      "<option selected=''></option></select>";

                    // Support: IE8, Opera 11-12.16
                    // Nothing should be selected when empty strings follow ^= or $= or *=
                    // The test attribute must be unknown in Opera but "safe" for WinRT
                    // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                    if (el.querySelectorAll("[msallowcapture^='']").length) {
                      rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    }

                    // Support: IE8
                    // Boolean attributes and "value" are not treated correctly
                    if (!el.querySelectorAll("[selected]").length) {
                      rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    }

                    // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
                    if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                      rbuggyQSA.push("~=");
                    }

                    // Webkit/Opera - :checked should return selected option elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    // IE8 throws error here and will not see later tests
                    if (!el.querySelectorAll(":checked").length) {
                      rbuggyQSA.push(":checked");
                    }

                    // Support: Safari 8+, iOS 8+
                    // https://bugs.webkit.org/show_bug.cgi?id=136851
                    // In-page `selector#id sibling-combinator selector` fails
                    if (!el.querySelectorAll("a#" + expando + "+*").length) {
                      rbuggyQSA.push(".#.+[+~]");
                    }
                  });

                  assert(function (el) {
                    el.innerHTML = "<a href='' disabled='disabled'></a>" +
                      "<select disabled='disabled'><option/></select>";

                    // Support: Windows 8 Native Apps
                    // The type and name attributes are restricted during .innerHTML assignment
                    var input = document.createElement("input");
                    input.setAttribute("type", "hidden");
                    el.appendChild(input).setAttribute("name", "D");

                    // Support: IE8
                    // Enforce case-sensitivity of name attribute
                    if (el.querySelectorAll("[name=d]").length) {
                      rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    }

                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                    // IE8 throws error here and will not see later tests
                    if (el.querySelectorAll(":enabled").length !== 2) {
                      rbuggyQSA.push(":enabled", ":disabled");
                    }

                    // Support: IE9-11+
                    // IE's :disabled selector does not pick up the children of disabled fieldsets
                    docElem.appendChild(el).disabled = true;
                    if (el.querySelectorAll(":disabled").length !== 2) {
                      rbuggyQSA.push(":enabled", ":disabled");
                    }

                    // Opera 10-11 does not throw on post-comma invalid pseudos
                    el.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                  });
                }

                if ((support.matchesSelector = rnative.test((matches = docElem.matches ||
                    docElem.webkitMatchesSelector ||
                    docElem.mozMatchesSelector ||
                    docElem.oMatchesSelector ||
                    docElem.msMatchesSelector)))) {

                  assert(function (el) {
                    // Check to see if it's possible to do matchesSelector
                    // on a disconnected node (IE 9)
                    support.disconnectedMatch = matches.call(el, "*");

                    // This should fail with an exception
                    // Gecko does not error, returns false instead
                    matches.call(el, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                  });
                }

                rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
                rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

                /* Contains
                ---------------------------------------------------------------------- */
                hasCompare = rnative.test(docElem.compareDocumentPosition);

                // Element contains another
                // Purposefully self-exclusive
                // As in, an element does not contain itself
                contains = hasCompare || rnative.test(docElem.contains) ?
                  function (a, b) {
                    var adown = a.nodeType === 9 ? a.documentElement : a,
                      bup = b && b.parentNode;
                    return a === bup || !!(bup && bup.nodeType === 1 && (
                      adown.contains ?
                      adown.contains(bup) :
                      a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16
                    ));
                  } :
                  function (a, b) {
                    if (b) {
                      while ((b = b.parentNode)) {
                        if (b === a) {
                          return true;
                        }
                      }
                    }
                    return false;
                  };

                /* Sorting
                ---------------------------------------------------------------------- */

                // Document order sorting
                sortOrder = hasCompare ?
                  function (a, b) {

                    // Flag for duplicate removal
                    if (a === b) {
                      hasDuplicate = true;
                      return 0;
                    }

                    // Sort on method existence if only one input has compareDocumentPosition
                    var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                    if (compare) {
                      return compare;
                    }

                    // Calculate position if both inputs belong to the same document
                    compare = (a.ownerDocument || a) === (b.ownerDocument || b) ?
                      a.compareDocumentPosition(b) :

                      // Otherwise we know they are disconnected
                      1;

                    // Disconnected nodes
                    if (compare & 1 ||
                      (!support.sortDetached && b.compareDocumentPosition(a) === compare)) {

                      // Choose the first element that is related to our preferred document
                      if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                        return -1;
                      }
                      if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                        return 1;
                      }

                      // Maintain original order
                      return sortInput ?
                        (indexOf(sortInput, a) - indexOf(sortInput, b)) :
                        0;
                    }

                    return compare & 4 ? -1 : 1;
                  } :
                  function (a, b) {
                    // Exit early if the nodes are identical
                    if (a === b) {
                      hasDuplicate = true;
                      return 0;
                    }

                    var cur,
                      i = 0,
                      aup = a.parentNode,
                      bup = b.parentNode,
                      ap = [a],
                      bp = [b];

                    // Parentless nodes are either documents or disconnected
                    if (!aup || !bup) {
                      return a === document ? -1 :
                        b === document ? 1 :
                        aup ? -1 :
                        bup ? 1 :
                        sortInput ?
                        (indexOf(sortInput, a) - indexOf(sortInput, b)) :
                        0;

                      // If the nodes are siblings, we can do a quick check
                    } else if (aup === bup) {
                      return siblingCheck(a, b);
                    }

                    // Otherwise we need full lists of their ancestors for comparison
                    cur = a;
                    while ((cur = cur.parentNode)) {
                      ap.unshift(cur);
                    }
                    cur = b;
                    while ((cur = cur.parentNode)) {
                      bp.unshift(cur);
                    }

                    // Walk down the tree looking for a discrepancy
                    while (ap[i] === bp[i]) {
                      i++;
                    }

                    return i ?
                      // Do a sibling check if the nodes have a common ancestor
                      siblingCheck(ap[i], bp[i]) :

                      // Otherwise nodes in our document sort first
                      ap[i] === preferredDoc ? -1 :
                      bp[i] === preferredDoc ? 1 :
                      0;
                  };

                return document;
              };

              Sizzle.matches = function (expr, elements) {
                return Sizzle(expr, null, null, elements);
              };

              Sizzle.matchesSelector = function (elem, expr) {
                // Set document vars if needed
                if ((elem.ownerDocument || elem) !== document) {
                  setDocument(elem);
                }

                // Make sure that attribute selectors are quoted
                expr = expr.replace(rattributeQuotes, "='$1']");

                if (support.matchesSelector && documentIsHTML &&
                  !compilerCache[expr + " "] &&
                  (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
                  (!rbuggyQSA || !rbuggyQSA.test(expr))) {

                  try {
                    var ret = matches.call(elem, expr);

                    // IE 9's matchesSelector returns false on disconnected nodes
                    if (ret || support.disconnectedMatch ||
                      // As well, disconnected nodes are said to be in a document
                      // fragment in IE 9
                      elem.document && elem.document.nodeType !== 11) {
                      return ret;
                    }
                  } catch (e) {}
                }

                return Sizzle(expr, document, null, [elem]).length > 0;
              };

              Sizzle.contains = function (context, elem) {
                // Set document vars if needed
                if ((context.ownerDocument || context) !== document) {
                  setDocument(context);
                }
                return contains(context, elem);
              };

              Sizzle.attr = function (elem, name) {
                // Set document vars if needed
                if ((elem.ownerDocument || elem) !== document) {
                  setDocument(elem);
                }

                var fn = Expr.attrHandle[name.toLowerCase()],
                  // Don't get fooled by Object.prototype properties (jQuery #13807)
                  val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ?
                  fn(elem, name, !documentIsHTML) :
                  undefined;

                return val !== undefined ?
                  val :
                  support.attributes || !documentIsHTML ?
                  elem.getAttribute(name) :
                  (val = elem.getAttributeNode(name)) && val.specified ?
                  val.value :
                  null;
              };

              Sizzle.escape = function (sel) {
                return (sel + "").replace(rcssescape, fcssescape);
              };

              Sizzle.error = function (msg) {
                throw new Error("Syntax error, unrecognized expression: " + msg);
              };

              /**
               * Document sorting and removing duplicates
               * @param {ArrayLike} results
               */
              Sizzle.uniqueSort = function (results) {
                var elem,
                  duplicates = [],
                  j = 0,
                  i = 0;

                // Unless we *know* we can detect duplicates, assume their presence
                hasDuplicate = !support.detectDuplicates;
                sortInput = !support.sortStable && results.slice(0);
                results.sort(sortOrder);

                if (hasDuplicate) {
                  while ((elem = results[i++])) {
                    if (elem === results[i]) {
                      j = duplicates.push(i);
                    }
                  }
                  while (j--) {
                    results.splice(duplicates[j], 1);
                  }
                }

                // Clear input after sorting to release objects
                // See https://github.com/jquery/sizzle/pull/225
                sortInput = null;

                return results;
              };

              /**
               * Utility function for retrieving the text value of an array of DOM nodes
               * @param {Array|Element} elem
               */
              getText = Sizzle.getText = function (elem) {
                var node,
                  ret = "",
                  i = 0,
                  nodeType = elem.nodeType;

                if (!nodeType) {
                  // If no nodeType, this is expected to be an array
                  while ((node = elem[i++])) {
                    // Do not traverse comment nodes
                    ret += getText(node);
                  }
                } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                  // Use textContent for elements
                  // innerText usage removed for consistency of new lines (jQuery #11153)
                  if (typeof elem.textContent === "string") {
                    return elem.textContent;
                  } else {
                    // Traverse its children
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                      ret += getText(elem);
                    }
                  }
                } else if (nodeType === 3 || nodeType === 4) {
                  return elem.nodeValue;
                }
                // Do not include comment or processing instruction nodes

                return ret;
              };

              Expr = Sizzle.selectors = {

                // Can be adjusted by the user
                cacheLength: 50,

                createPseudo: markFunction,

                match: matchExpr,

                attrHandle: {},

                find: {},

                relative: {
                  ">": { dir: "parentNode", first: true },
                  " ": { dir: "parentNode" },
                  "+": { dir: "previousSibling", first: true },
                  "~": { dir: "previousSibling" }
                },

                preFilter: {
                  "ATTR": function (match) {
                    match[1] = match[1].replace(runescape, funescape);

                    // Move the given value to match[3] whether quoted or unquoted
                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

                    if (match[2] === "~=") {
                      match[3] = " " + match[3] + " ";
                    }

                    return match.slice(0, 4);
                  },

                  "CHILD": function (match) {
                    /* matches from matchExpr["CHILD"]
                    	1 type (only|nth|...)
                    	2 what (child|of-type)
                    	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                    	4 xn-component of xn+y argument ([+-]?\d*n|)
                    	5 sign of xn-component
                    	6 x of xn-component
                    	7 sign of y-component
                    	8 y of y-component
                    */
                    match[1] = match[1].toLowerCase();

                    if (match[1].slice(0, 3) === "nth") {
                      // nth-* requires argument
                      if (!match[3]) {
                        Sizzle.error(match[0]);
                      }

                      // numeric x and y parameters for Expr.filter.CHILD
                      // remember that false/true cast respectively to 0/1
                      match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                      match[5] = +((match[7] + match[8]) || match[3] === "odd");

                      // other types prohibit arguments
                    } else if (match[3]) {
                      Sizzle.error(match[0]);
                    }

                    return match;
                  },

                  "PSEUDO": function (match) {
                    var excess,
                      unquoted = !match[6] && match[2];

                    if (matchExpr["CHILD"].test(match[0])) {
                      return null;
                    }

                    // Accept quoted arguments as-is
                    if (match[3]) {
                      match[2] = match[4] || match[5] || "";

                      // Strip excess characters from unquoted arguments
                    } else if (unquoted && rpseudo.test(unquoted) &&
                      // Get excess from tokenize (recursively)
                      (excess = tokenize(unquoted, true)) &&
                      // advance to the next closing parenthesis
                      (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

                      // excess is a negative index
                      match[0] = match[0].slice(0, excess);
                      match[2] = unquoted.slice(0, excess);
                    }

                    // Return only captures needed by the pseudo filter method (type and argument)
                    return match.slice(0, 3);
                  }
                },

                filter: {

                  "TAG": function (nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ?
                      function () { return true; } :
                      function (elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                      };
                  },

                  "CLASS": function (className) {
                    var pattern = classCache[className + " "];

                    return pattern ||
                      (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&
                      classCache(className, function (elem) {
                        return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                      });
                  },

                  "ATTR": function (name, operator, check) {
                    return function (elem) {
                      var result = Sizzle.attr(elem, name);

                      if (result == null) {
                        return operator === "!=";
                      }
                      if (!operator) {
                        return true;
                      }

                      result += "";

                      return operator === "=" ? result === check :
                        operator === "!=" ? result !== check :
                        operator === "^=" ? check && result.indexOf(check) === 0 :
                        operator === "*=" ? check && result.indexOf(check) > -1 :
                        operator === "$=" ? check && result.slice(-check.length) === check :
                        operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 :
                        operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" :
                        false;
                    };
                  },

                  "CHILD": function (type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth",
                      forward = type.slice(-4) !== "last",
                      ofType = what === "of-type";

                    return first === 1 && last === 0 ?

                      // Shortcut for :nth-*(n)
                      function (elem) {
                        return !!elem.parentNode;
                      } :

                      function (elem, context, xml) {
                        var cache, uniqueCache, outerCache, node, nodeIndex, start,
                          dir = simple !== forward ? "nextSibling" : "previousSibling",
                          parent = elem.parentNode,
                          name = ofType && elem.nodeName.toLowerCase(),
                          useCache = !xml && !ofType,
                          diff = false;

                        if (parent) {

                          // :(first|last|only)-(child|of-type)
                          if (simple) {
                            while (dir) {
                              node = elem;
                              while ((node = node[dir])) {
                                if (ofType ?
                                  node.nodeName.toLowerCase() === name :
                                  node.nodeType === 1) {

                                  return false;
                                }
                              }
                              // Reverse direction for :only-* (if we haven't yet done so)
                              start = dir = type === "only" && !start && "nextSibling";
                            }
                            return true;
                          }

                          start = [forward ? parent.firstChild : parent.lastChild];

                          // non-xml :nth-child(...) stores cache data on `parent`
                          if (forward && useCache) {

                            // Seek `elem` from a previously-cached index

                            // ...in a gzip-friendly way
                            node = parent;
                            outerCache = node[expando] || (node[expando] = {});

                            // Support: IE <9 only
                            // Defend against cloned attroperties (jQuery gh-1709)
                            uniqueCache = outerCache[node.uniqueID] ||
                              (outerCache[node.uniqueID] = {});

                            cache = uniqueCache[type] || [];
                            nodeIndex = cache[0] === dirruns && cache[1];
                            diff = nodeIndex && cache[2];
                            node = nodeIndex && parent.childNodes[nodeIndex];

                            while ((node = ++nodeIndex && node && node[dir] ||

                                // Fallback to seeking `elem` from the start
                                (diff = nodeIndex = 0) || start.pop())) {

                              // When found, cache indexes on `parent` and break
                              if (node.nodeType === 1 && ++diff && node === elem) {
                                uniqueCache[type] = [dirruns, nodeIndex, diff];
                                break;
                              }
                            }

                          } else {
                            // Use previously-cached element index if available
                            if (useCache) {
                              // ...in a gzip-friendly way
                              node = elem;
                              outerCache = node[expando] || (node[expando] = {});

                              // Support: IE <9 only
                              // Defend against cloned attroperties (jQuery gh-1709)
                              uniqueCache = outerCache[node.uniqueID] ||
                                (outerCache[node.uniqueID] = {});

                              cache = uniqueCache[type] || [];
                              nodeIndex = cache[0] === dirruns && cache[1];
                              diff = nodeIndex;
                            }

                            // xml :nth-child(...)
                            // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                            if (diff === false) {
                              // Use the same loop as above to seek `elem` from the start
                              while ((node = ++nodeIndex && node && node[dir] ||
                                  (diff = nodeIndex = 0) || start.pop())) {

                                if ((ofType ?
                                    node.nodeName.toLowerCase() === name :
                                    node.nodeType === 1) &&
                                  ++diff) {

                                  // Cache the index of each encountered element
                                  if (useCache) {
                                    outerCache = node[expando] || (node[expando] = {});

                                    // Support: IE <9 only
                                    // Defend against cloned attroperties (jQuery gh-1709)
                                    uniqueCache = outerCache[node.uniqueID] ||
                                      (outerCache[node.uniqueID] = {});

                                    uniqueCache[type] = [dirruns, diff];
                                  }

                                  if (node === elem) {
                                    break;
                                  }
                                }
                              }
                            }
                          }

                          // Incorporate the offset, then check against cycle size
                          diff -= last;
                          return diff === first || (diff % first === 0 && diff / first >= 0);
                        }
                      };
                  },

                  "PSEUDO": function (pseudo, argument) {
                    // pseudo-class names are case-insensitive
                    // http://www.w3.org/TR/selectors/#pseudo-classes
                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                    // Remember that setFilters inherits from pseudos
                    var args,
                      fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
                      Sizzle.error("unsupported pseudo: " + pseudo);

                    // The user may use createPseudo to indicate that
                    // arguments are needed to create the filter function
                    // just as Sizzle does
                    if (fn[expando]) {
                      return fn(argument);
                    }

                    // But maintain support for old signatures
                    if (fn.length > 1) {
                      args = [pseudo, pseudo, "", argument];
                      return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ?
                        markFunction(function (seed, matches) {
                          var idx,
                            matched = fn(seed, argument),
                            i = matched.length;
                          while (i--) {
                            idx = indexOf(seed, matched[i]);
                            seed[idx] = !(matches[idx] = matched[i]);
                          }
                        }) :
                        function (elem) {
                          return fn(elem, 0, args);
                        };
                    }

                    return fn;
                  }
                },

                pseudos: {
                  // Potentially complex pseudos
                  "not": markFunction(function (selector) {
                    // Trim the selector passed to compile
                    // to avoid treating leading and trailing
                    // spaces as combinators
                    var input = [],
                      results = [],
                      matcher = compile(selector.replace(rtrim, "$1"));

                    return matcher[expando] ?
                      markFunction(function (seed, matches, context, xml) {
                        var elem,
                          unmatched = matcher(seed, null, xml, []),
                          i = seed.length;

                        // Match elements unmatched by `matcher`
                        while (i--) {
                          if ((elem = unmatched[i])) {
                            seed[i] = !(matches[i] = elem);
                          }
                        }
                      }) :
                      function (elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        // Don't keep the element (issue #299)
                        input[0] = null;
                        return !results.pop();
                      };
                  }),

                  "has": markFunction(function (selector) {
                    return function (elem) {
                      return Sizzle(selector, elem).length > 0;
                    };
                  }),

                  "contains": markFunction(function (text) {
                    text = text.replace(runescape, funescape);
                    return function (elem) {
                      return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                  }),

                  // "Whether an element is represented by a :lang() selector
                  // is based solely on the element's language value
                  // being equal to the identifier C,
                  // or beginning with the identifier C immediately followed by "-".
                  // The matching of C against the element's language value is performed case-insensitively.
                  // The identifier C does not have to be a valid language name."
                  // http://www.w3.org/TR/selectors/#lang-pseudo
                  "lang": markFunction(function (lang) {
                    // lang value must be a valid identifier
                    if (!ridentifier.test(lang || "")) {
                      Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                      var elemLang;
                      do {
                        if ((elemLang = documentIsHTML ?
                            elem.lang :
                            elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {

                          elemLang = elemLang.toLowerCase();
                          return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                        }
                      } while ((elem = elem.parentNode) && elem.nodeType === 1);
                      return false;
                    };
                  }),

                  // Miscellaneous
                  "target": function (elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                  },

                  "root": function (elem) {
                    return elem === docElem;
                  },

                  "focus": function (elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                  },

                  // Boolean properties
                  "enabled": createDisabledPseudo(false),
                  "disabled": createDisabledPseudo(true),

                  "checked": function (elem) {
                    // In CSS3, :checked should return both checked and selected elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    var nodeName = elem.nodeName.toLowerCase();
                    return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
                  },

                  "selected": function (elem) {
                    // Accessing this property makes selected-by-default
                    // options in Safari work properly
                    if (elem.parentNode) {
                      elem.parentNode.selectedIndex;
                    }

                    return elem.selected === true;
                  },

                  // Contents
                  "empty": function (elem) {
                    // http://www.w3.org/TR/selectors/#empty-pseudo
                    // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                    //   but not by others (comment: 8; processing instruction: 7; etc.)
                    // nodeType < 6 works because attributes (2) do not appear as children
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                      if (elem.nodeType < 6) {
                        return false;
                      }
                    }
                    return true;
                  },

                  "parent": function (elem) {
                    return !Expr.pseudos["empty"](elem);
                  },

                  // Element/input types
                  "header": function (elem) {
                    return rheader.test(elem.nodeName);
                  },

                  "input": function (elem) {
                    return rinputs.test(elem.nodeName);
                  },

                  "button": function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                  },

                  "text": function (elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === "input" &&
                      elem.type === "text" &&

                      // Support: IE<8
                      // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                      ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                  },

                  // Position-in-collection
                  "first": createPositionalPseudo(function () {
                    return [0];
                  }),

                  "last": createPositionalPseudo(function (matchIndexes, length) {
                    return [length - 1];
                  }),

                  "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
                    return [argument < 0 ? argument + length : argument];
                  }),

                  "even": createPositionalPseudo(function (matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  "odd": createPositionalPseudo(function (matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; --i >= 0;) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length;) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  })
                }
              };

              Expr.pseudos["nth"] = Expr.pseudos["eq"];

              // Add button/input type pseudos
              for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
                Expr.pseudos[i] = createInputPseudo(i);
              }
              for (i in { submit: true, reset: true }) {
                Expr.pseudos[i] = createButtonPseudo(i);
              }

              // Easy API for creating new setFilters
              function setFilters() {}
              setFilters.prototype = Expr.filters = Expr.pseudos;
              Expr.setFilters = new setFilters();

              tokenize = Sizzle.tokenize = function (selector, parseOnly) {
                var matched, match, tokens, type,
                  soFar, groups, preFilters,
                  cached = tokenCache[selector + " "];

                if (cached) {
                  return parseOnly ? 0 : cached.slice(0);
                }

                soFar = selector;
                groups = [];
                preFilters = Expr.preFilter;

                while (soFar) {

                  // Comma and first run
                  if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                      // Don't consume trailing commas as valid
                      soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push((tokens = []));
                  }

                  matched = false;

                  // Combinators
                  if ((match = rcombinators.exec(soFar))) {
                    matched = match.shift();
                    tokens.push({
                      value: matched,
                      // Cast descendant combinators to space
                      type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                  }

                  // Filters
                  for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||
                        (match = preFilters[type](match)))) {
                      matched = match.shift();
                      tokens.push({
                        value: matched,
                        type: type,
                        matches: match
                      });
                      soFar = soFar.slice(matched.length);
                    }
                  }

                  if (!matched) {
                    break;
                  }
                }

                // Return the length of the invalid excess
                // if we're just parsing
                // Otherwise, throw an error or return tokens
                return parseOnly ?
                  soFar.length :
                  soFar ?
                  Sizzle.error(selector) :
                  // Cache the tokens
                  tokenCache(selector, groups).slice(0);
              };

              function toSelector(tokens) {
                var i = 0,
                  len = tokens.length,
                  selector = "";
                for (; i < len; i++) {
                  selector += tokens[i].value;
                }
                return selector;
              }

              function addCombinator(matcher, combinator, base) {
                var dir = combinator.dir,
                  skip = combinator.next,
                  key = skip || dir,
                  checkNonElements = base && key === "parentNode",
                  doneName = done++;

                return combinator.first ?
                  // Check against closest ancestor/preceding element
                  function (elem, context, xml) {
                    while ((elem = elem[dir])) {
                      if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                      }
                    }
                    return false;
                  } :

                  // Check against all ancestor/preceding elements
                  function (elem, context, xml) {
                    var oldCache, uniqueCache, outerCache,
                      newCache = [dirruns, doneName];

                    // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                    if (xml) {
                      while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                          if (matcher(elem, context, xml)) {
                            return true;
                          }
                        }
                      }
                    } else {
                      while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                          outerCache = elem[expando] || (elem[expando] = {});

                          // Support: IE <9 only
                          // Defend against cloned attroperties (jQuery gh-1709)
                          uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

                          if (skip && skip === elem.nodeName.toLowerCase()) {
                            elem = elem[dir] || elem;
                          } else if ((oldCache = uniqueCache[key]) &&
                            oldCache[0] === dirruns && oldCache[1] === doneName) {

                            // Assign to newCache so results back-propagate to previous elements
                            return (newCache[2] = oldCache[2]);
                          } else {
                            // Reuse newcache so results back-propagate to previous elements
                            uniqueCache[key] = newCache;

                            // A match means we're done; a fail means we have to keep checking
                            if ((newCache[2] = matcher(elem, context, xml))) {
                              return true;
                            }
                          }
                        }
                      }
                    }
                    return false;
                  };
              }

              function elementMatcher(matchers) {
                return matchers.length > 1 ?
                  function (elem, context, xml) {
                    var i = matchers.length;
                    while (i--) {
                      if (!matchers[i](elem, context, xml)) {
                        return false;
                      }
                    }
                    return true;
                  } :
                  matchers[0];
              }

              function multipleContexts(selector, contexts, results) {
                var i = 0,
                  len = contexts.length;
                for (; i < len; i++) {
                  Sizzle(selector, contexts[i], results);
                }
                return results;
              }

              function condense(unmatched, map, filter, context, xml) {
                var elem,
                  newUnmatched = [],
                  i = 0,
                  len = unmatched.length,
                  mapped = map != null;

                for (; i < len; i++) {
                  if ((elem = unmatched[i])) {
                    if (!filter || filter(elem, context, xml)) {
                      newUnmatched.push(elem);
                      if (mapped) {
                        map.push(i);
                      }
                    }
                  }
                }

                return newUnmatched;
              }

              function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
                if (postFilter && !postFilter[expando]) {
                  postFilter = setMatcher(postFilter);
                }
                if (postFinder && !postFinder[expando]) {
                  postFinder = setMatcher(postFinder, postSelector);
                }
                return markFunction(function (seed, results, context, xml) {
                  var temp, i, elem,
                    preMap = [],
                    postMap = [],
                    preexisting = results.length,

                    // Get initial elements from seed or context
                    elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),

                    // Prefilter to get matcher input, preserving a map for seed-results synchronization
                    matcherIn = preFilter && (seed || !selector) ?
                    condense(elems, preMap, preFilter, context, xml) :
                    elems,

                    matcherOut = matcher ?
                    // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                    postFinder || (seed ? preFilter : preexisting || postFilter) ?

                    // ...intermediate processing is necessary
                    [] :

                    // ...otherwise use results directly
                    results :
                    matcherIn;

                  // Find primary matches
                  if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                  }

                  // Apply postFilter
                  if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);

                    // Un-match failing elements by moving them back to matcherIn
                    i = temp.length;
                    while (i--) {
                      if ((elem = temp[i])) {
                        matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                      }
                    }
                  }

                  if (seed) {
                    if (postFinder || preFilter) {
                      if (postFinder) {
                        // Get the final matcherOut by condensing this intermediate into postFinder contexts
                        temp = [];
                        i = matcherOut.length;
                        while (i--) {
                          if ((elem = matcherOut[i])) {
                            // Restore matcherIn since elem is not yet a final match
                            temp.push((matcherIn[i] = elem));
                          }
                        }
                        postFinder(null, (matcherOut = []), temp, xml);
                      }

                      // Move matched elements from seed to results to keep them synchronized
                      i = matcherOut.length;
                      while (i--) {
                        if ((elem = matcherOut[i]) &&
                          (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

                          seed[temp] = !(results[temp] = elem);
                        }
                      }
                    }

                    // Add elements to results, through postFinder if defined
                  } else {
                    matcherOut = condense(
                      matcherOut === results ?
                      matcherOut.splice(preexisting, matcherOut.length) :
                      matcherOut
                    );
                    if (postFinder) {
                      postFinder(null, results, matcherOut, xml);
                    } else {
                      push.apply(results, matcherOut);
                    }
                  }
                });
              }

              function matcherFromTokens(tokens) {
                var checkContext, matcher, j,
                  len = tokens.length,
                  leadingRelative = Expr.relative[tokens[0].type],
                  implicitRelative = leadingRelative || Expr.relative[" "],
                  i = leadingRelative ? 1 : 0,

                  // The foundational matcher ensures that elements are reachable from top-level context(s)
                  matchContext = addCombinator(function (elem) {
                    return elem === checkContext;
                  }, implicitRelative, true),
                  matchAnyContext = addCombinator(function (elem) {
                    return indexOf(checkContext, elem) > -1;
                  }, implicitRelative, true),
                  matchers = [function (elem, context, xml) {
                    var ret = (!leadingRelative && (xml || context !== outermostContext)) || (
                      (checkContext = context).nodeType ?
                      matchContext(elem, context, xml) :
                      matchAnyContext(elem, context, xml));
                    // Avoid hanging onto element (issue #299)
                    checkContext = null;
                    return ret;
                  }];

                for (; i < len; i++) {
                  if ((matcher = Expr.relative[tokens[i].type])) {
                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                  } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

                    // Return special upon seeing a positional matcher
                    if (matcher[expando]) {
                      // Find the next relative operator (if any) for proper handling
                      j = ++i;
                      for (; j < len; j++) {
                        if (Expr.relative[tokens[j].type]) {
                          break;
                        }
                      }
                      return setMatcher(
                        i > 1 && elementMatcher(matchers),
                        i > 1 && toSelector(
                          // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                          tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })
                        ).replace(rtrim, "$1"),
                        matcher,
                        i < j && matcherFromTokens(tokens.slice(i, j)),
                        j < len && matcherFromTokens((tokens = tokens.slice(j))),
                        j < len && toSelector(tokens)
                      );
                    }
                    matchers.push(matcher);
                  }
                }

                return elementMatcher(matchers);
              }

              function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                var bySet = setMatchers.length > 0,
                  byElement = elementMatchers.length > 0,
                  superMatcher = function (seed, context, xml, results, outermost) {
                    var elem, j, matcher,
                      matchedCount = 0,
                      i = "0",
                      unmatched = seed && [],
                      setMatched = [],
                      contextBackup = outermostContext,
                      // We must always have either seed elements or outermost context
                      elems = seed || byElement && Expr.find["TAG"]("*", outermost),
                      // Use integer dirruns iff this is the outermost matcher
                      dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
                      len = elems.length;

                    if (outermost) {
                      outermostContext = context === document || context || outermost;
                    }

                    // Add elements passing elementMatchers directly to results
                    // Support: IE<9, Safari
                    // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                    for (; i !== len && (elem = elems[i]) != null; i++) {
                      if (byElement && elem) {
                        j = 0;
                        if (!context && elem.ownerDocument !== document) {
                          setDocument(elem);
                          xml = !documentIsHTML;
                        }
                        while ((matcher = elementMatchers[j++])) {
                          if (matcher(elem, context || document, xml)) {
                            results.push(elem);
                            break;
                          }
                        }
                        if (outermost) {
                          dirruns = dirrunsUnique;
                        }
                      }

                      // Track unmatched elements for set filters
                      if (bySet) {
                        // They will have gone through all possible matchers
                        if ((elem = !matcher && elem)) {
                          matchedCount--;
                        }

                        // Lengthen the array for every element, matched or not
                        if (seed) {
                          unmatched.push(elem);
                        }
                      }
                    }

                    // `i` is now the count of elements visited above, and adding it to `matchedCount`
                    // makes the latter nonnegative.
                    matchedCount += i;

                    // Apply set filters to unmatched elements
                    // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                    // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                    // no element matchers and no seed.
                    // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                    // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                    // numerically zero.
                    if (bySet && i !== matchedCount) {
                      j = 0;
                      while ((matcher = setMatchers[j++])) {
                        matcher(unmatched, setMatched, context, xml);
                      }

                      if (seed) {
                        // Reintegrate element matches to eliminate the need for sorting
                        if (matchedCount > 0) {
                          while (i--) {
                            if (!(unmatched[i] || setMatched[i])) {
                              setMatched[i] = pop.call(results);
                            }
                          }
                        }

                        // Discard index placeholder values to get only actual matches
                        setMatched = condense(setMatched);
                      }

                      // Add matches to results
                      push.apply(results, setMatched);

                      // Seedless set matches succeeding multiple successful matchers stipulate sorting
                      if (outermost && !seed && setMatched.length > 0 &&
                        (matchedCount + setMatchers.length) > 1) {

                        Sizzle.uniqueSort(results);
                      }
                    }

                    // Override manipulation of globals by nested matchers
                    if (outermost) {
                      dirruns = dirrunsUnique;
                      outermostContext = contextBackup;
                    }

                    return unmatched;
                  };

                return bySet ?
                  markFunction(superMatcher) :
                  superMatcher;
              }

              compile = Sizzle.compile = function (selector, match /* Internal Use Only */ ) {
                var i,
                  setMatchers = [],
                  elementMatchers = [],
                  cached = compilerCache[selector + " "];

                if (!cached) {
                  // Generate a function of recursive functions that can be used to check each element
                  if (!match) {
                    match = tokenize(selector);
                  }
                  i = match.length;
                  while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                      setMatchers.push(cached);
                    } else {
                      elementMatchers.push(cached);
                    }
                  }

                  // Cache the compiled function
                  cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

                  // Save selector and tokenization
                  cached.selector = selector;
                }
                return cached;
              };

              /**
               * A low-level selection function that works with Sizzle's compiled
               *  selector functions
               * @param {String|Function} selector A selector or a pre-compiled
               *  selector function built with Sizzle.compile
               * @param {Element} context
               * @param {Array} [results]
               * @param {Array} [seed] A set of elements to match against
               */
              select = Sizzle.select = function (selector, context, results, seed) {
                var i, tokens, token, type, find,
                  compiled = typeof selector === "function" && selector,
                  match = !seed && tokenize((selector = compiled.selector || selector));

                results = results || [];

                // Try to minimize operations if there is only one selector in the list and no seed
                // (the latter of which guarantees us context)
                if (match.length === 1) {

                  // Reduce context if the leading compound selector is an ID
                  tokens = match[0] = match[0].slice(0);
                  if (tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                    context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

                    context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) {
                      return results;

                      // Precompiled matchers will still verify ancestry, so step up a level
                    } else if (compiled) {
                      context = context.parentNode;
                    }

                    selector = selector.slice(tokens.shift().value.length);
                  }

                  // Fetch a seed set for right-to-left matching
                  i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                  while (i--) {
                    token = tokens[i];

                    // Abort if we hit a combinator
                    if (Expr.relative[(type = token.type)]) {
                      break;
                    }
                    if ((find = Expr.find[type])) {
                      // Search, expanding context for leading sibling combinators
                      if ((seed = find(
                          token.matches[0].replace(runescape, funescape),
                          rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
                        ))) {

                        // If seed is empty or no tokens remain, we can return early
                        tokens.splice(i, 1);
                        selector = seed.length && toSelector(tokens);
                        if (!selector) {
                          push.apply(results, seed);
                          return results;
                        }

                        break;
                      }
                    }
                  }
                }

                // Compile and execute a filtering function if one is not provided
                // Provide `match` to avoid retokenization if we modified the selector above
                (compiled || compile(selector, match))(
                  seed,
                  context, !documentIsHTML,
                  results, !context || rsibling.test(selector) && testContext(context.parentNode) || context
                );
                return results;
              };

              // One-time assignments

              // Sort stability
              support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

              // Support: Chrome 14-35+
              // Always assume duplicates if they aren't passed to the comparison function
              support.detectDuplicates = !!hasDuplicate;

              // Initialize against the default document
              setDocument();

              // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
              // Detached nodes confoundingly follow *each other*
              support.sortDetached = assert(function (el) {
                // Should return 1, but returns 4 (following)
                return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
              });

              // Support: IE<8
              // Prevent attribute/property "interpolation"
              // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
              if (!assert(function (el) {
                  el.innerHTML = "<a href='#'></a>";
                  return el.firstChild.getAttribute("href") === "#";
                })) {
                addHandle("type|href|height|width", function (elem, name, isXML) {
                  if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                  }
                });
              }

              // Support: IE<9
              // Use defaultValue in place of getAttribute("value")
              if (!support.attributes || !assert(function (el) {
                  el.innerHTML = "<input/>";
                  el.firstChild.setAttribute("value", "");
                  return el.firstChild.getAttribute("value") === "";
                })) {
                addHandle("value", function (elem, name, isXML) {
                  if (!isXML && elem.nodeName.toLowerCase() === "input") {
                    return elem.defaultValue;
                  }
                });
              }

              // Support: IE<9
              // Use getAttributeNode to fetch booleans when getAttribute lies
              if (!assert(function (el) {
                  return el.getAttribute("disabled") == null;
                })) {
                addHandle(booleans, function (elem, name, isXML) {
                  var val;
                  if (!isXML) {
                    return elem[name] === true ? name.toLowerCase() :
                      (val = elem.getAttributeNode(name)) && val.specified ?
                      val.value :
                      null;
                  }
                });
              }

              return Sizzle;

            })(window);



          jQuery.find = Sizzle;
          jQuery.expr = Sizzle.selectors;

          // Deprecated
          jQuery.expr[":"] = jQuery.expr.pseudos;
          jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
          jQuery.text = Sizzle.getText;
          jQuery.isXMLDoc = Sizzle.isXML;
          jQuery.contains = Sizzle.contains;
          jQuery.escapeSelector = Sizzle.escape;




          var dir = function (elem, dir, until) {
            var matched = [],
              truncate = until !== undefined;

            while ((elem = elem[dir]) && elem.nodeType !== 9) {
              if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                  break;
                }
                matched.push(elem);
              }
            }
            return matched;
          };


          var siblings = function (n, elem) {
            var matched = [];

            for (; n; n = n.nextSibling) {
              if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
              }
            }

            return matched;
          };


          var rneedsContext = jQuery.expr.match.needsContext;



          function nodeName(elem, name) {

            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

          };
          var rsingleTag = (/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i);



          var risSimple = /^.[^:#\[\.,]*$/;

          // Implement the identical functionality for filter and not
          function winnow(elements, qualifier, not) {
            if (jQuery.isFunction(qualifier)) {
              return jQuery.grep(elements, function (elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
              });
            }

            // Single element
            if (qualifier.nodeType) {
              return jQuery.grep(elements, function (elem) {
                return (elem === qualifier) !== not;
              });
            }

            // Arraylike of elements (jQuery, arguments, Array)
            if (typeof qualifier !== "string") {
              return jQuery.grep(elements, function (elem) {
                return (indexOf.call(qualifier, elem) > -1) !== not;
              });
            }

            // Simple selector that can be filtered directly, removing non-Elements
            if (risSimple.test(qualifier)) {
              return jQuery.filter(qualifier, elements, not);
            }

            // Complex selector, compare the two sets, removing non-Elements
            qualifier = jQuery.filter(qualifier, elements);
            return jQuery.grep(elements, function (elem) {
              return (indexOf.call(qualifier, elem) > -1) !== not && elem.nodeType === 1;
            });
          }

          jQuery.filter = function (expr, elems, not) {
            var elem = elems[0];

            if (not) {
              expr = ":not(" + expr + ")";
            }

            if (elems.length === 1 && elem.nodeType === 1) {
              return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
            }

            return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
              return elem.nodeType === 1;
            }));
          };

          jQuery.fn.extend({
            find: function (selector) {
              var i, ret,
                len = this.length,
                self = this;

              if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function () {
                  for (i = 0; i < len; i++) {
                    if (jQuery.contains(self[i], this)) {
                      return true;
                    }
                  }
                }));
              }

              ret = this.pushStack([]);

              for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
              }

              return len > 1 ? jQuery.uniqueSort(ret) : ret;
            },
            filter: function (selector) {
              return this.pushStack(winnow(this, selector || [], false));
            },
            not: function (selector) {
              return this.pushStack(winnow(this, selector || [], true));
            },
            is: function (selector) {
              return !!winnow(
                this,

                // If this is a positional/relative selector, check membership in the returned set
                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                typeof selector === "string" && rneedsContext.test(selector) ?
                jQuery(selector) :
                selector || [],
                false
              ).length;
            }
          });


          // Initialize a jQuery object


          // A central reference to the root jQuery(document)
          var rootjQuery,

            // A simple way to check for HTML strings
            // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
            // Strict HTML recognition (#11290: must start with <)
            // Shortcut simple #id case for speed
            rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

            init = jQuery.fn.init = function (selector, context, root) {
              var match, elem;

              // HANDLE: $(""), $(null), $(undefined), $(false)
              if (!selector) {
                return this;
              }

              // Method init() accepts an alternate rootjQuery
              // so migrate can support jQuery.sub (gh-2101)
              root = root || rootjQuery;

              // Handle HTML strings
              if (typeof selector === "string") {
                if (selector[0] === "<" &&
                  selector[selector.length - 1] === ">" &&
                  selector.length >= 3) {

                  // Assume that strings that start and end with <> are HTML and skip the regex check
                  match = [null, selector, null];

                } else {
                  match = rquickExpr.exec(selector);
                }

                // Match html or make sure no context is specified for #id
                if (match && (match[1] || !context)) {

                  // HANDLE: $(html) -> $(array)
                  if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;

                    // Option to run scripts is true for back-compat
                    // Intentionally let the error be thrown if parseHTML is not present
                    jQuery.merge(this, jQuery.parseHTML(
                      match[1],
                      context && context.nodeType ? context.ownerDocument || context : document,
                      true
                    ));

                    // HANDLE: $(html, props)
                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                      for (match in context) {

                        // Properties of context are called as methods if possible
                        if (jQuery.isFunction(this[match])) {
                          this[match](context[match]);

                          // ...and otherwise set as attributes
                        } else {
                          this.attr(match, context[match]);
                        }
                      }
                    }

                    return this;

                    // HANDLE: $(#id)
                  } else {
                    elem = document.getElementById(match[2]);

                    if (elem) {

                      // Inject the element directly into the jQuery object
                      this[0] = elem;
                      this.length = 1;
                    }
                    return this;
                  }

                  // HANDLE: $(expr, $(...))
                } else if (!context || context.jquery) {
                  return (context || root).find(selector);

                  // HANDLE: $(expr, context)
                  // (which is just equivalent to: $(context).find(expr)
                } else {
                  return this.constructor(context).find(selector);
                }

                // HANDLE: $(DOMElement)
              } else if (selector.nodeType) {
                this[0] = selector;
                this.length = 1;
                return this;

                // HANDLE: $(function)
                // Shortcut for document ready
              } else if (jQuery.isFunction(selector)) {
                return root.ready !== undefined ?
                  root.ready(selector) :

                  // Execute immediately if ready is not present
                  selector(jQuery);
              }

              return jQuery.makeArray(selector, this);
            };

          // Give the init function the jQuery prototype for later instantiation
          init.prototype = jQuery.fn;

          // Initialize central reference
          rootjQuery = jQuery(document);


          var rparentsprev = /^(?:parents|prev(?:Until|All))/,

            // Methods guaranteed to produce a unique set when starting from a unique set
            guaranteedUnique = {
              children: true,
              contents: true,
              next: true,
              prev: true
            };

          jQuery.fn.extend({
            has: function (target) {
              var targets = jQuery(target, this),
                l = targets.length;

              return this.filter(function () {
                var i = 0;
                for (; i < l; i++) {
                  if (jQuery.contains(this, targets[i])) {
                    return true;
                  }
                }
              });
            },

            closest: function (selectors, context) {
              var cur,
                i = 0,
                l = this.length,
                matched = [],
                targets = typeof selectors !== "string" && jQuery(selectors);

              // Positional selectors never match, since there's no _selection_ context
              if (!rneedsContext.test(selectors)) {
                for (; i < l; i++) {
                  for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

                    // Always skip document fragments
                    if (cur.nodeType < 11 && (targets ?
                        targets.index(cur) > -1 :

                        // Don't pass non-elements to Sizzle
                        cur.nodeType === 1 &&
                        jQuery.find.matchesSelector(cur, selectors))) {

                      matched.push(cur);
                      break;
                    }
                  }
                }
              }

              return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
            },

            // Determine the position of an element within the set
            index: function (elem) {

              // No argument, return index in parent
              if (!elem) {
                return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
              }

              // Index in selector
              if (typeof elem === "string") {
                return indexOf.call(jQuery(elem), this[0]);
              }

              // Locate the position of the desired element
              return indexOf.call(this,

                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[0] : elem
              );
            },

            add: function (selector, context) {
              return this.pushStack(
                jQuery.uniqueSort(
                  jQuery.merge(this.get(), jQuery(selector, context))
                )
              );
            },

            addBack: function (selector) {
              return this.add(selector == null ?
                this.prevObject : this.prevObject.filter(selector)
              );
            }
          });

          function sibling(cur, dir) {
            while ((cur = cur[dir]) && cur.nodeType !== 1) {}
            return cur;
          }

          jQuery.each({
            parent: function (elem) {
              var parent = elem.parentNode;
              return parent && parent.nodeType !== 11 ? parent : null;
            },
            parents: function (elem) {
              return dir(elem, "parentNode");
            },
            parentsUntil: function (elem, i, until) {
              return dir(elem, "parentNode", until);
            },
            next: function (elem) {
              return sibling(elem, "nextSibling");
            },
            prev: function (elem) {
              return sibling(elem, "previousSibling");
            },
            nextAll: function (elem) {
              return dir(elem, "nextSibling");
            },
            prevAll: function (elem) {
              return dir(elem, "previousSibling");
            },
            nextUntil: function (elem, i, until) {
              return dir(elem, "nextSibling", until);
            },
            prevUntil: function (elem, i, until) {
              return dir(elem, "previousSibling", until);
            },
            siblings: function (elem) {
              return siblings((elem.parentNode || {}).firstChild, elem);
            },
            children: function (elem) {
              return siblings(elem.firstChild);
            },
            contents: function (elem) {
              if (nodeName(elem, "iframe")) {
                return elem.contentDocument;
              }

              // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
              // Treat the template element as a regular one in browsers that
              // don't support it.
              if (nodeName(elem, "template")) {
                elem = elem.content || elem;
              }

              return jQuery.merge([], elem.childNodes);
            }
          }, function (name, fn) {
            jQuery.fn[name] = function (until, selector) {
              var matched = jQuery.map(this, fn, until);

              if (name.slice(-5) !== "Until") {
                selector = until;
              }

              if (selector && typeof selector === "string") {
                matched = jQuery.filter(selector, matched);
              }

              if (this.length > 1) {

                // Remove duplicates
                if (!guaranteedUnique[name]) {
                  jQuery.uniqueSort(matched);
                }

                // Reverse order for parents* and prev-derivatives
                if (rparentsprev.test(name)) {
                  matched.reverse();
                }
              }

              return this.pushStack(matched);
            };
          });
          var rnothtmlwhite = (/[^\x20\t\r\n\f]+/g);



          // Convert String-formatted options into Object-formatted ones
          function createOptions(options) {
            var object = {};
            jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
              object[flag] = true;
            });
            return object;
          }

          /*
           * Create a callback list using the following parameters:
           *
           *	options: an optional list of space-separated options that will change how
           *			the callback list behaves or a more traditional option object
           *
           * By default a callback list will act like an event callback list and can be
           * "fired" multiple times.
           *
           * Possible options:
           *
           *	once:			will ensure the callback list can only be fired once (like a Deferred)
           *
           *	memory:			will keep track of previous values and will call any callback added
           *					after the list has been fired right away with the latest "memorized"
           *					values (like a Deferred)
           *
           *	unique:			will ensure a callback can only be added once (no duplicate in the list)
           *
           *	stopOnFalse:	interrupt callings when a callback returns false
           *
           */
          jQuery.Callbacks = function (options) {

            // Convert options from String-formatted to Object-formatted if needed
            // (we check in cache first)
            options = typeof options === "string" ?
              createOptions(options) :
              jQuery.extend({}, options);

            var // Flag to know if list is currently firing
              firing,

              // Last fire value for non-forgettable lists
              memory,

              // Flag to know if list was already fired
              fired,

              // Flag to prevent firing
              locked,

              // Actual callback list
              list = [],

              // Queue of execution data for repeatable lists
              queue = [],

              // Index of currently firing callback (modified by add/remove as needed)
              firingIndex = -1,

              // Fire callbacks
              fire = function () {

                // Enforce single-firing
                locked = locked || options.once;

                // Execute callbacks for all pending executions,
                // respecting firingIndex overrides and runtime changes
                fired = firing = true;
                for (; queue.length; firingIndex = -1) {
                  memory = queue.shift();
                  while (++firingIndex < list.length) {

                    // Run callback and check for early termination
                    if (list[firingIndex].apply(memory[0], memory[1]) === false &&
                      options.stopOnFalse) {

                      // Jump to end and forget the data so .add doesn't re-fire
                      firingIndex = list.length;
                      memory = false;
                    }
                  }
                }

                // Forget the data if we're done with it
                if (!options.memory) {
                  memory = false;
                }

                firing = false;

                // Clean up if we're done firing for good
                if (locked) {

                  // Keep an empty list if we have data for future add calls
                  if (memory) {
                    list = [];

                    // Otherwise, this object is spent
                  } else {
                    list = "";
                  }
                }
              },

              // Actual Callbacks object
              self = {

                // Add a callback or a collection of callbacks to the list
                add: function () {
                  if (list) {

                    // If we have memory from a past run, we should fire after adding
                    if (memory && !firing) {
                      firingIndex = list.length - 1;
                      queue.push(memory);
                    }

                    (function add(args) {
                      jQuery.each(args, function (_, arg) {
                        if (jQuery.isFunction(arg)) {
                          if (!options.unique || !self.has(arg)) {
                            list.push(arg);
                          }
                        } else if (arg && arg.length && jQuery.type(arg) !== "string") {

                          // Inspect recursively
                          add(arg);
                        }
                      });
                    })(arguments);

                    if (memory && !firing) {
                      fire();
                    }
                  }
                  return this;
                },

                // Remove a callback from the list
                remove: function () {
                  jQuery.each(arguments, function (_, arg) {
                    var index;
                    while ((index = jQuery.inArray(arg, list, index)) > -1) {
                      list.splice(index, 1);

                      // Handle firing indexes
                      if (index <= firingIndex) {
                        firingIndex--;
                      }
                    }
                  });
                  return this;
                },

                // Check if a given callback is in the list.
                // If no argument is given, return whether or not list has callbacks attached.
                has: function (fn) {
                  return fn ?
                    jQuery.inArray(fn, list) > -1 :
                    list.length > 0;
                },

                // Remove all callbacks from the list
                empty: function () {
                  if (list) {
                    list = [];
                  }
                  return this;
                },

                // Disable .fire and .add
                // Abort any current/pending executions
                // Clear all callbacks and values
                disable: function () {
                  locked = queue = [];
                  list = memory = "";
                  return this;
                },
                disabled: function () {
                  return !list;
                },

                // Disable .fire
                // Also disable .add unless we have memory (since it would have no effect)
                // Abort any pending executions
                lock: function () {
                  locked = queue = [];
                  if (!memory && !firing) {
                    list = memory = "";
                  }
                  return this;
                },
                locked: function () {
                  return !!locked;
                },

                // Call all callbacks with the given context and arguments
                fireWith: function (context, args) {
                  if (!locked) {
                    args = args || [];
                    args = [context, args.slice ? args.slice() : args];
                    queue.push(args);
                    if (!firing) {
                      fire();
                    }
                  }
                  return this;
                },

                // Call all the callbacks with the given arguments
                fire: function () {
                  self.fireWith(this, arguments);
                  return this;
                },

                // To know if the callbacks have already been called at least once
                fired: function () {
                  return !!fired;
                }
              };

            return self;
          };


          function Identity(v) {
            return v;
          }

          function Thrower(ex) {
            throw ex;
          }

          function adoptValue(value, resolve, reject, noValue) {
            var method;

            try {

              // Check for promise aspect first to privilege synchronous behavior
              if (value && jQuery.isFunction((method = value.promise))) {
                method.call(value).done(resolve).fail(reject);

                // Other thenables
              } else if (value && jQuery.isFunction((method = value.then))) {
                method.call(value, resolve, reject);

                // Other non-thenables
              } else {

                // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
                // * false: [ value ].slice( 0 ) => resolve( value )
                // * true: [ value ].slice( 1 ) => resolve()
                resolve.apply(undefined, [value].slice(noValue));
              }

              // For Promises/A+, convert exceptions into rejections
              // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
              // Deferred#then to conditionally suppress rejection.
            } catch (value) {

              // Support: Android 4.0 only
              // Strict mode functions invoked without .call/.apply get global-object context
              reject.apply(undefined, [value]);
            }
          }

          jQuery.extend({

            Deferred: function (func) {
              var tuples = [

                  // action, add listener, callbacks,
                  // ... .then handlers, argument index, [final state]
                  ["notify", "progress", jQuery.Callbacks("memory"),
                    jQuery.Callbacks("memory"), 2
                  ],
                  ["resolve", "done", jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"), 0, "resolved"
                  ],
                  ["reject", "fail", jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"), 1, "rejected"
                  ]
                ],
                state = "pending",
                promise = {
                  state: function () {
                    return state;
                  },
                  always: function () {
                    deferred.done(arguments).fail(arguments);
                    return this;
                  },
                  "catch": function (fn) {
                    return promise.then(null, fn);
                  },

                  // Keep pipe for back-compat
                  pipe: function ( /* fnDone, fnFail, fnProgress */ ) {
                    var fns = arguments;

                    return jQuery.Deferred(function (newDefer) {
                      jQuery.each(tuples, function (i, tuple) {

                        // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                        var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];

                        // deferred.progress(function() { bind to newDefer or newDefer.notify })
                        // deferred.done(function() { bind to newDefer or newDefer.resolve })
                        // deferred.fail(function() { bind to newDefer or newDefer.reject })
                        deferred[tuple[1]](function () {
                          var returned = fn && fn.apply(this, arguments);
                          if (returned && jQuery.isFunction(returned.promise)) {
                            returned.promise()
                              .progress(newDefer.notify)
                              .done(newDefer.resolve)
                              .fail(newDefer.reject);
                          } else {
                            newDefer[tuple[0] + "With"](
                              this,
                              fn ? [returned] : arguments
                            );
                          }
                        });
                      });
                      fns = null;
                    }).promise();
                  },
                  then: function (onFulfilled, onRejected, onProgress) {
                    var maxDepth = 0;

                    function resolve(depth, deferred, handler, special) {
                      return function () {
                        var that = this,
                          args = arguments,
                          mightThrow = function () {
                            var returned, then;

                            // Support: Promises/A+ section 2.3.3.3.3
                            // https://promisesaplus.com/#point-59
                            // Ignore double-resolution attempts
                            if (depth < maxDepth) {
                              return;
                            }

                            returned = handler.apply(that, args);

                            // Support: Promises/A+ section 2.3.1
                            // https://promisesaplus.com/#point-48
                            if (returned === deferred.promise()) {
                              throw new TypeError("Thenable self-resolution");
                            }

                            // Support: Promises/A+ sections 2.3.3.1, 3.5
                            // https://promisesaplus.com/#point-54
                            // https://promisesaplus.com/#point-75
                            // Retrieve `then` only once
                            then = returned &&

                              // Support: Promises/A+ section 2.3.4
                              // https://promisesaplus.com/#point-64
                              // Only check objects and functions for thenability
                              (typeof returned === "object" ||
                                typeof returned === "function") &&
                              returned.then;

                            // Handle a returned thenable
                            if (jQuery.isFunction(then)) {

                              // Special processors (notify) just wait for resolution
                              if (special) {
                                then.call(
                                  returned,
                                  resolve(maxDepth, deferred, Identity, special),
                                  resolve(maxDepth, deferred, Thrower, special)
                                );

                                // Normal processors (resolve) also hook into progress
                              } else {

                                // ...and disregard older resolution values
                                maxDepth++;

                                then.call(
                                  returned,
                                  resolve(maxDepth, deferred, Identity, special),
                                  resolve(maxDepth, deferred, Thrower, special),
                                  resolve(maxDepth, deferred, Identity,
                                    deferred.notifyWith)
                                );
                              }

                              // Handle all other returned values
                            } else {

                              // Only substitute handlers pass on context
                              // and multiple values (non-spec behavior)
                              if (handler !== Identity) {
                                that = undefined;
                                args = [returned];
                              }

                              // Process the value(s)
                              // Default process is resolve
                              (special || deferred.resolveWith)(that, args);
                            }
                          },

                          // Only normal processors (resolve) catch and reject exceptions
                          process = special ?
                          mightThrow :
                          function () {
                            try {
                              mightThrow();
                            } catch (e) {

                              if (jQuery.Deferred.exceptionHook) {
                                jQuery.Deferred.exceptionHook(e,
                                  process.stackTrace);
                              }

                              // Support: Promises/A+ section 2.3.3.3.4.1
                              // https://promisesaplus.com/#point-61
                              // Ignore post-resolution exceptions
                              if (depth + 1 >= maxDepth) {

                                // Only substitute handlers pass on context
                                // and multiple values (non-spec behavior)
                                if (handler !== Thrower) {
                                  that = undefined;
                                  args = [e];
                                }

                                deferred.rejectWith(that, args);
                              }
                            }
                          };

                        // Support: Promises/A+ section 2.3.3.3.1
                        // https://promisesaplus.com/#point-57
                        // Re-resolve promises immediately to dodge false rejection from
                        // subsequent errors
                        if (depth) {
                          process();
                        } else {

                          // Call an optional hook to record the stack, in case of exception
                          // since it's otherwise lost when execution goes async
                          if (jQuery.Deferred.getStackHook) {
                            process.stackTrace = jQuery.Deferred.getStackHook();
                          }
                          window.setTimeout(process);
                        }
                      };
                    }

                    return jQuery.Deferred(function (newDefer) {

                      // progress_handlers.add( ... )
                      tuples[0][3].add(
                        resolve(
                          0,
                          newDefer,
                          jQuery.isFunction(onProgress) ?
                          onProgress :
                          Identity,
                          newDefer.notifyWith
                        )
                      );

                      // fulfilled_handlers.add( ... )
                      tuples[1][3].add(
                        resolve(
                          0,
                          newDefer,
                          jQuery.isFunction(onFulfilled) ?
                          onFulfilled :
                          Identity
                        )
                      );

                      // rejected_handlers.add( ... )
                      tuples[2][3].add(
                        resolve(
                          0,
                          newDefer,
                          jQuery.isFunction(onRejected) ?
                          onRejected :
                          Thrower
                        )
                      );
                    }).promise();
                  },

                  // Get a promise for this deferred
                  // If obj is provided, the promise aspect is added to the object
                  promise: function (obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                  }
                },
                deferred = {};

              // Add list-specific methods
              jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2],
                  stateString = tuple[5];

                // promise.progress = list.add
                // promise.done = list.add
                // promise.fail = list.add
                promise[tuple[1]] = list.add;

                // Handle state
                if (stateString) {
                  list.add(
                    function () {

                      // state = "resolved" (i.e., fulfilled)
                      // state = "rejected"
                      state = stateString;
                    },

                    // rejected_callbacks.disable
                    // fulfilled_callbacks.disable
                    tuples[3 - i][2].disable,

                    // progress_callbacks.lock
                    tuples[0][2].lock
                  );
                }

                // progress_handlers.fire
                // fulfilled_handlers.fire
                // rejected_handlers.fire
                list.add(tuple[3].fire);

                // deferred.notify = function() { deferred.notifyWith(...) }
                // deferred.resolve = function() { deferred.resolveWith(...) }
                // deferred.reject = function() { deferred.rejectWith(...) }
                deferred[tuple[0]] = function () {
                  deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
                  return this;
                };

                // deferred.notifyWith = list.fireWith
                // deferred.resolveWith = list.fireWith
                // deferred.rejectWith = list.fireWith
                deferred[tuple[0] + "With"] = list.fireWith;
              });

              // Make the deferred a promise
              promise.promise(deferred);

              // Call given func if any
              if (func) {
                func.call(deferred, deferred);
              }

              // All done!
              return deferred;
            },

            // Deferred helper
            when: function (singleValue) {
              var

              // count of uncompleted subordinates
                remaining = arguments.length,

                // count of unprocessed arguments
                i = remaining,

                // subordinate fulfillment data
                resolveContexts = Array(i),
                resolveValues = slice.call(arguments),

                // the master Deferred
                master = jQuery.Deferred(),

                // subordinate callback factory
                updateFunc = function (i) {
                  return function (value) {
                    resolveContexts[i] = this;
                    resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
                    if (!(--remaining)) {
                      master.resolveWith(resolveContexts, resolveValues);
                    }
                  };
                };

              // Single- and empty arguments are adopted like Promise.resolve
              if (remaining <= 1) {
                adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);

                // Use .then() to unwrap secondary thenables (cf. gh-3000)
                if (master.state() === "pending" ||
                  jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {

                  return master.then();
                }
              }

              // Multiple arguments are aggregated like Promise.all array elements
              while (i--) {
                adoptValue(resolveValues[i], updateFunc(i), master.reject);
              }

              return master.promise();
            }
          });


          // These usually indicate a programmer mistake during development,
          // warn about them ASAP rather than swallowing them by default.
          var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

          jQuery.Deferred.exceptionHook = function (error, stack) {

            // Support: IE 8 - 9 only
            // Console exists when dev tools are open, which can happen at any time
            if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
              window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
            }
          };




          jQuery.readyException = function (error) {
            window.setTimeout(function () {
              throw error;
            });
          };




          // The deferred used on DOM ready
          var readyList = jQuery.Deferred();

          jQuery.fn.ready = function (fn) {

            readyList
              .then(fn)

            // Wrap jQuery.readyException in a function so that the lookup
            // happens at the time of error handling instead of callback
            // registration.
            .catch(function (error) {
              jQuery.readyException(error);
            });

            return this;
          };

          jQuery.extend({

            // Is the DOM ready to be used? Set to true once it occurs.
            isReady: false,

            // A counter to track how many items to wait for before
            // the ready event fires. See #6781
            readyWait: 1,

            // Handle when the DOM is ready
            ready: function (wait) {

              // Abort if there are pending holds or we're already ready
              if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
              }

              // Remember that the DOM is ready
              jQuery.isReady = true;

              // If a normal DOM Ready event fired, decrement, and wait if need be
              if (wait !== true && --jQuery.readyWait > 0) {
                return;
              }

              // If there are functions bound, to execute
              readyList.resolveWith(document, [jQuery]);
            }
          });

          jQuery.ready.then = readyList.then;

          // The ready event handler and self cleanup method
          function completed() {
            document.removeEventListener("DOMContentLoaded", completed);
            window.removeEventListener("load", completed);
            jQuery.ready();
          }

          // Catch cases where $(document).ready() is called
          // after the browser event has already occurred.
          // Support: IE <=9 - 10 only
          // Older IE sometimes signals "interactive" too soon
          if (document.readyState === "complete" ||
            (document.readyState !== "loading" && !document.documentElement.doScroll)) {

            // Handle it asynchronously to allow scripts the opportunity to delay ready
            window.setTimeout(jQuery.ready);

          } else {

            // Use the handy event callback
            document.addEventListener("DOMContentLoaded", completed);

            // A fallback to window.onload, that will always work
            window.addEventListener("load", completed);
          }




          // Multifunctional method to get and set values of a collection
          // The value/s can optionally be executed if it's a function
          var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
            var i = 0,
              len = elems.length,
              bulk = key == null;

            // Sets many values
            if (jQuery.type(key) === "object") {
              chainable = true;
              for (i in key) {
                access(elems, fn, i, key[i], true, emptyGet, raw);
              }

              // Sets one value
            } else if (value !== undefined) {
              chainable = true;

              if (!jQuery.isFunction(value)) {
                raw = true;
              }

              if (bulk) {

                // Bulk operations run against the entire set
                if (raw) {
                  fn.call(elems, value);
                  fn = null;

                  // ...except when executing function values
                } else {
                  bulk = fn;
                  fn = function (elem, key, value) {
                    return bulk.call(jQuery(elem), value);
                  };
                }
              }

              if (fn) {
                for (; i < len; i++) {
                  fn(
                    elems[i], key, raw ?
                    value :
                    value.call(elems[i], i, fn(elems[i], key))
                  );
                }
              }
            }

            if (chainable) {
              return elems;
            }

            // Gets
            if (bulk) {
              return fn.call(elems);
            }

            return len ? fn(elems[0], key) : emptyGet;
          };
          var acceptData = function (owner) {

            // Accepts only:
            //  - Node
            //    - Node.ELEMENT_NODE
            //    - Node.DOCUMENT_NODE
            //  - Object
            //    - Any
            return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType);
          };




          function Data() {
            this.expando = jQuery.expando + Data.uid++;
          }

          Data.uid = 1;

          Data.prototype = {

            cache: function (owner) {

              // Check if the owner object already has a cache
              var value = owner[this.expando];

              // If not, create one
              if (!value) {
                value = {};

                // We can accept data for non-element nodes in modern browsers,
                // but we should not, see #8335.
                // Always return an empty object.
                if (acceptData(owner)) {

                  // If it is a node unlikely to be stringify-ed or looped over
                  // use plain assignment
                  if (owner.nodeType) {
                    owner[this.expando] = value;

                    // Otherwise secure it in a non-enumerable property
                    // configurable must be true to allow the property to be
                    // deleted when data is removed
                  } else {
                    Object.defineProperty(owner, this.expando, {
                      value: value,
                      configurable: true
                    });
                  }
                }
              }

              return value;
            },
            set: function (owner, data, value) {
              var prop,
                cache = this.cache(owner);

              // Handle: [ owner, key, value ] args
              // Always use camelCase key (gh-2257)
              if (typeof data === "string") {
                cache[jQuery.camelCase(data)] = value;

                // Handle: [ owner, { properties } ] args
              } else {

                // Copy the properties one-by-one to the cache object
                for (prop in data) {
                  cache[jQuery.camelCase(prop)] = data[prop];
                }
              }
              return cache;
            },
            get: function (owner, key) {
              return key === undefined ?
                this.cache(owner) :

                // Always use camelCase key (gh-2257)
                owner[this.expando] && owner[this.expando][jQuery.camelCase(key)];
            },
            access: function (owner, key, value) {

              // In cases where either:
              //
              //   1. No key was specified
              //   2. A string key was specified, but no value provided
              //
              // Take the "read" path and allow the get method to determine
              // which value to return, respectively either:
              //
              //   1. The entire cache object
              //   2. The data stored at the key
              //
              if (key === undefined ||
                ((key && typeof key === "string") && value === undefined)) {

                return this.get(owner, key);
              }

              // When the key is not a string, or both a key and value
              // are specified, set or extend (existing objects) with either:
              //
              //   1. An object of properties
              //   2. A key and value
              //
              this.set(owner, key, value);

              // Since the "set" path can have two possible entry points
              // return the expected data based on which path was taken[*]
              return value !== undefined ? value : key;
            },
            remove: function (owner, key) {
              var i,
                cache = owner[this.expando];

              if (cache === undefined) {
                return;
              }

              if (key !== undefined) {

                // Support array or space separated string of keys
                if (Array.isArray(key)) {

                  // If key is an array of keys...
                  // We always set camelCase keys, so remove that.
                  key = key.map(jQuery.camelCase);
                } else {
                  key = jQuery.camelCase(key);

                  // If a key with the spaces exists, use it.
                  // Otherwise, create an array by matching non-whitespace
                  key = key in cache ? [key] :
                    (key.match(rnothtmlwhite) || []);
                }

                i = key.length;

                while (i--) {
                  delete cache[key[i]];
                }
              }

              // Remove the expando if there's no more data
              if (key === undefined || jQuery.isEmptyObject(cache)) {

                // Support: Chrome <=35 - 45
                // Webkit & Blink performance suffers when deleting properties
                // from DOM nodes, so set to undefined instead
                // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                if (owner.nodeType) {
                  owner[this.expando] = undefined;
                } else {
                  delete owner[this.expando];
                }
              }
            },
            hasData: function (owner) {
              var cache = owner[this.expando];
              return cache !== undefined && !jQuery.isEmptyObject(cache);
            }
          };
          var dataPriv = new Data();

          var dataUser = new Data();



          //	Implementation Summary
          //
          //	1. Enforce API surface and semantic compatibility with 1.9.x branch
          //	2. Improve the module's maintainability by reducing the storage
          //		paths to a single mechanism.
          //	3. Use the same single mechanism to support "private" and "user" data.
          //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
          //	5. Avoid exposing implementation details on user objects (eg. expando properties)
          //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

          var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
            rmultiDash = /[A-Z]/g;

          function getData(data) {
            if (data === "true") {
              return true;
            }

            if (data === "false") {
              return false;
            }

            if (data === "null") {
              return null;
            }

            // Only convert to a number if it doesn't change the string
            if (data === +data + "") {
              return +data;
            }

            if (rbrace.test(data)) {
              return JSON.parse(data);
            }

            return data;
          }

          function dataAttr(elem, key, data) {
            var name;

            // If nothing was found internally, try to fetch any
            // data from the HTML5 data-* attribute
            if (data === undefined && elem.nodeType === 1) {
              name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
              data = elem.getAttribute(name);

              if (typeof data === "string") {
                try {
                  data = getData(data);
                } catch (e) {}

                // Make sure we set the data so it isn't changed later
                dataUser.set(elem, key, data);
              } else {
                data = undefined;
              }
            }
            return data;
          }

          jQuery.extend({
            hasData: function (elem) {
              return dataUser.hasData(elem) || dataPriv.hasData(elem);
            },

            data: function (elem, name, data) {
              return dataUser.access(elem, name, data);
            },

            removeData: function (elem, name) {
              dataUser.remove(elem, name);
            },

            // TODO: Now that all calls to _data and _removeData have been replaced
            // with direct calls to dataPriv methods, these can be deprecated.
            _data: function (elem, name, data) {
              return dataPriv.access(elem, name, data);
            },

            _removeData: function (elem, name) {
              dataPriv.remove(elem, name);
            }
          });

          jQuery.fn.extend({
            data: function (key, value) {
              var i, name, data,
                elem = this[0],
                attrs = elem && elem.attributes;

              // Gets all values
              if (key === undefined) {
                if (this.length) {
                  data = dataUser.get(elem);

                  if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                    i = attrs.length;
                    while (i--) {

                      // Support: IE 11 only
                      // The attrs elements can be null (#14894)
                      if (attrs[i]) {
                        name = attrs[i].name;
                        if (name.indexOf("data-") === 0) {
                          name = jQuery.camelCase(name.slice(5));
                          dataAttr(elem, name, data[name]);
                        }
                      }
                    }
                    dataPriv.set(elem, "hasDataAttrs", true);
                  }
                }

                return data;
              }

              // Sets multiple values
              if (typeof key === "object") {
                return this.each(function () {
                  dataUser.set(this, key);
                });
              }

              return access(this, function (value) {
                var data;

                // The calling jQuery object (element matches) is not empty
                // (and therefore has an element appears at this[ 0 ]) and the
                // `value` parameter was not undefined. An empty jQuery object
                // will result in `undefined` for elem = this[ 0 ] which will
                // throw an exception if an attempt to read a data cache is made.
                if (elem && value === undefined) {

                  // Attempt to get data from the cache
                  // The key will always be camelCased in Data
                  data = dataUser.get(elem, key);
                  if (data !== undefined) {
                    return data;
                  }

                  // Attempt to "discover" the data in
                  // HTML5 custom data-* attrs
                  data = dataAttr(elem, key);
                  if (data !== undefined) {
                    return data;
                  }

                  // We tried really hard, but the data doesn't exist.
                  return;
                }

                // Set the data...
                this.each(function () {

                  // We always store the camelCased key
                  dataUser.set(this, key, value);
                });
              }, null, value, arguments.length > 1, null, true);
            },

            removeData: function (key) {
              return this.each(function () {
                dataUser.remove(this, key);
              });
            }
          });


          jQuery.extend({
            queue: function (elem, type, data) {
              var queue;

              if (elem) {
                type = (type || "fx") + "queue";
                queue = dataPriv.get(elem, type);

                // Speed up dequeue by getting out quickly if this is just a lookup
                if (data) {
                  if (!queue || Array.isArray(data)) {
                    queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                  } else {
                    queue.push(data);
                  }
                }
                return queue || [];
              }
            },

            dequeue: function (elem, type) {
              type = type || "fx";

              var queue = jQuery.queue(elem, type),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks(elem, type),
                next = function () {
                  jQuery.dequeue(elem, type);
                };

              // If the fx queue is dequeued, always remove the progress sentinel
              if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
              }

              if (fn) {

                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if (type === "fx") {
                  queue.unshift("inprogress");
                }

                // Clear up the last queue stop function
                delete hooks.stop;
                fn.call(elem, next, hooks);
              }

              if (!startLength && hooks) {
                hooks.empty.fire();
              }
            },

            // Not public - generate a queueHooks object, or return the current one
            _queueHooks: function (elem, type) {
              var key = type + "queueHooks";
              return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function () {
                  dataPriv.remove(elem, [type + "queue", key]);
                })
              });
            }
          });

          jQuery.fn.extend({
            queue: function (type, data) {
              var setter = 2;

              if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
              }

              if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
              }

              return data === undefined ?
                this :
                this.each(function () {
                  var queue = jQuery.queue(this, type, data);

                  // Ensure a hooks for this queue
                  jQuery._queueHooks(this, type);

                  if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type);
                  }
                });
            },
            dequeue: function (type) {
              return this.each(function () {
                jQuery.dequeue(this, type);
              });
            },
            clearQueue: function (type) {
              return this.queue(type || "fx", []);
            },

            // Get a promise resolved when queues of a certain type
            // are emptied (fx is the type by default)
            promise: function (type, obj) {
              var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function () {
                  if (!(--count)) {
                    defer.resolveWith(elements, [elements]);
                  }
                };

              if (typeof type !== "string") {
                obj = type;
                type = undefined;
              }
              type = type || "fx";

              while (i--) {
                tmp = dataPriv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                  count++;
                  tmp.empty.add(resolve);
                }
              }
              resolve();
              return defer.promise(obj);
            }
          });
          var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

          var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");


          var cssExpand = ["Top", "Right", "Bottom", "Left"];

          var isHiddenWithinTree = function (elem, el) {

            // isHiddenWithinTree might be called from jQuery#filter function;
            // in that case, element will be second argument
            elem = el || elem;

            // Inline style trumps all
            return elem.style.display === "none" ||
              elem.style.display === "" &&

              // Otherwise, check computed style
              // Support: Firefox <=43 - 45
              // Disconnected elements can have computed display: none, so first confirm that elem is
              // in the document.
              jQuery.contains(elem.ownerDocument, elem) &&

              jQuery.css(elem, "display") === "none";
          };

          var swap = function (elem, options, callback, args) {
            var ret, name,
              old = {};

            // Remember the old values, and insert the new ones
            for (name in options) {
              old[name] = elem.style[name];
              elem.style[name] = options[name];
            }

            ret = callback.apply(elem, args || []);

            // Revert the old values
            for (name in options) {
              elem.style[name] = old[name];
            }

            return ret;
          };




          function adjustCSS(elem, prop, valueParts, tween) {
            var adjusted,
              scale = 1,
              maxIterations = 20,
              currentValue = tween ?
              function () {
                return tween.cur();
              } :
              function () {
                return jQuery.css(elem, prop, "");
              },
              initial = currentValue(),
              unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),

              // Starting value computation is required for potential unit mismatches
              initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) &&
              rcssNum.exec(jQuery.css(elem, prop));

            if (initialInUnit && initialInUnit[3] !== unit) {

              // Trust units reported by jQuery.css
              unit = unit || initialInUnit[3];

              // Make sure we update the tween properties later on
              valueParts = valueParts || [];

              // Iteratively approximate from a nonzero starting point
              initialInUnit = +initial || 1;

              do {

                // If previous iteration zeroed out, double until we get *something*.
                // Use string for doubling so we don't accidentally see scale as unchanged below
                scale = scale || ".5";

                // Adjust and apply
                initialInUnit = initialInUnit / scale;
                jQuery.style(elem, prop, initialInUnit + unit);

                // Update scale, tolerating zero or NaN from tween.cur()
                // Break the loop if scale is unchanged or perfect, or if we've just had enough.
              } while (
                scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations
              );
            }

            if (valueParts) {
              initialInUnit = +initialInUnit || +initial || 0;

              // Apply relative offset (+=/-=) if specified
              adjusted = valueParts[1] ?
                initialInUnit + (valueParts[1] + 1) * valueParts[2] :
                +valueParts[2];
              if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
              }
            }
            return adjusted;
          }


          var defaultDisplayMap = {};

          function getDefaultDisplay(elem) {
            var temp,
              doc = elem.ownerDocument,
              nodeName = elem.nodeName,
              display = defaultDisplayMap[nodeName];

            if (display) {
              return display;
            }

            temp = doc.body.appendChild(doc.createElement(nodeName));
            display = jQuery.css(temp, "display");

            temp.parentNode.removeChild(temp);

            if (display === "none") {
              display = "block";
            }
            defaultDisplayMap[nodeName] = display;

            return display;
          }

          function showHide(elements, show) {
            var display, elem,
              values = [],
              index = 0,
              length = elements.length;

            // Determine new display value for elements that need to change
            for (; index < length; index++) {
              elem = elements[index];
              if (!elem.style) {
                continue;
              }

              display = elem.style.display;
              if (show) {

                // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                // check is required in this first loop unless we have a nonempty display value (either
                // inline or about-to-be-restored)
                if (display === "none") {
                  values[index] = dataPriv.get(elem, "display") || null;
                  if (!values[index]) {
                    elem.style.display = "";
                  }
                }
                if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                  values[index] = getDefaultDisplay(elem);
                }
              } else {
                if (display !== "none") {
                  values[index] = "none";

                  // Remember what we're overwriting
                  dataPriv.set(elem, "display", display);
                }
              }
            }

            // Set the display of the elements in a second loop to avoid constant reflow
            for (index = 0; index < length; index++) {
              if (values[index] != null) {
                elements[index].style.display = values[index];
              }
            }

            return elements;
          }

          jQuery.fn.extend({
            show: function () {
              return showHide(this, true);
            },
            hide: function () {
              return showHide(this);
            },
            toggle: function (state) {
              if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
              }

              return this.each(function () {
                if (isHiddenWithinTree(this)) {
                  jQuery(this).show();
                } else {
                  jQuery(this).hide();
                }
              });
            }
          });
          var rcheckableType = (/^(?:checkbox|radio)$/i);

          var rtagName = (/<([a-z][^\/\0>\x20\t\r\n\f]+)/i);

          var rscriptType = (/^$|\/(?:java|ecma)script/i);



          // We have to close these tags to support XHTML (#13200)
          var wrapMap = {

            // Support: IE <=9 only
            option: [1, "<select multiple='multiple'>", "</select>"],

            // XHTML parsers do not magically insert elements in the
            // same way that tag soup parsers do. So we cannot shorten
            // this by omitting <tbody> or other required elements.
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

            _default: [0, "", ""]
          };

          // Support: IE <=9 only
          wrapMap.optgroup = wrapMap.option;

          wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
          wrapMap.th = wrapMap.td;


          function getAll(context, tag) {

            // Support: IE <=9 - 11 only
            // Use typeof to avoid zero-argument method invocation on host objects (#15151)
            var ret;

            if (typeof context.getElementsByTagName !== "undefined") {
              ret = context.getElementsByTagName(tag || "*");

            } else if (typeof context.querySelectorAll !== "undefined") {
              ret = context.querySelectorAll(tag || "*");

            } else {
              ret = [];
            }

            if (tag === undefined || tag && nodeName(context, tag)) {
              return jQuery.merge([context], ret);
            }

            return ret;
          }


          // Mark scripts as having already been evaluated
          function setGlobalEval(elems, refElements) {
            var i = 0,
              l = elems.length;

            for (; i < l; i++) {
              dataPriv.set(
                elems[i],
                "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval")
              );
            }
          }


          var rhtml = /<|&#?\w+;/;

          function buildFragment(elems, context, scripts, selection, ignored) {
            var elem, tmp, tag, wrap, contains, j,
              fragment = context.createDocumentFragment(),
              nodes = [],
              i = 0,
              l = elems.length;

            for (; i < l; i++) {
              elem = elems[i];

              if (elem || elem === 0) {

                // Add nodes directly
                if (jQuery.type(elem) === "object") {

                  // Support: Android <=4.0 only, PhantomJS 1 only
                  // push.apply(_, arraylike) throws on ancient WebKit
                  jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                  // Convert non-html into a text node
                } else if (!rhtml.test(elem)) {
                  nodes.push(context.createTextNode(elem));

                  // Convert html into DOM nodes
                } else {
                  tmp = tmp || fragment.appendChild(context.createElement("div"));

                  // Deserialize a standard representation
                  tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                  wrap = wrapMap[tag] || wrapMap._default;
                  tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

                  // Descend through wrappers to the right content
                  j = wrap[0];
                  while (j--) {
                    tmp = tmp.lastChild;
                  }

                  // Support: Android <=4.0 only, PhantomJS 1 only
                  // push.apply(_, arraylike) throws on ancient WebKit
                  jQuery.merge(nodes, tmp.childNodes);

                  // Remember the top-level container
                  tmp = fragment.firstChild;

                  // Ensure the created nodes are orphaned (#12392)
                  tmp.textContent = "";
                }
              }
            }

            // Remove wrapper from fragment
            fragment.textContent = "";

            i = 0;
            while ((elem = nodes[i++])) {

              // Skip elements already in the context collection (trac-4087)
              if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) {
                  ignored.push(elem);
                }
                continue;
              }

              contains = jQuery.contains(elem.ownerDocument, elem);

              // Append to fragment
              tmp = getAll(fragment.appendChild(elem), "script");

              // Preserve script evaluation history
              if (contains) {
                setGlobalEval(tmp);
              }

              // Capture executables
              if (scripts) {
                j = 0;
                while ((elem = tmp[j++])) {
                  if (rscriptType.test(elem.type || "")) {
                    scripts.push(elem);
                  }
                }
              }
            }

            return fragment;
          }


          (function () {
            var fragment = document.createDocumentFragment(),
              div = fragment.appendChild(document.createElement("div")),
              input = document.createElement("input");

            // Support: Android 4.0 - 4.3 only
            // Check state lost if the name is set (#11217)
            // Support: Windows Web Apps (WWA)
            // `name` and `type` must use .setAttribute for WWA (#14901)
            input.setAttribute("type", "radio");
            input.setAttribute("checked", "checked");
            input.setAttribute("name", "t");

            div.appendChild(input);

            // Support: Android <=4.1 only
            // Older WebKit doesn't clone checked state correctly in fragments
            support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

            // Support: IE <=11 only
            // Make sure textarea (and checkbox) defaultValue is properly cloned
            div.innerHTML = "<textarea>x</textarea>";
            support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
          })();
          var documentElement = document.documentElement;



          var
            rkeyEvent = /^key/,
            rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
            rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

          function returnTrue() {
            return true;
          }

          function returnFalse() {
            return false;
          }

          // Support: IE <=9 only
          // See #13393 for more info
          function safeActiveElement() {
            try {
              return document.activeElement;
            } catch (err) {}
          }

          function on(elem, types, selector, data, fn, one) {
            var origFn, type;

            // Types can be a map of types/handlers
            if (typeof types === "object") {

              // ( types-Object, selector, data )
              if (typeof selector !== "string") {

                // ( types-Object, data )
                data = data || selector;
                selector = undefined;
              }
              for (type in types) {
                on(elem, type, selector, data, types[type], one);
              }
              return elem;
            }

            if (data == null && fn == null) {

              // ( types, fn )
              fn = selector;
              data = selector = undefined;
            } else if (fn == null) {
              if (typeof selector === "string") {

                // ( types, selector, fn )
                fn = data;
                data = undefined;
              } else {

                // ( types, data, fn )
                fn = data;
                data = selector;
                selector = undefined;
              }
            }
            if (fn === false) {
              fn = returnFalse;
            } else if (!fn) {
              return elem;
            }

            if (one === 1) {
              origFn = fn;
              fn = function (event) {

                // Can use an empty set, since event contains the info
                jQuery().off(event);
                return origFn.apply(this, arguments);
              };

              // Use same guid so caller can remove using origFn
              fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return elem.each(function () {
              jQuery.event.add(this, types, fn, data, selector);
            });
          }

          /*
           * Helper functions for managing events -- not part of the public interface.
           * Props to Dean Edwards' addEvent library for many of the ideas.
           */
          jQuery.event = {

            global: {},

            add: function (elem, types, handler, data, selector) {

              var handleObjIn, eventHandle, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
                elemData = dataPriv.get(elem);

              // Don't attach events to noData or text/comment nodes (but allow plain objects)
              if (!elemData) {
                return;
              }

              // Caller can pass in an object of custom data in lieu of the handler
              if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
              }

              // Ensure that invalid selectors throw exceptions at attach time
              // Evaluate against documentElement in case elem is a non-element node (e.g., document)
              if (selector) {
                jQuery.find.matchesSelector(documentElement, selector);
              }

              // Make sure that the handler has a unique ID, used to find/remove it later
              if (!handler.guid) {
                handler.guid = jQuery.guid++;
              }

              // Init the element's event structure and main handler, if this is the first
              if (!(events = elemData.events)) {
                events = elemData.events = {};
              }
              if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {

                  // Discard the second event of a jQuery.event.trigger() and
                  // when an event is called after a page has unloaded
                  return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
                    jQuery.event.dispatch.apply(elem, arguments) : undefined;
                };
              }

              // Handle multiple events separated by a space
              types = (types || "").match(rnothtmlwhite) || [""];
              t = types.length;
              while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // There *must* be a type, no attaching namespace-only handlers
                if (!type) {
                  continue;
                }

                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[type] || {};

                // If selector defined, determine special event api type, otherwise given type
                type = (selector ? special.delegateType : special.bindType) || type;

                // Update special based on newly reset type
                special = jQuery.event.special[type] || {};

                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                  type: type,
                  origType: origType,
                  data: data,
                  handler: handler,
                  guid: handler.guid,
                  selector: selector,
                  needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                  namespace: namespaces.join(".")
                }, handleObjIn);

                // Init the event handler queue if we're the first
                if (!(handlers = events[type])) {
                  handlers = events[type] = [];
                  handlers.delegateCount = 0;

                  // Only use addEventListener if the special events handler returns false
                  if (!special.setup ||
                    special.setup.call(elem, data, namespaces, eventHandle) === false) {

                    if (elem.addEventListener) {
                      elem.addEventListener(type, eventHandle);
                    }
                  }
                }

                if (special.add) {
                  special.add.call(elem, handleObj);

                  if (!handleObj.handler.guid) {
                    handleObj.handler.guid = handler.guid;
                  }
                }

                // Add to the element's handler list, delegates in front
                if (selector) {
                  handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                  handlers.push(handleObj);
                }

                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[type] = true;
              }

            },

            // Detach an event or set of events from an element
            remove: function (elem, types, handler, selector, mappedTypes) {

              var j, origCount, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
                elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

              if (!elemData || !(events = elemData.events)) {
                return;
              }

              // Once for each type.namespace in types; type may be omitted
              types = (types || "").match(rnothtmlwhite) || [""];
              t = types.length;
              while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                  for (type in events) {
                    jQuery.event.remove(elem, type + types[t], handler, selector, true);
                  }
                  continue;
                }

                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] &&
                  new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

                // Remove matching events
                origCount = j = handlers.length;
                while (j--) {
                  handleObj = handlers[j];

                  if ((mappedTypes || origType === handleObj.origType) &&
                    (!handler || handler.guid === handleObj.guid) &&
                    (!tmp || tmp.test(handleObj.namespace)) &&
                    (!selector || selector === handleObj.selector ||
                      selector === "**" && handleObj.selector)) {
                    handlers.splice(j, 1);

                    if (handleObj.selector) {
                      handlers.delegateCount--;
                    }
                    if (special.remove) {
                      special.remove.call(elem, handleObj);
                    }
                  }
                }

                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (origCount && !handlers.length) {
                  if (!special.teardown ||
                    special.teardown.call(elem, namespaces, elemData.handle) === false) {

                    jQuery.removeEvent(elem, type, elemData.handle);
                  }

                  delete events[type];
                }
              }

              // Remove data and the expando if it's no longer used
              if (jQuery.isEmptyObject(events)) {
                dataPriv.remove(elem, "handle events");
              }
            },

            dispatch: function (nativeEvent) {

              // Make a writable jQuery.Event from the native event object
              var event = jQuery.event.fix(nativeEvent);

              var i, j, ret, matched, handleObj, handlerQueue,
                args = new Array(arguments.length),
                handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
                special = jQuery.event.special[event.type] || {};

              // Use the fix-ed jQuery.Event rather than the (read-only) native event
              args[0] = event;

              for (i = 1; i < arguments.length; i++) {
                args[i] = arguments[i];
              }

              event.delegateTarget = this;

              // Call the preDispatch hook for the mapped type, and let it bail if desired
              if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
              }

              // Determine handlers
              handlerQueue = jQuery.event.handlers.call(this, event, handlers);

              // Run delegates first; they may want to stop propagation beneath us
              i = 0;
              while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;

                j = 0;
                while ((handleObj = matched.handlers[j++]) &&
                  !event.isImmediatePropagationStopped()) {

                  // Triggered event must either 1) have no namespace, or 2) have namespace(s)
                  // a subset or equal to those in the bound event (both can have no namespace).
                  if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

                    event.handleObj = handleObj;
                    event.data = handleObj.data;

                    ret = ((jQuery.event.special[handleObj.origType] || {}).handle ||
                      handleObj.handler).apply(matched.elem, args);

                    if (ret !== undefined) {
                      if ((event.result = ret) === false) {
                        event.preventDefault();
                        event.stopPropagation();
                      }
                    }
                  }
                }
              }

              // Call the postDispatch hook for the mapped type
              if (special.postDispatch) {
                special.postDispatch.call(this, event);
              }

              return event.result;
            },

            handlers: function (event, handlers) {
              var i, handleObj, sel, matchedHandlers, matchedSelectors,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;

              // Find delegate handlers
              if (delegateCount &&

                // Support: IE <=9
                // Black-hole SVG <use> instance trees (trac-13180)
                cur.nodeType &&

                // Support: Firefox <=42
                // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
                // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
                // Support: IE 11 only
                // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
                !(event.type === "click" && event.button >= 1)) {

                for (; cur !== this; cur = cur.parentNode || this) {

                  // Don't check non-elements (#13208)
                  // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                  if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                    matchedHandlers = [];
                    matchedSelectors = {};
                    for (i = 0; i < delegateCount; i++) {
                      handleObj = handlers[i];

                      // Don't conflict with Object.prototype properties (#13203)
                      sel = handleObj.selector + " ";

                      if (matchedSelectors[sel] === undefined) {
                        matchedSelectors[sel] = handleObj.needsContext ?
                          jQuery(sel, this).index(cur) > -1 :
                          jQuery.find(sel, this, null, [cur]).length;
                      }
                      if (matchedSelectors[sel]) {
                        matchedHandlers.push(handleObj);
                      }
                    }
                    if (matchedHandlers.length) {
                      handlerQueue.push({ elem: cur, handlers: matchedHandlers });
                    }
                  }
                }
              }

              // Add the remaining (directly-bound) handlers
              cur = this;
              if (delegateCount < handlers.length) {
                handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
              }

              return handlerQueue;
            },

            addProp: function (name, hook) {
              Object.defineProperty(jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,

                get: jQuery.isFunction(hook) ?
                  function () {
                    if (this.originalEvent) {
                      return hook(this.originalEvent);
                    }
                  } : function () {
                    if (this.originalEvent) {
                      return this.originalEvent[name];
                    }
                  },

                set: function (value) {
                  Object.defineProperty(this, name, {
                    enumerable: true,
                    configurable: true,
                    writable: true,
                    value: value
                  });
                }
              });
            },

            fix: function (originalEvent) {
              return originalEvent[jQuery.expando] ?
                originalEvent :
                new jQuery.Event(originalEvent);
            },

            special: {
              load: {

                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
              },
              focus: {

                // Fire native event if possible so blur/focus sequence is correct
                trigger: function () {
                  if (this !== safeActiveElement() && this.focus) {
                    this.focus();
                    return false;
                  }
                },
                delegateType: "focusin"
              },
              blur: {
                trigger: function () {
                  if (this === safeActiveElement() && this.blur) {
                    this.blur();
                    return false;
                  }
                },
                delegateType: "focusout"
              },
              click: {

                // For checkbox, fire native event so checked state will be right
                trigger: function () {
                  if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
                    this.click();
                    return false;
                  }
                },

                // For cross-browser consistency, don't fire native .click() on links
                _default: function (event) {
                  return nodeName(event.target, "a");
                }
              },

              beforeunload: {
                postDispatch: function (event) {

                  // Support: Firefox 20+
                  // Firefox doesn't alert if the returnValue field is not set.
                  if (event.result !== undefined && event.originalEvent) {
                    event.originalEvent.returnValue = event.result;
                  }
                }
              }
            }
          };

          jQuery.removeEvent = function (elem, type, handle) {

            // This "if" is needed for plain objects
            if (elem.removeEventListener) {
              elem.removeEventListener(type, handle);
            }
          };

          jQuery.Event = function (src, props) {

            // Allow instantiation without the 'new' keyword
            if (!(this instanceof jQuery.Event)) {
              return new jQuery.Event(src, props);
            }

            // Event object
            if (src && src.type) {
              this.originalEvent = src;
              this.type = src.type;

              // Events bubbling up the document may have been marked as prevented
              // by a handler lower down the tree; reflect the correct value.
              this.isDefaultPrevented = src.defaultPrevented ||
                src.defaultPrevented === undefined &&

                // Support: Android <=2.3 only
                src.returnValue === false ?
                returnTrue :
                returnFalse;

              // Create target properties
              // Support: Safari <=6 - 7 only
              // Target should not be a text node (#504, #13143)
              this.target = (src.target && src.target.nodeType === 3) ?
                src.target.parentNode :
                src.target;

              this.currentTarget = src.currentTarget;
              this.relatedTarget = src.relatedTarget;

              // Event type
            } else {
              this.type = src;
            }

            // Put explicitly provided properties onto the event object
            if (props) {
              jQuery.extend(this, props);
            }

            // Create a timestamp if incoming event doesn't have one
            this.timeStamp = src && src.timeStamp || jQuery.now();

            // Mark it as fixed
            this[jQuery.expando] = true;
          };

          // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
          // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
          jQuery.Event.prototype = {
            constructor: jQuery.Event,
            isDefaultPrevented: returnFalse,
            isPropagationStopped: returnFalse,
            isImmediatePropagationStopped: returnFalse,
            isSimulated: false,

            preventDefault: function () {
              var e = this.originalEvent;

              this.isDefaultPrevented = returnTrue;

              if (e && !this.isSimulated) {
                e.preventDefault();
              }
            },
            stopPropagation: function () {
              var e = this.originalEvent;

              this.isPropagationStopped = returnTrue;

              if (e && !this.isSimulated) {
                e.stopPropagation();
              }
            },
            stopImmediatePropagation: function () {
              var e = this.originalEvent;

              this.isImmediatePropagationStopped = returnTrue;

              if (e && !this.isSimulated) {
                e.stopImmediatePropagation();
              }

              this.stopPropagation();
            }
          };

          // Includes all common event props including KeyEvent and MouseEvent specific props
          jQuery.each({
            altKey: true,
            bubbles: true,
            cancelable: true,
            changedTouches: true,
            ctrlKey: true,
            detail: true,
            eventPhase: true,
            metaKey: true,
            pageX: true,
            pageY: true,
            shiftKey: true,
            view: true,
            "char": true,
            charCode: true,
            key: true,
            keyCode: true,
            button: true,
            buttons: true,
            clientX: true,
            clientY: true,
            offsetX: true,
            offsetY: true,
            pointerId: true,
            pointerType: true,
            screenX: true,
            screenY: true,
            targetTouches: true,
            toElement: true,
            touches: true,

            which: function (event) {
              var button = event.button;

              // Add which for key events
              if (event.which == null && rkeyEvent.test(event.type)) {
                return event.charCode != null ? event.charCode : event.keyCode;
              }

              // Add which for click: 1 === left; 2 === middle; 3 === right
              if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
                if (button & 1) {
                  return 1;
                }

                if (button & 2) {
                  return 3;
                }

                if (button & 4) {
                  return 2;
                }

                return 0;
              }

              return event.which;
            }
          }, jQuery.event.addProp);

          // Create mouseenter/leave events using mouseover/out and event-time checks
          // so that event delegation works in jQuery.
          // Do the same for pointerenter/pointerleave and pointerover/pointerout
          //
          // Support: Safari 7 only
          // Safari sends mouseenter too often; see:
          // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
          // for the description of the bug (it existed in older Chrome versions as well).
          jQuery.each({
            mouseenter: "mouseover",
            mouseleave: "mouseout",
            pointerenter: "pointerover",
            pointerleave: "pointerout"
          }, function (orig, fix) {
            jQuery.event.special[orig] = {
              delegateType: fix,
              bindType: fix,

              handle: function (event) {
                var ret,
                  target = this,
                  related = event.relatedTarget,
                  handleObj = event.handleObj;

                // For mouseenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if (!related || (related !== target && !jQuery.contains(target, related))) {
                  event.type = handleObj.origType;
                  ret = handleObj.handler.apply(this, arguments);
                  event.type = fix;
                }
                return ret;
              }
            };
          });

          jQuery.fn.extend({

            on: function (types, selector, data, fn) {
              return on(this, types, selector, data, fn);
            },
            one: function (types, selector, data, fn) {
              return on(this, types, selector, data, fn, 1);
            },
            off: function (types, selector, fn) {
              var handleObj, type;
              if (types && types.preventDefault && types.handleObj) {

                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(
                  handleObj.namespace ?
                  handleObj.origType + "." + handleObj.namespace :
                  handleObj.origType,
                  handleObj.selector,
                  handleObj.handler
                );
                return this;
              }
              if (typeof types === "object") {

                // ( types-object [, selector] )
                for (type in types) {
                  this.off(type, selector, types[type]);
                }
                return this;
              }
              if (selector === false || typeof selector === "function") {

                // ( types [, fn] )
                fn = selector;
                selector = undefined;
              }
              if (fn === false) {
                fn = returnFalse;
              }
              return this.each(function () {
                jQuery.event.remove(this, types, fn, selector);
              });
            }
          });


          var

          /* eslint-disable max-len */

          // See https://github.com/eslint/eslint/issues/3229
            rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

            /* eslint-enable */

            // Support: IE <=10 - 11, Edge 12 - 13
            // In IE/Edge using regex groups here causes severe slowdowns.
            // See https://connect.microsoft.com/IE/feedback/details/1736512/
            rnoInnerhtml = /<script|<style|<link/i,

            // checked="checked" or checked
            rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
            rscriptTypeMasked = /^true\/(.*)/,
            rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

          // Prefer a tbody over its parent table for containing new rows
          function manipulationTarget(elem, content) {
            if (nodeName(elem, "table") &&
              nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {

              return jQuery(">tbody", elem)[0] || elem;
            }

            return elem;
          }

          // Replace/restore the type attribute of script elements for safe DOM manipulation
          function disableScript(elem) {
            elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
            return elem;
          }

          function restoreScript(elem) {
            var match = rscriptTypeMasked.exec(elem.type);

            if (match) {
              elem.type = match[1];
            } else {
              elem.removeAttribute("type");
            }

            return elem;
          }

          function cloneCopyEvent(src, dest) {
            var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

            if (dest.nodeType !== 1) {
              return;
            }

            // 1. Copy private data: events, handlers, etc.
            if (dataPriv.hasData(src)) {
              pdataOld = dataPriv.access(src);
              pdataCur = dataPriv.set(dest, pdataOld);
              events = pdataOld.events;

              if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};

                for (type in events) {
                  for (i = 0, l = events[type].length; i < l; i++) {
                    jQuery.event.add(dest, type, events[type][i]);
                  }
                }
              }
            }

            // 2. Copy user data
            if (dataUser.hasData(src)) {
              udataOld = dataUser.access(src);
              udataCur = jQuery.extend({}, udataOld);

              dataUser.set(dest, udataCur);
            }
          }

          // Fix IE bugs, see support tests
          function fixInput(src, dest) {
            var nodeName = dest.nodeName.toLowerCase();

            // Fails to persist the checked state of a cloned checkbox or radio button.
            if (nodeName === "input" && rcheckableType.test(src.type)) {
              dest.checked = src.checked;

              // Fails to return the selected option to the default selected state when cloning options
            } else if (nodeName === "input" || nodeName === "textarea") {
              dest.defaultValue = src.defaultValue;
            }
          }

          function domManip(collection, args, callback, ignored) {

            // Flatten any nested arrays
            args = concat.apply([], args);

            var fragment, first, scripts, hasScripts, node, doc,
              i = 0,
              l = collection.length,
              iNoClone = l - 1,
              value = args[0],
              isFunction = jQuery.isFunction(value);

            // We can't cloneNode fragments that contain checked, in WebKit
            if (isFunction ||
              (l > 1 && typeof value === "string" &&
                !support.checkClone && rchecked.test(value))) {
              return collection.each(function (index) {
                var self = collection.eq(index);
                if (isFunction) {
                  args[0] = value.call(this, index, self.html());
                }
                domManip(self, args, callback, ignored);
              });
            }

            if (l) {
              fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
              first = fragment.firstChild;

              if (fragment.childNodes.length === 1) {
                fragment = first;
              }

              // Require either new content or an interest in ignored elements to invoke the callback
              if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                hasScripts = scripts.length;

                // Use the original fragment for the last item
                // instead of the first because it can end up
                // being emptied incorrectly in certain situations (#8070).
                for (; i < l; i++) {
                  node = fragment;

                  if (i !== iNoClone) {
                    node = jQuery.clone(node, true, true);

                    // Keep references to cloned scripts for later restoration
                    if (hasScripts) {

                      // Support: Android <=4.0 only, PhantomJS 1 only
                      // push.apply(_, arraylike) throws on ancient WebKit
                      jQuery.merge(scripts, getAll(node, "script"));
                    }
                  }

                  callback.call(collection[i], node, i);
                }

                if (hasScripts) {
                  doc = scripts[scripts.length - 1].ownerDocument;

                  // Reenable scripts
                  jQuery.map(scripts, restoreScript);

                  // Evaluate executable scripts on first document insertion
                  for (i = 0; i < hasScripts; i++) {
                    node = scripts[i];
                    if (rscriptType.test(node.type || "") &&
                      !dataPriv.access(node, "globalEval") &&
                      jQuery.contains(doc, node)) {

                      if (node.src) {

                        // Optional AJAX dependency, but won't run scripts if not present
                        if (jQuery._evalUrl) {
                          jQuery._evalUrl(node.src);
                        }
                      } else {
                        DOMEval(node.textContent.replace(rcleanScript, ""), doc);
                      }
                    }
                  }
                }
              }
            }

            return collection;
          }

          function remove(elem, selector, keepData) {
            var node,
              nodes = selector ? jQuery.filter(selector, elem) : elem,
              i = 0;

            for (;
              (node = nodes[i]) != null; i++) {
              if (!keepData && node.nodeType === 1) {
                jQuery.cleanData(getAll(node));
              }

              if (node.parentNode) {
                if (keepData && jQuery.contains(node.ownerDocument, node)) {
                  setGlobalEval(getAll(node, "script"));
                }
                node.parentNode.removeChild(node);
              }
            }

            return elem;
          }

          jQuery.extend({
            htmlPrefilter: function (html) {
              return html.replace(rxhtmlTag, "<$1></$2>");
            },

            clone: function (elem, dataAndEvents, deepDataAndEvents) {
              var i, l, srcElements, destElements,
                clone = elem.cloneNode(true),
                inPage = jQuery.contains(elem.ownerDocument, elem);

              // Fix IE cloning issues
              if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) &&
                !jQuery.isXMLDoc(elem)) {

                // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
                destElements = getAll(clone);
                srcElements = getAll(elem);

                for (i = 0, l = srcElements.length; i < l; i++) {
                  fixInput(srcElements[i], destElements[i]);
                }
              }

              // Copy the events from the original to the clone
              if (dataAndEvents) {
                if (deepDataAndEvents) {
                  srcElements = srcElements || getAll(elem);
                  destElements = destElements || getAll(clone);

                  for (i = 0, l = srcElements.length; i < l; i++) {
                    cloneCopyEvent(srcElements[i], destElements[i]);
                  }
                } else {
                  cloneCopyEvent(elem, clone);
                }
              }

              // Preserve script evaluation history
              destElements = getAll(clone, "script");
              if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
              }

              // Return the cloned set
              return clone;
            },

            cleanData: function (elems) {
              var data, elem, type,
                special = jQuery.event.special,
                i = 0;

              for (;
                (elem = elems[i]) !== undefined; i++) {
                if (acceptData(elem)) {
                  if ((data = elem[dataPriv.expando])) {
                    if (data.events) {
                      for (type in data.events) {
                        if (special[type]) {
                          jQuery.event.remove(elem, type);

                          // This is a shortcut to avoid jQuery.event.remove's overhead
                        } else {
                          jQuery.removeEvent(elem, type, data.handle);
                        }
                      }
                    }

                    // Support: Chrome <=35 - 45+
                    // Assign undefined instead of using delete, see Data#remove
                    elem[dataPriv.expando] = undefined;
                  }
                  if (elem[dataUser.expando]) {

                    // Support: Chrome <=35 - 45+
                    // Assign undefined instead of using delete, see Data#remove
                    elem[dataUser.expando] = undefined;
                  }
                }
              }
            }
          });

          jQuery.fn.extend({
            detach: function (selector) {
              return remove(this, selector, true);
            },

            remove: function (selector) {
              return remove(this, selector);
            },

            text: function (value) {
              return access(this, function (value) {
                return value === undefined ?
                  jQuery.text(this) :
                  this.empty().each(function () {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                      this.textContent = value;
                    }
                  });
              }, null, value, arguments.length);
            },

            append: function () {
              return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                  var target = manipulationTarget(this, elem);
                  target.appendChild(elem);
                }
              });
            },

            prepend: function () {
              return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                  var target = manipulationTarget(this, elem);
                  target.insertBefore(elem, target.firstChild);
                }
              });
            },

            before: function () {
              return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                  this.parentNode.insertBefore(elem, this);
                }
              });
            },

            after: function () {
              return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                  this.parentNode.insertBefore(elem, this.nextSibling);
                }
              });
            },

            empty: function () {
              var elem,
                i = 0;

              for (;
                (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {

                  // Prevent memory leaks
                  jQuery.cleanData(getAll(elem, false));

                  // Remove any remaining nodes
                  elem.textContent = "";
                }
              }

              return this;
            },

            clone: function (dataAndEvents, deepDataAndEvents) {
              dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
              deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

              return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
              });
            },

            html: function (value) {
              return access(this, function (value) {
                var elem = this[0] || {},
                  i = 0,
                  l = this.length;

                if (value === undefined && elem.nodeType === 1) {
                  return elem.innerHTML;
                }

                // See if we can take a shortcut and just use innerHTML
                if (typeof value === "string" && !rnoInnerhtml.test(value) &&
                  !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

                  value = jQuery.htmlPrefilter(value);

                  try {
                    for (; i < l; i++) {
                      elem = this[i] || {};

                      // Remove element nodes and prevent memory leaks
                      if (elem.nodeType === 1) {
                        jQuery.cleanData(getAll(elem, false));
                        elem.innerHTML = value;
                      }
                    }

                    elem = 0;

                    // If using innerHTML throws an exception, use the fallback method
                  } catch (e) {}
                }

                if (elem) {
                  this.empty().append(value);
                }
              }, null, value, arguments.length);
            },

            replaceWith: function () {
              var ignored = [];

              // Make the changes, replacing each non-ignored context element with the new content
              return domManip(this, arguments, function (elem) {
                var parent = this.parentNode;

                if (jQuery.inArray(this, ignored) < 0) {
                  jQuery.cleanData(getAll(this));
                  if (parent) {
                    parent.replaceChild(elem, this);
                  }
                }

                // Force callback invocation
              }, ignored);
            }
          });

          jQuery.each({
            appendTo: "append",
            prependTo: "prepend",
            insertBefore: "before",
            insertAfter: "after",
            replaceAll: "replaceWith"
          }, function (name, original) {
            jQuery.fn[name] = function (selector) {
              var elems,
                ret = [],
                insert = jQuery(selector),
                last = insert.length - 1,
                i = 0;

              for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);

                // Support: Android <=4.0 only, PhantomJS 1 only
                // .get() because push.apply(_, arraylike) throws on ancient WebKit
                push.apply(ret, elems.get());
              }

              return this.pushStack(ret);
            };
          });
          var rmargin = (/^margin/);

          var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

          var getStyles = function (elem) {

            // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
            // IE throws on elements created in popups
            // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
            var view = elem.ownerDocument.defaultView;

            if (!view || !view.opener) {
              view = window;
            }

            return view.getComputedStyle(elem);
          };



          (function () {

            // Executing both pixelPosition & boxSizingReliable tests require only one layout
            // so they're executed at the same time to save the second computation.
            function computeStyleTests() {

              // This is a singleton, we need to execute it only once
              if (!div) {
                return;
              }

              div.style.cssText =
                "box-sizing:border-box;" +
                "position:relative;display:block;" +
                "margin:auto;border:1px;padding:1px;" +
                "top:1%;width:50%";
              div.innerHTML = "";
              documentElement.appendChild(container);

              var divStyle = window.getComputedStyle(div);
              pixelPositionVal = divStyle.top !== "1%";

              // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
              reliableMarginLeftVal = divStyle.marginLeft === "2px";
              boxSizingReliableVal = divStyle.width === "4px";

              // Support: Android 4.0 - 4.3 only
              // Some styles come back with percentage values, even though they shouldn't
              div.style.marginRight = "50%";
              pixelMarginRightVal = divStyle.marginRight === "4px";

              documentElement.removeChild(container);

              // Nullify the div so it wouldn't be stored in the memory and
              // it will also be a sign that checks already performed
              div = null;
            }

            var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
              container = document.createElement("div"),
              div = document.createElement("div");

            // Finish early in limited (non-browser) environments
            if (!div.style) {
              return;
            }

            // Support: IE <=9 - 11 only
            // Style of cloned element affects source element cloned (#8908)
            div.style.backgroundClip = "content-box";
            div.cloneNode(true).style.backgroundClip = "";
            support.clearCloneStyle = div.style.backgroundClip === "content-box";

            container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
              "padding:0;margin-top:1px;position:absolute";
            container.appendChild(div);

            jQuery.extend(support, {
              pixelPosition: function () {
                computeStyleTests();
                return pixelPositionVal;
              },
              boxSizingReliable: function () {
                computeStyleTests();
                return boxSizingReliableVal;
              },
              pixelMarginRight: function () {
                computeStyleTests();
                return pixelMarginRightVal;
              },
              reliableMarginLeft: function () {
                computeStyleTests();
                return reliableMarginLeftVal;
              }
            });
          })();


          function curCSS(elem, name, computed) {
            var width, minWidth, maxWidth, ret,

              // Support: Firefox 51+
              // Retrieving style before computed somehow
              // fixes an issue with getting wrong values
              // on detached elements
              style = elem.style;

            computed = computed || getStyles(elem);

            // getPropertyValue is needed for:
            //   .css('filter') (IE 9 only, #12537)
            //   .css('--customProperty) (#3144)
            if (computed) {
              ret = computed.getPropertyValue(name) || computed[name];

              if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                ret = jQuery.style(elem, name);
              }

              // A tribute to the "awesome hack by Dean Edwards"
              // Android Browser returns percentage for some values,
              // but width seems to be reliably pixels.
              // This is against the CSSOM draft spec:
              // https://drafts.csswg.org/cssom/#resolved-values
              if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

                // Remember the original values
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;

                // Put in the new values to get a computed value out
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;

                // Revert the changed values
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
              }
            }

            return ret !== undefined ?

              // Support: IE <=9 - 11 only
              // IE returns zIndex value as an integer.
              ret + "" :
              ret;
          }


          function addGetHookIf(conditionFn, hookFn) {

            // Define the hook, we'll check on the first run if it's really needed.
            return {
              get: function () {
                if (conditionFn()) {

                  // Hook not needed (or it's not possible to use it due
                  // to missing dependency), remove it.
                  delete this.get;
                  return;
                }

                // Hook needed; redefine it so that the support test is not executed again.
                return (this.get = hookFn).apply(this, arguments);
              }
            };
          }


          var

          // Swappable if display is none or starts with table
          // except "table", "table-cell", or "table-caption"
          // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
            rdisplayswap = /^(none|table(?!-c[ea]).+)/,
            rcustomProp = /^--/,
            cssShow = { position: "absolute", visibility: "hidden", display: "block" },
            cssNormalTransform = {
              letterSpacing: "0",
              fontWeight: "400"
            },

            cssPrefixes = ["Webkit", "Moz", "ms"],
            emptyStyle = document.createElement("div").style;

          // Return a css property mapped to a potentially vendor prefixed property
          function vendorPropName(name) {

            // Shortcut for names that are not vendor prefixed
            if (name in emptyStyle) {
              return name;
            }

            // Check for vendor prefixed names
            var capName = name[0].toUpperCase() + name.slice(1),
              i = cssPrefixes.length;

            while (i--) {
              name = cssPrefixes[i] + capName;
              if (name in emptyStyle) {
                return name;
              }
            }
          }

          // Return a property mapped along what jQuery.cssProps suggests or to
          // a vendor prefixed property.
          function finalPropName(name) {
            var ret = jQuery.cssProps[name];
            if (!ret) {
              ret = jQuery.cssProps[name] = vendorPropName(name) || name;
            }
            return ret;
          }

          function setPositiveNumber(elem, value, subtract) {

            // Any relative (+/-) values have already been
            // normalized at this point
            var matches = rcssNum.exec(value);
            return matches ?

              // Guard against undefined "subtract", e.g., when used as in cssHooks
              Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") :
              value;
          }

          function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
            var i,
              val = 0;

            // If we already have the right measurement, avoid augmentation
            if (extra === (isBorderBox ? "border" : "content")) {
              i = 4;

              // Otherwise initialize for horizontal or vertical properties
            } else {
              i = name === "width" ? 1 : 0;
            }

            for (; i < 4; i += 2) {

              // Both box models exclude margin, so add it if we want it
              if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
              }

              if (isBorderBox) {

                // border-box includes padding, so remove it if we want content
                if (extra === "content") {
                  val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }

                // At this point, extra isn't border nor margin, so remove border
                if (extra !== "margin") {
                  val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
              } else {

                // At this point, extra isn't content, so add padding
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

                // At this point, extra isn't content nor padding, so add border
                if (extra !== "padding") {
                  val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
              }
            }

            return val;
          }

          function getWidthOrHeight(elem, name, extra) {

            // Start with computed style
            var valueIsBorderBox,
              styles = getStyles(elem),
              val = curCSS(elem, name, styles),
              isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

            // Computed unit is not pixels. Stop here and return.
            if (rnumnonpx.test(val)) {
              return val;
            }

            // Check for style in case a browser which returns unreliable values
            // for getComputedStyle silently falls back to the reliable elem.style
            valueIsBorderBox = isBorderBox &&
              (support.boxSizingReliable() || val === elem.style[name]);

            // Fall back to offsetWidth/Height when value is "auto"
            // This happens for inline elements with no explicit setting (gh-3571)
            if (val === "auto") {
              val = elem["offset" + name[0].toUpperCase() + name.slice(1)];
            }

            // Normalize "", auto, and prepare for extra
            val = parseFloat(val) || 0;

            // Use the active box-sizing model to add/subtract irrelevant styles
            return (val +
              augmentWidthOrHeight(
                elem,
                name,
                extra || (isBorderBox ? "border" : "content"),
                valueIsBorderBox,
                styles
              )
            ) + "px";
          }

          jQuery.extend({

            // Add in style property hooks for overriding the default
            // behavior of getting and setting a style property
            cssHooks: {
              opacity: {
                get: function (elem, computed) {
                  if (computed) {

                    // We should always get a number back from opacity
                    var ret = curCSS(elem, "opacity");
                    return ret === "" ? "1" : ret;
                  }
                }
              }
            },

            // Don't automatically add "px" to these possibly-unitless properties
            cssNumber: {
              "animationIterationCount": true,
              "columnCount": true,
              "fillOpacity": true,
              "flexGrow": true,
              "flexShrink": true,
              "fontWeight": true,
              "lineHeight": true,
              "opacity": true,
              "order": true,
              "orphans": true,
              "widows": true,
              "zIndex": true,
              "zoom": true
            },

            // Add in properties whose names you wish to fix before
            // setting or getting the value
            cssProps: {
              "float": "cssFloat"
            },

            // Get and set the style property on a DOM Node
            style: function (elem, name, value, extra) {

              // Don't set styles on text and comment nodes
              if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
              }

              // Make sure that we're working with the right name
              var ret, type, hooks,
                origName = jQuery.camelCase(name),
                isCustomProp = rcustomProp.test(name),
                style = elem.style;

              // Make sure that we're working with the right name. We don't
              // want to query the value if it is a CSS custom property
              // since they are user-defined.
              if (!isCustomProp) {
                name = finalPropName(origName);
              }

              // Gets hook for the prefixed version, then unprefixed version
              hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

              // Check if we're setting a value
              if (value !== undefined) {
                type = typeof value;

                // Convert "+=" or "-=" to relative numbers (#7345)
                if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                  value = adjustCSS(elem, name, ret);

                  // Fixes bug #9237
                  type = "number";
                }

                // Make sure that null and NaN values aren't set (#7116)
                if (value == null || value !== value) {
                  return;
                }

                // If a number was passed in, add the unit (except for certain CSS properties)
                if (type === "number") {
                  value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
                }

                // background-* props affect original clone's values
                if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                  style[name] = "inherit";
                }

                // If a hook was provided, use that value, otherwise just set the specified value
                if (!hooks || !("set" in hooks) ||
                  (value = hooks.set(elem, value, extra)) !== undefined) {

                  if (isCustomProp) {
                    style.setProperty(name, value);
                  } else {
                    style[name] = value;
                  }
                }

              } else {

                // If a hook was provided get the non-computed value from there
                if (hooks && "get" in hooks &&
                  (ret = hooks.get(elem, false, extra)) !== undefined) {

                  return ret;
                }

                // Otherwise just get the value from the style object
                return style[name];
              }
            },

            css: function (elem, name, extra, styles) {
              var val, num, hooks,
                origName = jQuery.camelCase(name),
                isCustomProp = rcustomProp.test(name);

              // Make sure that we're working with the right name. We don't
              // want to modify the value if it is a CSS custom property
              // since they are user-defined.
              if (!isCustomProp) {
                name = finalPropName(origName);
              }

              // Try prefixed name followed by the unprefixed name
              hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

              // If a hook was provided get the computed value from there
              if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
              }

              // Otherwise, if a way to get the computed value exists, use that
              if (val === undefined) {
                val = curCSS(elem, name, styles);
              }

              // Convert "normal" to computed value
              if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
              }

              // Make numeric if forced or a qualifier was provided and val looks numeric
              if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
              }

              return val;
            }
          });

          jQuery.each(["height", "width"], function (i, name) {
            jQuery.cssHooks[name] = {
              get: function (elem, computed, extra) {
                if (computed) {

                  // Certain elements can have dimension info if we invisibly show them
                  // but it must have a current display style that would benefit
                  return rdisplayswap.test(jQuery.css(elem, "display")) &&

                    // Support: Safari 8+
                    // Table columns in Safari have non-zero offsetWidth & zero
                    // getBoundingClientRect().width unless display is changed.
                    // Support: IE <=11 only
                    // Running getBoundingClientRect on a disconnected node
                    // in IE throws an error.
                    (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ?
                    swap(elem, cssShow, function () {
                      return getWidthOrHeight(elem, name, extra);
                    }) :
                    getWidthOrHeight(elem, name, extra);
                }
              },

              set: function (elem, value, extra) {
                var matches,
                  styles = extra && getStyles(elem),
                  subtract = extra && augmentWidthOrHeight(
                    elem,
                    name,
                    extra,
                    jQuery.css(elem, "boxSizing", false, styles) === "border-box",
                    styles
                  );

                // Convert to pixels if value adjustment is needed
                if (subtract && (matches = rcssNum.exec(value)) &&
                  (matches[3] || "px") !== "px") {

                  elem.style[name] = value;
                  value = jQuery.css(elem, name);
                }

                return setPositiveNumber(elem, value, subtract);
              }
            };
          });

          jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft,
            function (elem, computed) {
              if (computed) {
                return (parseFloat(curCSS(elem, "marginLeft")) ||
                  elem.getBoundingClientRect().left -
                  swap(elem, { marginLeft: 0 }, function () {
                    return elem.getBoundingClientRect().left;
                  })
                ) + "px";
              }
            }
          );

          // These hooks are used by animate to expand properties
          jQuery.each({
            margin: "",
            padding: "",
            border: "Width"
          }, function (prefix, suffix) {
            jQuery.cssHooks[prefix + suffix] = {
              expand: function (value) {
                var i = 0,
                  expanded = {},

                  // Assumes a single number if not a string
                  parts = typeof value === "string" ? value.split(" ") : [value];

                for (; i < 4; i++) {
                  expanded[prefix + cssExpand[i] + suffix] =
                    parts[i] || parts[i - 2] || parts[0];
                }

                return expanded;
              }
            };

            if (!rmargin.test(prefix)) {
              jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
            }
          });

          jQuery.fn.extend({
            css: function (name, value) {
              return access(this, function (elem, name, value) {
                var styles, len,
                  map = {},
                  i = 0;

                if (Array.isArray(name)) {
                  styles = getStyles(elem);
                  len = name.length;

                  for (; i < len; i++) {
                    map[name[i]] = jQuery.css(elem, name[i], false, styles);
                  }

                  return map;
                }

                return value !== undefined ?
                  jQuery.style(elem, name, value) :
                  jQuery.css(elem, name);
              }, name, value, arguments.length > 1);
            }
          });


          function Tween(elem, options, prop, end, easing) {
            return new Tween.prototype.init(elem, options, prop, end, easing);
          }
          jQuery.Tween = Tween;

          Tween.prototype = {
            constructor: Tween,
            init: function (elem, options, prop, end, easing, unit) {
              this.elem = elem;
              this.prop = prop;
              this.easing = easing || jQuery.easing._default;
              this.options = options;
              this.start = this.now = this.cur();
              this.end = end;
              this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
            },
            cur: function () {
              var hooks = Tween.propHooks[this.prop];

              return hooks && hooks.get ?
                hooks.get(this) :
                Tween.propHooks._default.get(this);
            },
            run: function (percent) {
              var eased,
                hooks = Tween.propHooks[this.prop];

              if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](
                  percent, this.options.duration * percent, 0, 1, this.options.duration
                );
              } else {
                this.pos = eased = percent;
              }
              this.now = (this.end - this.start) * eased + this.start;

              if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
              }

              if (hooks && hooks.set) {
                hooks.set(this);
              } else {
                Tween.propHooks._default.set(this);
              }
              return this;
            }
          };

          Tween.prototype.init.prototype = Tween.prototype;

          Tween.propHooks = {
            _default: {
              get: function (tween) {
                var result;

                // Use a property on the element directly when it is not a DOM element,
                // or when there is no matching style property that exists.
                if (tween.elem.nodeType !== 1 ||
                  tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                  return tween.elem[tween.prop];
                }

                // Passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails.
                // Simple values such as "10px" are parsed to Float;
                // complex values such as "rotate(1rad)" are returned as-is.
                result = jQuery.css(tween.elem, tween.prop, "");

                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
              },
              set: function (tween) {

                // Use step hook for back compat.
                // Use cssHook if its there.
                // Use .style if available and use plain properties where available.
                if (jQuery.fx.step[tween.prop]) {
                  jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.nodeType === 1 &&
                  (tween.elem.style[jQuery.cssProps[tween.prop]] != null ||
                    jQuery.cssHooks[tween.prop])) {
                  jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                  tween.elem[tween.prop] = tween.now;
                }
              }
            }
          };

          // Support: IE <=9 only
          // Panic based approach to setting things on disconnected nodes
          Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
            set: function (tween) {
              if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
              }
            }
          };

          jQuery.easing = {
            linear: function (p) {
              return p;
            },
            swing: function (p) {
              return 0.5 - Math.cos(p * Math.PI) / 2;
            },
            _default: "swing"
          };

          jQuery.fx = Tween.prototype.init;

          // Back compat <1.8 extension point
          jQuery.fx.step = {};




          var
            fxNow, inProgress,
            rfxtypes = /^(?:toggle|show|hide)$/,
            rrun = /queueHooks$/;

          function schedule() {
            if (inProgress) {
              if (document.hidden === false && window.requestAnimationFrame) {
                window.requestAnimationFrame(schedule);
              } else {
                window.setTimeout(schedule, jQuery.fx.interval);
              }

              jQuery.fx.tick();
            }
          }

          // Animations created synchronously will run synchronously
          function createFxNow() {
            window.setTimeout(function () {
              fxNow = undefined;
            });
            return (fxNow = jQuery.now());
          }

          // Generate parameters to create a standard animation
          function genFx(type, includeWidth) {
            var which,
              i = 0,
              attrs = { height: type };

            // If we include width, step value is 1 to do all cssExpand values,
            // otherwise step value is 2 to skip over Left and Right
            includeWidth = includeWidth ? 1 : 0;
            for (; i < 4; i += 2 - includeWidth) {
              which = cssExpand[i];
              attrs["margin" + which] = attrs["padding" + which] = type;
            }

            if (includeWidth) {
              attrs.opacity = attrs.width = type;
            }

            return attrs;
          }

          function createTween(value, prop, animation) {
            var tween,
              collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
              index = 0,
              length = collection.length;
            for (; index < length; index++) {
              if ((tween = collection[index].call(animation, prop, value))) {

                // We're done with this property
                return tween;
              }
            }
          }

          function defaultPrefilter(elem, props, opts) {
            var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
              isBox = "width" in props || "height" in props,
              anim = this,
              orig = {},
              style = elem.style,
              hidden = elem.nodeType && isHiddenWithinTree(elem),
              dataShow = dataPriv.get(elem, "fxshow");

            // Queue-skipping animations hijack the fx hooks
            if (!opts.queue) {
              hooks = jQuery._queueHooks(elem, "fx");
              if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function () {
                  if (!hooks.unqueued) {
                    oldfire();
                  }
                };
              }
              hooks.unqueued++;

              anim.always(function () {

                // Ensure the complete handler is called before this completes
                anim.always(function () {
                  hooks.unqueued--;
                  if (!jQuery.queue(elem, "fx").length) {
                    hooks.empty.fire();
                  }
                });
              });
            }

            // Detect show/hide animations
            for (prop in props) {
              value = props[prop];
              if (rfxtypes.test(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {

                  // Pretend to be hidden if this is a "show" and
                  // there is still data from a stopped show/hide
                  if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                    hidden = true;

                    // Ignore all other no-op show/hide data
                  } else {
                    continue;
                  }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
              }
            }

            // Bail out if this is a no-op like .hide().hide()
            propTween = !jQuery.isEmptyObject(props);
            if (!propTween && jQuery.isEmptyObject(orig)) {
              return;
            }

            // Restrict "overflow" and "display" styles during box animations
            if (isBox && elem.nodeType === 1) {

              // Support: IE <=9 - 11, Edge 12 - 13
              // Record all 3 overflow attributes because IE does not infer the shorthand
              // from identically-valued overflowX and overflowY
              opts.overflow = [style.overflow, style.overflowX, style.overflowY];

              // Identify a display type, preferring old show/hide data over the CSS cascade
              restoreDisplay = dataShow && dataShow.display;
              if (restoreDisplay == null) {
                restoreDisplay = dataPriv.get(elem, "display");
              }
              display = jQuery.css(elem, "display");
              if (display === "none") {
                if (restoreDisplay) {
                  display = restoreDisplay;
                } else {

                  // Get nonempty value(s) by temporarily forcing visibility
                  showHide([elem], true);
                  restoreDisplay = elem.style.display || restoreDisplay;
                  display = jQuery.css(elem, "display");
                  showHide([elem]);
                }
              }

              // Animate inline elements as inline-block
              if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
                if (jQuery.css(elem, "float") === "none") {

                  // Restore the original display value at the end of pure show/hide animations
                  if (!propTween) {
                    anim.done(function () {
                      style.display = restoreDisplay;
                    });
                    if (restoreDisplay == null) {
                      display = style.display;
                      restoreDisplay = display === "none" ? "" : display;
                    }
                  }
                  style.display = "inline-block";
                }
              }
            }

            if (opts.overflow) {
              style.overflow = "hidden";
              anim.always(function () {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
              });
            }

            // Implement show/hide animations
            propTween = false;
            for (prop in orig) {

              // General show/hide setup for this element animation
              if (!propTween) {
                if (dataShow) {
                  if ("hidden" in dataShow) {
                    hidden = dataShow.hidden;
                  }
                } else {
                  dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
                }

                // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                if (toggle) {
                  dataShow.hidden = !hidden;
                }

                // Show elements before animating them
                if (hidden) {
                  showHide([elem], true);
                }

                /* eslint-disable no-loop-func */

                anim.done(function () {

                  /* eslint-enable no-loop-func */

                  // The final step of a "hide" animation is actually hiding the element
                  if (!hidden) {
                    showHide([elem]);
                  }
                  dataPriv.remove(elem, "fxshow");
                  for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                  }
                });
              }

              // Per-property setup
              propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
              if (!(prop in dataShow)) {
                dataShow[prop] = propTween.start;
                if (hidden) {
                  propTween.end = propTween.start;
                  propTween.start = 0;
                }
              }
            }
          }

          function propFilter(props, specialEasing) {
            var index, name, easing, value, hooks;

            // camelCase, specialEasing and expand cssHook pass
            for (index in props) {
              name = jQuery.camelCase(index);
              easing = specialEasing[name];
              value = props[index];
              if (Array.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
              }

              if (index !== name) {
                props[name] = value;
                delete props[index];
              }

              hooks = jQuery.cssHooks[name];
              if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];

                // Not quite $.extend, this won't overwrite existing keys.
                // Reusing 'index' because we have the correct "name"
                for (index in value) {
                  if (!(index in props)) {
                    props[index] = value[index];
                    specialEasing[index] = easing;
                  }
                }
              } else {
                specialEasing[name] = easing;
              }
            }
          }

          function Animation(elem, properties, options) {
            var result,
              stopped,
              index = 0,
              length = Animation.prefilters.length,
              deferred = jQuery.Deferred().always(function () {

                // Don't match elem in the :animated selector
                delete tick.elem;
              }),
              tick = function () {
                if (stopped) {
                  return false;
                }
                var currentTime = fxNow || createFxNow(),
                  remaining = Math.max(0, animation.startTime + animation.duration - currentTime),

                  // Support: Android 2.3 only
                  // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
                  temp = remaining / animation.duration || 0,
                  percent = 1 - temp,
                  index = 0,
                  length = animation.tweens.length;

                for (; index < length; index++) {
                  animation.tweens[index].run(percent);
                }

                deferred.notifyWith(elem, [animation, percent, remaining]);

                // If there's more to do, yield
                if (percent < 1 && length) {
                  return remaining;
                }

                // If this was an empty animation, synthesize a final progress notification
                if (!length) {
                  deferred.notifyWith(elem, [animation, 1, 0]);
                }

                // Resolve the animation and report its conclusion
                deferred.resolveWith(elem, [animation]);
                return false;
              },
              animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                  specialEasing: {},
                  easing: jQuery.easing._default
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function (prop, end) {
                  var tween = jQuery.Tween(elem, animation.opts, prop, end,
                    animation.opts.specialEasing[prop] || animation.opts.easing);
                  animation.tweens.push(tween);
                  return tween;
                },
                stop: function (gotoEnd) {
                  var index = 0,

                    // If we are going to the end, we want to run all the tweens
                    // otherwise we skip this part
                    length = gotoEnd ? animation.tweens.length : 0;
                  if (stopped) {
                    return this;
                  }
                  stopped = true;
                  for (; index < length; index++) {
                    animation.tweens[index].run(1);
                  }

                  // Resolve when we played the last frame; otherwise, reject
                  if (gotoEnd) {
                    deferred.notifyWith(elem, [animation, 1, 0]);
                    deferred.resolveWith(elem, [animation, gotoEnd]);
                  } else {
                    deferred.rejectWith(elem, [animation, gotoEnd]);
                  }
                  return this;
                }
              }),
              props = animation.props;

            propFilter(props, animation.opts.specialEasing);

            for (; index < length; index++) {
              result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
              if (result) {
                if (jQuery.isFunction(result.stop)) {
                  jQuery._queueHooks(animation.elem, animation.opts.queue).stop =
                    jQuery.proxy(result.stop, result);
                }
                return result;
              }
            }

            jQuery.map(props, createTween, animation);

            if (jQuery.isFunction(animation.opts.start)) {
              animation.opts.start.call(elem, animation);
            }

            // Attach callbacks from options
            animation
              .progress(animation.opts.progress)
              .done(animation.opts.done, animation.opts.complete)
              .fail(animation.opts.fail)
              .always(animation.opts.always);

            jQuery.fx.timer(
              jQuery.extend(tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue
              })
            );

            return animation;
          }

          jQuery.Animation = jQuery.extend(Animation, {

            tweeners: {
              "*": [function (prop, value) {
                var tween = this.createTween(prop, value);
                adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                return tween;
              }]
            },

            tweener: function (props, callback) {
              if (jQuery.isFunction(props)) {
                callback = props;
                props = ["*"];
              } else {
                props = props.match(rnothtmlwhite);
              }

              var prop,
                index = 0,
                length = props.length;

              for (; index < length; index++) {
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
              }
            },

            prefilters: [defaultPrefilter],

            prefilter: function (callback, prepend) {
              if (prepend) {
                Animation.prefilters.unshift(callback);
              } else {
                Animation.prefilters.push(callback);
              }
            }
          });

          jQuery.speed = function (speed, easing, fn) {
            var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
              complete: fn || !fn && easing ||
                jQuery.isFunction(speed) && speed,
              duration: speed,
              easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
            };

            // Go to the end state if fx are off
            if (jQuery.fx.off) {
              opt.duration = 0;

            } else {
              if (typeof opt.duration !== "number") {
                if (opt.duration in jQuery.fx.speeds) {
                  opt.duration = jQuery.fx.speeds[opt.duration];

                } else {
                  opt.duration = jQuery.fx.speeds._default;
                }
              }
            }

            // Normalize opt.queue - true/undefined/null -> "fx"
            if (opt.queue == null || opt.queue === true) {
              opt.queue = "fx";
            }

            // Queueing
            opt.old = opt.complete;

            opt.complete = function () {
              if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
              }

              if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
              }
            };

            return opt;
          };

          jQuery.fn.extend({
            fadeTo: function (speed, to, easing, callback) {

              // Show any hidden elements after setting opacity to 0
              return this.filter(isHiddenWithinTree).css("opacity", 0).show()

              // Animate to the value specified
              .end().animate({ opacity: to }, speed, easing, callback);
            },
            animate: function (prop, speed, easing, callback) {
              var empty = jQuery.isEmptyObject(prop),
                optall = jQuery.speed(speed, easing, callback),
                doAnimation = function () {

                  // Operate on a copy of prop so per-property easing won't be lost
                  var anim = Animation(this, jQuery.extend({}, prop), optall);

                  // Empty animations, or finishing resolves immediately
                  if (empty || dataPriv.get(this, "finish")) {
                    anim.stop(true);
                  }
                };
              doAnimation.finish = doAnimation;

              return empty || optall.queue === false ?
                this.each(doAnimation) :
                this.queue(optall.queue, doAnimation);
            },
            stop: function (type, clearQueue, gotoEnd) {
              var stopQueue = function (hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
              };

              if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
              }
              if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
              }

              return this.each(function () {
                var dequeue = true,
                  index = type != null && type + "queueHooks",
                  timers = jQuery.timers,
                  data = dataPriv.get(this);

                if (index) {
                  if (data[index] && data[index].stop) {
                    stopQueue(data[index]);
                  }
                } else {
                  for (index in data) {
                    if (data[index] && data[index].stop && rrun.test(index)) {
                      stopQueue(data[index]);
                    }
                  }
                }

                for (index = timers.length; index--;) {
                  if (timers[index].elem === this &&
                    (type == null || timers[index].queue === type)) {

                    timers[index].anim.stop(gotoEnd);
                    dequeue = false;
                    timers.splice(index, 1);
                  }
                }

                // Start the next in the queue if the last step wasn't forced.
                // Timers currently will call their complete callbacks, which
                // will dequeue but only if they were gotoEnd.
                if (dequeue || !gotoEnd) {
                  jQuery.dequeue(this, type);
                }
              });
            },
            finish: function (type) {
              if (type !== false) {
                type = type || "fx";
              }
              return this.each(function () {
                var index,
                  data = dataPriv.get(this),
                  queue = data[type + "queue"],
                  hooks = data[type + "queueHooks"],
                  timers = jQuery.timers,
                  length = queue ? queue.length : 0;

                // Enable finishing flag on private data
                data.finish = true;

                // Empty the queue first
                jQuery.queue(this, type, []);

                if (hooks && hooks.stop) {
                  hooks.stop.call(this, true);
                }

                // Look for any active animations, and finish them
                for (index = timers.length; index--;) {
                  if (timers[index].elem === this && timers[index].queue === type) {
                    timers[index].anim.stop(true);
                    timers.splice(index, 1);
                  }
                }

                // Look for any animations in the old queue and finish them
                for (index = 0; index < length; index++) {
                  if (queue[index] && queue[index].finish) {
                    queue[index].finish.call(this);
                  }
                }

                // Turn off finishing flag
                delete data.finish;
              });
            }
          });

          jQuery.each(["toggle", "show", "hide"], function (i, name) {
            var cssFn = jQuery.fn[name];
            jQuery.fn[name] = function (speed, easing, callback) {
              return speed == null || typeof speed === "boolean" ?
                cssFn.apply(this, arguments) :
                this.animate(genFx(name, true), speed, easing, callback);
            };
          });

          // Generate shortcuts for custom animations
          jQuery.each({
            slideDown: genFx("show"),
            slideUp: genFx("hide"),
            slideToggle: genFx("toggle"),
            fadeIn: { opacity: "show" },
            fadeOut: { opacity: "hide" },
            fadeToggle: { opacity: "toggle" }
          }, function (name, props) {
            jQuery.fn[name] = function (speed, easing, callback) {
              return this.animate(props, speed, easing, callback);
            };
          });

          jQuery.timers = [];
          jQuery.fx.tick = function () {
            var timer,
              i = 0,
              timers = jQuery.timers;

            fxNow = jQuery.now();

            for (; i < timers.length; i++) {
              timer = timers[i];

              // Run the timer and safely remove it when done (allowing for external removal)
              if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
              }
            }

            if (!timers.length) {
              jQuery.fx.stop();
            }
            fxNow = undefined;
          };

          jQuery.fx.timer = function (timer) {
            jQuery.timers.push(timer);
            jQuery.fx.start();
          };

          jQuery.fx.interval = 13;
          jQuery.fx.start = function () {
            if (inProgress) {
              return;
            }

            inProgress = true;
            schedule();
          };

          jQuery.fx.stop = function () {
            inProgress = null;
          };

          jQuery.fx.speeds = {
            slow: 600,
            fast: 200,

            // Default speed
            _default: 400
          };


          // Based off of the plugin by Clint Helfers, with permission.
          // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
          jQuery.fn.delay = function (time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || "fx";

            return this.queue(type, function (next, hooks) {
              var timeout = window.setTimeout(next, time);
              hooks.stop = function () {
                window.clearTimeout(timeout);
              };
            });
          };


          (function () {
            var input = document.createElement("input"),
              select = document.createElement("select"),
              opt = select.appendChild(document.createElement("option"));

            input.type = "checkbox";

            // Support: Android <=4.3 only
            // Default value for a checkbox should be "on"
            support.checkOn = input.value !== "";

            // Support: IE <=11 only
            // Must access selectedIndex to make default options select
            support.optSelected = opt.selected;

            // Support: IE <=11 only
            // An input loses its value after becoming a radio
            input = document.createElement("input");
            input.value = "t";
            input.type = "radio";
            support.radioValue = input.value === "t";
          })();


          var boolHook,
            attrHandle = jQuery.expr.attrHandle;

          jQuery.fn.extend({
            attr: function (name, value) {
              return access(this, jQuery.attr, name, value, arguments.length > 1);
            },

            removeAttr: function (name) {
              return this.each(function () {
                jQuery.removeAttr(this, name);
              });
            }
          });

          jQuery.extend({
            attr: function (elem, name, value) {
              var ret, hooks,
                nType = elem.nodeType;

              // Don't get/set attributes on text, comment and attribute nodes
              if (nType === 3 || nType === 8 || nType === 2) {
                return;
              }

              // Fallback to prop when attributes are not supported
              if (typeof elem.getAttribute === "undefined") {
                return jQuery.prop(elem, name, value);
              }

              // Attribute hooks are determined by the lowercase version
              // Grab necessary hook if one is defined
              if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                hooks = jQuery.attrHooks[name.toLowerCase()] ||
                  (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
              }

              if (value !== undefined) {
                if (value === null) {
                  jQuery.removeAttr(elem, name);
                  return;
                }

                if (hooks && "set" in hooks &&
                  (ret = hooks.set(elem, value, name)) !== undefined) {
                  return ret;
                }

                elem.setAttribute(name, value + "");
                return value;
              }

              if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
              }

              ret = jQuery.find.attr(elem, name);

              // Non-existent attributes return null, we normalize to undefined
              return ret == null ? undefined : ret;
            },

            attrHooks: {
              type: {
                set: function (elem, value) {
                  if (!support.radioValue && value === "radio" &&
                    nodeName(elem, "input")) {
                    var val = elem.value;
                    elem.setAttribute("type", value);
                    if (val) {
                      elem.value = val;
                    }
                    return value;
                  }
                }
              }
            },

            removeAttr: function (elem, value) {
              var name,
                i = 0,

                // Attribute names can contain non-HTML whitespace characters
                // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
                attrNames = value && value.match(rnothtmlwhite);

              if (attrNames && elem.nodeType === 1) {
                while ((name = attrNames[i++])) {
                  elem.removeAttribute(name);
                }
              }
            }
          });

          // Hooks for boolean attributes
          boolHook = {
            set: function (elem, value, name) {
              if (value === false) {

                // Remove boolean attributes when set to false
                jQuery.removeAttr(elem, name);
              } else {
                elem.setAttribute(name, name);
              }
              return name;
            }
          };

          jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
            var getter = attrHandle[name] || jQuery.find.attr;

            attrHandle[name] = function (elem, name, isXML) {
              var ret, handle,
                lowercaseName = name.toLowerCase();

              if (!isXML) {

                // Avoid an infinite loop by temporarily removing this function from the getter
                handle = attrHandle[lowercaseName];
                attrHandle[lowercaseName] = ret;
                ret = getter(elem, name, isXML) != null ?
                  lowercaseName :
                  null;
                attrHandle[lowercaseName] = handle;
              }
              return ret;
            };
          });




          var rfocusable = /^(?:input|select|textarea|button)$/i,
            rclickable = /^(?:a|area)$/i;

          jQuery.fn.extend({
            prop: function (name, value) {
              return access(this, jQuery.prop, name, value, arguments.length > 1);
            },

            removeProp: function (name) {
              return this.each(function () {
                delete this[jQuery.propFix[name] || name];
              });
            }
          });

          jQuery.extend({
            prop: function (elem, name, value) {
              var ret, hooks,
                nType = elem.nodeType;

              // Don't get/set properties on text, comment and attribute nodes
              if (nType === 3 || nType === 8 || nType === 2) {
                return;
              }

              if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

                // Fix name and attach hooks
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
              }

              if (value !== undefined) {
                if (hooks && "set" in hooks &&
                  (ret = hooks.set(elem, value, name)) !== undefined) {
                  return ret;
                }

                return (elem[name] = value);
              }

              if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
              }

              return elem[name];
            },

            propHooks: {
              tabIndex: {
                get: function (elem) {

                  // Support: IE <=9 - 11 only
                  // elem.tabIndex doesn't always return the
                  // correct value when it hasn't been explicitly set
                  // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                  // Use proper attribute retrieval(#12072)
                  var tabindex = jQuery.find.attr(elem, "tabindex");

                  if (tabindex) {
                    return parseInt(tabindex, 10);
                  }

                  if (
                    rfocusable.test(elem.nodeName) ||
                    rclickable.test(elem.nodeName) &&
                    elem.href
                  ) {
                    return 0;
                  }

                  return -1;
                }
              }
            },

            propFix: {
              "for": "htmlFor",
              "class": "className"
            }
          });

          // Support: IE <=11 only
          // Accessing the selectedIndex property
          // forces the browser to respect setting selected
          // on the option
          // The getter ensures a default option is selected
          // when in an optgroup
          // eslint rule "no-unused-expressions" is disabled for this code
          // since it considers such accessions noop
          if (!support.optSelected) {
            jQuery.propHooks.selected = {
              get: function (elem) {

                /* eslint no-unused-expressions: "off" */

                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                  parent.parentNode.selectedIndex;
                }
                return null;
              },
              set: function (elem) {

                /* eslint no-unused-expressions: "off" */

                var parent = elem.parentNode;
                if (parent) {
                  parent.selectedIndex;

                  if (parent.parentNode) {
                    parent.parentNode.selectedIndex;
                  }
                }
              }
            };
          }

          jQuery.each([
            "tabIndex",
            "readOnly",
            "maxLength",
            "cellSpacing",
            "cellPadding",
            "rowSpan",
            "colSpan",
            "useMap",
            "frameBorder",
            "contentEditable"
          ], function () {
            jQuery.propFix[this.toLowerCase()] = this;
          });




          // Strip and collapse whitespace according to HTML spec
          // https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
          function stripAndCollapse(value) {
            var tokens = value.match(rnothtmlwhite) || [];
            return tokens.join(" ");
          }


          function getClass(elem) {
            return elem.getAttribute && elem.getAttribute("class") || "";
          }

          jQuery.fn.extend({
            addClass: function (value) {
              var classes, elem, cur, curValue, clazz, j, finalValue,
                i = 0;

              if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                  jQuery(this).addClass(value.call(this, j, getClass(this)));
                });
              }

              if (typeof value === "string" && value) {
                classes = value.match(rnothtmlwhite) || [];

                while ((elem = this[i++])) {
                  curValue = getClass(elem);
                  cur = elem.nodeType === 1 && (" " + stripAndCollapse(curValue) + " ");

                  if (cur) {
                    j = 0;
                    while ((clazz = classes[j++])) {
                      if (cur.indexOf(" " + clazz + " ") < 0) {
                        cur += clazz + " ";
                      }
                    }

                    // Only assign if different to avoid unneeded rendering.
                    finalValue = stripAndCollapse(cur);
                    if (curValue !== finalValue) {
                      elem.setAttribute("class", finalValue);
                    }
                  }
                }
              }

              return this;
            },

            removeClass: function (value) {
              var classes, elem, cur, curValue, clazz, j, finalValue,
                i = 0;

              if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                  jQuery(this).removeClass(value.call(this, j, getClass(this)));
                });
              }

              if (!arguments.length) {
                return this.attr("class", "");
              }

              if (typeof value === "string" && value) {
                classes = value.match(rnothtmlwhite) || [];

                while ((elem = this[i++])) {
                  curValue = getClass(elem);

                  // This expression is here for better compressibility (see addClass)
                  cur = elem.nodeType === 1 && (" " + stripAndCollapse(curValue) + " ");

                  if (cur) {
                    j = 0;
                    while ((clazz = classes[j++])) {

                      // Remove *all* instances
                      while (cur.indexOf(" " + clazz + " ") > -1) {
                        cur = cur.replace(" " + clazz + " ", " ");
                      }
                    }

                    // Only assign if different to avoid unneeded rendering.
                    finalValue = stripAndCollapse(cur);
                    if (curValue !== finalValue) {
                      elem.setAttribute("class", finalValue);
                    }
                  }
                }
              }

              return this;
            },

            toggleClass: function (value, stateVal) {
              var type = typeof value;

              if (typeof stateVal === "boolean" && type === "string") {
                return stateVal ? this.addClass(value) : this.removeClass(value);
              }

              if (jQuery.isFunction(value)) {
                return this.each(function (i) {
                  jQuery(this).toggleClass(
                    value.call(this, i, getClass(this), stateVal),
                    stateVal
                  );
                });
              }

              return this.each(function () {
                var className, i, self, classNames;

                if (type === "string") {

                  // Toggle individual class names
                  i = 0;
                  self = jQuery(this);
                  classNames = value.match(rnothtmlwhite) || [];

                  while ((className = classNames[i++])) {

                    // Check each className given, space separated list
                    if (self.hasClass(className)) {
                      self.removeClass(className);
                    } else {
                      self.addClass(className);
                    }
                  }

                  // Toggle whole class name
                } else if (value === undefined || type === "boolean") {
                  className = getClass(this);
                  if (className) {

                    // Store className if set
                    dataPriv.set(this, "__className__", className);
                  }

                  // If the element has a class name or if we're passed `false`,
                  // then remove the whole classname (if there was one, the above saved it).
                  // Otherwise bring back whatever was previously saved (if anything),
                  // falling back to the empty string if nothing was stored.
                  if (this.setAttribute) {
                    this.setAttribute("class",
                      className || value === false ?
                      "" :
                      dataPriv.get(this, "__className__") || ""
                    );
                  }
                }
              });
            },

            hasClass: function (selector) {
              var className, elem,
                i = 0;

              className = " " + selector + " ";
              while ((elem = this[i++])) {
                if (elem.nodeType === 1 &&
                  (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                  return true;
                }
              }

              return false;
            }
          });




          var rreturn = /\r/g;

          jQuery.fn.extend({
            val: function (value) {
              var hooks, ret, isFunction,
                elem = this[0];

              if (!arguments.length) {
                if (elem) {
                  hooks = jQuery.valHooks[elem.type] ||
                    jQuery.valHooks[elem.nodeName.toLowerCase()];

                  if (hooks &&
                    "get" in hooks &&
                    (ret = hooks.get(elem, "value")) !== undefined
                  ) {
                    return ret;
                  }

                  ret = elem.value;

                  // Handle most common string cases
                  if (typeof ret === "string") {
                    return ret.replace(rreturn, "");
                  }

                  // Handle cases where value is null/undef or number
                  return ret == null ? "" : ret;
                }

                return;
              }

              isFunction = jQuery.isFunction(value);

              return this.each(function (i) {
                var val;

                if (this.nodeType !== 1) {
                  return;
                }

                if (isFunction) {
                  val = value.call(this, i, jQuery(this).val());
                } else {
                  val = value;
                }

                // Treat null/undefined as ""; convert numbers to string
                if (val == null) {
                  val = "";

                } else if (typeof val === "number") {
                  val += "";

                } else if (Array.isArray(val)) {
                  val = jQuery.map(val, function (value) {
                    return value == null ? "" : value + "";
                  });
                }

                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

                // If set returns undefined, fall back to normal setting
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                  this.value = val;
                }
              });
            }
          });

          jQuery.extend({
            valHooks: {
              option: {
                get: function (elem) {

                  var val = jQuery.find.attr(elem, "value");
                  return val != null ?
                    val :

                    // Support: IE <=10 - 11 only
                    // option.text throws exceptions (#14686, #14858)
                    // Strip and collapse whitespace
                    // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                    stripAndCollapse(jQuery.text(elem));
                }
              },
              select: {
                get: function (elem) {
                  var value, option, i,
                    options = elem.options,
                    index = elem.selectedIndex,
                    one = elem.type === "select-one",
                    values = one ? null : [],
                    max = one ? index + 1 : options.length;

                  if (index < 0) {
                    i = max;

                  } else {
                    i = one ? index : 0;
                  }

                  // Loop through all the selected options
                  for (; i < max; i++) {
                    option = options[i];

                    // Support: IE <=9 only
                    // IE8-9 doesn't update selected after form reset (#2551)
                    if ((option.selected || i === index) &&

                      // Don't return options that are disabled or in a disabled optgroup
                      !option.disabled &&
                      (!option.parentNode.disabled ||
                        !nodeName(option.parentNode, "optgroup"))) {

                      // Get the specific value for the option
                      value = jQuery(option).val();

                      // We don't need an array for one selects
                      if (one) {
                        return value;
                      }

                      // Multi-Selects return an array
                      values.push(value);
                    }
                  }

                  return values;
                },

                set: function (elem, value) {
                  var optionSet, option,
                    options = elem.options,
                    values = jQuery.makeArray(value),
                    i = options.length;

                  while (i--) {
                    option = options[i];

                    /* eslint-disable no-cond-assign */

                    if (option.selected =
                      jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1
                    ) {
                      optionSet = true;
                    }

                    /* eslint-enable no-cond-assign */
                  }

                  // Force browsers to behave consistently when non-matching value is set
                  if (!optionSet) {
                    elem.selectedIndex = -1;
                  }
                  return values;
                }
              }
            }
          });

          // Radios and checkboxes getter/setter
          jQuery.each(["radio", "checkbox"], function () {
            jQuery.valHooks[this] = {
              set: function (elem, value) {
                if (Array.isArray(value)) {
                  return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1);
                }
              }
            };
            if (!support.checkOn) {
              jQuery.valHooks[this].get = function (elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
              };
            }
          });




          // Return jQuery for attributes-only inclusion


          var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

          jQuery.extend(jQuery.event, {

            trigger: function (event, data, elem, onlyHandlers) {

              var i, cur, tmp, bubbleType, ontype, handle, special,
                eventPath = [elem || document],
                type = hasOwn.call(event, "type") ? event.type : event,
                namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

              cur = tmp = elem = elem || document;

              // Don't do events on text and comment nodes
              if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
              }

              // focus/blur morphs to focusin/out; ensure we're not firing them right now
              if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
              }

              if (type.indexOf(".") > -1) {

                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
              }
              ontype = type.indexOf(":") < 0 && "on" + type;

              // Caller can pass in a jQuery.Event object, Object, or just an event type string
              event = event[jQuery.expando] ?
                event :
                new jQuery.Event(type, typeof event === "object" && event);

              // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
              event.isTrigger = onlyHandlers ? 2 : 3;
              event.namespace = namespaces.join(".");
              event.rnamespace = event.namespace ?
                new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") :
                null;

              // Clean up the event in case it is being reused
              event.result = undefined;
              if (!event.target) {
                event.target = elem;
              }

              // Clone any incoming data and prepend the event, creating the handler arg list
              data = data == null ? [event] :
                jQuery.makeArray(data, [event]);

              // Allow special events to draw outside the lines
              special = jQuery.event.special[type] || {};
              if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
              }

              // Determine event propagation path in advance, per W3C events spec (#9951)
              // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
              if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                  cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                  eventPath.push(cur);
                  tmp = cur;
                }

                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document)) {
                  eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
              }

              // Fire handlers on the event path
              i = 0;
              while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

                event.type = i > 1 ?
                  bubbleType :
                  special.bindType || type;

                // jQuery handler
                handle = (dataPriv.get(cur, "events") || {})[event.type] &&
                  dataPriv.get(cur, "handle");
                if (handle) {
                  handle.apply(cur, data);
                }

                // Native handler
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                  event.result = handle.apply(cur, data);
                  if (event.result === false) {
                    event.preventDefault();
                  }
                }
              }
              event.type = type;

              // If nobody prevented the default action, do it now
              if (!onlyHandlers && !event.isDefaultPrevented()) {

                if ((!special._default ||
                    special._default.apply(eventPath.pop(), data) === false) &&
                  acceptData(elem)) {

                  // Call a native DOM method on the target with the same name as the event.
                  // Don't do default actions on window, that's where global variables be (#6170)
                  if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

                    // Don't re-trigger an onFOO event when we call its FOO() method
                    tmp = elem[ontype];

                    if (tmp) {
                      elem[ontype] = null;
                    }

                    // Prevent re-triggering of the same event, since we already bubbled it above
                    jQuery.event.triggered = type;
                    elem[type]();
                    jQuery.event.triggered = undefined;

                    if (tmp) {
                      elem[ontype] = tmp;
                    }
                  }
                }
              }

              return event.result;
            },

            // Piggyback on a donor event to simulate a different one
            // Used only for `focus(in | out)` events
            simulate: function (type, elem, event) {
              var e = jQuery.extend(
                new jQuery.Event(),
                event, {
                  type: type,
                  isSimulated: true
                }
              );

              jQuery.event.trigger(e, null, elem);
            }

          });

          jQuery.fn.extend({

            trigger: function (type, data) {
              return this.each(function () {
                jQuery.event.trigger(type, data, this);
              });
            },
            triggerHandler: function (type, data) {
              var elem = this[0];
              if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
              }
            }
          });


          jQuery.each(("blur focus focusin focusout resize scroll click dblclick " +
              "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
              "change select submit keydown keypress keyup contextmenu").split(" "),
            function (i, name) {

              // Handle event binding
              jQuery.fn[name] = function (data, fn) {
                return arguments.length > 0 ?
                  this.on(name, null, data, fn) :
                  this.trigger(name);
              };
            });

          jQuery.fn.extend({
            hover: function (fnOver, fnOut) {
              return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
            }
          });




          support.focusin = "onfocusin" in window;


          // Support: Firefox <=44
          // Firefox doesn't have focus(in | out) events
          // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
          //
          // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
          // focus(in | out) events fire after focus & blur events,
          // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
          // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
          if (!support.focusin) {
            jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

              // Attach a single capturing handler on the document while someone wants focusin/focusout
              var handler = function (event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
              };

              jQuery.event.special[fix] = {
                setup: function () {
                  var doc = this.ownerDocument || this,
                    attaches = dataPriv.access(doc, fix);

                  if (!attaches) {
                    doc.addEventListener(orig, handler, true);
                  }
                  dataPriv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function () {
                  var doc = this.ownerDocument || this,
                    attaches = dataPriv.access(doc, fix) - 1;

                  if (!attaches) {
                    doc.removeEventListener(orig, handler, true);
                    dataPriv.remove(doc, fix);

                  } else {
                    dataPriv.access(doc, fix, attaches);
                  }
                }
              };
            });
          }
          var location = window.location;

          var nonce = jQuery.now();

          var rquery = (/\?/);



          // Cross-browser xml parsing
          jQuery.parseXML = function (data) {
            var xml;
            if (!data || typeof data !== "string") {
              return null;
            }

            // Support: IE 9 - 11 only
            // IE throws on parseFromString with invalid input.
            try {
              xml = (new window.DOMParser()).parseFromString(data, "text/xml");
            } catch (e) {
              xml = undefined;
            }

            if (!xml || xml.getElementsByTagName("parsererror").length) {
              jQuery.error("Invalid XML: " + data);
            }
            return xml;
          };


          var
            rbracket = /\[\]$/,
            rCRLF = /\r?\n/g,
            rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
            rsubmittable = /^(?:input|select|textarea|keygen)/i;

          function buildParams(prefix, obj, traditional, add) {
            var name;

            if (Array.isArray(obj)) {

              // Serialize array item.
              jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {

                  // Treat each array item as a scalar.
                  add(prefix, v);

                } else {

                  // Item is non-scalar (array or object), encode its numeric index.
                  buildParams(
                    prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]",
                    v,
                    traditional,
                    add
                  );
                }
              });

            } else if (!traditional && jQuery.type(obj) === "object") {

              // Serialize object item.
              for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
              }

            } else {

              // Serialize scalar item.
              add(prefix, obj);
            }
          }

          // Serialize an array of form elements or a set of
          // key/values into a query string
          jQuery.param = function (a, traditional) {
            var prefix,
              s = [],
              add = function (key, valueOrFunction) {

                // If value is a function, invoke it and use its return value
                var value = jQuery.isFunction(valueOrFunction) ?
                  valueOrFunction() :
                  valueOrFunction;

                s[s.length] = encodeURIComponent(key) + "=" +
                  encodeURIComponent(value == null ? "" : value);
              };

            // If an array was passed in, assume that it is an array of form elements.
            if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {

              // Serialize the form elements
              jQuery.each(a, function () {
                add(this.name, this.value);
              });

            } else {

              // If traditional, encode the "old" way (the way 1.3.2 or older
              // did it), otherwise encode params recursively.
              for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
              }
            }

            // Return the resulting serialization
            return s.join("&");
          };

          jQuery.fn.extend({
            serialize: function () {
              return jQuery.param(this.serializeArray());
            },
            serializeArray: function () {
              return this.map(function () {

                  // Can add propHook for "elements" to filter or add form elements
                  var elements = jQuery.prop(this, "elements");
                  return elements ? jQuery.makeArray(elements) : this;
                })
                .filter(function () {
                  var type = this.type;

                  // Use .is( ":disabled" ) so that fieldset[disabled] works
                  return this.name && !jQuery(this).is(":disabled") &&
                    rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) &&
                    (this.checked || !rcheckableType.test(type));
                })
                .map(function (i, elem) {
                  var val = jQuery(this).val();

                  if (val == null) {
                    return null;
                  }

                  if (Array.isArray(val)) {
                    return jQuery.map(val, function (val) {
                      return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
                    });
                  }

                  return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
                }).get();
            }
          });


          var
            r20 = /%20/g,
            rhash = /#.*$/,
            rantiCache = /([?&])_=[^&]*/,
            rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

            // #7653, #8125, #8152: local protocol detection
            rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
            rnoContent = /^(?:GET|HEAD)$/,
            rprotocol = /^\/\//,

            /* Prefilters
             * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
             * 2) These are called:
             *    - BEFORE asking for a transport
             *    - AFTER param serialization (s.data is a string if s.processData is true)
             * 3) key is the dataType
             * 4) the catchall symbol "*" can be used
             * 5) execution will start with transport dataType and THEN continue down to "*" if needed
             */
            prefilters = {},

            /* Transports bindings
             * 1) key is the dataType
             * 2) the catchall symbol "*" can be used
             * 3) selection will start with transport dataType and THEN go to "*" if needed
             */
            transports = {},

            // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
            allTypes = "*/".concat("*"),

            // Anchor tag for parsing the document origin
            originAnchor = document.createElement("a");
          originAnchor.href = location.href;

          // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
          function addToPrefiltersOrTransports(structure) {

            // dataTypeExpression is optional and defaults to "*"
            return function (dataTypeExpression, func) {

              if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
              }

              var dataType,
                i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

              if (jQuery.isFunction(func)) {

                // For each dataType in the dataTypeExpression
                while ((dataType = dataTypes[i++])) {

                  // Prepend if requested
                  if (dataType[0] === "+") {
                    dataType = dataType.slice(1) || "*";
                    (structure[dataType] = structure[dataType] || []).unshift(func);

                    // Otherwise append
                  } else {
                    (structure[dataType] = structure[dataType] || []).push(func);
                  }
                }
              }
            };
          }

          // Base inspection function for prefilters and transports
          function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

            var inspected = {},
              seekingTransport = (structure === transports);

            function inspect(dataType) {
              var selected;
              inspected[dataType] = true;
              jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" &&
                  !seekingTransport && !inspected[dataTypeOrTransport]) {

                  options.dataTypes.unshift(dataTypeOrTransport);
                  inspect(dataTypeOrTransport);
                  return false;
                } else if (seekingTransport) {
                  return !(selected = dataTypeOrTransport);
                }
              });
              return selected;
            }

            return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
          }

          // A special extend for ajax options
          // that takes "flat" options (not to be deep extended)
          // Fixes #9887
          function ajaxExtend(target, src) {
            var key, deep,
              flatOptions = jQuery.ajaxSettings.flatOptions || {};

            for (key in src) {
              if (src[key] !== undefined) {
                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
              }
            }
            if (deep) {
              jQuery.extend(true, target, deep);
            }

            return target;
          }

          /* Handles responses to an ajax request:
           * - finds the right dataType (mediates between content-type and expected dataType)
           * - returns the corresponding response
           */
          function ajaxHandleResponses(s, jqXHR, responses) {

            var ct, type, finalDataType, firstDataType,
              contents = s.contents,
              dataTypes = s.dataTypes;

            // Remove auto dataType and get content-type in the process
            while (dataTypes[0] === "*") {
              dataTypes.shift();
              if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
              }
            }

            // Check if we're dealing with a known content-type
            if (ct) {
              for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                  dataTypes.unshift(type);
                  break;
                }
              }
            }

            // Check to see if we have a response for the expected dataType
            if (dataTypes[0] in responses) {
              finalDataType = dataTypes[0];
            } else {

              // Try convertible dataTypes
              for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                  finalDataType = type;
                  break;
                }
                if (!firstDataType) {
                  firstDataType = type;
                }
              }

              // Or just use first one
              finalDataType = finalDataType || firstDataType;
            }

            // If we found a dataType
            // We add the dataType to the list if needed
            // and return the corresponding response
            if (finalDataType) {
              if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
              }
              return responses[finalDataType];
            }
          }

          /* Chain conversions given the request and the original response
           * Also sets the responseXXX fields on the jqXHR instance
           */
          function ajaxConvert(s, response, jqXHR, isSuccess) {
            var conv2, current, conv, tmp, prev,
              converters = {},

              // Work with a copy of dataTypes in case we need to modify it for conversion
              dataTypes = s.dataTypes.slice();

            // Create converters map with lowercased keys
            if (dataTypes[1]) {
              for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
              }
            }

            current = dataTypes.shift();

            // Convert to each sequential dataType
            while (current) {

              if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
              }

              // Apply the dataFilter if provided
              if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
              }

              prev = current;
              current = dataTypes.shift();

              if (current) {

                // There's only work to do if current dataType is non-auto
                if (current === "*") {

                  current = prev;

                  // Convert response if prev dataType is non-auto and differs from current
                } else if (prev !== "*" && prev !== current) {

                  // Seek a direct converter
                  conv = converters[prev + " " + current] || converters["* " + current];

                  // If none found, seek a pair
                  if (!conv) {
                    for (conv2 in converters) {

                      // If conv2 outputs current
                      tmp = conv2.split(" ");
                      if (tmp[1] === current) {

                        // If prev can be converted to accepted input
                        conv = converters[prev + " " + tmp[0]] ||
                          converters["* " + tmp[0]];
                        if (conv) {

                          // Condense equivalence converters
                          if (conv === true) {
                            conv = converters[conv2];

                            // Otherwise, insert the intermediate dataType
                          } else if (converters[conv2] !== true) {
                            current = tmp[0];
                            dataTypes.unshift(tmp[1]);
                          }
                          break;
                        }
                      }
                    }
                  }

                  // Apply converter (if not an equivalence)
                  if (conv !== true) {

                    // Unless errors are allowed to bubble, catch and return them
                    if (conv && s.throws) {
                      response = conv(response);
                    } else {
                      try {
                        response = conv(response);
                      } catch (e) {
                        return {
                          state: "parsererror",
                          error: conv ? e : "No conversion from " + prev + " to " + current
                        };
                      }
                    }
                  }
                }
              }
            }

            return { state: "success", data: response };
          }

          jQuery.extend({

            // Counter for holding the number of active queries
            active: 0,

            // Last-Modified header cache for next request
            lastModified: {},
            etag: {},

            ajaxSettings: {
              url: location.href,
              type: "GET",
              isLocal: rlocalProtocol.test(location.protocol),
              global: true,
              processData: true,
              async: true,
              contentType: "application/x-www-form-urlencoded; charset=UTF-8",

              /*
              timeout: 0,
              data: null,
              dataType: null,
              username: null,
              password: null,
              cache: null,
              throws: false,
              traditional: false,
              headers: {},
              */

              accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
              },

              contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
              },

              responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
              },

              // Data converters
              // Keys separate source (or catchall "*") and destination types with a single space
              converters: {

                // Convert anything to text
                "* text": String,

                // Text to html (true = no transformation)
                "text html": true,

                // Evaluate text as a json expression
                "text json": JSON.parse,

                // Parse text as xml
                "text xml": jQuery.parseXML
              },

              // For options that shouldn't be deep extended:
              // you can add your own custom options here if
              // and when you create one that shouldn't be
              // deep extended (see ajaxExtend)
              flatOptions: {
                url: true,
                context: true
              }
            },

            // Creates a full fledged settings object into target
            // with both ajaxSettings and settings fields.
            // If target is omitted, writes into ajaxSettings.
            ajaxSetup: function (target, settings) {
              return settings ?

                // Building a settings object
                ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

                // Extending ajaxSettings
                ajaxExtend(jQuery.ajaxSettings, target);
            },

            ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
            ajaxTransport: addToPrefiltersOrTransports(transports),

            // Main method
            ajax: function (url, options) {

              // If url is an object, simulate pre-1.5 signature
              if (typeof url === "object") {
                options = url;
                url = undefined;
              }

              // Force options to be an object
              options = options || {};

              var transport,

                // URL without anti-cache param
                cacheURL,

                // Response headers
                responseHeadersString,
                responseHeaders,

                // timeout handle
                timeoutTimer,

                // Url cleanup var
                urlAnchor,

                // Request state (becomes false upon send and true upon completion)
                completed,

                // To know if global events are to be dispatched
                fireGlobals,

                // Loop variable
                i,

                // uncached part of the url
                uncached,

                // Create the final options object
                s = jQuery.ajaxSetup({}, options),

                // Callbacks context
                callbackContext = s.context || s,

                // Context for global events is callbackContext if it is a DOM node or jQuery collection
                globalEventContext = s.context &&
                (callbackContext.nodeType || callbackContext.jquery) ?
                jQuery(callbackContext) :
                jQuery.event,

                // Deferreds
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),

                // Status-dependent callbacks
                statusCode = s.statusCode || {},

                // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},

                // Default abort message
                strAbort = "canceled",

                // Fake xhr
                jqXHR = {
                  readyState: 0,

                  // Builds headers hashtable if needed
                  getResponseHeader: function (key) {
                    var match;
                    if (completed) {
                      if (!responseHeaders) {
                        responseHeaders = {};
                        while ((match = rheaders.exec(responseHeadersString))) {
                          responseHeaders[match[1].toLowerCase()] = match[2];
                        }
                      }
                      match = responseHeaders[key.toLowerCase()];
                    }
                    return match == null ? null : match;
                  },

                  // Raw string
                  getAllResponseHeaders: function () {
                    return completed ? responseHeadersString : null;
                  },

                  // Caches the header
                  setRequestHeader: function (name, value) {
                    if (completed == null) {
                      name = requestHeadersNames[name.toLowerCase()] =
                        requestHeadersNames[name.toLowerCase()] || name;
                      requestHeaders[name] = value;
                    }
                    return this;
                  },

                  // Overrides response content-type header
                  overrideMimeType: function (type) {
                    if (completed == null) {
                      s.mimeType = type;
                    }
                    return this;
                  },

                  // Status-dependent callbacks
                  statusCode: function (map) {
                    var code;
                    if (map) {
                      if (completed) {

                        // Execute the appropriate callbacks
                        jqXHR.always(map[jqXHR.status]);
                      } else {

                        // Lazy-add the new callbacks in a way that preserves old ones
                        for (code in map) {
                          statusCode[code] = [statusCode[code], map[code]];
                        }
                      }
                    }
                    return this;
                  },

                  // Cancel the request
                  abort: function (statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) {
                      transport.abort(finalText);
                    }
                    done(0, finalText);
                    return this;
                  }
                };

              // Attach deferreds
              deferred.promise(jqXHR);

              // Add protocol if not provided (prefilters might expect it)
              // Handle falsy url in the settings object (#10093: consistency with old signature)
              // We also use the url parameter if available
              s.url = ((url || s.url || location.href) + "")
                .replace(rprotocol, location.protocol + "//");

              // Alias method option to type as per ticket #12004
              s.type = options.method || options.type || s.method || s.type;

              // Extract dataTypes list
              s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

              // A cross-domain request is in order when the origin doesn't match the current origin.
              if (s.crossDomain == null) {
                urlAnchor = document.createElement("a");

                // Support: IE <=8 - 11, Edge 12 - 13
                // IE throws exception on accessing the href property if url is malformed,
                // e.g. http://example.com:80x/
                try {
                  urlAnchor.href = s.url;

                  // Support: IE <=8 - 11 only
                  // Anchor's host property isn't correctly set when s.url is relative
                  urlAnchor.href = urlAnchor.href;
                  s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
                    urlAnchor.protocol + "//" + urlAnchor.host;
                } catch (e) {

                  // If there is an error parsing the URL, assume it is crossDomain,
                  // it can be rejected by the transport if it is invalid
                  s.crossDomain = true;
                }
              }

              // Convert data if not already a string
              if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
              }

              // Apply prefilters
              inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

              // If request was aborted inside a prefilter, stop there
              if (completed) {
                return jqXHR;
              }

              // We can fire global events as of now if asked to
              // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
              fireGlobals = jQuery.event && s.global;

              // Watch for a new set of requests
              if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
              }

              // Uppercase the type
              s.type = s.type.toUpperCase();

              // Determine if request has content
              s.hasContent = !rnoContent.test(s.type);

              // Save the URL in case we're toying with the If-Modified-Since
              // and/or If-None-Match header later on
              // Remove hash to simplify url manipulation
              cacheURL = s.url.replace(rhash, "");

              // More options handling for requests with no content
              if (!s.hasContent) {

                // Remember the hash so we can put it back
                uncached = s.url.slice(cacheURL.length);

                // If data is available, append data to url
                if (s.data) {
                  cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

                  // #9682: remove data so that it's not used in an eventual retry
                  delete s.data;
                }

                // Add or update anti-cache param if needed
                if (s.cache === false) {
                  cacheURL = cacheURL.replace(rantiCache, "$1");
                  uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + (nonce++) + uncached;
                }

                // Put hash and anti-cache on the URL that will be requested (gh-1732)
                s.url = cacheURL + uncached;

                // Change '%20' to '+' if this is encoded form body content (gh-2658)
              } else if (s.data && s.processData &&
                (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
                s.data = s.data.replace(r20, "+");
              }

              // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
              if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                  jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                  jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
              }

              // Set the correct header, if data is being sent
              if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
              }

              // Set the Accepts header for the server, depending on the dataType
              jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
                s.accepts[s.dataTypes[0]] +
                (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
                s.accepts["*"]
              );

              // Check for headers option
              for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
              }

              // Allow custom headers/mimetypes and early abort
              if (s.beforeSend &&
                (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {

                // Abort if not done already and return
                return jqXHR.abort();
              }

              // Aborting is no longer a cancellation
              strAbort = "abort";

              // Install callbacks on deferreds
              completeDeferred.add(s.complete);
              jqXHR.done(s.success);
              jqXHR.fail(s.error);

              // Get transport
              transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

              // If no transport, we auto-abort
              if (!transport) {
                done(-1, "No Transport");
              } else {
                jqXHR.readyState = 1;

                // Send global event
                if (fireGlobals) {
                  globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }

                // If request was aborted inside ajaxSend, stop there
                if (completed) {
                  return jqXHR;
                }

                // Timeout
                if (s.async && s.timeout > 0) {
                  timeoutTimer = window.setTimeout(function () {
                    jqXHR.abort("timeout");
                  }, s.timeout);
                }

                try {
                  completed = false;
                  transport.send(requestHeaders, done);
                } catch (e) {

                  // Rethrow post-completion exceptions
                  if (completed) {
                    throw e;
                  }

                  // Propagate others as results
                  done(-1, e);
                }
              }

              // Callback for when everything is done
              function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified,
                  statusText = nativeStatusText;

                // Ignore repeat invocations
                if (completed) {
                  return;
                }

                completed = true;

                // Clear timeout if it exists
                if (timeoutTimer) {
                  window.clearTimeout(timeoutTimer);
                }

                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;

                // Cache response headers
                responseHeadersString = headers || "";

                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;

                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;

                // Get response data
                if (responses) {
                  response = ajaxHandleResponses(s, jqXHR, responses);
                }

                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert(s, response, jqXHR, isSuccess);

                // If successful, handle type chaining
                if (isSuccess) {

                  // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                  if (s.ifModified) {
                    modified = jqXHR.getResponseHeader("Last-Modified");
                    if (modified) {
                      jQuery.lastModified[cacheURL] = modified;
                    }
                    modified = jqXHR.getResponseHeader("etag");
                    if (modified) {
                      jQuery.etag[cacheURL] = modified;
                    }
                  }

                  // if no content
                  if (status === 204 || s.type === "HEAD") {
                    statusText = "nocontent";

                    // if not modified
                  } else if (status === 304) {
                    statusText = "notmodified";

                    // If we have data, let's convert it
                  } else {
                    statusText = response.state;
                    success = response.data;
                    error = response.error;
                    isSuccess = !error;
                  }
                } else {

                  // Extract error from statusText and normalize for non-aborts
                  error = statusText;
                  if (status || !statusText) {
                    statusText = "error";
                    if (status < 0) {
                      status = 0;
                    }
                  }
                }

                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";

                // Success/Error
                if (isSuccess) {
                  deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                } else {
                  deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                }

                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;

                if (fireGlobals) {
                  globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
                }

                // Complete
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

                if (fireGlobals) {
                  globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

                  // Handle the global AJAX counter
                  if (!(--jQuery.active)) {
                    jQuery.event.trigger("ajaxStop");
                  }
                }
              }

              return jqXHR;
            },

            getJSON: function (url, data, callback) {
              return jQuery.get(url, data, callback, "json");
            },

            getScript: function (url, callback) {
              return jQuery.get(url, undefined, callback, "script");
            }
          });

          jQuery.each(["get", "post"], function (i, method) {
            jQuery[method] = function (url, data, callback, type) {

              // Shift arguments if data argument was omitted
              if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
              }

              // The url can be an options object (which then must have .url)
              return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
              }, jQuery.isPlainObject(url) && url));
            };
          });


          jQuery._evalUrl = function (url) {
            return jQuery.ajax({
              url: url,

              // Make this explicit, since user can override this through ajaxSetup (#11264)
              type: "GET",
              dataType: "script",
              cache: true,
              async: false,
              global: false,
              "throws": true
            });
          };


          jQuery.fn.extend({
            wrapAll: function (html) {
              var wrap;

              if (this[0]) {
                if (jQuery.isFunction(html)) {
                  html = html.call(this[0]);
                }

                // The elements to wrap the target around
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                if (this[0].parentNode) {
                  wrap.insertBefore(this[0]);
                }

                wrap.map(function () {
                  var elem = this;

                  while (elem.firstElementChild) {
                    elem = elem.firstElementChild;
                  }

                  return elem;
                }).append(this);
              }

              return this;
            },

            wrapInner: function (html) {
              if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                  jQuery(this).wrapInner(html.call(this, i));
                });
              }

              return this.each(function () {
                var self = jQuery(this),
                  contents = self.contents();

                if (contents.length) {
                  contents.wrapAll(html);

                } else {
                  self.append(html);
                }
              });
            },

            wrap: function (html) {
              var isFunction = jQuery.isFunction(html);

              return this.each(function (i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
              });
            },

            unwrap: function (selector) {
              this.parent(selector).not("body").each(function () {
                jQuery(this).replaceWith(this.childNodes);
              });
              return this;
            }
          });


          jQuery.expr.pseudos.hidden = function (elem) {
            return !jQuery.expr.pseudos.visible(elem);
          };
          jQuery.expr.pseudos.visible = function (elem) {
            return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
          };




          jQuery.ajaxSettings.xhr = function () {
            try {
              return new window.XMLHttpRequest();
            } catch (e) {}
          };

          var xhrSuccessStatus = {

              // File protocol always yields status code 0, assume 200
              0: 200,

              // Support: IE <=9 only
              // #1450: sometimes IE returns 1223 when it should be 204
              1223: 204
            },
            xhrSupported = jQuery.ajaxSettings.xhr();

          support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
          support.ajax = xhrSupported = !!xhrSupported;

          jQuery.ajaxTransport(function (options) {
            var callback, errorCallback;

            // Cross domain only allowed if supported through XMLHttpRequest
            if (support.cors || xhrSupported && !options.crossDomain) {
              return {
                send: function (headers, complete) {
                  var i,
                    xhr = options.xhr();

                  xhr.open(
                    options.type,
                    options.url,
                    options.async,
                    options.username,
                    options.password
                  );

                  // Apply custom fields if provided
                  if (options.xhrFields) {
                    for (i in options.xhrFields) {
                      xhr[i] = options.xhrFields[i];
                    }
                  }

                  // Override mime type if needed
                  if (options.mimeType && xhr.overrideMimeType) {
                    xhr.overrideMimeType(options.mimeType);
                  }

                  // X-Requested-With header
                  // For cross-domain requests, seeing as conditions for a preflight are
                  // akin to a jigsaw puzzle, we simply never set it to be sure.
                  // (it can always be set on a per-request basis or even using ajaxSetup)
                  // For same-domain requests, won't change header if already provided.
                  if (!options.crossDomain && !headers["X-Requested-With"]) {
                    headers["X-Requested-With"] = "XMLHttpRequest";
                  }

                  // Set headers
                  for (i in headers) {
                    xhr.setRequestHeader(i, headers[i]);
                  }

                  // Callback
                  callback = function (type) {
                    return function () {
                      if (callback) {
                        callback = errorCallback = xhr.onload =
                          xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

                        if (type === "abort") {
                          xhr.abort();
                        } else if (type === "error") {

                          // Support: IE <=9 only
                          // On a manual native abort, IE9 throws
                          // errors on any property access that is not readyState
                          if (typeof xhr.status !== "number") {
                            complete(0, "error");
                          } else {
                            complete(

                              // File: protocol always yields status 0; see #8605, #14207
                              xhr.status,
                              xhr.statusText
                            );
                          }
                        } else {
                          complete(
                            xhrSuccessStatus[xhr.status] || xhr.status,
                            xhr.statusText,

                            // Support: IE <=9 only
                            // IE9 has no XHR2 but throws on binary (trac-11426)
                            // For XHR2 non-text, let the caller handle it (gh-2498)
                            (xhr.responseType || "text") !== "text" ||
                            typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText },
                            xhr.getAllResponseHeaders()
                          );
                        }
                      }
                    };
                  };

                  // Listen to events
                  xhr.onload = callback();
                  errorCallback = xhr.onerror = callback("error");

                  // Support: IE 9 only
                  // Use onreadystatechange to replace onabort
                  // to handle uncaught aborts
                  if (xhr.onabort !== undefined) {
                    xhr.onabort = errorCallback;
                  } else {
                    xhr.onreadystatechange = function () {

                      // Check readyState before timeout as it changes
                      if (xhr.readyState === 4) {

                        // Allow onerror to be called first,
                        // but that will not handle a native abort
                        // Also, save errorCallback to a variable
                        // as xhr.onerror cannot be accessed
                        window.setTimeout(function () {
                          if (callback) {
                            errorCallback();
                          }
                        });
                      }
                    };
                  }

                  // Create the abort callback
                  callback = callback("abort");

                  try {

                    // Do send the request (this may raise an exception)
                    xhr.send(options.hasContent && options.data || null);
                  } catch (e) {

                    // #14683: Only rethrow if this hasn't been notified as an error yet
                    if (callback) {
                      throw e;
                    }
                  }
                },

                abort: function () {
                  if (callback) {
                    callback();
                  }
                }
              };
            }
          });




          // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
          jQuery.ajaxPrefilter(function (s) {
            if (s.crossDomain) {
              s.contents.script = false;
            }
          });

          // Install script dataType
          jQuery.ajaxSetup({
            accepts: {
              script: "text/javascript, application/javascript, " +
                "application/ecmascript, application/x-ecmascript"
            },
            contents: {
              script: /\b(?:java|ecma)script\b/
            },
            converters: {
              "text script": function (text) {
                jQuery.globalEval(text);
                return text;
              }
            }
          });

          // Handle cache's special case and crossDomain
          jQuery.ajaxPrefilter("script", function (s) {
            if (s.cache === undefined) {
              s.cache = false;
            }
            if (s.crossDomain) {
              s.type = "GET";
            }
          });

          // Bind script tag hack transport
          jQuery.ajaxTransport("script", function (s) {

            // This transport only deals with cross domain requests
            if (s.crossDomain) {
              var script, callback;
              return {
                send: function (_, complete) {
                  script = jQuery("<script>").prop({
                    charset: s.scriptCharset,
                    src: s.url
                  }).on(
                    "load error",
                    callback = function (evt) {
                      script.remove();
                      callback = null;
                      if (evt) {
                        complete(evt.type === "error" ? 404 : 200, evt.type);
                      }
                    }
                  );

                  // Use native DOM manipulation to avoid our domManip AJAX trickery
                  document.head.appendChild(script[0]);
                },
                abort: function () {
                  if (callback) {
                    callback();
                  }
                }
              };
            }
          });




          var oldCallbacks = [],
            rjsonp = /(=)\?(?=&|$)|\?\?/;

          // Default jsonp settings
          jQuery.ajaxSetup({
            jsonp: "callback",
            jsonpCallback: function () {
              var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
              this[callback] = true;
              return callback;
            }
          });

          // Detect, normalize options and install callbacks for jsonp requests
          jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

            var callbackName, overwritten, responseContainer,
              jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?
                "url" :
                typeof s.data === "string" &&
                (s.contentType || "")
                .indexOf("application/x-www-form-urlencoded") === 0 &&
                rjsonp.test(s.data) && "data"
              );

            // Handle iff the expected data type is "jsonp" or we have a parameter to set
            if (jsonProp || s.dataTypes[0] === "jsonp") {

              // Get callback name, remembering preexisting value associated with it
              callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?
                s.jsonpCallback() :
                s.jsonpCallback;

              // Insert callback into url or form data
              if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
              } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
              }

              // Use data converter to retrieve json after script execution
              s.converters["script json"] = function () {
                if (!responseContainer) {
                  jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
              };

              // Force json dataType
              s.dataTypes[0] = "json";

              // Install callback
              overwritten = window[callbackName];
              window[callbackName] = function () {
                responseContainer = arguments;
              };

              // Clean-up function (fires after converters)
              jqXHR.always(function () {

                // If previous value didn't exist - remove it
                if (overwritten === undefined) {
                  jQuery(window).removeProp(callbackName);

                  // Otherwise restore preexisting value
                } else {
                  window[callbackName] = overwritten;
                }

                // Save back as free
                if (s[callbackName]) {

                  // Make sure that re-using the options doesn't screw things around
                  s.jsonpCallback = originalSettings.jsonpCallback;

                  // Save the callback name for future use
                  oldCallbacks.push(callbackName);
                }

                // Call if it was a function and we have a response
                if (responseContainer && jQuery.isFunction(overwritten)) {
                  overwritten(responseContainer[0]);
                }

                responseContainer = overwritten = undefined;
              });

              // Delegate to script
              return "script";
            }
          });




          // Support: Safari 8 only
          // In Safari 8 documents created via document.implementation.createHTMLDocument
          // collapse sibling forms: the second one becomes a child of the first one.
          // Because of that, this security measure has to be disabled in Safari 8.
          // https://bugs.webkit.org/show_bug.cgi?id=137337
          support.createHTMLDocument = (function () {
            var body = document.implementation.createHTMLDocument("").body;
            body.innerHTML = "<form></form><form></form>";
            return body.childNodes.length === 2;
          })();


          // Argument "data" should be string of html
          // context (optional): If specified, the fragment will be created in this context,
          // defaults to document
          // keepScripts (optional): If true, will include scripts passed in the html string
          jQuery.parseHTML = function (data, context, keepScripts) {
            if (typeof data !== "string") {
              return [];
            }
            if (typeof context === "boolean") {
              keepScripts = context;
              context = false;
            }

            var base, parsed, scripts;

            if (!context) {

              // Stop scripts or inline event handlers from being executed immediately
              // by using document.implementation
              if (support.createHTMLDocument) {
                context = document.implementation.createHTMLDocument("");

                // Set the base href for the created document
                // so any parsed elements with URLs
                // are based on the document's URL (gh-2965)
                base = context.createElement("base");
                base.href = document.location.href;
                context.head.appendChild(base);
              } else {
                context = document;
              }
            }

            parsed = rsingleTag.exec(data);
            scripts = !keepScripts && [];

            // Single tag
            if (parsed) {
              return [context.createElement(parsed[1])];
            }

            parsed = buildFragment([data], context, scripts);

            if (scripts && scripts.length) {
              jQuery(scripts).remove();
            }

            return jQuery.merge([], parsed.childNodes);
          };


          /**
           * Load a url into a page
           */
          jQuery.fn.load = function (url, params, callback) {
            var selector, type, response,
              self = this,
              off = url.indexOf(" ");

            if (off > -1) {
              selector = stripAndCollapse(url.slice(off));
              url = url.slice(0, off);
            }

            // If it's a function
            if (jQuery.isFunction(params)) {

              // We assume that it's the callback
              callback = params;
              params = undefined;

              // Otherwise, build a param string
            } else if (params && typeof params === "object") {
              type = "POST";
            }

            // If we have elements to modify, make the request
            if (self.length > 0) {
              jQuery.ajax({
                url: url,

                // If "type" variable is undefined, then "GET" method will be used.
                // Make value of this field explicit since
                // user can override it through ajaxSetup method
                type: type || "GET",
                dataType: "html",
                data: params
              }).done(function (responseText) {

                // Save response for use in complete callback
                response = arguments;

                self.html(selector ?

                  // If a selector was specified, locate the right elements in a dummy div
                  // Exclude scripts to avoid IE 'Permission Denied' errors
                  jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

                  // Otherwise use the full result
                  responseText);

                // If the request succeeds, this function gets "data", "status", "jqXHR"
                // but they are ignored because response was set above.
                // If it fails, this function gets "jqXHR", "status", "error"
              }).always(callback && function (jqXHR, status) {
                self.each(function () {
                  callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
                });
              });
            }

            return this;
          };




          // Attach a bunch of functions for handling common AJAX events
          jQuery.each([
            "ajaxStart",
            "ajaxStop",
            "ajaxComplete",
            "ajaxError",
            "ajaxSuccess",
            "ajaxSend"
          ], function (i, type) {
            jQuery.fn[type] = function (fn) {
              return this.on(type, fn);
            };
          });




          jQuery.expr.pseudos.animated = function (elem) {
            return jQuery.grep(jQuery.timers, function (fn) {
              return elem === fn.elem;
            }).length;
          };




          jQuery.offset = {
            setOffset: function (elem, options, i) {
              var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
                position = jQuery.css(elem, "position"),
                curElem = jQuery(elem),
                props = {};

              // Set position first, in-case top/left are set even on static elem
              if (position === "static") {
                elem.style.position = "relative";
              }

              curOffset = curElem.offset();
              curCSSTop = jQuery.css(elem, "top");
              curCSSLeft = jQuery.css(elem, "left");
              calculatePosition = (position === "absolute" || position === "fixed") &&
                (curCSSTop + curCSSLeft).indexOf("auto") > -1;

              // Need to be able to calculate position if either
              // top or left is auto and position is either absolute or fixed
              if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;

              } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
              }

              if (jQuery.isFunction(options)) {

                // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
                options = options.call(elem, i, jQuery.extend({}, curOffset));
              }

              if (options.top != null) {
                props.top = (options.top - curOffset.top) + curTop;
              }
              if (options.left != null) {
                props.left = (options.left - curOffset.left) + curLeft;
              }

              if ("using" in options) {
                options.using.call(elem, props);

              } else {
                curElem.css(props);
              }
            }
          };

          jQuery.fn.extend({
            offset: function (options) {

              // Preserve chaining for setter
              if (arguments.length) {
                return options === undefined ?
                  this :
                  this.each(function (i) {
                    jQuery.offset.setOffset(this, options, i);
                  });
              }

              var doc, docElem, rect, win,
                elem = this[0];

              if (!elem) {
                return;
              }

              // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
              // Support: IE <=11 only
              // Running getBoundingClientRect on a
              // disconnected node in IE throws an error
              if (!elem.getClientRects().length) {
                return { top: 0, left: 0 };
              }

              rect = elem.getBoundingClientRect();

              doc = elem.ownerDocument;
              docElem = doc.documentElement;
              win = doc.defaultView;

              return {
                top: rect.top + win.pageYOffset - docElem.clientTop,
                left: rect.left + win.pageXOffset - docElem.clientLeft
              };
            },

            position: function () {
              if (!this[0]) {
                return;
              }

              var offsetParent, offset,
                elem = this[0],
                parentOffset = { top: 0, left: 0 };

              // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
              // because it is its only offset parent
              if (jQuery.css(elem, "position") === "fixed") {

                // Assume getBoundingClientRect is there when computed position is fixed
                offset = elem.getBoundingClientRect();

              } else {

                // Get *real* offsetParent
                offsetParent = this.offsetParent();

                // Get correct offsets
                offset = this.offset();
                if (!nodeName(offsetParent[0], "html")) {
                  parentOffset = offsetParent.offset();
                }

                // Add offsetParent borders
                parentOffset = {
                  top: parentOffset.top + jQuery.css(offsetParent[0], "borderTopWidth", true),
                  left: parentOffset.left + jQuery.css(offsetParent[0], "borderLeftWidth", true)
                };
              }

              // Subtract parent offsets and element margins
              return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
              };
            },

            // This method will return documentElement in the following cases:
            // 1) For the element inside the iframe without offsetParent, this method will return
            //    documentElement of the parent window
            // 2) For the hidden or detached element
            // 3) For body or html element, i.e. in case of the html node - it will return itself
            //
            // but those exceptions were never presented as a real life use-cases
            // and might be considered as more preferable results.
            //
            // This logic, however, is not guaranteed and can change at any point in the future
            offsetParent: function () {
              return this.map(function () {
                var offsetParent = this.offsetParent;

                while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
                  offsetParent = offsetParent.offsetParent;
                }

                return offsetParent || documentElement;
              });
            }
          });

          // Create scrollLeft and scrollTop methods
          jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
            var top = "pageYOffset" === prop;

            jQuery.fn[method] = function (val) {
              return access(this, function (elem, method, val) {

                // Coalesce documents and windows
                var win;
                if (jQuery.isWindow(elem)) {
                  win = elem;
                } else if (elem.nodeType === 9) {
                  win = elem.defaultView;
                }

                if (val === undefined) {
                  return win ? win[prop] : elem[method];
                }

                if (win) {
                  win.scrollTo(!top ? val : win.pageXOffset,
                    top ? val : win.pageYOffset
                  );

                } else {
                  elem[method] = val;
                }
              }, method, val, arguments.length);
            };
          });

          // Support: Safari <=7 - 9.1, Chrome <=37 - 49
          // Add the top/left cssHooks using jQuery.fn.position
          // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
          // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
          // getComputedStyle returns percent when specified for top/left/bottom/right;
          // rather than make the css module depend on the offset module, just check for it here
          jQuery.each(["top", "left"], function (i, prop) {
            jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition,
              function (elem, computed) {
                if (computed) {
                  computed = curCSS(elem, prop);

                  // If curCSS returns percentage, fallback to offset
                  return rnumnonpx.test(computed) ?
                    jQuery(elem).position()[prop] + "px" :
                    computed;
                }
              }
            );
          });


          // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
          jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
            jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name },
              function (defaultExtra, funcName) {

                // Margin is only for outerHeight, outerWidth
                jQuery.fn[funcName] = function (margin, value) {
                  var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

                  return access(this, function (elem, type, value) {
                    var doc;

                    if (jQuery.isWindow(elem)) {

                      // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                      return funcName.indexOf("outer") === 0 ?
                        elem["inner" + name] :
                        elem.document.documentElement["client" + name];
                    }

                    // Get document width or height
                    if (elem.nodeType === 9) {
                      doc = elem.documentElement;

                      // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                      // whichever is greatest
                      return Math.max(
                        elem.body["scroll" + name], doc["scroll" + name],
                        elem.body["offset" + name], doc["offset" + name],
                        doc["client" + name]
                      );
                    }

                    return value === undefined ?

                      // Get width or height on the element, requesting but not forcing parseFloat
                      jQuery.css(elem, type, extra) :

                      // Set width or height on the element
                      jQuery.style(elem, type, value, extra);
                  }, type, chainable ? margin : undefined, chainable);
                };
              });
          });


          jQuery.fn.extend({

            bind: function (types, data, fn) {
              return this.on(types, null, data, fn);
            },
            unbind: function (types, fn) {
              return this.off(types, null, fn);
            },

            delegate: function (selector, types, data, fn) {
              return this.on(types, selector, data, fn);
            },
            undelegate: function (selector, types, fn) {

              // ( namespace ) or ( selector, types [, fn] )
              return arguments.length === 1 ?
                this.off(selector, "**") :
                this.off(types, selector || "**", fn);
            }
          });

          jQuery.holdReady = function (hold) {
            if (hold) {
              jQuery.readyWait++;
            } else {
              jQuery.ready(true);
            }
          };
          jQuery.isArray = Array.isArray;
          jQuery.parseJSON = JSON.parse;
          jQuery.nodeName = nodeName;




          // Register as a named AMD module, since jQuery can be concatenated with other
          // files that may use define, but not via a proper concatenation script that
          // understands anonymous AMD modules. A named AMD is safest and most robust
          // way to register. Lowercase jquery is used because AMD module names are
          // derived from file names, and jQuery is normally delivered in a lowercase
          // file name. Do this after creating the global so that if an AMD module wants
          // to call noConflict to hide this version of jQuery, it will work.

          // Note that for maximum portability, libraries that are not jQuery should
          // declare themselves as anonymous modules, and avoid setting a global if an
          // AMD loader is present. jQuery is a special case. For more information, see
          // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

          if (true) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
              return jQuery;
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          }




          var

          // Map over jQuery in case of overwrite
            _jQuery = window.jQuery,

            // Map over the $ in case of overwrite
            _$ = window.$;

          jQuery.noConflict = function (deep) {
            if (window.$ === jQuery) {
              window.$ = _$;
            }

            if (deep && window.jQuery === jQuery) {
              window.jQuery = _jQuery;
            }

            return jQuery;
          };

          // Expose jQuery and $ identifiers, even in AMD
          // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
          // and CommonJS for browser emulators (#13566)
          if (!noGlobal) {
            window.jQuery = window.$ = jQuery;
          }




          return jQuery;
        });


        /***/
      }),
      /* 68 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.URLParams = undefined;

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var URLSearchParams = __webpack_require__(71);

        var RbcURLParams = function () {
          function RbcURLParams() {
            _classCallCheck(this, RbcURLParams);

            this.params = new URLSearchParams(window.location.search);
          }

          _createClass(RbcURLParams, [{
            key: "get",
            value: function get(componentId) {
              var multipleSelect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
              var jsonParse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

              var value = this.params.get(componentId);
              if (jsonParse && value) {
                try {
                  value = JSON.parse(value);
                } catch (e) {
                  console.log(e);
                }
              }
              return multipleSelect ? value && value.trim() ? value.split(",") : null : value;
            }
          }, {
            key: "update",
            value: function update(componentId, value) {
              var allowUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

              if (allowUpdate) {
                this.setOrDelete(componentId, value);
                this.applyURLUpdate();
              }
            }
          }, {
            key: "setOrDelete",
            value: function setOrDelete(componentId, value) {
              if (componentId) {
                if (value === undefined || value === null || typeof value === "string" && value.trim() === "" || Array.isArray(value) && value.length === 0) {
                  this.params.delete(componentId);
                } else {
                  this.params.set(componentId, value);
                }
              }
            }
          }, {
            key: "applyURLUpdate",
            value: function applyURLUpdate() {
              if (history.pushState) {
                var paramsSting = this.params.toString() ? "?" + this.params.toString() : "";
                var newurl = window.location.protocol + "//" + window.location.host + window.location.pathname + paramsSting;
                window.history.pushState({ path: newurl }, '', newurl);
              }
            }
          }]);

          return RbcURLParams;
        }();

        var URLParams = exports.URLParams = new RbcURLParams();

        /***/
      }),
      /* 69 */
      /***/
      (function (module, exports, __webpack_require__) {

        var __WEBPACK_AMD_DEFINE_RESULT__; /* WEBPACK VAR INJECTION */
        (function (global, module) {
          /**
           * @license
           * Lodash <https://lodash.com/>
           * Copyright JS Foundation and other contributors <https://js.foundation/>
           * Released under MIT license <https://lodash.com/license>
           * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
           * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
           */
          ;
          (function () {

            /** Used as a safe reference for `undefined` in pre-ES5 environments. */
            var undefined;

            /** Used as the semantic version number. */
            var VERSION = '4.17.4';

            /** Used as the size to enable large array optimizations. */
            var LARGE_ARRAY_SIZE = 200;

            /** Error message constants. */
            var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
              FUNC_ERROR_TEXT = 'Expected a function';

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED = '__lodash_hash_undefined__';

            /** Used as the maximum memoize cache size. */
            var MAX_MEMOIZE_SIZE = 500;

            /** Used as the internal argument placeholder. */
            var PLACEHOLDER = '__lodash_placeholder__';

            /** Used to compose bitmasks for cloning. */
            var CLONE_DEEP_FLAG = 1,
              CLONE_FLAT_FLAG = 2,
              CLONE_SYMBOLS_FLAG = 4;

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
              COMPARE_UNORDERED_FLAG = 2;

            /** Used to compose bitmasks for function metadata. */
            var WRAP_BIND_FLAG = 1,
              WRAP_BIND_KEY_FLAG = 2,
              WRAP_CURRY_BOUND_FLAG = 4,
              WRAP_CURRY_FLAG = 8,
              WRAP_CURRY_RIGHT_FLAG = 16,
              WRAP_PARTIAL_FLAG = 32,
              WRAP_PARTIAL_RIGHT_FLAG = 64,
              WRAP_ARY_FLAG = 128,
              WRAP_REARG_FLAG = 256,
              WRAP_FLIP_FLAG = 512;

            /** Used as default options for `_.truncate`. */
            var DEFAULT_TRUNC_LENGTH = 30,
              DEFAULT_TRUNC_OMISSION = '...';

            /** Used to detect hot functions by number of calls within a span of milliseconds. */
            var HOT_COUNT = 800,
              HOT_SPAN = 16;

            /** Used to indicate the type of lazy iteratees. */
            var LAZY_FILTER_FLAG = 1,
              LAZY_MAP_FLAG = 2,
              LAZY_WHILE_FLAG = 3;

            /** Used as references for various `Number` constants. */
            var INFINITY = 1 / 0,
              MAX_SAFE_INTEGER = 9007199254740991,
              MAX_INTEGER = 1.7976931348623157e+308,
              NAN = 0 / 0;

            /** Used as references for the maximum length and index of an array. */
            var MAX_ARRAY_LENGTH = 4294967295,
              MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
              HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

            /** Used to associate wrap methods with their bit flags. */
            var wrapFlags = [
              ['ary', WRAP_ARY_FLAG],
              ['bind', WRAP_BIND_FLAG],
              ['bindKey', WRAP_BIND_KEY_FLAG],
              ['curry', WRAP_CURRY_FLAG],
              ['curryRight', WRAP_CURRY_RIGHT_FLAG],
              ['flip', WRAP_FLIP_FLAG],
              ['partial', WRAP_PARTIAL_FLAG],
              ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
              ['rearg', WRAP_REARG_FLAG]
            ];

            /** `Object#toString` result references. */
            var argsTag = '[object Arguments]',
              arrayTag = '[object Array]',
              asyncTag = '[object AsyncFunction]',
              boolTag = '[object Boolean]',
              dateTag = '[object Date]',
              domExcTag = '[object DOMException]',
              errorTag = '[object Error]',
              funcTag = '[object Function]',
              genTag = '[object GeneratorFunction]',
              mapTag = '[object Map]',
              numberTag = '[object Number]',
              nullTag = '[object Null]',
              objectTag = '[object Object]',
              promiseTag = '[object Promise]',
              proxyTag = '[object Proxy]',
              regexpTag = '[object RegExp]',
              setTag = '[object Set]',
              stringTag = '[object String]',
              symbolTag = '[object Symbol]',
              undefinedTag = '[object Undefined]',
              weakMapTag = '[object WeakMap]',
              weakSetTag = '[object WeakSet]';

            var arrayBufferTag = '[object ArrayBuffer]',
              dataViewTag = '[object DataView]',
              float32Tag = '[object Float32Array]',
              float64Tag = '[object Float64Array]',
              int8Tag = '[object Int8Array]',
              int16Tag = '[object Int16Array]',
              int32Tag = '[object Int32Array]',
              uint8Tag = '[object Uint8Array]',
              uint8ClampedTag = '[object Uint8ClampedArray]',
              uint16Tag = '[object Uint16Array]',
              uint32Tag = '[object Uint32Array]';

            /** Used to match empty string literals in compiled template source. */
            var reEmptyStringLeading = /\b__p \+= '';/g,
              reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
              reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

            /** Used to match HTML entities and HTML characters. */
            var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
              reUnescapedHtml = /[&<>"']/g,
              reHasEscapedHtml = RegExp(reEscapedHtml.source),
              reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

            /** Used to match template delimiters. */
            var reEscape = /<%-([\s\S]+?)%>/g,
              reEvaluate = /<%([\s\S]+?)%>/g,
              reInterpolate = /<%=([\s\S]+?)%>/g;

            /** Used to match property names within property paths. */
            var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
              reIsPlainProp = /^\w*$/,
              reLeadingDot = /^\./,
              rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

            /**
             * Used to match `RegExp`
             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
             */
            var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
              reHasRegExpChar = RegExp(reRegExpChar.source);

            /** Used to match leading and trailing whitespace. */
            var reTrim = /^\s+|\s+$/g,
              reTrimStart = /^\s+/,
              reTrimEnd = /\s+$/;

            /** Used to match wrap detail comments. */
            var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
              reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
              reSplitDetails = /,? & /;

            /** Used to match words composed of alphanumeric characters. */
            var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

            /** Used to match backslashes in property paths. */
            var reEscapeChar = /\\(\\)?/g;

            /**
             * Used to match
             * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
             */
            var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

            /** Used to match `RegExp` flags from their coerced string values. */
            var reFlags = /\w*$/;

            /** Used to detect bad signed hexadecimal string values. */
            var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

            /** Used to detect binary string values. */
            var reIsBinary = /^0b[01]+$/i;

            /** Used to detect host constructors (Safari). */
            var reIsHostCtor = /^\[object .+?Constructor\]$/;

            /** Used to detect octal string values. */
            var reIsOctal = /^0o[0-7]+$/i;

            /** Used to detect unsigned integer values. */
            var reIsUint = /^(?:0|[1-9]\d*)$/;

            /** Used to match Latin Unicode letters (excluding mathematical operators). */
            var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

            /** Used to ensure capturing order of template delimiters. */
            var reNoMatch = /($^)/;

            /** Used to match unescaped characters in compiled string literals. */
            var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

            /** Used to compose unicode character classes. */
            var rsAstralRange = '\\ud800-\\udfff',
              rsComboMarksRange = '\\u0300-\\u036f',
              reComboHalfMarksRange = '\\ufe20-\\ufe2f',
              rsComboSymbolsRange = '\\u20d0-\\u20ff',
              rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
              rsDingbatRange = '\\u2700-\\u27bf',
              rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
              rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
              rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
              rsPunctuationRange = '\\u2000-\\u206f',
              rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
              rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
              rsVarRange = '\\ufe0e\\ufe0f',
              rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

            /** Used to compose unicode capture groups. */
            var rsApos = "['\u2019]",
              rsAstral = '[' + rsAstralRange + ']',
              rsBreak = '[' + rsBreakRange + ']',
              rsCombo = '[' + rsComboRange + ']',
              rsDigits = '\\d+',
              rsDingbat = '[' + rsDingbatRange + ']',
              rsLower = '[' + rsLowerRange + ']',
              rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
              rsFitz = '\\ud83c[\\udffb-\\udfff]',
              rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
              rsNonAstral = '[^' + rsAstralRange + ']',
              rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
              rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
              rsUpper = '[' + rsUpperRange + ']',
              rsZWJ = '\\u200d';

            /** Used to compose unicode regexes. */
            var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
              rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
              rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
              rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
              reOptMod = rsModifier + '?',
              rsOptVar = '[' + rsVarRange + ']?',
              rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
              rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
              rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
              rsSeq = rsOptVar + reOptMod + rsOptJoin,
              rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
              rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

            /** Used to match apostrophes. */
            var reApos = RegExp(rsApos, 'g');

            /**
             * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
             * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
             */
            var reComboMark = RegExp(rsCombo, 'g');

            /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
            var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

            /** Used to match complex or compound words. */
            var reUnicodeWord = RegExp([
              rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
              rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
              rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
              rsUpper + '+' + rsOptContrUpper,
              rsOrdUpper,
              rsOrdLower,
              rsDigits,
              rsEmoji
            ].join('|'), 'g');

            /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
            var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

            /** Used to detect strings that need a more robust regexp to match words. */
            var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

            /** Used to assign default `context` object properties. */
            var contextProps = [
              'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
              'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
              'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
              'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
              '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
            ];

            /** Used to make template sourceURLs easier to identify. */
            var templateCounter = -1;

            /** Used to identify `toStringTag` values of typed arrays. */
            var typedArrayTags = {};
            typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
              typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
              typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
              typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
              typedArrayTags[uint32Tag] = true;
            typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
              typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
              typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
              typedArrayTags[errorTag] = typedArrayTags[funcTag] =
              typedArrayTags[mapTag] = typedArrayTags[numberTag] =
              typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
              typedArrayTags[setTag] = typedArrayTags[stringTag] =
              typedArrayTags[weakMapTag] = false;

            /** Used to identify `toStringTag` values supported by `_.clone`. */
            var cloneableTags = {};
            cloneableTags[argsTag] = cloneableTags[arrayTag] =
              cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
              cloneableTags[boolTag] = cloneableTags[dateTag] =
              cloneableTags[float32Tag] = cloneableTags[float64Tag] =
              cloneableTags[int8Tag] = cloneableTags[int16Tag] =
              cloneableTags[int32Tag] = cloneableTags[mapTag] =
              cloneableTags[numberTag] = cloneableTags[objectTag] =
              cloneableTags[regexpTag] = cloneableTags[setTag] =
              cloneableTags[stringTag] = cloneableTags[symbolTag] =
              cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
              cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
            cloneableTags[errorTag] = cloneableTags[funcTag] =
              cloneableTags[weakMapTag] = false;

            /** Used to map Latin Unicode letters to basic Latin letters. */
            var deburredLetters = {
              // Latin-1 Supplement block.
              '\xc0': 'A',
              '\xc1': 'A',
              '\xc2': 'A',
              '\xc3': 'A',
              '\xc4': 'A',
              '\xc5': 'A',
              '\xe0': 'a',
              '\xe1': 'a',
              '\xe2': 'a',
              '\xe3': 'a',
              '\xe4': 'a',
              '\xe5': 'a',
              '\xc7': 'C',
              '\xe7': 'c',
              '\xd0': 'D',
              '\xf0': 'd',
              '\xc8': 'E',
              '\xc9': 'E',
              '\xca': 'E',
              '\xcb': 'E',
              '\xe8': 'e',
              '\xe9': 'e',
              '\xea': 'e',
              '\xeb': 'e',
              '\xcc': 'I',
              '\xcd': 'I',
              '\xce': 'I',
              '\xcf': 'I',
              '\xec': 'i',
              '\xed': 'i',
              '\xee': 'i',
              '\xef': 'i',
              '\xd1': 'N',
              '\xf1': 'n',
              '\xd2': 'O',
              '\xd3': 'O',
              '\xd4': 'O',
              '\xd5': 'O',
              '\xd6': 'O',
              '\xd8': 'O',
              '\xf2': 'o',
              '\xf3': 'o',
              '\xf4': 'o',
              '\xf5': 'o',
              '\xf6': 'o',
              '\xf8': 'o',
              '\xd9': 'U',
              '\xda': 'U',
              '\xdb': 'U',
              '\xdc': 'U',
              '\xf9': 'u',
              '\xfa': 'u',
              '\xfb': 'u',
              '\xfc': 'u',
              '\xdd': 'Y',
              '\xfd': 'y',
              '\xff': 'y',
              '\xc6': 'Ae',
              '\xe6': 'ae',
              '\xde': 'Th',
              '\xfe': 'th',
              '\xdf': 'ss',
              // Latin Extended-A block.
              '\u0100': 'A',
              '\u0102': 'A',
              '\u0104': 'A',
              '\u0101': 'a',
              '\u0103': 'a',
              '\u0105': 'a',
              '\u0106': 'C',
              '\u0108': 'C',
              '\u010a': 'C',
              '\u010c': 'C',
              '\u0107': 'c',
              '\u0109': 'c',
              '\u010b': 'c',
              '\u010d': 'c',
              '\u010e': 'D',
              '\u0110': 'D',
              '\u010f': 'd',
              '\u0111': 'd',
              '\u0112': 'E',
              '\u0114': 'E',
              '\u0116': 'E',
              '\u0118': 'E',
              '\u011a': 'E',
              '\u0113': 'e',
              '\u0115': 'e',
              '\u0117': 'e',
              '\u0119': 'e',
              '\u011b': 'e',
              '\u011c': 'G',
              '\u011e': 'G',
              '\u0120': 'G',
              '\u0122': 'G',
              '\u011d': 'g',
              '\u011f': 'g',
              '\u0121': 'g',
              '\u0123': 'g',
              '\u0124': 'H',
              '\u0126': 'H',
              '\u0125': 'h',
              '\u0127': 'h',
              '\u0128': 'I',
              '\u012a': 'I',
              '\u012c': 'I',
              '\u012e': 'I',
              '\u0130': 'I',
              '\u0129': 'i',
              '\u012b': 'i',
              '\u012d': 'i',
              '\u012f': 'i',
              '\u0131': 'i',
              '\u0134': 'J',
              '\u0135': 'j',
              '\u0136': 'K',
              '\u0137': 'k',
              '\u0138': 'k',
              '\u0139': 'L',
              '\u013b': 'L',
              '\u013d': 'L',
              '\u013f': 'L',
              '\u0141': 'L',
              '\u013a': 'l',
              '\u013c': 'l',
              '\u013e': 'l',
              '\u0140': 'l',
              '\u0142': 'l',
              '\u0143': 'N',
              '\u0145': 'N',
              '\u0147': 'N',
              '\u014a': 'N',
              '\u0144': 'n',
              '\u0146': 'n',
              '\u0148': 'n',
              '\u014b': 'n',
              '\u014c': 'O',
              '\u014e': 'O',
              '\u0150': 'O',
              '\u014d': 'o',
              '\u014f': 'o',
              '\u0151': 'o',
              '\u0154': 'R',
              '\u0156': 'R',
              '\u0158': 'R',
              '\u0155': 'r',
              '\u0157': 'r',
              '\u0159': 'r',
              '\u015a': 'S',
              '\u015c': 'S',
              '\u015e': 'S',
              '\u0160': 'S',
              '\u015b': 's',
              '\u015d': 's',
              '\u015f': 's',
              '\u0161': 's',
              '\u0162': 'T',
              '\u0164': 'T',
              '\u0166': 'T',
              '\u0163': 't',
              '\u0165': 't',
              '\u0167': 't',
              '\u0168': 'U',
              '\u016a': 'U',
              '\u016c': 'U',
              '\u016e': 'U',
              '\u0170': 'U',
              '\u0172': 'U',
              '\u0169': 'u',
              '\u016b': 'u',
              '\u016d': 'u',
              '\u016f': 'u',
              '\u0171': 'u',
              '\u0173': 'u',
              '\u0174': 'W',
              '\u0175': 'w',
              '\u0176': 'Y',
              '\u0177': 'y',
              '\u0178': 'Y',
              '\u0179': 'Z',
              '\u017b': 'Z',
              '\u017d': 'Z',
              '\u017a': 'z',
              '\u017c': 'z',
              '\u017e': 'z',
              '\u0132': 'IJ',
              '\u0133': 'ij',
              '\u0152': 'Oe',
              '\u0153': 'oe',
              '\u0149': "'n",
              '\u017f': 's'
            };

            /** Used to map characters to HTML entities. */
            var htmlEscapes = {
              '&': '&amp;',
              '<': '&lt;',
              '>': '&gt;',
              '"': '&quot;',
              "'": '&#39;'
            };

            /** Used to map HTML entities to characters. */
            var htmlUnescapes = {
              '&amp;': '&',
              '&lt;': '<',
              '&gt;': '>',
              '&quot;': '"',
              '&#39;': "'"
            };

            /** Used to escape characters for inclusion in compiled string literals. */
            var stringEscapes = {
              '\\': '\\',
              "'": "'",
              '\n': 'n',
              '\r': 'r',
              '\u2028': 'u2028',
              '\u2029': 'u2029'
            };

            /** Built-in method references without a dependency on `root`. */
            var freeParseFloat = parseFloat,
              freeParseInt = parseInt;

            /** Detect free variable `global` from Node.js. */
            var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

            /** Detect free variable `self`. */
            var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

            /** Used as a reference to the global object. */
            var root = freeGlobal || freeSelf || Function('return this')();

            /** Detect free variable `exports`. */
            var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports = freeModule && freeModule.exports === freeExports;

            /** Detect free variable `process` from Node.js. */
            var freeProcess = moduleExports && freeGlobal.process;

            /** Used to access faster Node.js helpers. */
            var nodeUtil = (function () {
              try {
                return freeProcess && freeProcess.binding && freeProcess.binding('util');
              } catch (e) {}
            }());

            /* Node.js helper references. */
            var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
              nodeIsDate = nodeUtil && nodeUtil.isDate,
              nodeIsMap = nodeUtil && nodeUtil.isMap,
              nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
              nodeIsSet = nodeUtil && nodeUtil.isSet,
              nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

            /*--------------------------------------------------------------------------*/

            /**
             * Adds the key-value `pair` to `map`.
             *
             * @private
             * @param {Object} map The map to modify.
             * @param {Array} pair The key-value pair to add.
             * @returns {Object} Returns `map`.
             */
            function addMapEntry(map, pair) {
              // Don't return `map.set` because it's not chainable in IE 11.
              map.set(pair[0], pair[1]);
              return map;
            }

            /**
             * Adds `value` to `set`.
             *
             * @private
             * @param {Object} set The set to modify.
             * @param {*} value The value to add.
             * @returns {Object} Returns `set`.
             */
            function addSetEntry(set, value) {
              // Don't return `set.add` because it's not chainable in IE 11.
              set.add(value);
              return set;
            }

            /**
             * A faster alternative to `Function#apply`, this function invokes `func`
             * with the `this` binding of `thisArg` and the arguments of `args`.
             *
             * @private
             * @param {Function} func The function to invoke.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {Array} args The arguments to invoke `func` with.
             * @returns {*} Returns the result of `func`.
             */
            function apply(func, thisArg, args) {
              switch (args.length) {
              case 0:
                return func.call(thisArg);
              case 1:
                return func.call(thisArg, args[0]);
              case 2:
                return func.call(thisArg, args[0], args[1]);
              case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
              }
              return func.apply(thisArg, args);
            }

            /**
             * A specialized version of `baseAggregator` for arrays.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform keys.
             * @param {Object} accumulator The initial aggregated object.
             * @returns {Function} Returns `accumulator`.
             */
            function arrayAggregator(array, setter, iteratee, accumulator) {
              var index = -1,
                length = array == null ? 0 : array.length;

              while (++index < length) {
                var value = array[index];
                setter(accumulator, value, iteratee(value), array);
              }
              return accumulator;
            }

            /**
             * A specialized version of `_.forEach` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns `array`.
             */
            function arrayEach(array, iteratee) {
              var index = -1,
                length = array == null ? 0 : array.length;

              while (++index < length) {
                if (iteratee(array[index], index, array) === false) {
                  break;
                }
              }
              return array;
            }

            /**
             * A specialized version of `_.forEachRight` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns `array`.
             */
            function arrayEachRight(array, iteratee) {
              var length = array == null ? 0 : array.length;

              while (length--) {
                if (iteratee(array[length], length, array) === false) {
                  break;
                }
              }
              return array;
            }

            /**
             * A specialized version of `_.every` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`.
             */
            function arrayEvery(array, predicate) {
              var index = -1,
                length = array == null ? 0 : array.length;

              while (++index < length) {
                if (!predicate(array[index], index, array)) {
                  return false;
                }
              }
              return true;
            }

            /**
             * A specialized version of `_.filter` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             */
            function arrayFilter(array, predicate) {
              var index = -1,
                length = array == null ? 0 : array.length,
                resIndex = 0,
                result = [];

              while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                  result[resIndex++] = value;
                }
              }
              return result;
            }

            /**
             * A specialized version of `_.includes` for arrays without support for
             * specifying an index to search from.
             *
             * @private
             * @param {Array} [array] The array to inspect.
             * @param {*} target The value to search for.
             * @returns {boolean} Returns `true` if `target` is found, else `false`.
             */
            function arrayIncludes(array, value) {
              var length = array == null ? 0 : array.length;
              return !!length && baseIndexOf(array, value, 0) > -1;
            }

            /**
             * This function is like `arrayIncludes` except that it accepts a comparator.
             *
             * @private
             * @param {Array} [array] The array to inspect.
             * @param {*} target The value to search for.
             * @param {Function} comparator The comparator invoked per element.
             * @returns {boolean} Returns `true` if `target` is found, else `false`.
             */
            function arrayIncludesWith(array, value, comparator) {
              var index = -1,
                length = array == null ? 0 : array.length;

              while (++index < length) {
                if (comparator(value, array[index])) {
                  return true;
                }
              }
              return false;
            }

            /**
             * A specialized version of `_.map` for arrays without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function arrayMap(array, iteratee) {
              var index = -1,
                length = array == null ? 0 : array.length,
                result = Array(length);

              while (++index < length) {
                result[index] = iteratee(array[index], index, array);
              }
              return result;
            }

            /**
             * Appends the elements of `values` to `array`.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {Array} values The values to append.
             * @returns {Array} Returns `array`.
             */
            function arrayPush(array, values) {
              var index = -1,
                length = values.length,
                offset = array.length;

              while (++index < length) {
                array[offset + index] = values[index];
              }
              return array;
            }

            /**
             * A specialized version of `_.reduce` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @param {boolean} [initAccum] Specify using the first element of `array` as
             *  the initial value.
             * @returns {*} Returns the accumulated value.
             */
            function arrayReduce(array, iteratee, accumulator, initAccum) {
              var index = -1,
                length = array == null ? 0 : array.length;

              if (initAccum && length) {
                accumulator = array[++index];
              }
              while (++index < length) {
                accumulator = iteratee(accumulator, array[index], index, array);
              }
              return accumulator;
            }

            /**
             * A specialized version of `_.reduceRight` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @param {boolean} [initAccum] Specify using the last element of `array` as
             *  the initial value.
             * @returns {*} Returns the accumulated value.
             */
            function arrayReduceRight(array, iteratee, accumulator, initAccum) {
              var length = array == null ? 0 : array.length;
              if (initAccum && length) {
                accumulator = array[--length];
              }
              while (length--) {
                accumulator = iteratee(accumulator, array[length], length, array);
              }
              return accumulator;
            }

            /**
             * A specialized version of `_.some` for arrays without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             */
            function arraySome(array, predicate) {
              var index = -1,
                length = array == null ? 0 : array.length;

              while (++index < length) {
                if (predicate(array[index], index, array)) {
                  return true;
                }
              }
              return false;
            }

            /**
             * Gets the size of an ASCII `string`.
             *
             * @private
             * @param {string} string The string inspect.
             * @returns {number} Returns the string size.
             */
            var asciiSize = baseProperty('length');

            /**
             * Converts an ASCII `string` to an array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the converted array.
             */
            function asciiToArray(string) {
              return string.split('');
            }

            /**
             * Splits an ASCII `string` into an array of its words.
             *
             * @private
             * @param {string} The string to inspect.
             * @returns {Array} Returns the words of `string`.
             */
            function asciiWords(string) {
              return string.match(reAsciiWord) || [];
            }

            /**
             * The base implementation of methods like `_.findKey` and `_.findLastKey`,
             * without support for iteratee shorthands, which iterates over `collection`
             * using `eachFunc`.
             *
             * @private
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} predicate The function invoked per iteration.
             * @param {Function} eachFunc The function to iterate over `collection`.
             * @returns {*} Returns the found element or its key, else `undefined`.
             */
            function baseFindKey(collection, predicate, eachFunc) {
              var result;
              eachFunc(collection, function (value, key, collection) {
                if (predicate(value, key, collection)) {
                  result = key;
                  return false;
                }
              });
              return result;
            }

            /**
             * The base implementation of `_.findIndex` and `_.findLastIndex` without
             * support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} predicate The function invoked per iteration.
             * @param {number} fromIndex The index to search from.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function baseFindIndex(array, predicate, fromIndex, fromRight) {
              var length = array.length,
                index = fromIndex + (fromRight ? 1 : -1);

              while ((fromRight ? index-- : ++index < length)) {
                if (predicate(array[index], index, array)) {
                  return index;
                }
              }
              return -1;
            }

            /**
             * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} fromIndex The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function baseIndexOf(array, value, fromIndex) {
              return value === value ?
                strictIndexOf(array, value, fromIndex) :
                baseFindIndex(array, baseIsNaN, fromIndex);
            }

            /**
             * This function is like `baseIndexOf` except that it accepts a comparator.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} fromIndex The index to search from.
             * @param {Function} comparator The comparator invoked per element.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function baseIndexOfWith(array, value, fromIndex, comparator) {
              var index = fromIndex - 1,
                length = array.length;

              while (++index < length) {
                if (comparator(array[index], value)) {
                  return index;
                }
              }
              return -1;
            }

            /**
             * The base implementation of `_.isNaN` without support for number objects.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
             */
            function baseIsNaN(value) {
              return value !== value;
            }

            /**
             * The base implementation of `_.mean` and `_.meanBy` without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {number} Returns the mean.
             */
            function baseMean(array, iteratee) {
              var length = array == null ? 0 : array.length;
              return length ? (baseSum(array, iteratee) / length) : NAN;
            }

            /**
             * The base implementation of `_.property` without support for deep paths.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function baseProperty(key) {
              return function (object) {
                return object == null ? undefined : object[key];
              };
            }

            /**
             * The base implementation of `_.propertyOf` without support for deep paths.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyOf(object) {
              return function (key) {
                return object == null ? undefined : object[key];
              };
            }

            /**
             * The base implementation of `_.reduce` and `_.reduceRight`, without support
             * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {*} accumulator The initial value.
             * @param {boolean} initAccum Specify using the first or last element of
             *  `collection` as the initial value.
             * @param {Function} eachFunc The function to iterate over `collection`.
             * @returns {*} Returns the accumulated value.
             */
            function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
              eachFunc(collection, function (value, index, collection) {
                accumulator = initAccum ?
                  (initAccum = false, value) :
                  iteratee(accumulator, value, index, collection);
              });
              return accumulator;
            }

            /**
             * The base implementation of `_.sortBy` which uses `comparer` to define the
             * sort order of `array` and replaces criteria objects with their corresponding
             * values.
             *
             * @private
             * @param {Array} array The array to sort.
             * @param {Function} comparer The function to define sort order.
             * @returns {Array} Returns `array`.
             */
            function baseSortBy(array, comparer) {
              var length = array.length;

              array.sort(comparer);
              while (length--) {
                array[length] = array[length].value;
              }
              return array;
            }

            /**
             * The base implementation of `_.sum` and `_.sumBy` without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {number} Returns the sum.
             */
            function baseSum(array, iteratee) {
              var result,
                index = -1,
                length = array.length;

              while (++index < length) {
                var current = iteratee(array[index]);
                if (current !== undefined) {
                  result = result === undefined ? current : (result + current);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.times` without support for iteratee shorthands
             * or max array length checks.
             *
             * @private
             * @param {number} n The number of times to invoke `iteratee`.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the array of results.
             */
            function baseTimes(n, iteratee) {
              var index = -1,
                result = Array(n);

              while (++index < n) {
                result[index] = iteratee(index);
              }
              return result;
            }

            /**
             * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
             * of key-value pairs for `object` corresponding to the property names of `props`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array} props The property names to get values for.
             * @returns {Object} Returns the key-value pairs.
             */
            function baseToPairs(object, props) {
              return arrayMap(props, function (key) {
                return [key, object[key]];
              });
            }

            /**
             * The base implementation of `_.unary` without support for storing metadata.
             *
             * @private
             * @param {Function} func The function to cap arguments for.
             * @returns {Function} Returns the new capped function.
             */
            function baseUnary(func) {
              return function (value) {
                return func(value);
              };
            }

            /**
             * The base implementation of `_.values` and `_.valuesIn` which creates an
             * array of `object` property values corresponding to the property names
             * of `props`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array} props The property names to get values for.
             * @returns {Object} Returns the array of property values.
             */
            function baseValues(object, props) {
              return arrayMap(props, function (key) {
                return object[key];
              });
            }

            /**
             * Checks if a `cache` value for `key` exists.
             *
             * @private
             * @param {Object} cache The cache to query.
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function cacheHas(cache, key) {
              return cache.has(key);
            }

            /**
             * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
             * that is not found in the character symbols.
             *
             * @private
             * @param {Array} strSymbols The string symbols to inspect.
             * @param {Array} chrSymbols The character symbols to find.
             * @returns {number} Returns the index of the first unmatched string symbol.
             */
            function charsStartIndex(strSymbols, chrSymbols) {
              var index = -1,
                length = strSymbols.length;

              while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
              return index;
            }

            /**
             * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
             * that is not found in the character symbols.
             *
             * @private
             * @param {Array} strSymbols The string symbols to inspect.
             * @param {Array} chrSymbols The character symbols to find.
             * @returns {number} Returns the index of the last unmatched string symbol.
             */
            function charsEndIndex(strSymbols, chrSymbols) {
              var index = strSymbols.length;

              while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
              return index;
            }

            /**
             * Gets the number of `placeholder` occurrences in `array`.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} placeholder The placeholder to search for.
             * @returns {number} Returns the placeholder count.
             */
            function countHolders(array, placeholder) {
              var length = array.length,
                result = 0;

              while (length--) {
                if (array[length] === placeholder) {
                  ++result;
                }
              }
              return result;
            }

            /**
             * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
             * letters to basic Latin letters.
             *
             * @private
             * @param {string} letter The matched letter to deburr.
             * @returns {string} Returns the deburred letter.
             */
            var deburrLetter = basePropertyOf(deburredLetters);

            /**
             * Used by `_.escape` to convert characters to HTML entities.
             *
             * @private
             * @param {string} chr The matched character to escape.
             * @returns {string} Returns the escaped character.
             */
            var escapeHtmlChar = basePropertyOf(htmlEscapes);

            /**
             * Used by `_.template` to escape characters for inclusion in compiled string literals.
             *
             * @private
             * @param {string} chr The matched character to escape.
             * @returns {string} Returns the escaped character.
             */
            function escapeStringChar(chr) {
              return '\\' + stringEscapes[chr];
            }

            /**
             * Gets the value at `key` of `object`.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function getValue(object, key) {
              return object == null ? undefined : object[key];
            }

            /**
             * Checks if `string` contains Unicode symbols.
             *
             * @private
             * @param {string} string The string to inspect.
             * @returns {boolean} Returns `true` if a symbol is found, else `false`.
             */
            function hasUnicode(string) {
              return reHasUnicode.test(string);
            }

            /**
             * Checks if `string` contains a word composed of Unicode symbols.
             *
             * @private
             * @param {string} string The string to inspect.
             * @returns {boolean} Returns `true` if a word is found, else `false`.
             */
            function hasUnicodeWord(string) {
              return reHasUnicodeWord.test(string);
            }

            /**
             * Converts `iterator` to an array.
             *
             * @private
             * @param {Object} iterator The iterator to convert.
             * @returns {Array} Returns the converted array.
             */
            function iteratorToArray(iterator) {
              var data,
                result = [];

              while (!(data = iterator.next()).done) {
                result.push(data.value);
              }
              return result;
            }

            /**
             * Converts `map` to its key-value pairs.
             *
             * @private
             * @param {Object} map The map to convert.
             * @returns {Array} Returns the key-value pairs.
             */
            function mapToArray(map) {
              var index = -1,
                result = Array(map.size);

              map.forEach(function (value, key) {
                result[++index] = [key, value];
              });
              return result;
            }

            /**
             * Creates a unary function that invokes `func` with its argument transformed.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {Function} transform The argument transform.
             * @returns {Function} Returns the new function.
             */
            function overArg(func, transform) {
              return function (arg) {
                return func(transform(arg));
              };
            }

            /**
             * Replaces all `placeholder` elements in `array` with an internal placeholder
             * and returns an array of their indexes.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {*} placeholder The placeholder to replace.
             * @returns {Array} Returns the new array of placeholder indexes.
             */
            function replaceHolders(array, placeholder) {
              var index = -1,
                length = array.length,
                resIndex = 0,
                result = [];

              while (++index < length) {
                var value = array[index];
                if (value === placeholder || value === PLACEHOLDER) {
                  array[index] = PLACEHOLDER;
                  result[resIndex++] = index;
                }
              }
              return result;
            }

            /**
             * Converts `set` to an array of its values.
             *
             * @private
             * @param {Object} set The set to convert.
             * @returns {Array} Returns the values.
             */
            function setToArray(set) {
              var index = -1,
                result = Array(set.size);

              set.forEach(function (value) {
                result[++index] = value;
              });
              return result;
            }

            /**
             * Converts `set` to its value-value pairs.
             *
             * @private
             * @param {Object} set The set to convert.
             * @returns {Array} Returns the value-value pairs.
             */
            function setToPairs(set) {
              var index = -1,
                result = Array(set.size);

              set.forEach(function (value) {
                result[++index] = [value, value];
              });
              return result;
            }

            /**
             * A specialized version of `_.indexOf` which performs strict equality
             * comparisons of values, i.e. `===`.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} fromIndex The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function strictIndexOf(array, value, fromIndex) {
              var index = fromIndex - 1,
                length = array.length;

              while (++index < length) {
                if (array[index] === value) {
                  return index;
                }
              }
              return -1;
            }

            /**
             * A specialized version of `_.lastIndexOf` which performs strict equality
             * comparisons of values, i.e. `===`.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} fromIndex The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function strictLastIndexOf(array, value, fromIndex) {
              var index = fromIndex + 1;
              while (index--) {
                if (array[index] === value) {
                  return index;
                }
              }
              return index;
            }

            /**
             * Gets the number of symbols in `string`.
             *
             * @private
             * @param {string} string The string to inspect.
             * @returns {number} Returns the string size.
             */
            function stringSize(string) {
              return hasUnicode(string) ?
                unicodeSize(string) :
                asciiSize(string);
            }

            /**
             * Converts `string` to an array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the converted array.
             */
            function stringToArray(string) {
              return hasUnicode(string) ?
                unicodeToArray(string) :
                asciiToArray(string);
            }

            /**
             * Used by `_.unescape` to convert HTML entities to characters.
             *
             * @private
             * @param {string} chr The matched character to unescape.
             * @returns {string} Returns the unescaped character.
             */
            var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

            /**
             * Gets the size of a Unicode `string`.
             *
             * @private
             * @param {string} string The string inspect.
             * @returns {number} Returns the string size.
             */
            function unicodeSize(string) {
              var result = reUnicode.lastIndex = 0;
              while (reUnicode.test(string)) {
                ++result;
              }
              return result;
            }

            /**
             * Converts a Unicode `string` to an array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the converted array.
             */
            function unicodeToArray(string) {
              return string.match(reUnicode) || [];
            }

            /**
             * Splits a Unicode `string` into an array of its words.
             *
             * @private
             * @param {string} The string to inspect.
             * @returns {Array} Returns the words of `string`.
             */
            function unicodeWords(string) {
              return string.match(reUnicodeWord) || [];
            }

            /*--------------------------------------------------------------------------*/

            /**
             * Create a new pristine `lodash` function using the `context` object.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Util
             * @param {Object} [context=root] The context object.
             * @returns {Function} Returns a new `lodash` function.
             * @example
             *
             * _.mixin({ 'foo': _.constant('foo') });
             *
             * var lodash = _.runInContext();
             * lodash.mixin({ 'bar': lodash.constant('bar') });
             *
             * _.isFunction(_.foo);
             * // => true
             * _.isFunction(_.bar);
             * // => false
             *
             * lodash.isFunction(lodash.foo);
             * // => false
             * lodash.isFunction(lodash.bar);
             * // => true
             *
             * // Create a suped-up `defer` in Node.js.
             * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
             */
            var runInContext = (function runInContext(context) {
              context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

              /** Built-in constructor references. */
              var Array = context.Array,
                Date = context.Date,
                Error = context.Error,
                Function = context.Function,
                Math = context.Math,
                Object = context.Object,
                RegExp = context.RegExp,
                String = context.String,
                TypeError = context.TypeError;

              /** Used for built-in method references. */
              var arrayProto = Array.prototype,
                funcProto = Function.prototype,
                objectProto = Object.prototype;

              /** Used to detect overreaching core-js shims. */
              var coreJsData = context['__core-js_shared__'];

              /** Used to resolve the decompiled source of functions. */
              var funcToString = funcProto.toString;

              /** Used to check objects for own properties. */
              var hasOwnProperty = objectProto.hasOwnProperty;

              /** Used to generate unique IDs. */
              var idCounter = 0;

              /** Used to detect methods masquerading as native. */
              var maskSrcKey = (function () {
                var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                return uid ? ('Symbol(src)_1.' + uid) : '';
              }());

              /**
               * Used to resolve the
               * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
               * of values.
               */
              var nativeObjectToString = objectProto.toString;

              /** Used to infer the `Object` constructor. */
              var objectCtorString = funcToString.call(Object);

              /** Used to restore the original `_` reference in `_.noConflict`. */
              var oldDash = root._;

              /** Used to detect if a method is native. */
              var reIsNative = RegExp('^' +
                funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
              );

              /** Built-in value references. */
              var Buffer = moduleExports ? context.Buffer : undefined,
                Symbol = context.Symbol,
                Uint8Array = context.Uint8Array,
                allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
                getPrototype = overArg(Object.getPrototypeOf, Object),
                objectCreate = Object.create,
                propertyIsEnumerable = objectProto.propertyIsEnumerable,
                splice = arrayProto.splice,
                spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
                symIterator = Symbol ? Symbol.iterator : undefined,
                symToStringTag = Symbol ? Symbol.toStringTag : undefined;

              var defineProperty = (function () {
                try {
                  var func = getNative(Object, 'defineProperty');
                  func({}, '', {});
                  return func;
                } catch (e) {}
              }());

              /** Mocked built-ins. */
              var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
                ctxNow = Date && Date.now !== root.Date.now && Date.now,
                ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

              /* Built-in method references for those with the same name as other `lodash` methods. */
              var nativeCeil = Math.ceil,
                nativeFloor = Math.floor,
                nativeGetSymbols = Object.getOwnPropertySymbols,
                nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
                nativeIsFinite = context.isFinite,
                nativeJoin = arrayProto.join,
                nativeKeys = overArg(Object.keys, Object),
                nativeMax = Math.max,
                nativeMin = Math.min,
                nativeNow = Date.now,
                nativeParseInt = context.parseInt,
                nativeRandom = Math.random,
                nativeReverse = arrayProto.reverse;

              /* Built-in method references that are verified to be native. */
              var DataView = getNative(context, 'DataView'),
                Map = getNative(context, 'Map'),
                Promise = getNative(context, 'Promise'),
                Set = getNative(context, 'Set'),
                WeakMap = getNative(context, 'WeakMap'),
                nativeCreate = getNative(Object, 'create');

              /** Used to store function metadata. */
              var metaMap = WeakMap && new WeakMap;

              /** Used to lookup unminified function names. */
              var realNames = {};

              /** Used to detect maps, sets, and weakmaps. */
              var dataViewCtorString = toSource(DataView),
                mapCtorString = toSource(Map),
                promiseCtorString = toSource(Promise),
                setCtorString = toSource(Set),
                weakMapCtorString = toSource(WeakMap);

              /** Used to convert symbols to primitives and strings. */
              var symbolProto = Symbol ? Symbol.prototype : undefined,
                symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
                symbolToString = symbolProto ? symbolProto.toString : undefined;

              /*------------------------------------------------------------------------*/

              /**
               * Creates a `lodash` object which wraps `value` to enable implicit method
               * chain sequences. Methods that operate on and return arrays, collections,
               * and functions can be chained together. Methods that retrieve a single value
               * or may return a primitive value will automatically end the chain sequence
               * and return the unwrapped value. Otherwise, the value must be unwrapped
               * with `_#value`.
               *
               * Explicit chain sequences, which must be unwrapped with `_#value`, may be
               * enabled using `_.chain`.
               *
               * The execution of chained methods is lazy, that is, it's deferred until
               * `_#value` is implicitly or explicitly called.
               *
               * Lazy evaluation allows several methods to support shortcut fusion.
               * Shortcut fusion is an optimization to merge iteratee calls; this avoids
               * the creation of intermediate arrays and can greatly reduce the number of
               * iteratee executions. Sections of a chain sequence qualify for shortcut
               * fusion if the section is applied to an array and iteratees accept only
               * one argument. The heuristic for whether a section qualifies for shortcut
               * fusion is subject to change.
               *
               * Chaining is supported in custom builds as long as the `_#value` method is
               * directly or indirectly included in the build.
               *
               * In addition to lodash methods, wrappers have `Array` and `String` methods.
               *
               * The wrapper `Array` methods are:
               * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
               *
               * The wrapper `String` methods are:
               * `replace` and `split`
               *
               * The wrapper methods that support shortcut fusion are:
               * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
               * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
               * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
               *
               * The chainable wrapper methods are:
               * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
               * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
               * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
               * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
               * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
               * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
               * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
               * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
               * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
               * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
               * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
               * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
               * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
               * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
               * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
               * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
               * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
               * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
               * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
               * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
               * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
               * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
               * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
               * `zipObject`, `zipObjectDeep`, and `zipWith`
               *
               * The wrapper methods that are **not** chainable by default are:
               * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
               * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
               * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
               * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
               * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
               * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
               * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
               * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
               * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
               * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
               * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
               * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
               * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
               * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
               * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
               * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
               * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
               * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
               * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
               * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
               * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
               * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
               * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
               * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
               * `upperFirst`, `value`, and `words`
               *
               * @name _
               * @constructor
               * @category Seq
               * @param {*} value The value to wrap in a `lodash` instance.
               * @returns {Object} Returns the new `lodash` wrapper instance.
               * @example
               *
               * function square(n) {
               *   return n * n;
               * }
               *
               * var wrapped = _([1, 2, 3]);
               *
               * // Returns an unwrapped value.
               * wrapped.reduce(_.add);
               * // => 6
               *
               * // Returns a wrapped value.
               * var squares = wrapped.map(square);
               *
               * _.isArray(squares);
               * // => false
               *
               * _.isArray(squares.value());
               * // => true
               */
              function lodash(value) {
                if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                  if (value instanceof LodashWrapper) {
                    return value;
                  }
                  if (hasOwnProperty.call(value, '__wrapped__')) {
                    return wrapperClone(value);
                  }
                }
                return new LodashWrapper(value);
              }

              /**
               * The base implementation of `_.create` without support for assigning
               * properties to the created object.
               *
               * @private
               * @param {Object} proto The object to inherit from.
               * @returns {Object} Returns the new object.
               */
              var baseCreate = (function () {
                function object() {}
                return function (proto) {
                  if (!isObject(proto)) {
                    return {};
                  }
                  if (objectCreate) {
                    return objectCreate(proto);
                  }
                  object.prototype = proto;
                  var result = new object;
                  object.prototype = undefined;
                  return result;
                };
              }());

              /**
               * The function whose prototype chain sequence wrappers inherit from.
               *
               * @private
               */
              function baseLodash() {
                // No operation performed.
              }

              /**
               * The base constructor for creating `lodash` wrapper objects.
               *
               * @private
               * @param {*} value The value to wrap.
               * @param {boolean} [chainAll] Enable explicit method chain sequences.
               */
              function LodashWrapper(value, chainAll) {
                this.__wrapped__ = value;
                this.__actions__ = [];
                this.__chain__ = !!chainAll;
                this.__index__ = 0;
                this.__values__ = undefined;
              }

              /**
               * By default, the template delimiters used by lodash are like those in
               * embedded Ruby (ERB) as well as ES2015 template strings. Change the
               * following template settings to use alternative delimiters.
               *
               * @static
               * @memberOf _
               * @type {Object}
               */
              lodash.templateSettings = {

                /**
                 * Used to detect `data` property values to be HTML-escaped.
                 *
                 * @memberOf _.templateSettings
                 * @type {RegExp}
                 */
                'escape': reEscape,

                /**
                 * Used to detect code to be evaluated.
                 *
                 * @memberOf _.templateSettings
                 * @type {RegExp}
                 */
                'evaluate': reEvaluate,

                /**
                 * Used to detect `data` property values to inject.
                 *
                 * @memberOf _.templateSettings
                 * @type {RegExp}
                 */
                'interpolate': reInterpolate,

                /**
                 * Used to reference the data object in the template text.
                 *
                 * @memberOf _.templateSettings
                 * @type {string}
                 */
                'variable': '',

                /**
                 * Used to import variables into the compiled template.
                 *
                 * @memberOf _.templateSettings
                 * @type {Object}
                 */
                'imports': {

                  /**
                   * A reference to the `lodash` function.
                   *
                   * @memberOf _.templateSettings.imports
                   * @type {Function}
                   */
                  '_': lodash
                }
              };

              // Ensure wrappers are instances of `baseLodash`.
              lodash.prototype = baseLodash.prototype;
              lodash.prototype.constructor = lodash;

              LodashWrapper.prototype = baseCreate(baseLodash.prototype);
              LodashWrapper.prototype.constructor = LodashWrapper;

              /*------------------------------------------------------------------------*/

              /**
               * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
               *
               * @private
               * @constructor
               * @param {*} value The value to wrap.
               */
              function LazyWrapper(value) {
                this.__wrapped__ = value;
                this.__actions__ = [];
                this.__dir__ = 1;
                this.__filtered__ = false;
                this.__iteratees__ = [];
                this.__takeCount__ = MAX_ARRAY_LENGTH;
                this.__views__ = [];
              }

              /**
               * Creates a clone of the lazy wrapper object.
               *
               * @private
               * @name clone
               * @memberOf LazyWrapper
               * @returns {Object} Returns the cloned `LazyWrapper` object.
               */
              function lazyClone() {
                var result = new LazyWrapper(this.__wrapped__);
                result.__actions__ = copyArray(this.__actions__);
                result.__dir__ = this.__dir__;
                result.__filtered__ = this.__filtered__;
                result.__iteratees__ = copyArray(this.__iteratees__);
                result.__takeCount__ = this.__takeCount__;
                result.__views__ = copyArray(this.__views__);
                return result;
              }

              /**
               * Reverses the direction of lazy iteration.
               *
               * @private
               * @name reverse
               * @memberOf LazyWrapper
               * @returns {Object} Returns the new reversed `LazyWrapper` object.
               */
              function lazyReverse() {
                if (this.__filtered__) {
                  var result = new LazyWrapper(this);
                  result.__dir__ = -1;
                  result.__filtered__ = true;
                } else {
                  result = this.clone();
                  result.__dir__ *= -1;
                }
                return result;
              }

              /**
               * Extracts the unwrapped value from its lazy wrapper.
               *
               * @private
               * @name value
               * @memberOf LazyWrapper
               * @returns {*} Returns the unwrapped value.
               */
              function lazyValue() {
                var array = this.__wrapped__.value(),
                  dir = this.__dir__,
                  isArr = isArray(array),
                  isRight = dir < 0,
                  arrLength = isArr ? array.length : 0,
                  view = getView(0, arrLength, this.__views__),
                  start = view.start,
                  end = view.end,
                  length = end - start,
                  index = isRight ? end : (start - 1),
                  iteratees = this.__iteratees__,
                  iterLength = iteratees.length,
                  resIndex = 0,
                  takeCount = nativeMin(length, this.__takeCount__);

                if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
                  return baseWrapperValue(array, this.__actions__);
                }
                var result = [];

                outer:
                  while (length-- && resIndex < takeCount) {
                    index += dir;

                    var iterIndex = -1,
                      value = array[index];

                    while (++iterIndex < iterLength) {
                      var data = iteratees[iterIndex],
                        iteratee = data.iteratee,
                        type = data.type,
                        computed = iteratee(value);

                      if (type == LAZY_MAP_FLAG) {
                        value = computed;
                      } else if (!computed) {
                        if (type == LAZY_FILTER_FLAG) {
                          continue outer;
                        } else {
                          break outer;
                        }
                      }
                    }
                    result[resIndex++] = value;
                  }
                return result;
              }

              // Ensure `LazyWrapper` is an instance of `baseLodash`.
              LazyWrapper.prototype = baseCreate(baseLodash.prototype);
              LazyWrapper.prototype.constructor = LazyWrapper;

              /*------------------------------------------------------------------------*/

              /**
               * Creates a hash object.
               *
               * @private
               * @constructor
               * @param {Array} [entries] The key-value pairs to cache.
               */
              function Hash(entries) {
                var index = -1,
                  length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                  var entry = entries[index];
                  this.set(entry[0], entry[1]);
                }
              }

              /**
               * Removes all key-value entries from the hash.
               *
               * @private
               * @name clear
               * @memberOf Hash
               */
              function hashClear() {
                this.__data__ = nativeCreate ? nativeCreate(null) : {};
                this.size = 0;
              }

              /**
               * Removes `key` and its value from the hash.
               *
               * @private
               * @name delete
               * @memberOf Hash
               * @param {Object} hash The hash to modify.
               * @param {string} key The key of the value to remove.
               * @returns {boolean} Returns `true` if the entry was removed, else `false`.
               */
              function hashDelete(key) {
                var result = this.has(key) && delete this.__data__[key];
                this.size -= result ? 1 : 0;
                return result;
              }

              /**
               * Gets the hash value for `key`.
               *
               * @private
               * @name get
               * @memberOf Hash
               * @param {string} key The key of the value to get.
               * @returns {*} Returns the entry value.
               */
              function hashGet(key) {
                var data = this.__data__;
                if (nativeCreate) {
                  var result = data[key];
                  return result === HASH_UNDEFINED ? undefined : result;
                }
                return hasOwnProperty.call(data, key) ? data[key] : undefined;
              }

              /**
               * Checks if a hash value for `key` exists.
               *
               * @private
               * @name has
               * @memberOf Hash
               * @param {string} key The key of the entry to check.
               * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
               */
              function hashHas(key) {
                var data = this.__data__;
                return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
              }

              /**
               * Sets the hash `key` to `value`.
               *
               * @private
               * @name set
               * @memberOf Hash
               * @param {string} key The key of the value to set.
               * @param {*} value The value to set.
               * @returns {Object} Returns the hash instance.
               */
              function hashSet(key, value) {
                var data = this.__data__;
                this.size += this.has(key) ? 0 : 1;
                data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
                return this;
              }

              // Add methods to `Hash`.
              Hash.prototype.clear = hashClear;
              Hash.prototype['delete'] = hashDelete;
              Hash.prototype.get = hashGet;
              Hash.prototype.has = hashHas;
              Hash.prototype.set = hashSet;

              /*------------------------------------------------------------------------*/

              /**
               * Creates an list cache object.
               *
               * @private
               * @constructor
               * @param {Array} [entries] The key-value pairs to cache.
               */
              function ListCache(entries) {
                var index = -1,
                  length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                  var entry = entries[index];
                  this.set(entry[0], entry[1]);
                }
              }

              /**
               * Removes all key-value entries from the list cache.
               *
               * @private
               * @name clear
               * @memberOf ListCache
               */
              function listCacheClear() {
                this.__data__ = [];
                this.size = 0;
              }

              /**
               * Removes `key` and its value from the list cache.
               *
               * @private
               * @name delete
               * @memberOf ListCache
               * @param {string} key The key of the value to remove.
               * @returns {boolean} Returns `true` if the entry was removed, else `false`.
               */
              function listCacheDelete(key) {
                var data = this.__data__,
                  index = assocIndexOf(data, key);

                if (index < 0) {
                  return false;
                }
                var lastIndex = data.length - 1;
                if (index == lastIndex) {
                  data.pop();
                } else {
                  splice.call(data, index, 1);
                }
                --this.size;
                return true;
              }

              /**
               * Gets the list cache value for `key`.
               *
               * @private
               * @name get
               * @memberOf ListCache
               * @param {string} key The key of the value to get.
               * @returns {*} Returns the entry value.
               */
              function listCacheGet(key) {
                var data = this.__data__,
                  index = assocIndexOf(data, key);

                return index < 0 ? undefined : data[index][1];
              }

              /**
               * Checks if a list cache value for `key` exists.
               *
               * @private
               * @name has
               * @memberOf ListCache
               * @param {string} key The key of the entry to check.
               * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
               */
              function listCacheHas(key) {
                return assocIndexOf(this.__data__, key) > -1;
              }

              /**
               * Sets the list cache `key` to `value`.
               *
               * @private
               * @name set
               * @memberOf ListCache
               * @param {string} key The key of the value to set.
               * @param {*} value The value to set.
               * @returns {Object} Returns the list cache instance.
               */
              function listCacheSet(key, value) {
                var data = this.__data__,
                  index = assocIndexOf(data, key);

                if (index < 0) {
                  ++this.size;
                  data.push([key, value]);
                } else {
                  data[index][1] = value;
                }
                return this;
              }

              // Add methods to `ListCache`.
              ListCache.prototype.clear = listCacheClear;
              ListCache.prototype['delete'] = listCacheDelete;
              ListCache.prototype.get = listCacheGet;
              ListCache.prototype.has = listCacheHas;
              ListCache.prototype.set = listCacheSet;

              /*------------------------------------------------------------------------*/

              /**
               * Creates a map cache object to store key-value pairs.
               *
               * @private
               * @constructor
               * @param {Array} [entries] The key-value pairs to cache.
               */
              function MapCache(entries) {
                var index = -1,
                  length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                  var entry = entries[index];
                  this.set(entry[0], entry[1]);
                }
              }

              /**
               * Removes all key-value entries from the map.
               *
               * @private
               * @name clear
               * @memberOf MapCache
               */
              function mapCacheClear() {
                this.size = 0;
                this.__data__ = {
                  'hash': new Hash,
                  'map': new(Map || ListCache),
                  'string': new Hash
                };
              }

              /**
               * Removes `key` and its value from the map.
               *
               * @private
               * @name delete
               * @memberOf MapCache
               * @param {string} key The key of the value to remove.
               * @returns {boolean} Returns `true` if the entry was removed, else `false`.
               */
              function mapCacheDelete(key) {
                var result = getMapData(this, key)['delete'](key);
                this.size -= result ? 1 : 0;
                return result;
              }

              /**
               * Gets the map value for `key`.
               *
               * @private
               * @name get
               * @memberOf MapCache
               * @param {string} key The key of the value to get.
               * @returns {*} Returns the entry value.
               */
              function mapCacheGet(key) {
                return getMapData(this, key).get(key);
              }

              /**
               * Checks if a map value for `key` exists.
               *
               * @private
               * @name has
               * @memberOf MapCache
               * @param {string} key The key of the entry to check.
               * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
               */
              function mapCacheHas(key) {
                return getMapData(this, key).has(key);
              }

              /**
               * Sets the map `key` to `value`.
               *
               * @private
               * @name set
               * @memberOf MapCache
               * @param {string} key The key of the value to set.
               * @param {*} value The value to set.
               * @returns {Object} Returns the map cache instance.
               */
              function mapCacheSet(key, value) {
                var data = getMapData(this, key),
                  size = data.size;

                data.set(key, value);
                this.size += data.size == size ? 0 : 1;
                return this;
              }

              // Add methods to `MapCache`.
              MapCache.prototype.clear = mapCacheClear;
              MapCache.prototype['delete'] = mapCacheDelete;
              MapCache.prototype.get = mapCacheGet;
              MapCache.prototype.has = mapCacheHas;
              MapCache.prototype.set = mapCacheSet;

              /*------------------------------------------------------------------------*/

              /**
               *
               * Creates an array cache object to store unique values.
               *
               * @private
               * @constructor
               * @param {Array} [values] The values to cache.
               */
              function SetCache(values) {
                var index = -1,
                  length = values == null ? 0 : values.length;

                this.__data__ = new MapCache;
                while (++index < length) {
                  this.add(values[index]);
                }
              }

              /**
               * Adds `value` to the array cache.
               *
               * @private
               * @name add
               * @memberOf SetCache
               * @alias push
               * @param {*} value The value to cache.
               * @returns {Object} Returns the cache instance.
               */
              function setCacheAdd(value) {
                this.__data__.set(value, HASH_UNDEFINED);
                return this;
              }

              /**
               * Checks if `value` is in the array cache.
               *
               * @private
               * @name has
               * @memberOf SetCache
               * @param {*} value The value to search for.
               * @returns {number} Returns `true` if `value` is found, else `false`.
               */
              function setCacheHas(value) {
                return this.__data__.has(value);
              }

              // Add methods to `SetCache`.
              SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
              SetCache.prototype.has = setCacheHas;

              /*------------------------------------------------------------------------*/

              /**
               * Creates a stack cache object to store key-value pairs.
               *
               * @private
               * @constructor
               * @param {Array} [entries] The key-value pairs to cache.
               */
              function Stack(entries) {
                var data = this.__data__ = new ListCache(entries);
                this.size = data.size;
              }

              /**
               * Removes all key-value entries from the stack.
               *
               * @private
               * @name clear
               * @memberOf Stack
               */
              function stackClear() {
                this.__data__ = new ListCache;
                this.size = 0;
              }

              /**
               * Removes `key` and its value from the stack.
               *
               * @private
               * @name delete
               * @memberOf Stack
               * @param {string} key The key of the value to remove.
               * @returns {boolean} Returns `true` if the entry was removed, else `false`.
               */
              function stackDelete(key) {
                var data = this.__data__,
                  result = data['delete'](key);

                this.size = data.size;
                return result;
              }

              /**
               * Gets the stack value for `key`.
               *
               * @private
               * @name get
               * @memberOf Stack
               * @param {string} key The key of the value to get.
               * @returns {*} Returns the entry value.
               */
              function stackGet(key) {
                return this.__data__.get(key);
              }

              /**
               * Checks if a stack value for `key` exists.
               *
               * @private
               * @name has
               * @memberOf Stack
               * @param {string} key The key of the entry to check.
               * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
               */
              function stackHas(key) {
                return this.__data__.has(key);
              }

              /**
               * Sets the stack `key` to `value`.
               *
               * @private
               * @name set
               * @memberOf Stack
               * @param {string} key The key of the value to set.
               * @param {*} value The value to set.
               * @returns {Object} Returns the stack cache instance.
               */
              function stackSet(key, value) {
                var data = this.__data__;
                if (data instanceof ListCache) {
                  var pairs = data.__data__;
                  if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                    pairs.push([key, value]);
                    this.size = ++data.size;
                    return this;
                  }
                  data = this.__data__ = new MapCache(pairs);
                }
                data.set(key, value);
                this.size = data.size;
                return this;
              }

              // Add methods to `Stack`.
              Stack.prototype.clear = stackClear;
              Stack.prototype['delete'] = stackDelete;
              Stack.prototype.get = stackGet;
              Stack.prototype.has = stackHas;
              Stack.prototype.set = stackSet;

              /*------------------------------------------------------------------------*/

              /**
               * Creates an array of the enumerable property names of the array-like `value`.
               *
               * @private
               * @param {*} value The value to query.
               * @param {boolean} inherited Specify returning inherited property names.
               * @returns {Array} Returns the array of property names.
               */
              function arrayLikeKeys(value, inherited) {
                var isArr = isArray(value),
                  isArg = !isArr && isArguments(value),
                  isBuff = !isArr && !isArg && isBuffer(value),
                  isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                  skipIndexes = isArr || isArg || isBuff || isType,
                  result = skipIndexes ? baseTimes(value.length, String) : [],
                  length = result.length;

                for (var key in value) {
                  if ((inherited || hasOwnProperty.call(value, key)) &&
                    !(skipIndexes && (
                      // Safari 9 has enumerable `arguments.length` in strict mode.
                      key == 'length' ||
                      // Node.js 0.10 has enumerable non-index properties on buffers.
                      (isBuff && (key == 'offset' || key == 'parent')) ||
                      // PhantomJS 2 has enumerable non-index properties on typed arrays.
                      (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                      // Skip index properties.
                      isIndex(key, length)
                    ))) {
                    result.push(key);
                  }
                }
                return result;
              }

              /**
               * A specialized version of `_.sample` for arrays.
               *
               * @private
               * @param {Array} array The array to sample.
               * @returns {*} Returns the random element.
               */
              function arraySample(array) {
                var length = array.length;
                return length ? array[baseRandom(0, length - 1)] : undefined;
              }

              /**
               * A specialized version of `_.sampleSize` for arrays.
               *
               * @private
               * @param {Array} array The array to sample.
               * @param {number} n The number of elements to sample.
               * @returns {Array} Returns the random elements.
               */
              function arraySampleSize(array, n) {
                return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
              }

              /**
               * A specialized version of `_.shuffle` for arrays.
               *
               * @private
               * @param {Array} array The array to shuffle.
               * @returns {Array} Returns the new shuffled array.
               */
              function arrayShuffle(array) {
                return shuffleSelf(copyArray(array));
              }

              /**
               * This function is like `assignValue` except that it doesn't assign
               * `undefined` values.
               *
               * @private
               * @param {Object} object The object to modify.
               * @param {string} key The key of the property to assign.
               * @param {*} value The value to assign.
               */
              function assignMergeValue(object, key, value) {
                if ((value !== undefined && !eq(object[key], value)) ||
                  (value === undefined && !(key in object))) {
                  baseAssignValue(object, key, value);
                }
              }

              /**
               * Assigns `value` to `key` of `object` if the existing value is not equivalent
               * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
               * for equality comparisons.
               *
               * @private
               * @param {Object} object The object to modify.
               * @param {string} key The key of the property to assign.
               * @param {*} value The value to assign.
               */
              function assignValue(object, key, value) {
                var objValue = object[key];
                if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                  (value === undefined && !(key in object))) {
                  baseAssignValue(object, key, value);
                }
              }

              /**
               * Gets the index at which the `key` is found in `array` of key-value pairs.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} key The key to search for.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function assocIndexOf(array, key) {
                var length = array.length;
                while (length--) {
                  if (eq(array[length][0], key)) {
                    return length;
                  }
                }
                return -1;
              }

              /**
               * Aggregates elements of `collection` on `accumulator` with keys transformed
               * by `iteratee` and values set by `setter`.
               *
               * @private
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} setter The function to set `accumulator` values.
               * @param {Function} iteratee The iteratee to transform keys.
               * @param {Object} accumulator The initial aggregated object.
               * @returns {Function} Returns `accumulator`.
               */
              function baseAggregator(collection, setter, iteratee, accumulator) {
                baseEach(collection, function (value, key, collection) {
                  setter(accumulator, value, iteratee(value), collection);
                });
                return accumulator;
              }

              /**
               * The base implementation of `_.assign` without support for multiple sources
               * or `customizer` functions.
               *
               * @private
               * @param {Object} object The destination object.
               * @param {Object} source The source object.
               * @returns {Object} Returns `object`.
               */
              function baseAssign(object, source) {
                return object && copyObject(source, keys(source), object);
              }

              /**
               * The base implementation of `_.assignIn` without support for multiple sources
               * or `customizer` functions.
               *
               * @private
               * @param {Object} object The destination object.
               * @param {Object} source The source object.
               * @returns {Object} Returns `object`.
               */
              function baseAssignIn(object, source) {
                return object && copyObject(source, keysIn(source), object);
              }

              /**
               * The base implementation of `assignValue` and `assignMergeValue` without
               * value checks.
               *
               * @private
               * @param {Object} object The object to modify.
               * @param {string} key The key of the property to assign.
               * @param {*} value The value to assign.
               */
              function baseAssignValue(object, key, value) {
                if (key == '__proto__' && defineProperty) {
                  defineProperty(object, key, {
                    'configurable': true,
                    'enumerable': true,
                    'value': value,
                    'writable': true
                  });
                } else {
                  object[key] = value;
                }
              }

              /**
               * The base implementation of `_.at` without support for individual paths.
               *
               * @private
               * @param {Object} object The object to iterate over.
               * @param {string[]} paths The property paths to pick.
               * @returns {Array} Returns the picked elements.
               */
              function baseAt(object, paths) {
                var index = -1,
                  length = paths.length,
                  result = Array(length),
                  skip = object == null;

                while (++index < length) {
                  result[index] = skip ? undefined : get(object, paths[index]);
                }
                return result;
              }

              /**
               * The base implementation of `_.clamp` which doesn't coerce arguments.
               *
               * @private
               * @param {number} number The number to clamp.
               * @param {number} [lower] The lower bound.
               * @param {number} upper The upper bound.
               * @returns {number} Returns the clamped number.
               */
              function baseClamp(number, lower, upper) {
                if (number === number) {
                  if (upper !== undefined) {
                    number = number <= upper ? number : upper;
                  }
                  if (lower !== undefined) {
                    number = number >= lower ? number : lower;
                  }
                }
                return number;
              }

              /**
               * The base implementation of `_.clone` and `_.cloneDeep` which tracks
               * traversed objects.
               *
               * @private
               * @param {*} value The value to clone.
               * @param {boolean} bitmask The bitmask flags.
               *  1 - Deep clone
               *  2 - Flatten inherited properties
               *  4 - Clone symbols
               * @param {Function} [customizer] The function to customize cloning.
               * @param {string} [key] The key of `value`.
               * @param {Object} [object] The parent object of `value`.
               * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
               * @returns {*} Returns the cloned value.
               */
              function baseClone(value, bitmask, customizer, key, object, stack) {
                var result,
                  isDeep = bitmask & CLONE_DEEP_FLAG,
                  isFlat = bitmask & CLONE_FLAT_FLAG,
                  isFull = bitmask & CLONE_SYMBOLS_FLAG;

                if (customizer) {
                  result = object ? customizer(value, key, object, stack) : customizer(value);
                }
                if (result !== undefined) {
                  return result;
                }
                if (!isObject(value)) {
                  return value;
                }
                var isArr = isArray(value);
                if (isArr) {
                  result = initCloneArray(value);
                  if (!isDeep) {
                    return copyArray(value, result);
                  }
                } else {
                  var tag = getTag(value),
                    isFunc = tag == funcTag || tag == genTag;

                  if (isBuffer(value)) {
                    return cloneBuffer(value, isDeep);
                  }
                  if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                    result = (isFlat || isFunc) ? {} : initCloneObject(value);
                    if (!isDeep) {
                      return isFlat ?
                        copySymbolsIn(value, baseAssignIn(result, value)) :
                        copySymbols(value, baseAssign(result, value));
                    }
                  } else {
                    if (!cloneableTags[tag]) {
                      return object ? value : {};
                    }
                    result = initCloneByTag(value, tag, baseClone, isDeep);
                  }
                }
                // Check for circular references and return its corresponding clone.
                stack || (stack = new Stack);
                var stacked = stack.get(value);
                if (stacked) {
                  return stacked;
                }
                stack.set(value, result);

                var keysFunc = isFull ?
                  (isFlat ? getAllKeysIn : getAllKeys) :
                  (isFlat ? keysIn : keys);

                var props = isArr ? undefined : keysFunc(value);
                arrayEach(props || value, function (subValue, key) {
                  if (props) {
                    key = subValue;
                    subValue = value[key];
                  }
                  // Recursively populate clone (susceptible to call stack limits).
                  assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
                });
                return result;
              }

              /**
               * The base implementation of `_.conforms` which doesn't clone `source`.
               *
               * @private
               * @param {Object} source The object of property predicates to conform to.
               * @returns {Function} Returns the new spec function.
               */
              function baseConforms(source) {
                var props = keys(source);
                return function (object) {
                  return baseConformsTo(object, source, props);
                };
              }

              /**
               * The base implementation of `_.conformsTo` which accepts `props` to check.
               *
               * @private
               * @param {Object} object The object to inspect.
               * @param {Object} source The object of property predicates to conform to.
               * @returns {boolean} Returns `true` if `object` conforms, else `false`.
               */
              function baseConformsTo(object, source, props) {
                var length = props.length;
                if (object == null) {
                  return !length;
                }
                object = Object(object);
                while (length--) {
                  var key = props[length],
                    predicate = source[key],
                    value = object[key];

                  if ((value === undefined && !(key in object)) || !predicate(value)) {
                    return false;
                  }
                }
                return true;
              }

              /**
               * The base implementation of `_.delay` and `_.defer` which accepts `args`
               * to provide to `func`.
               *
               * @private
               * @param {Function} func The function to delay.
               * @param {number} wait The number of milliseconds to delay invocation.
               * @param {Array} args The arguments to provide to `func`.
               * @returns {number|Object} Returns the timer id or timeout object.
               */
              function baseDelay(func, wait, args) {
                if (typeof func != 'function') {
                  throw new TypeError(FUNC_ERROR_TEXT);
                }
                return setTimeout(function () { func.apply(undefined, args); }, wait);
              }

              /**
               * The base implementation of methods like `_.difference` without support
               * for excluding multiple arrays or iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {Array} values The values to exclude.
               * @param {Function} [iteratee] The iteratee invoked per element.
               * @param {Function} [comparator] The comparator invoked per element.
               * @returns {Array} Returns the new array of filtered values.
               */
              function baseDifference(array, values, iteratee, comparator) {
                var index = -1,
                  includes = arrayIncludes,
                  isCommon = true,
                  length = array.length,
                  result = [],
                  valuesLength = values.length;

                if (!length) {
                  return result;
                }
                if (iteratee) {
                  values = arrayMap(values, baseUnary(iteratee));
                }
                if (comparator) {
                  includes = arrayIncludesWith;
                  isCommon = false;
                } else if (values.length >= LARGE_ARRAY_SIZE) {
                  includes = cacheHas;
                  isCommon = false;
                  values = new SetCache(values);
                }
                outer:
                  while (++index < length) {
                    var value = array[index],
                      computed = iteratee == null ? value : iteratee(value);

                    value = (comparator || value !== 0) ? value : 0;
                    if (isCommon && computed === computed) {
                      var valuesIndex = valuesLength;
                      while (valuesIndex--) {
                        if (values[valuesIndex] === computed) {
                          continue outer;
                        }
                      }
                      result.push(value);
                    } else if (!includes(values, computed, comparator)) {
                      result.push(value);
                    }
                  }
                return result;
              }

              /**
               * The base implementation of `_.forEach` without support for iteratee shorthands.
               *
               * @private
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array|Object} Returns `collection`.
               */
              var baseEach = createBaseEach(baseForOwn);

              /**
               * The base implementation of `_.forEachRight` without support for iteratee shorthands.
               *
               * @private
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array|Object} Returns `collection`.
               */
              var baseEachRight = createBaseEach(baseForOwnRight, true);

              /**
               * The base implementation of `_.every` without support for iteratee shorthands.
               *
               * @private
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {boolean} Returns `true` if all elements pass the predicate check,
               *  else `false`
               */
              function baseEvery(collection, predicate) {
                var result = true;
                baseEach(collection, function (value, index, collection) {
                  result = !!predicate(value, index, collection);
                  return result;
                });
                return result;
              }

              /**
               * The base implementation of methods like `_.max` and `_.min` which accepts a
               * `comparator` to determine the extremum value.
               *
               * @private
               * @param {Array} array The array to iterate over.
               * @param {Function} iteratee The iteratee invoked per iteration.
               * @param {Function} comparator The comparator used to compare values.
               * @returns {*} Returns the extremum value.
               */
              function baseExtremum(array, iteratee, comparator) {
                var index = -1,
                  length = array.length;

                while (++index < length) {
                  var value = array[index],
                    current = iteratee(value);

                  if (current != null && (computed === undefined ?
                      (current === current && !isSymbol(current)) :
                      comparator(current, computed)
                    )) {
                    var computed = current,
                      result = value;
                  }
                }
                return result;
              }

              /**
               * The base implementation of `_.fill` without an iteratee call guard.
               *
               * @private
               * @param {Array} array The array to fill.
               * @param {*} value The value to fill `array` with.
               * @param {number} [start=0] The start position.
               * @param {number} [end=array.length] The end position.
               * @returns {Array} Returns `array`.
               */
              function baseFill(array, value, start, end) {
                var length = array.length;

                start = toInteger(start);
                if (start < 0) {
                  start = -start > length ? 0 : (length + start);
                }
                end = (end === undefined || end > length) ? length : toInteger(end);
                if (end < 0) {
                  end += length;
                }
                end = start > end ? 0 : toLength(end);
                while (start < end) {
                  array[start++] = value;
                }
                return array;
              }

              /**
               * The base implementation of `_.filter` without support for iteratee shorthands.
               *
               * @private
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {Array} Returns the new filtered array.
               */
              function baseFilter(collection, predicate) {
                var result = [];
                baseEach(collection, function (value, index, collection) {
                  if (predicate(value, index, collection)) {
                    result.push(value);
                  }
                });
                return result;
              }

              /**
               * The base implementation of `_.flatten` with support for restricting flattening.
               *
               * @private
               * @param {Array} array The array to flatten.
               * @param {number} depth The maximum recursion depth.
               * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
               * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
               * @param {Array} [result=[]] The initial result value.
               * @returns {Array} Returns the new flattened array.
               */
              function baseFlatten(array, depth, predicate, isStrict, result) {
                var index = -1,
                  length = array.length;

                predicate || (predicate = isFlattenable);
                result || (result = []);

                while (++index < length) {
                  var value = array[index];
                  if (depth > 0 && predicate(value)) {
                    if (depth > 1) {
                      // Recursively flatten arrays (susceptible to call stack limits).
                      baseFlatten(value, depth - 1, predicate, isStrict, result);
                    } else {
                      arrayPush(result, value);
                    }
                  } else if (!isStrict) {
                    result[result.length] = value;
                  }
                }
                return result;
              }

              /**
               * The base implementation of `baseForOwn` which iterates over `object`
               * properties returned by `keysFunc` and invokes `iteratee` for each property.
               * Iteratee functions may exit iteration early by explicitly returning `false`.
               *
               * @private
               * @param {Object} object The object to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {Function} keysFunc The function to get the keys of `object`.
               * @returns {Object} Returns `object`.
               */
              var baseFor = createBaseFor();

              /**
               * This function is like `baseFor` except that it iterates over properties
               * in the opposite order.
               *
               * @private
               * @param {Object} object The object to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {Function} keysFunc The function to get the keys of `object`.
               * @returns {Object} Returns `object`.
               */
              var baseForRight = createBaseFor(true);

              /**
               * The base implementation of `_.forOwn` without support for iteratee shorthands.
               *
               * @private
               * @param {Object} object The object to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Object} Returns `object`.
               */
              function baseForOwn(object, iteratee) {
                return object && baseFor(object, iteratee, keys);
              }

              /**
               * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
               *
               * @private
               * @param {Object} object The object to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Object} Returns `object`.
               */
              function baseForOwnRight(object, iteratee) {
                return object && baseForRight(object, iteratee, keys);
              }

              /**
               * The base implementation of `_.functions` which creates an array of
               * `object` function property names filtered from `props`.
               *
               * @private
               * @param {Object} object The object to inspect.
               * @param {Array} props The property names to filter.
               * @returns {Array} Returns the function names.
               */
              function baseFunctions(object, props) {
                return arrayFilter(props, function (key) {
                  return isFunction(object[key]);
                });
              }

              /**
               * The base implementation of `_.get` without support for default values.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {Array|string} path The path of the property to get.
               * @returns {*} Returns the resolved value.
               */
              function baseGet(object, path) {
                path = castPath(path, object);

                var index = 0,
                  length = path.length;

                while (object != null && index < length) {
                  object = object[toKey(path[index++])];
                }
                return (index && index == length) ? object : undefined;
              }

              /**
               * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
               * `keysFunc` and `symbolsFunc` to get the enumerable property names and
               * symbols of `object`.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {Function} keysFunc The function to get the keys of `object`.
               * @param {Function} symbolsFunc The function to get the symbols of `object`.
               * @returns {Array} Returns the array of property names and symbols.
               */
              function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                var result = keysFunc(object);
                return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
              }

              /**
               * The base implementation of `getTag` without fallbacks for buggy environments.
               *
               * @private
               * @param {*} value The value to query.
               * @returns {string} Returns the `toStringTag`.
               */
              function baseGetTag(value) {
                if (value == null) {
                  return value === undefined ? undefinedTag : nullTag;
                }
                return (symToStringTag && symToStringTag in Object(value)) ?
                  getRawTag(value) :
                  objectToString(value);
              }

              /**
               * The base implementation of `_.gt` which doesn't coerce arguments.
               *
               * @private
               * @param {*} value The value to compare.
               * @param {*} other The other value to compare.
               * @returns {boolean} Returns `true` if `value` is greater than `other`,
               *  else `false`.
               */
              function baseGt(value, other) {
                return value > other;
              }

              /**
               * The base implementation of `_.has` without support for deep paths.
               *
               * @private
               * @param {Object} [object] The object to query.
               * @param {Array|string} key The key to check.
               * @returns {boolean} Returns `true` if `key` exists, else `false`.
               */
              function baseHas(object, key) {
                return object != null && hasOwnProperty.call(object, key);
              }

              /**
               * The base implementation of `_.hasIn` without support for deep paths.
               *
               * @private
               * @param {Object} [object] The object to query.
               * @param {Array|string} key The key to check.
               * @returns {boolean} Returns `true` if `key` exists, else `false`.
               */
              function baseHasIn(object, key) {
                return object != null && key in Object(object);
              }

              /**
               * The base implementation of `_.inRange` which doesn't coerce arguments.
               *
               * @private
               * @param {number} number The number to check.
               * @param {number} start The start of the range.
               * @param {number} end The end of the range.
               * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
               */
              function baseInRange(number, start, end) {
                return number >= nativeMin(start, end) && number < nativeMax(start, end);
              }

              /**
               * The base implementation of methods like `_.intersection`, without support
               * for iteratee shorthands, that accepts an array of arrays to inspect.
               *
               * @private
               * @param {Array} arrays The arrays to inspect.
               * @param {Function} [iteratee] The iteratee invoked per element.
               * @param {Function} [comparator] The comparator invoked per element.
               * @returns {Array} Returns the new array of shared values.
               */
              function baseIntersection(arrays, iteratee, comparator) {
                var includes = comparator ? arrayIncludesWith : arrayIncludes,
                  length = arrays[0].length,
                  othLength = arrays.length,
                  othIndex = othLength,
                  caches = Array(othLength),
                  maxLength = Infinity,
                  result = [];

                while (othIndex--) {
                  var array = arrays[othIndex];
                  if (othIndex && iteratee) {
                    array = arrayMap(array, baseUnary(iteratee));
                  }
                  maxLength = nativeMin(array.length, maxLength);
                  caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120)) ?
                    new SetCache(othIndex && array) :
                    undefined;
                }
                array = arrays[0];

                var index = -1,
                  seen = caches[0];

                outer:
                  while (++index < length && result.length < maxLength) {
                    var value = array[index],
                      computed = iteratee ? iteratee(value) : value;

                    value = (comparator || value !== 0) ? value : 0;
                    if (!(seen ?
                        cacheHas(seen, computed) :
                        includes(result, computed, comparator)
                      )) {
                      othIndex = othLength;
                      while (--othIndex) {
                        var cache = caches[othIndex];
                        if (!(cache ?
                            cacheHas(cache, computed) :
                            includes(arrays[othIndex], computed, comparator))) {
                          continue outer;
                        }
                      }
                      if (seen) {
                        seen.push(computed);
                      }
                      result.push(value);
                    }
                  }
                return result;
              }

              /**
               * The base implementation of `_.invert` and `_.invertBy` which inverts
               * `object` with values transformed by `iteratee` and set by `setter`.
               *
               * @private
               * @param {Object} object The object to iterate over.
               * @param {Function} setter The function to set `accumulator` values.
               * @param {Function} iteratee The iteratee to transform values.
               * @param {Object} accumulator The initial inverted object.
               * @returns {Function} Returns `accumulator`.
               */
              function baseInverter(object, setter, iteratee, accumulator) {
                baseForOwn(object, function (value, key, object) {
                  setter(accumulator, iteratee(value), key, object);
                });
                return accumulator;
              }

              /**
               * The base implementation of `_.invoke` without support for individual
               * method arguments.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {Array|string} path The path of the method to invoke.
               * @param {Array} args The arguments to invoke the method with.
               * @returns {*} Returns the result of the invoked method.
               */
              function baseInvoke(object, path, args) {
                path = castPath(path, object);
                object = parent(object, path);
                var func = object == null ? object : object[toKey(last(path))];
                return func == null ? undefined : apply(func, object, args);
              }

              /**
               * The base implementation of `_.isArguments`.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is an `arguments` object,
               */
              function baseIsArguments(value) {
                return isObjectLike(value) && baseGetTag(value) == argsTag;
              }

              /**
               * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
               */
              function baseIsArrayBuffer(value) {
                return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
              }

              /**
               * The base implementation of `_.isDate` without Node.js optimizations.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
               */
              function baseIsDate(value) {
                return isObjectLike(value) && baseGetTag(value) == dateTag;
              }

              /**
               * The base implementation of `_.isEqual` which supports partial comparisons
               * and tracks traversed objects.
               *
               * @private
               * @param {*} value The value to compare.
               * @param {*} other The other value to compare.
               * @param {boolean} bitmask The bitmask flags.
               *  1 - Unordered comparison
               *  2 - Partial comparison
               * @param {Function} [customizer] The function to customize comparisons.
               * @param {Object} [stack] Tracks traversed `value` and `other` objects.
               * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
               */
              function baseIsEqual(value, other, bitmask, customizer, stack) {
                if (value === other) {
                  return true;
                }
                if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                  return value !== value && other !== other;
                }
                return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
              }

              /**
               * A specialized version of `baseIsEqual` for arrays and objects which performs
               * deep comparisons and tracks traversed objects enabling objects with circular
               * references to be compared.
               *
               * @private
               * @param {Object} object The object to compare.
               * @param {Object} other The other object to compare.
               * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
               * @param {Function} customizer The function to customize comparisons.
               * @param {Function} equalFunc The function to determine equivalents of values.
               * @param {Object} [stack] Tracks traversed `object` and `other` objects.
               * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
               */
              function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                var objIsArr = isArray(object),
                  othIsArr = isArray(other),
                  objTag = objIsArr ? arrayTag : getTag(object),
                  othTag = othIsArr ? arrayTag : getTag(other);

                objTag = objTag == argsTag ? objectTag : objTag;
                othTag = othTag == argsTag ? objectTag : othTag;

                var objIsObj = objTag == objectTag,
                  othIsObj = othTag == objectTag,
                  isSameTag = objTag == othTag;

                if (isSameTag && isBuffer(object)) {
                  if (!isBuffer(other)) {
                    return false;
                  }
                  objIsArr = true;
                  objIsObj = false;
                }
                if (isSameTag && !objIsObj) {
                  stack || (stack = new Stack);
                  return (objIsArr || isTypedArray(object)) ?
                    equalArrays(object, other, bitmask, customizer, equalFunc, stack) :
                    equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                }
                if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                  var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                    othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                  if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object,
                      othUnwrapped = othIsWrapped ? other.value() : other;

                    stack || (stack = new Stack);
                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                  }
                }
                if (!isSameTag) {
                  return false;
                }
                stack || (stack = new Stack);
                return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
              }

              /**
               * The base implementation of `_.isMap` without Node.js optimizations.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a map, else `false`.
               */
              function baseIsMap(value) {
                return isObjectLike(value) && getTag(value) == mapTag;
              }

              /**
               * The base implementation of `_.isMatch` without support for iteratee shorthands.
               *
               * @private
               * @param {Object} object The object to inspect.
               * @param {Object} source The object of property values to match.
               * @param {Array} matchData The property names, values, and compare flags to match.
               * @param {Function} [customizer] The function to customize comparisons.
               * @returns {boolean} Returns `true` if `object` is a match, else `false`.
               */
              function baseIsMatch(object, source, matchData, customizer) {
                var index = matchData.length,
                  length = index,
                  noCustomizer = !customizer;

                if (object == null) {
                  return !length;
                }
                object = Object(object);
                while (index--) {
                  var data = matchData[index];
                  if ((noCustomizer && data[2]) ?
                    data[1] !== object[data[0]] :
                    !(data[0] in object)
                  ) {
                    return false;
                  }
                }
                while (++index < length) {
                  data = matchData[index];
                  var key = data[0],
                    objValue = object[key],
                    srcValue = data[1];

                  if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) {
                      return false;
                    }
                  } else {
                    var stack = new Stack;
                    if (customizer) {
                      var result = customizer(objValue, srcValue, key, object, source, stack);
                    }
                    if (!(result === undefined ?
                        baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) :
                        result
                      )) {
                      return false;
                    }
                  }
                }
                return true;
              }

              /**
               * The base implementation of `_.isNative` without bad shim checks.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a native function,
               *  else `false`.
               */
              function baseIsNative(value) {
                if (!isObject(value) || isMasked(value)) {
                  return false;
                }
                var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                return pattern.test(toSource(value));
              }

              /**
               * The base implementation of `_.isRegExp` without Node.js optimizations.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
               */
              function baseIsRegExp(value) {
                return isObjectLike(value) && baseGetTag(value) == regexpTag;
              }

              /**
               * The base implementation of `_.isSet` without Node.js optimizations.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a set, else `false`.
               */
              function baseIsSet(value) {
                return isObjectLike(value) && getTag(value) == setTag;
              }

              /**
               * The base implementation of `_.isTypedArray` without Node.js optimizations.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
               */
              function baseIsTypedArray(value) {
                return isObjectLike(value) &&
                  isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
              }

              /**
               * The base implementation of `_.iteratee`.
               *
               * @private
               * @param {*} [value=_.identity] The value to convert to an iteratee.
               * @returns {Function} Returns the iteratee.
               */
              function baseIteratee(value) {
                // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                if (typeof value == 'function') {
                  return value;
                }
                if (value == null) {
                  return identity;
                }
                if (typeof value == 'object') {
                  return isArray(value) ?
                    baseMatchesProperty(value[0], value[1]) :
                    baseMatches(value);
                }
                return property(value);
              }

              /**
               * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
               *
               * @private
               * @param {Object} object The object to query.
               * @returns {Array} Returns the array of property names.
               */
              function baseKeys(object) {
                if (!isPrototype(object)) {
                  return nativeKeys(object);
                }
                var result = [];
                for (var key in Object(object)) {
                  if (hasOwnProperty.call(object, key) && key != 'constructor') {
                    result.push(key);
                  }
                }
                return result;
              }

              /**
               * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
               *
               * @private
               * @param {Object} object The object to query.
               * @returns {Array} Returns the array of property names.
               */
              function baseKeysIn(object) {
                if (!isObject(object)) {
                  return nativeKeysIn(object);
                }
                var isProto = isPrototype(object),
                  result = [];

                for (var key in object) {
                  if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                    result.push(key);
                  }
                }
                return result;
              }

              /**
               * The base implementation of `_.lt` which doesn't coerce arguments.
               *
               * @private
               * @param {*} value The value to compare.
               * @param {*} other The other value to compare.
               * @returns {boolean} Returns `true` if `value` is less than `other`,
               *  else `false`.
               */
              function baseLt(value, other) {
                return value < other;
              }

              /**
               * The base implementation of `_.map` without support for iteratee shorthands.
               *
               * @private
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns the new mapped array.
               */
              function baseMap(collection, iteratee) {
                var index = -1,
                  result = isArrayLike(collection) ? Array(collection.length) : [];

                baseEach(collection, function (value, key, collection) {
                  result[++index] = iteratee(value, key, collection);
                });
                return result;
              }

              /**
               * The base implementation of `_.matches` which doesn't clone `source`.
               *
               * @private
               * @param {Object} source The object of property values to match.
               * @returns {Function} Returns the new spec function.
               */
              function baseMatches(source) {
                var matchData = getMatchData(source);
                if (matchData.length == 1 && matchData[0][2]) {
                  return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                }
                return function (object) {
                  return object === source || baseIsMatch(object, source, matchData);
                };
              }

              /**
               * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
               *
               * @private
               * @param {string} path The path of the property to get.
               * @param {*} srcValue The value to match.
               * @returns {Function} Returns the new spec function.
               */
              function baseMatchesProperty(path, srcValue) {
                if (isKey(path) && isStrictComparable(srcValue)) {
                  return matchesStrictComparable(toKey(path), srcValue);
                }
                return function (object) {
                  var objValue = get(object, path);
                  return (objValue === undefined && objValue === srcValue) ?
                    hasIn(object, path) :
                    baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                };
              }

              /**
               * The base implementation of `_.merge` without support for multiple sources.
               *
               * @private
               * @param {Object} object The destination object.
               * @param {Object} source The source object.
               * @param {number} srcIndex The index of `source`.
               * @param {Function} [customizer] The function to customize merged values.
               * @param {Object} [stack] Tracks traversed source values and their merged
               *  counterparts.
               */
              function baseMerge(object, source, srcIndex, customizer, stack) {
                if (object === source) {
                  return;
                }
                baseFor(source, function (srcValue, key) {
                  if (isObject(srcValue)) {
                    stack || (stack = new Stack);
                    baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                  } else {
                    var newValue = customizer ?
                      customizer(object[key], srcValue, (key + ''), object, source, stack) :
                      undefined;

                    if (newValue === undefined) {
                      newValue = srcValue;
                    }
                    assignMergeValue(object, key, newValue);
                  }
                }, keysIn);
              }

              /**
               * A specialized version of `baseMerge` for arrays and objects which performs
               * deep merges and tracks traversed objects enabling objects with circular
               * references to be merged.
               *
               * @private
               * @param {Object} object The destination object.
               * @param {Object} source The source object.
               * @param {string} key The key of the value to merge.
               * @param {number} srcIndex The index of `source`.
               * @param {Function} mergeFunc The function to merge values.
               * @param {Function} [customizer] The function to customize assigned values.
               * @param {Object} [stack] Tracks traversed source values and their merged
               *  counterparts.
               */
              function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                var objValue = object[key],
                  srcValue = source[key],
                  stacked = stack.get(srcValue);

                if (stacked) {
                  assignMergeValue(object, key, stacked);
                  return;
                }
                var newValue = customizer ?
                  customizer(objValue, srcValue, (key + ''), object, source, stack) :
                  undefined;

                var isCommon = newValue === undefined;

                if (isCommon) {
                  var isArr = isArray(srcValue),
                    isBuff = !isArr && isBuffer(srcValue),
                    isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                  newValue = srcValue;
                  if (isArr || isBuff || isTyped) {
                    if (isArray(objValue)) {
                      newValue = objValue;
                    } else if (isArrayLikeObject(objValue)) {
                      newValue = copyArray(objValue);
                    } else if (isBuff) {
                      isCommon = false;
                      newValue = cloneBuffer(srcValue, true);
                    } else if (isTyped) {
                      isCommon = false;
                      newValue = cloneTypedArray(srcValue, true);
                    } else {
                      newValue = [];
                    }
                  } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                    newValue = objValue;
                    if (isArguments(objValue)) {
                      newValue = toPlainObject(objValue);
                    } else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
                      newValue = initCloneObject(srcValue);
                    }
                  } else {
                    isCommon = false;
                  }
                }
                if (isCommon) {
                  // Recursively merge objects and arrays (susceptible to call stack limits).
                  stack.set(srcValue, newValue);
                  mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                  stack['delete'](srcValue);
                }
                assignMergeValue(object, key, newValue);
              }

              /**
               * The base implementation of `_.nth` which doesn't coerce arguments.
               *
               * @private
               * @param {Array} array The array to query.
               * @param {number} n The index of the element to return.
               * @returns {*} Returns the nth element of `array`.
               */
              function baseNth(array, n) {
                var length = array.length;
                if (!length) {
                  return;
                }
                n += n < 0 ? length : 0;
                return isIndex(n, length) ? array[n] : undefined;
              }

              /**
               * The base implementation of `_.orderBy` without param guards.
               *
               * @private
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
               * @param {string[]} orders The sort orders of `iteratees`.
               * @returns {Array} Returns the new sorted array.
               */
              function baseOrderBy(collection, iteratees, orders) {
                var index = -1;
                iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

                var result = baseMap(collection, function (value, key, collection) {
                  var criteria = arrayMap(iteratees, function (iteratee) {
                    return iteratee(value);
                  });
                  return { 'criteria': criteria, 'index': ++index, 'value': value };
                });

                return baseSortBy(result, function (object, other) {
                  return compareMultiple(object, other, orders);
                });
              }

              /**
               * The base implementation of `_.pick` without support for individual
               * property identifiers.
               *
               * @private
               * @param {Object} object The source object.
               * @param {string[]} paths The property paths to pick.
               * @returns {Object} Returns the new object.
               */
              function basePick(object, paths) {
                return basePickBy(object, paths, function (value, path) {
                  return hasIn(object, path);
                });
              }

              /**
               * The base implementation of  `_.pickBy` without support for iteratee shorthands.
               *
               * @private
               * @param {Object} object The source object.
               * @param {string[]} paths The property paths to pick.
               * @param {Function} predicate The function invoked per property.
               * @returns {Object} Returns the new object.
               */
              function basePickBy(object, paths, predicate) {
                var index = -1,
                  length = paths.length,
                  result = {};

                while (++index < length) {
                  var path = paths[index],
                    value = baseGet(object, path);

                  if (predicate(value, path)) {
                    baseSet(result, castPath(path, object), value);
                  }
                }
                return result;
              }

              /**
               * A specialized version of `baseProperty` which supports deep paths.
               *
               * @private
               * @param {Array|string} path The path of the property to get.
               * @returns {Function} Returns the new accessor function.
               */
              function basePropertyDeep(path) {
                return function (object) {
                  return baseGet(object, path);
                };
              }

              /**
               * The base implementation of `_.pullAllBy` without support for iteratee
               * shorthands.
               *
               * @private
               * @param {Array} array The array to modify.
               * @param {Array} values The values to remove.
               * @param {Function} [iteratee] The iteratee invoked per element.
               * @param {Function} [comparator] The comparator invoked per element.
               * @returns {Array} Returns `array`.
               */
              function basePullAll(array, values, iteratee, comparator) {
                var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                  index = -1,
                  length = values.length,
                  seen = array;

                if (array === values) {
                  values = copyArray(values);
                }
                if (iteratee) {
                  seen = arrayMap(array, baseUnary(iteratee));
                }
                while (++index < length) {
                  var fromIndex = 0,
                    value = values[index],
                    computed = iteratee ? iteratee(value) : value;

                  while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                    if (seen !== array) {
                      splice.call(seen, fromIndex, 1);
                    }
                    splice.call(array, fromIndex, 1);
                  }
                }
                return array;
              }

              /**
               * The base implementation of `_.pullAt` without support for individual
               * indexes or capturing the removed elements.
               *
               * @private
               * @param {Array} array The array to modify.
               * @param {number[]} indexes The indexes of elements to remove.
               * @returns {Array} Returns `array`.
               */
              function basePullAt(array, indexes) {
                var length = array ? indexes.length : 0,
                  lastIndex = length - 1;

                while (length--) {
                  var index = indexes[length];
                  if (length == lastIndex || index !== previous) {
                    var previous = index;
                    if (isIndex(index)) {
                      splice.call(array, index, 1);
                    } else {
                      baseUnset(array, index);
                    }
                  }
                }
                return array;
              }

              /**
               * The base implementation of `_.random` without support for returning
               * floating-point numbers.
               *
               * @private
               * @param {number} lower The lower bound.
               * @param {number} upper The upper bound.
               * @returns {number} Returns the random number.
               */
              function baseRandom(lower, upper) {
                return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
              }

              /**
               * The base implementation of `_.range` and `_.rangeRight` which doesn't
               * coerce arguments.
               *
               * @private
               * @param {number} start The start of the range.
               * @param {number} end The end of the range.
               * @param {number} step The value to increment or decrement by.
               * @param {boolean} [fromRight] Specify iterating from right to left.
               * @returns {Array} Returns the range of numbers.
               */
              function baseRange(start, end, step, fromRight) {
                var index = -1,
                  length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                  result = Array(length);

                while (length--) {
                  result[fromRight ? length : ++index] = start;
                  start += step;
                }
                return result;
              }

              /**
               * The base implementation of `_.repeat` which doesn't coerce arguments.
               *
               * @private
               * @param {string} string The string to repeat.
               * @param {number} n The number of times to repeat the string.
               * @returns {string} Returns the repeated string.
               */
              function baseRepeat(string, n) {
                var result = '';
                if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                  return result;
                }
                // Leverage the exponentiation by squaring algorithm for a faster repeat.
                // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                do {
                  if (n % 2) {
                    result += string;
                  }
                  n = nativeFloor(n / 2);
                  if (n) {
                    string += string;
                  }
                } while (n);

                return result;
              }

              /**
               * The base implementation of `_.rest` which doesn't validate or coerce arguments.
               *
               * @private
               * @param {Function} func The function to apply a rest parameter to.
               * @param {number} [start=func.length-1] The start position of the rest parameter.
               * @returns {Function} Returns the new function.
               */
              function baseRest(func, start) {
                return setToString(overRest(func, start, identity), func + '');
              }

              /**
               * The base implementation of `_.sample`.
               *
               * @private
               * @param {Array|Object} collection The collection to sample.
               * @returns {*} Returns the random element.
               */
              function baseSample(collection) {
                return arraySample(values(collection));
              }

              /**
               * The base implementation of `_.sampleSize` without param guards.
               *
               * @private
               * @param {Array|Object} collection The collection to sample.
               * @param {number} n The number of elements to sample.
               * @returns {Array} Returns the random elements.
               */
              function baseSampleSize(collection, n) {
                var array = values(collection);
                return shuffleSelf(array, baseClamp(n, 0, array.length));
              }

              /**
               * The base implementation of `_.set`.
               *
               * @private
               * @param {Object} object The object to modify.
               * @param {Array|string} path The path of the property to set.
               * @param {*} value The value to set.
               * @param {Function} [customizer] The function to customize path creation.
               * @returns {Object} Returns `object`.
               */
              function baseSet(object, path, value, customizer) {
                if (!isObject(object)) {
                  return object;
                }
                path = castPath(path, object);

                var index = -1,
                  length = path.length,
                  lastIndex = length - 1,
                  nested = object;

                while (nested != null && ++index < length) {
                  var key = toKey(path[index]),
                    newValue = value;

                  if (index != lastIndex) {
                    var objValue = nested[key];
                    newValue = customizer ? customizer(objValue, key, nested) : undefined;
                    if (newValue === undefined) {
                      newValue = isObject(objValue) ?
                        objValue :
                        (isIndex(path[index + 1]) ? [] : {});
                    }
                  }
                  assignValue(nested, key, newValue);
                  nested = nested[key];
                }
                return object;
              }

              /**
               * The base implementation of `setData` without support for hot loop shorting.
               *
               * @private
               * @param {Function} func The function to associate metadata with.
               * @param {*} data The metadata.
               * @returns {Function} Returns `func`.
               */
              var baseSetData = !metaMap ? identity : function (func, data) {
                metaMap.set(func, data);
                return func;
              };

              /**
               * The base implementation of `setToString` without support for hot loop shorting.
               *
               * @private
               * @param {Function} func The function to modify.
               * @param {Function} string The `toString` result.
               * @returns {Function} Returns `func`.
               */
              var baseSetToString = !defineProperty ? identity : function (func, string) {
                return defineProperty(func, 'toString', {
                  'configurable': true,
                  'enumerable': false,
                  'value': constant(string),
                  'writable': true
                });
              };

              /**
               * The base implementation of `_.shuffle`.
               *
               * @private
               * @param {Array|Object} collection The collection to shuffle.
               * @returns {Array} Returns the new shuffled array.
               */
              function baseShuffle(collection) {
                return shuffleSelf(values(collection));
              }

              /**
               * The base implementation of `_.slice` without an iteratee call guard.
               *
               * @private
               * @param {Array} array The array to slice.
               * @param {number} [start=0] The start position.
               * @param {number} [end=array.length] The end position.
               * @returns {Array} Returns the slice of `array`.
               */
              function baseSlice(array, start, end) {
                var index = -1,
                  length = array.length;

                if (start < 0) {
                  start = -start > length ? 0 : (length + start);
                }
                end = end > length ? length : end;
                if (end < 0) {
                  end += length;
                }
                length = start > end ? 0 : ((end - start) >>> 0);
                start >>>= 0;

                var result = Array(length);
                while (++index < length) {
                  result[index] = array[index + start];
                }
                return result;
              }

              /**
               * The base implementation of `_.some` without support for iteratee shorthands.
               *
               * @private
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {boolean} Returns `true` if any element passes the predicate check,
               *  else `false`.
               */
              function baseSome(collection, predicate) {
                var result;

                baseEach(collection, function (value, index, collection) {
                  result = predicate(value, index, collection);
                  return !result;
                });
                return !!result;
              }

              /**
               * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
               * performs a binary search of `array` to determine the index at which `value`
               * should be inserted into `array` in order to maintain its sort order.
               *
               * @private
               * @param {Array} array The sorted array to inspect.
               * @param {*} value The value to evaluate.
               * @param {boolean} [retHighest] Specify returning the highest qualified index.
               * @returns {number} Returns the index at which `value` should be inserted
               *  into `array`.
               */
              function baseSortedIndex(array, value, retHighest) {
                var low = 0,
                  high = array == null ? low : array.length;

                if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                  while (low < high) {
                    var mid = (low + high) >>> 1,
                      computed = array[mid];

                    if (computed !== null && !isSymbol(computed) &&
                      (retHighest ? (computed <= value) : (computed < value))) {
                      low = mid + 1;
                    } else {
                      high = mid;
                    }
                  }
                  return high;
                }
                return baseSortedIndexBy(array, value, identity, retHighest);
              }

              /**
               * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
               * which invokes `iteratee` for `value` and each element of `array` to compute
               * their sort ranking. The iteratee is invoked with one argument; (value).
               *
               * @private
               * @param {Array} array The sorted array to inspect.
               * @param {*} value The value to evaluate.
               * @param {Function} iteratee The iteratee invoked per element.
               * @param {boolean} [retHighest] Specify returning the highest qualified index.
               * @returns {number} Returns the index at which `value` should be inserted
               *  into `array`.
               */
              function baseSortedIndexBy(array, value, iteratee, retHighest) {
                value = iteratee(value);

                var low = 0,
                  high = array == null ? 0 : array.length,
                  valIsNaN = value !== value,
                  valIsNull = value === null,
                  valIsSymbol = isSymbol(value),
                  valIsUndefined = value === undefined;

                while (low < high) {
                  var mid = nativeFloor((low + high) / 2),
                    computed = iteratee(array[mid]),
                    othIsDefined = computed !== undefined,
                    othIsNull = computed === null,
                    othIsReflexive = computed === computed,
                    othIsSymbol = isSymbol(computed);

                  if (valIsNaN) {
                    var setLow = retHighest || othIsReflexive;
                  } else if (valIsUndefined) {
                    setLow = othIsReflexive && (retHighest || othIsDefined);
                  } else if (valIsNull) {
                    setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                  } else if (valIsSymbol) {
                    setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                  } else if (othIsNull || othIsSymbol) {
                    setLow = false;
                  } else {
                    setLow = retHighest ? (computed <= value) : (computed < value);
                  }
                  if (setLow) {
                    low = mid + 1;
                  } else {
                    high = mid;
                  }
                }
                return nativeMin(high, MAX_ARRAY_INDEX);
              }

              /**
               * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
               * support for iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {Function} [iteratee] The iteratee invoked per element.
               * @returns {Array} Returns the new duplicate free array.
               */
              function baseSortedUniq(array, iteratee) {
                var index = -1,
                  length = array.length,
                  resIndex = 0,
                  result = [];

                while (++index < length) {
                  var value = array[index],
                    computed = iteratee ? iteratee(value) : value;

                  if (!index || !eq(computed, seen)) {
                    var seen = computed;
                    result[resIndex++] = value === 0 ? 0 : value;
                  }
                }
                return result;
              }

              /**
               * The base implementation of `_.toNumber` which doesn't ensure correct
               * conversions of binary, hexadecimal, or octal string values.
               *
               * @private
               * @param {*} value The value to process.
               * @returns {number} Returns the number.
               */
              function baseToNumber(value) {
                if (typeof value == 'number') {
                  return value;
                }
                if (isSymbol(value)) {
                  return NAN;
                }
                return +value;
              }

              /**
               * The base implementation of `_.toString` which doesn't convert nullish
               * values to empty strings.
               *
               * @private
               * @param {*} value The value to process.
               * @returns {string} Returns the string.
               */
              function baseToString(value) {
                // Exit early for strings to avoid a performance hit in some environments.
                if (typeof value == 'string') {
                  return value;
                }
                if (isArray(value)) {
                  // Recursively convert values (susceptible to call stack limits).
                  return arrayMap(value, baseToString) + '';
                }
                if (isSymbol(value)) {
                  return symbolToString ? symbolToString.call(value) : '';
                }
                var result = (value + '');
                return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
              }

              /**
               * The base implementation of `_.uniqBy` without support for iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {Function} [iteratee] The iteratee invoked per element.
               * @param {Function} [comparator] The comparator invoked per element.
               * @returns {Array} Returns the new duplicate free array.
               */
              function baseUniq(array, iteratee, comparator) {
                var index = -1,
                  includes = arrayIncludes,
                  length = array.length,
                  isCommon = true,
                  result = [],
                  seen = result;

                if (comparator) {
                  isCommon = false;
                  includes = arrayIncludesWith;
                } else if (length >= LARGE_ARRAY_SIZE) {
                  var set = iteratee ? null : createSet(array);
                  if (set) {
                    return setToArray(set);
                  }
                  isCommon = false;
                  includes = cacheHas;
                  seen = new SetCache;
                } else {
                  seen = iteratee ? [] : result;
                }
                outer:
                  while (++index < length) {
                    var value = array[index],
                      computed = iteratee ? iteratee(value) : value;

                    value = (comparator || value !== 0) ? value : 0;
                    if (isCommon && computed === computed) {
                      var seenIndex = seen.length;
                      while (seenIndex--) {
                        if (seen[seenIndex] === computed) {
                          continue outer;
                        }
                      }
                      if (iteratee) {
                        seen.push(computed);
                      }
                      result.push(value);
                    } else if (!includes(seen, computed, comparator)) {
                      if (seen !== result) {
                        seen.push(computed);
                      }
                      result.push(value);
                    }
                  }
                return result;
              }

              /**
               * The base implementation of `_.unset`.
               *
               * @private
               * @param {Object} object The object to modify.
               * @param {Array|string} path The property path to unset.
               * @returns {boolean} Returns `true` if the property is deleted, else `false`.
               */
              function baseUnset(object, path) {
                path = castPath(path, object);
                object = parent(object, path);
                return object == null || delete object[toKey(last(path))];
              }

              /**
               * The base implementation of `_.update`.
               *
               * @private
               * @param {Object} object The object to modify.
               * @param {Array|string} path The path of the property to update.
               * @param {Function} updater The function to produce the updated value.
               * @param {Function} [customizer] The function to customize path creation.
               * @returns {Object} Returns `object`.
               */
              function baseUpdate(object, path, updater, customizer) {
                return baseSet(object, path, updater(baseGet(object, path)), customizer);
              }

              /**
               * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
               * without support for iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to query.
               * @param {Function} predicate The function invoked per iteration.
               * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
               * @param {boolean} [fromRight] Specify iterating from right to left.
               * @returns {Array} Returns the slice of `array`.
               */
              function baseWhile(array, predicate, isDrop, fromRight) {
                var length = array.length,
                  index = fromRight ? length : -1;

                while ((fromRight ? index-- : ++index < length) &&
                  predicate(array[index], index, array)) {}

                return isDrop ?
                  baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length)) :
                  baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
              }

              /**
               * The base implementation of `wrapperValue` which returns the result of
               * performing a sequence of actions on the unwrapped `value`, where each
               * successive action is supplied the return value of the previous.
               *
               * @private
               * @param {*} value The unwrapped value.
               * @param {Array} actions Actions to perform to resolve the unwrapped value.
               * @returns {*} Returns the resolved value.
               */
              function baseWrapperValue(value, actions) {
                var result = value;
                if (result instanceof LazyWrapper) {
                  result = result.value();
                }
                return arrayReduce(actions, function (result, action) {
                  return action.func.apply(action.thisArg, arrayPush([result], action.args));
                }, result);
              }

              /**
               * The base implementation of methods like `_.xor`, without support for
               * iteratee shorthands, that accepts an array of arrays to inspect.
               *
               * @private
               * @param {Array} arrays The arrays to inspect.
               * @param {Function} [iteratee] The iteratee invoked per element.
               * @param {Function} [comparator] The comparator invoked per element.
               * @returns {Array} Returns the new array of values.
               */
              function baseXor(arrays, iteratee, comparator) {
                var length = arrays.length;
                if (length < 2) {
                  return length ? baseUniq(arrays[0]) : [];
                }
                var index = -1,
                  result = Array(length);

                while (++index < length) {
                  var array = arrays[index],
                    othIndex = -1;

                  while (++othIndex < length) {
                    if (othIndex != index) {
                      result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                    }
                  }
                }
                return baseUniq(baseFlatten(result, 1), iteratee, comparator);
              }

              /**
               * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
               *
               * @private
               * @param {Array} props The property identifiers.
               * @param {Array} values The property values.
               * @param {Function} assignFunc The function to assign values.
               * @returns {Object} Returns the new object.
               */
              function baseZipObject(props, values, assignFunc) {
                var index = -1,
                  length = props.length,
                  valsLength = values.length,
                  result = {};

                while (++index < length) {
                  var value = index < valsLength ? values[index] : undefined;
                  assignFunc(result, props[index], value);
                }
                return result;
              }

              /**
               * Casts `value` to an empty array if it's not an array like object.
               *
               * @private
               * @param {*} value The value to inspect.
               * @returns {Array|Object} Returns the cast array-like object.
               */
              function castArrayLikeObject(value) {
                return isArrayLikeObject(value) ? value : [];
              }

              /**
               * Casts `value` to `identity` if it's not a function.
               *
               * @private
               * @param {*} value The value to inspect.
               * @returns {Function} Returns cast function.
               */
              function castFunction(value) {
                return typeof value == 'function' ? value : identity;
              }

              /**
               * Casts `value` to a path array if it's not one.
               *
               * @private
               * @param {*} value The value to inspect.
               * @param {Object} [object] The object to query keys on.
               * @returns {Array} Returns the cast property path array.
               */
              function castPath(value, object) {
                if (isArray(value)) {
                  return value;
                }
                return isKey(value, object) ? [value] : stringToPath(toString(value));
              }

              /**
               * A `baseRest` alias which can be replaced with `identity` by module
               * replacement plugins.
               *
               * @private
               * @type {Function}
               * @param {Function} func The function to apply a rest parameter to.
               * @returns {Function} Returns the new function.
               */
              var castRest = baseRest;

              /**
               * Casts `array` to a slice if it's needed.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {number} start The start position.
               * @param {number} [end=array.length] The end position.
               * @returns {Array} Returns the cast slice.
               */
              function castSlice(array, start, end) {
                var length = array.length;
                end = end === undefined ? length : end;
                return (!start && end >= length) ? array : baseSlice(array, start, end);
              }

              /**
               * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
               *
               * @private
               * @param {number|Object} id The timer id or timeout object of the timer to clear.
               */
              var clearTimeout = ctxClearTimeout || function (id) {
                return root.clearTimeout(id);
              };

              /**
               * Creates a clone of  `buffer`.
               *
               * @private
               * @param {Buffer} buffer The buffer to clone.
               * @param {boolean} [isDeep] Specify a deep clone.
               * @returns {Buffer} Returns the cloned buffer.
               */
              function cloneBuffer(buffer, isDeep) {
                if (isDeep) {
                  return buffer.slice();
                }
                var length = buffer.length,
                  result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

                buffer.copy(result);
                return result;
              }

              /**
               * Creates a clone of `arrayBuffer`.
               *
               * @private
               * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
               * @returns {ArrayBuffer} Returns the cloned array buffer.
               */
              function cloneArrayBuffer(arrayBuffer) {
                var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                return result;
              }

              /**
               * Creates a clone of `dataView`.
               *
               * @private
               * @param {Object} dataView The data view to clone.
               * @param {boolean} [isDeep] Specify a deep clone.
               * @returns {Object} Returns the cloned data view.
               */
              function cloneDataView(dataView, isDeep) {
                var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
              }

              /**
               * Creates a clone of `map`.
               *
               * @private
               * @param {Object} map The map to clone.
               * @param {Function} cloneFunc The function to clone values.
               * @param {boolean} [isDeep] Specify a deep clone.
               * @returns {Object} Returns the cloned map.
               */
              function cloneMap(map, isDeep, cloneFunc) {
                var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
                return arrayReduce(array, addMapEntry, new map.constructor);
              }

              /**
               * Creates a clone of `regexp`.
               *
               * @private
               * @param {Object} regexp The regexp to clone.
               * @returns {Object} Returns the cloned regexp.
               */
              function cloneRegExp(regexp) {
                var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                result.lastIndex = regexp.lastIndex;
                return result;
              }

              /**
               * Creates a clone of `set`.
               *
               * @private
               * @param {Object} set The set to clone.
               * @param {Function} cloneFunc The function to clone values.
               * @param {boolean} [isDeep] Specify a deep clone.
               * @returns {Object} Returns the cloned set.
               */
              function cloneSet(set, isDeep, cloneFunc) {
                var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
                return arrayReduce(array, addSetEntry, new set.constructor);
              }

              /**
               * Creates a clone of the `symbol` object.
               *
               * @private
               * @param {Object} symbol The symbol object to clone.
               * @returns {Object} Returns the cloned symbol object.
               */
              function cloneSymbol(symbol) {
                return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
              }

              /**
               * Creates a clone of `typedArray`.
               *
               * @private
               * @param {Object} typedArray The typed array to clone.
               * @param {boolean} [isDeep] Specify a deep clone.
               * @returns {Object} Returns the cloned typed array.
               */
              function cloneTypedArray(typedArray, isDeep) {
                var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
              }

              /**
               * Compares values to sort them in ascending order.
               *
               * @private
               * @param {*} value The value to compare.
               * @param {*} other The other value to compare.
               * @returns {number} Returns the sort order indicator for `value`.
               */
              function compareAscending(value, other) {
                if (value !== other) {
                  var valIsDefined = value !== undefined,
                    valIsNull = value === null,
                    valIsReflexive = value === value,
                    valIsSymbol = isSymbol(value);

                  var othIsDefined = other !== undefined,
                    othIsNull = other === null,
                    othIsReflexive = other === other,
                    othIsSymbol = isSymbol(other);

                  if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                    (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                    (valIsNull && othIsDefined && othIsReflexive) ||
                    (!valIsDefined && othIsReflexive) ||
                    !valIsReflexive) {
                    return 1;
                  }
                  if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                    (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                    (othIsNull && valIsDefined && valIsReflexive) ||
                    (!othIsDefined && valIsReflexive) ||
                    !othIsReflexive) {
                    return -1;
                  }
                }
                return 0;
              }

              /**
               * Used by `_.orderBy` to compare multiple properties of a value to another
               * and stable sort them.
               *
               * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
               * specify an order of "desc" for descending or "asc" for ascending sort order
               * of corresponding values.
               *
               * @private
               * @param {Object} object The object to compare.
               * @param {Object} other The other object to compare.
               * @param {boolean[]|string[]} orders The order to sort by for each property.
               * @returns {number} Returns the sort order indicator for `object`.
               */
              function compareMultiple(object, other, orders) {
                var index = -1,
                  objCriteria = object.criteria,
                  othCriteria = other.criteria,
                  length = objCriteria.length,
                  ordersLength = orders.length;

                while (++index < length) {
                  var result = compareAscending(objCriteria[index], othCriteria[index]);
                  if (result) {
                    if (index >= ordersLength) {
                      return result;
                    }
                    var order = orders[index];
                    return result * (order == 'desc' ? -1 : 1);
                  }
                }
                // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                // that causes it, under certain circumstances, to provide the same value for
                // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                // for more details.
                //
                // This also ensures a stable sort in V8 and other engines.
                // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                return object.index - other.index;
              }

              /**
               * Creates an array that is the composition of partially applied arguments,
               * placeholders, and provided arguments into a single array of arguments.
               *
               * @private
               * @param {Array} args The provided arguments.
               * @param {Array} partials The arguments to prepend to those provided.
               * @param {Array} holders The `partials` placeholder indexes.
               * @params {boolean} [isCurried] Specify composing for a curried function.
               * @returns {Array} Returns the new array of composed arguments.
               */
              function composeArgs(args, partials, holders, isCurried) {
                var argsIndex = -1,
                  argsLength = args.length,
                  holdersLength = holders.length,
                  leftIndex = -1,
                  leftLength = partials.length,
                  rangeLength = nativeMax(argsLength - holdersLength, 0),
                  result = Array(leftLength + rangeLength),
                  isUncurried = !isCurried;

                while (++leftIndex < leftLength) {
                  result[leftIndex] = partials[leftIndex];
                }
                while (++argsIndex < holdersLength) {
                  if (isUncurried || argsIndex < argsLength) {
                    result[holders[argsIndex]] = args[argsIndex];
                  }
                }
                while (rangeLength--) {
                  result[leftIndex++] = args[argsIndex++];
                }
                return result;
              }

              /**
               * This function is like `composeArgs` except that the arguments composition
               * is tailored for `_.partialRight`.
               *
               * @private
               * @param {Array} args The provided arguments.
               * @param {Array} partials The arguments to append to those provided.
               * @param {Array} holders The `partials` placeholder indexes.
               * @params {boolean} [isCurried] Specify composing for a curried function.
               * @returns {Array} Returns the new array of composed arguments.
               */
              function composeArgsRight(args, partials, holders, isCurried) {
                var argsIndex = -1,
                  argsLength = args.length,
                  holdersIndex = -1,
                  holdersLength = holders.length,
                  rightIndex = -1,
                  rightLength = partials.length,
                  rangeLength = nativeMax(argsLength - holdersLength, 0),
                  result = Array(rangeLength + rightLength),
                  isUncurried = !isCurried;

                while (++argsIndex < rangeLength) {
                  result[argsIndex] = args[argsIndex];
                }
                var offset = argsIndex;
                while (++rightIndex < rightLength) {
                  result[offset + rightIndex] = partials[rightIndex];
                }
                while (++holdersIndex < holdersLength) {
                  if (isUncurried || argsIndex < argsLength) {
                    result[offset + holders[holdersIndex]] = args[argsIndex++];
                  }
                }
                return result;
              }

              /**
               * Copies the values of `source` to `array`.
               *
               * @private
               * @param {Array} source The array to copy values from.
               * @param {Array} [array=[]] The array to copy values to.
               * @returns {Array} Returns `array`.
               */
              function copyArray(source, array) {
                var index = -1,
                  length = source.length;

                array || (array = Array(length));
                while (++index < length) {
                  array[index] = source[index];
                }
                return array;
              }

              /**
               * Copies properties of `source` to `object`.
               *
               * @private
               * @param {Object} source The object to copy properties from.
               * @param {Array} props The property identifiers to copy.
               * @param {Object} [object={}] The object to copy properties to.
               * @param {Function} [customizer] The function to customize copied values.
               * @returns {Object} Returns `object`.
               */
              function copyObject(source, props, object, customizer) {
                var isNew = !object;
                object || (object = {});

                var index = -1,
                  length = props.length;

                while (++index < length) {
                  var key = props[index];

                  var newValue = customizer ?
                    customizer(object[key], source[key], key, object, source) :
                    undefined;

                  if (newValue === undefined) {
                    newValue = source[key];
                  }
                  if (isNew) {
                    baseAssignValue(object, key, newValue);
                  } else {
                    assignValue(object, key, newValue);
                  }
                }
                return object;
              }

              /**
               * Copies own symbols of `source` to `object`.
               *
               * @private
               * @param {Object} source The object to copy symbols from.
               * @param {Object} [object={}] The object to copy symbols to.
               * @returns {Object} Returns `object`.
               */
              function copySymbols(source, object) {
                return copyObject(source, getSymbols(source), object);
              }

              /**
               * Copies own and inherited symbols of `source` to `object`.
               *
               * @private
               * @param {Object} source The object to copy symbols from.
               * @param {Object} [object={}] The object to copy symbols to.
               * @returns {Object} Returns `object`.
               */
              function copySymbolsIn(source, object) {
                return copyObject(source, getSymbolsIn(source), object);
              }

              /**
               * Creates a function like `_.groupBy`.
               *
               * @private
               * @param {Function} setter The function to set accumulator values.
               * @param {Function} [initializer] The accumulator object initializer.
               * @returns {Function} Returns the new aggregator function.
               */
              function createAggregator(setter, initializer) {
                return function (collection, iteratee) {
                  var func = isArray(collection) ? arrayAggregator : baseAggregator,
                    accumulator = initializer ? initializer() : {};

                  return func(collection, setter, getIteratee(iteratee, 2), accumulator);
                };
              }

              /**
               * Creates a function like `_.assign`.
               *
               * @private
               * @param {Function} assigner The function to assign values.
               * @returns {Function} Returns the new assigner function.
               */
              function createAssigner(assigner) {
                return baseRest(function (object, sources) {
                  var index = -1,
                    length = sources.length,
                    customizer = length > 1 ? sources[length - 1] : undefined,
                    guard = length > 2 ? sources[2] : undefined;

                  customizer = (assigner.length > 3 && typeof customizer == 'function') ?
                    (length--, customizer) :
                    undefined;

                  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                  }
                  object = Object(object);
                  while (++index < length) {
                    var source = sources[index];
                    if (source) {
                      assigner(object, source, index, customizer);
                    }
                  }
                  return object;
                });
              }

              /**
               * Creates a `baseEach` or `baseEachRight` function.
               *
               * @private
               * @param {Function} eachFunc The function to iterate over a collection.
               * @param {boolean} [fromRight] Specify iterating from right to left.
               * @returns {Function} Returns the new base function.
               */
              function createBaseEach(eachFunc, fromRight) {
                return function (collection, iteratee) {
                  if (collection == null) {
                    return collection;
                  }
                  if (!isArrayLike(collection)) {
                    return eachFunc(collection, iteratee);
                  }
                  var length = collection.length,
                    index = fromRight ? length : -1,
                    iterable = Object(collection);

                  while ((fromRight ? index-- : ++index < length)) {
                    if (iteratee(iterable[index], index, iterable) === false) {
                      break;
                    }
                  }
                  return collection;
                };
              }

              /**
               * Creates a base function for methods like `_.forIn` and `_.forOwn`.
               *
               * @private
               * @param {boolean} [fromRight] Specify iterating from right to left.
               * @returns {Function} Returns the new base function.
               */
              function createBaseFor(fromRight) {
                return function (object, iteratee, keysFunc) {
                  var index = -1,
                    iterable = Object(object),
                    props = keysFunc(object),
                    length = props.length;

                  while (length--) {
                    var key = props[fromRight ? length : ++index];
                    if (iteratee(iterable[key], key, iterable) === false) {
                      break;
                    }
                  }
                  return object;
                };
              }

              /**
               * Creates a function that wraps `func` to invoke it with the optional `this`
               * binding of `thisArg`.
               *
               * @private
               * @param {Function} func The function to wrap.
               * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
               * @param {*} [thisArg] The `this` binding of `func`.
               * @returns {Function} Returns the new wrapped function.
               */
              function createBind(func, bitmask, thisArg) {
                var isBind = bitmask & WRAP_BIND_FLAG,
                  Ctor = createCtor(func);

                function wrapper() {
                  var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                  return fn.apply(isBind ? thisArg : this, arguments);
                }
                return wrapper;
              }

              /**
               * Creates a function like `_.lowerFirst`.
               *
               * @private
               * @param {string} methodName The name of the `String` case method to use.
               * @returns {Function} Returns the new case function.
               */
              function createCaseFirst(methodName) {
                return function (string) {
                  string = toString(string);

                  var strSymbols = hasUnicode(string) ?
                    stringToArray(string) :
                    undefined;

                  var chr = strSymbols ?
                    strSymbols[0] :
                    string.charAt(0);

                  var trailing = strSymbols ?
                    castSlice(strSymbols, 1).join('') :
                    string.slice(1);

                  return chr[methodName]() + trailing;
                };
              }

              /**
               * Creates a function like `_.camelCase`.
               *
               * @private
               * @param {Function} callback The function to combine each word.
               * @returns {Function} Returns the new compounder function.
               */
              function createCompounder(callback) {
                return function (string) {
                  return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
                };
              }

              /**
               * Creates a function that produces an instance of `Ctor` regardless of
               * whether it was invoked as part of a `new` expression or by `call` or `apply`.
               *
               * @private
               * @param {Function} Ctor The constructor to wrap.
               * @returns {Function} Returns the new wrapped function.
               */
              function createCtor(Ctor) {
                return function () {
                  // Use a `switch` statement to work with class constructors. See
                  // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                  // for more details.
                  var args = arguments;
                  switch (args.length) {
                  case 0:
                    return new Ctor;
                  case 1:
                    return new Ctor(args[0]);
                  case 2:
                    return new Ctor(args[0], args[1]);
                  case 3:
                    return new Ctor(args[0], args[1], args[2]);
                  case 4:
                    return new Ctor(args[0], args[1], args[2], args[3]);
                  case 5:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                  case 6:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                  case 7:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                  }
                  var thisBinding = baseCreate(Ctor.prototype),
                    result = Ctor.apply(thisBinding, args);

                  // Mimic the constructor's `return` behavior.
                  // See https://es5.github.io/#x13.2.2 for more details.
                  return isObject(result) ? result : thisBinding;
                };
              }

              /**
               * Creates a function that wraps `func` to enable currying.
               *
               * @private
               * @param {Function} func The function to wrap.
               * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
               * @param {number} arity The arity of `func`.
               * @returns {Function} Returns the new wrapped function.
               */
              function createCurry(func, bitmask, arity) {
                var Ctor = createCtor(func);

                function wrapper() {
                  var length = arguments.length,
                    args = Array(length),
                    index = length,
                    placeholder = getHolder(wrapper);

                  while (index--) {
                    args[index] = arguments[index];
                  }
                  var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder) ?
                    [] :
                    replaceHolders(args, placeholder);

                  length -= holders.length;
                  if (length < arity) {
                    return createRecurry(
                      func, bitmask, createHybrid, wrapper.placeholder, undefined,
                      args, holders, undefined, undefined, arity - length);
                  }
                  var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                  return apply(fn, this, args);
                }
                return wrapper;
              }

              /**
               * Creates a `_.find` or `_.findLast` function.
               *
               * @private
               * @param {Function} findIndexFunc The function to find the collection index.
               * @returns {Function} Returns the new find function.
               */
              function createFind(findIndexFunc) {
                return function (collection, predicate, fromIndex) {
                  var iterable = Object(collection);
                  if (!isArrayLike(collection)) {
                    var iteratee = getIteratee(predicate, 3);
                    collection = keys(collection);
                    predicate = function (key) { return iteratee(iterable[key], key, iterable); };
                  }
                  var index = findIndexFunc(collection, predicate, fromIndex);
                  return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
                };
              }

              /**
               * Creates a `_.flow` or `_.flowRight` function.
               *
               * @private
               * @param {boolean} [fromRight] Specify iterating from right to left.
               * @returns {Function} Returns the new flow function.
               */
              function createFlow(fromRight) {
                return flatRest(function (funcs) {
                  var length = funcs.length,
                    index = length,
                    prereq = LodashWrapper.prototype.thru;

                  if (fromRight) {
                    funcs.reverse();
                  }
                  while (index--) {
                    var func = funcs[index];
                    if (typeof func != 'function') {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                      var wrapper = new LodashWrapper([], true);
                    }
                  }
                  index = wrapper ? index : length;
                  while (++index < length) {
                    func = funcs[index];

                    var funcName = getFuncName(func),
                      data = funcName == 'wrapper' ? getData(func) : undefined;

                    if (data && isLaziable(data[0]) &&
                      data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                      !data[4].length && data[9] == 1
                    ) {
                      wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                    } else {
                      wrapper = (func.length == 1 && isLaziable(func)) ?
                        wrapper[funcName]() :
                        wrapper.thru(func);
                    }
                  }
                  return function () {
                    var args = arguments,
                      value = args[0];

                    if (wrapper && args.length == 1 && isArray(value)) {
                      return wrapper.plant(value).value();
                    }
                    var index = 0,
                      result = length ? funcs[index].apply(this, args) : value;

                    while (++index < length) {
                      result = funcs[index].call(this, result);
                    }
                    return result;
                  };
                });
              }

              /**
               * Creates a function that wraps `func` to invoke it with optional `this`
               * binding of `thisArg`, partial application, and currying.
               *
               * @private
               * @param {Function|string} func The function or method name to wrap.
               * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
               * @param {*} [thisArg] The `this` binding of `func`.
               * @param {Array} [partials] The arguments to prepend to those provided to
               *  the new function.
               * @param {Array} [holders] The `partials` placeholder indexes.
               * @param {Array} [partialsRight] The arguments to append to those provided
               *  to the new function.
               * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
               * @param {Array} [argPos] The argument positions of the new function.
               * @param {number} [ary] The arity cap of `func`.
               * @param {number} [arity] The arity of `func`.
               * @returns {Function} Returns the new wrapped function.
               */
              function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
                var isAry = bitmask & WRAP_ARY_FLAG,
                  isBind = bitmask & WRAP_BIND_FLAG,
                  isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                  isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                  isFlip = bitmask & WRAP_FLIP_FLAG,
                  Ctor = isBindKey ? undefined : createCtor(func);

                function wrapper() {
                  var length = arguments.length,
                    args = Array(length),
                    index = length;

                  while (index--) {
                    args[index] = arguments[index];
                  }
                  if (isCurried) {
                    var placeholder = getHolder(wrapper),
                      holdersCount = countHolders(args, placeholder);
                  }
                  if (partials) {
                    args = composeArgs(args, partials, holders, isCurried);
                  }
                  if (partialsRight) {
                    args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                  }
                  length -= holdersCount;
                  if (isCurried && length < arity) {
                    var newHolders = replaceHolders(args, placeholder);
                    return createRecurry(
                      func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                      args, newHolders, argPos, ary, arity - length
                    );
                  }
                  var thisBinding = isBind ? thisArg : this,
                    fn = isBindKey ? thisBinding[func] : func;

                  length = args.length;
                  if (argPos) {
                    args = reorder(args, argPos);
                  } else if (isFlip && length > 1) {
                    args.reverse();
                  }
                  if (isAry && ary < length) {
                    args.length = ary;
                  }
                  if (this && this !== root && this instanceof wrapper) {
                    fn = Ctor || createCtor(fn);
                  }
                  return fn.apply(thisBinding, args);
                }
                return wrapper;
              }

              /**
               * Creates a function like `_.invertBy`.
               *
               * @private
               * @param {Function} setter The function to set accumulator values.
               * @param {Function} toIteratee The function to resolve iteratees.
               * @returns {Function} Returns the new inverter function.
               */
              function createInverter(setter, toIteratee) {
                return function (object, iteratee) {
                  return baseInverter(object, setter, toIteratee(iteratee), {});
                };
              }

              /**
               * Creates a function that performs a mathematical operation on two values.
               *
               * @private
               * @param {Function} operator The function to perform the operation.
               * @param {number} [defaultValue] The value used for `undefined` arguments.
               * @returns {Function} Returns the new mathematical operation function.
               */
              function createMathOperation(operator, defaultValue) {
                return function (value, other) {
                  var result;
                  if (value === undefined && other === undefined) {
                    return defaultValue;
                  }
                  if (value !== undefined) {
                    result = value;
                  }
                  if (other !== undefined) {
                    if (result === undefined) {
                      return other;
                    }
                    if (typeof value == 'string' || typeof other == 'string') {
                      value = baseToString(value);
                      other = baseToString(other);
                    } else {
                      value = baseToNumber(value);
                      other = baseToNumber(other);
                    }
                    result = operator(value, other);
                  }
                  return result;
                };
              }

              /**
               * Creates a function like `_.over`.
               *
               * @private
               * @param {Function} arrayFunc The function to iterate over iteratees.
               * @returns {Function} Returns the new over function.
               */
              function createOver(arrayFunc) {
                return flatRest(function (iteratees) {
                  iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                  return baseRest(function (args) {
                    var thisArg = this;
                    return arrayFunc(iteratees, function (iteratee) {
                      return apply(iteratee, thisArg, args);
                    });
                  });
                });
              }

              /**
               * Creates the padding for `string` based on `length`. The `chars` string
               * is truncated if the number of characters exceeds `length`.
               *
               * @private
               * @param {number} length The padding length.
               * @param {string} [chars=' '] The string used as padding.
               * @returns {string} Returns the padding for `string`.
               */
              function createPadding(length, chars) {
                chars = chars === undefined ? ' ' : baseToString(chars);

                var charsLength = chars.length;
                if (charsLength < 2) {
                  return charsLength ? baseRepeat(chars, length) : chars;
                }
                var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                return hasUnicode(chars) ?
                  castSlice(stringToArray(result), 0, length).join('') :
                  result.slice(0, length);
              }

              /**
               * Creates a function that wraps `func` to invoke it with the `this` binding
               * of `thisArg` and `partials` prepended to the arguments it receives.
               *
               * @private
               * @param {Function} func The function to wrap.
               * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
               * @param {*} thisArg The `this` binding of `func`.
               * @param {Array} partials The arguments to prepend to those provided to
               *  the new function.
               * @returns {Function} Returns the new wrapped function.
               */
              function createPartial(func, bitmask, thisArg, partials) {
                var isBind = bitmask & WRAP_BIND_FLAG,
                  Ctor = createCtor(func);

                function wrapper() {
                  var argsIndex = -1,
                    argsLength = arguments.length,
                    leftIndex = -1,
                    leftLength = partials.length,
                    args = Array(leftLength + argsLength),
                    fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

                  while (++leftIndex < leftLength) {
                    args[leftIndex] = partials[leftIndex];
                  }
                  while (argsLength--) {
                    args[leftIndex++] = arguments[++argsIndex];
                  }
                  return apply(fn, isBind ? thisArg : this, args);
                }
                return wrapper;
              }

              /**
               * Creates a `_.range` or `_.rangeRight` function.
               *
               * @private
               * @param {boolean} [fromRight] Specify iterating from right to left.
               * @returns {Function} Returns the new range function.
               */
              function createRange(fromRight) {
                return function (start, end, step) {
                  if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                    end = step = undefined;
                  }
                  // Ensure the sign of `-0` is preserved.
                  start = toFinite(start);
                  if (end === undefined) {
                    end = start;
                    start = 0;
                  } else {
                    end = toFinite(end);
                  }
                  step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                  return baseRange(start, end, step, fromRight);
                };
              }

              /**
               * Creates a function that performs a relational operation on two values.
               *
               * @private
               * @param {Function} operator The function to perform the operation.
               * @returns {Function} Returns the new relational operation function.
               */
              function createRelationalOperation(operator) {
                return function (value, other) {
                  if (!(typeof value == 'string' && typeof other == 'string')) {
                    value = toNumber(value);
                    other = toNumber(other);
                  }
                  return operator(value, other);
                };
              }

              /**
               * Creates a function that wraps `func` to continue currying.
               *
               * @private
               * @param {Function} func The function to wrap.
               * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
               * @param {Function} wrapFunc The function to create the `func` wrapper.
               * @param {*} placeholder The placeholder value.
               * @param {*} [thisArg] The `this` binding of `func`.
               * @param {Array} [partials] The arguments to prepend to those provided to
               *  the new function.
               * @param {Array} [holders] The `partials` placeholder indexes.
               * @param {Array} [argPos] The argument positions of the new function.
               * @param {number} [ary] The arity cap of `func`.
               * @param {number} [arity] The arity of `func`.
               * @returns {Function} Returns the new wrapped function.
               */
              function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
                var isCurry = bitmask & WRAP_CURRY_FLAG,
                  newHolders = isCurry ? holders : undefined,
                  newHoldersRight = isCurry ? undefined : holders,
                  newPartials = isCurry ? partials : undefined,
                  newPartialsRight = isCurry ? undefined : partials;

                bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
                bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

                if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                  bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                }
                var newData = [
                  func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
                  newHoldersRight, argPos, ary, arity
                ];

                var result = wrapFunc.apply(undefined, newData);
                if (isLaziable(func)) {
                  setData(result, newData);
                }
                result.placeholder = placeholder;
                return setWrapToString(result, func, bitmask);
              }

              /**
               * Creates a function like `_.round`.
               *
               * @private
               * @param {string} methodName The name of the `Math` method to use when rounding.
               * @returns {Function} Returns the new round function.
               */
              function createRound(methodName) {
                var func = Math[methodName];
                return function (number, precision) {
                  number = toNumber(number);
                  precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                  if (precision) {
                    // Shift with exponential notation to avoid floating-point issues.
                    // See [MDN](https://mdn.io/round#Examples) for more details.
                    var pair = (toString(number) + 'e').split('e'),
                      value = func(pair[0] + 'e' + (+pair[1] + precision));

                    pair = (toString(value) + 'e').split('e');
                    return +(pair[0] + 'e' + (+pair[1] - precision));
                  }
                  return func(number);
                };
              }

              /**
               * Creates a set object of `values`.
               *
               * @private
               * @param {Array} values The values to add to the set.
               * @returns {Object} Returns the new set.
               */
              var createSet = !(Set && (1 / setToArray(new Set([, -0]))[1]) == INFINITY) ? noop : function (values) {
                return new Set(values);
              };

              /**
               * Creates a `_.toPairs` or `_.toPairsIn` function.
               *
               * @private
               * @param {Function} keysFunc The function to get the keys of a given object.
               * @returns {Function} Returns the new pairs function.
               */
              function createToPairs(keysFunc) {
                return function (object) {
                  var tag = getTag(object);
                  if (tag == mapTag) {
                    return mapToArray(object);
                  }
                  if (tag == setTag) {
                    return setToPairs(object);
                  }
                  return baseToPairs(object, keysFunc(object));
                };
              }

              /**
               * Creates a function that either curries or invokes `func` with optional
               * `this` binding and partially applied arguments.
               *
               * @private
               * @param {Function|string} func The function or method name to wrap.
               * @param {number} bitmask The bitmask flags.
               *    1 - `_.bind`
               *    2 - `_.bindKey`
               *    4 - `_.curry` or `_.curryRight` of a bound function
               *    8 - `_.curry`
               *   16 - `_.curryRight`
               *   32 - `_.partial`
               *   64 - `_.partialRight`
               *  128 - `_.rearg`
               *  256 - `_.ary`
               *  512 - `_.flip`
               * @param {*} [thisArg] The `this` binding of `func`.
               * @param {Array} [partials] The arguments to be partially applied.
               * @param {Array} [holders] The `partials` placeholder indexes.
               * @param {Array} [argPos] The argument positions of the new function.
               * @param {number} [ary] The arity cap of `func`.
               * @param {number} [arity] The arity of `func`.
               * @returns {Function} Returns the new wrapped function.
               */
              function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                if (!isBindKey && typeof func != 'function') {
                  throw new TypeError(FUNC_ERROR_TEXT);
                }
                var length = partials ? partials.length : 0;
                if (!length) {
                  bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                  partials = holders = undefined;
                }
                ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
                arity = arity === undefined ? arity : toInteger(arity);
                length -= holders ? holders.length : 0;

                if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                  var partialsRight = partials,
                    holdersRight = holders;

                  partials = holders = undefined;
                }
                var data = isBindKey ? undefined : getData(func);

                var newData = [
                  func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
                  argPos, ary, arity
                ];

                if (data) {
                  mergeData(newData, data);
                }
                func = newData[0];
                bitmask = newData[1];
                thisArg = newData[2];
                partials = newData[3];
                holders = newData[4];
                arity = newData[9] = newData[9] === undefined ?
                  (isBindKey ? 0 : func.length) :
                  nativeMax(newData[9] - length, 0);

                if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                  bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                }
                if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                  var result = createBind(func, bitmask, thisArg);
                } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                  result = createCurry(func, bitmask, arity);
                } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                  result = createPartial(func, bitmask, thisArg, partials);
                } else {
                  result = createHybrid.apply(undefined, newData);
                }
                var setter = data ? baseSetData : setData;
                return setWrapToString(setter(result, newData), func, bitmask);
              }

              /**
               * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
               * of source objects to the destination object for all destination properties
               * that resolve to `undefined`.
               *
               * @private
               * @param {*} objValue The destination value.
               * @param {*} srcValue The source value.
               * @param {string} key The key of the property to assign.
               * @param {Object} object The parent object of `objValue`.
               * @returns {*} Returns the value to assign.
               */
              function customDefaultsAssignIn(objValue, srcValue, key, object) {
                if (objValue === undefined ||
                  (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                  return srcValue;
                }
                return objValue;
              }

              /**
               * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
               * objects into destination objects that are passed thru.
               *
               * @private
               * @param {*} objValue The destination value.
               * @param {*} srcValue The source value.
               * @param {string} key The key of the property to merge.
               * @param {Object} object The parent object of `objValue`.
               * @param {Object} source The parent object of `srcValue`.
               * @param {Object} [stack] Tracks traversed source values and their merged
               *  counterparts.
               * @returns {*} Returns the value to assign.
               */
              function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                if (isObject(objValue) && isObject(srcValue)) {
                  // Recursively merge objects and arrays (susceptible to call stack limits).
                  stack.set(srcValue, objValue);
                  baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                  stack['delete'](srcValue);
                }
                return objValue;
              }

              /**
               * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
               * objects.
               *
               * @private
               * @param {*} value The value to inspect.
               * @param {string} key The key of the property to inspect.
               * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
               */
              function customOmitClone(value) {
                return isPlainObject(value) ? undefined : value;
              }

              /**
               * A specialized version of `baseIsEqualDeep` for arrays with support for
               * partial deep comparisons.
               *
               * @private
               * @param {Array} array The array to compare.
               * @param {Array} other The other array to compare.
               * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
               * @param {Function} customizer The function to customize comparisons.
               * @param {Function} equalFunc The function to determine equivalents of values.
               * @param {Object} stack Tracks traversed `array` and `other` objects.
               * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
               */
              function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                  arrLength = array.length,
                  othLength = other.length;

                if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                  return false;
                }
                // Assume cyclic values are equal.
                var stacked = stack.get(array);
                if (stacked && stack.get(other)) {
                  return stacked == other;
                }
                var index = -1,
                  result = true,
                  seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

                stack.set(array, other);
                stack.set(other, array);

                // Ignore non-index properties.
                while (++index < arrLength) {
                  var arrValue = array[index],
                    othValue = other[index];

                  if (customizer) {
                    var compared = isPartial ?
                      customizer(othValue, arrValue, index, other, array, stack) :
                      customizer(arrValue, othValue, index, array, other, stack);
                  }
                  if (compared !== undefined) {
                    if (compared) {
                      continue;
                    }
                    result = false;
                    break;
                  }
                  // Recursively compare arrays (susceptible to call stack limits).
                  if (seen) {
                    if (!arraySome(other, function (othValue, othIndex) {
                        if (!cacheHas(seen, othIndex) &&
                          (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                          return seen.push(othIndex);
                        }
                      })) {
                      result = false;
                      break;
                    }
                  } else if (!(
                      arrValue === othValue ||
                      equalFunc(arrValue, othValue, bitmask, customizer, stack)
                    )) {
                    result = false;
                    break;
                  }
                }
                stack['delete'](array);
                stack['delete'](other);
                return result;
              }

              /**
               * A specialized version of `baseIsEqualDeep` for comparing objects of
               * the same `toStringTag`.
               *
               * **Note:** This function only supports comparing values with tags of
               * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
               *
               * @private
               * @param {Object} object The object to compare.
               * @param {Object} other The other object to compare.
               * @param {string} tag The `toStringTag` of the objects to compare.
               * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
               * @param {Function} customizer The function to customize comparisons.
               * @param {Function} equalFunc The function to determine equivalents of values.
               * @param {Object} stack Tracks traversed `object` and `other` objects.
               * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
               */
              function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                switch (tag) {
                case dataViewTag:
                  if ((object.byteLength != other.byteLength) ||
                    (object.byteOffset != other.byteOffset)) {
                    return false;
                  }
                  object = object.buffer;
                  other = other.buffer;

                case arrayBufferTag:
                  if ((object.byteLength != other.byteLength) ||
                    !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                    return false;
                  }
                  return true;

                case boolTag:
                case dateTag:
                case numberTag:
                  // Coerce booleans to `1` or `0` and dates to milliseconds.
                  // Invalid dates are coerced to `NaN`.
                  return eq(+object, +other);

                case errorTag:
                  return object.name == other.name && object.message == other.message;

                case regexpTag:
                case stringTag:
                  // Coerce regexes to strings and treat strings, primitives and objects,
                  // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                  // for more details.
                  return object == (other + '');

                case mapTag:
                  var convert = mapToArray;

                case setTag:
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                  convert || (convert = setToArray);

                  if (object.size != other.size && !isPartial) {
                    return false;
                  }
                  // Assume cyclic values are equal.
                  var stacked = stack.get(object);
                  if (stacked) {
                    return stacked == other;
                  }
                  bitmask |= COMPARE_UNORDERED_FLAG;

                  // Recursively compare objects (susceptible to call stack limits).
                  stack.set(object, other);
                  var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                  stack['delete'](object);
                  return result;

                case symbolTag:
                  if (symbolValueOf) {
                    return symbolValueOf.call(object) == symbolValueOf.call(other);
                  }
                }
                return false;
              }

              /**
               * A specialized version of `baseIsEqualDeep` for objects with support for
               * partial deep comparisons.
               *
               * @private
               * @param {Object} object The object to compare.
               * @param {Object} other The other object to compare.
               * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
               * @param {Function} customizer The function to customize comparisons.
               * @param {Function} equalFunc The function to determine equivalents of values.
               * @param {Object} stack Tracks traversed `object` and `other` objects.
               * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
               */
              function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                  objProps = getAllKeys(object),
                  objLength = objProps.length,
                  othProps = getAllKeys(other),
                  othLength = othProps.length;

                if (objLength != othLength && !isPartial) {
                  return false;
                }
                var index = objLength;
                while (index--) {
                  var key = objProps[index];
                  if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                    return false;
                  }
                }
                // Assume cyclic values are equal.
                var stacked = stack.get(object);
                if (stacked && stack.get(other)) {
                  return stacked == other;
                }
                var result = true;
                stack.set(object, other);
                stack.set(other, object);

                var skipCtor = isPartial;
                while (++index < objLength) {
                  key = objProps[index];
                  var objValue = object[key],
                    othValue = other[key];

                  if (customizer) {
                    var compared = isPartial ?
                      customizer(othValue, objValue, key, other, object, stack) :
                      customizer(objValue, othValue, key, object, other, stack);
                  }
                  // Recursively compare objects (susceptible to call stack limits).
                  if (!(compared === undefined ?
                      (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack)) :
                      compared
                    )) {
                    result = false;
                    break;
                  }
                  skipCtor || (skipCtor = key == 'constructor');
                }
                if (result && !skipCtor) {
                  var objCtor = object.constructor,
                    othCtor = other.constructor;

                  // Non `Object` object instances with different constructors are not equal.
                  if (objCtor != othCtor &&
                    ('constructor' in object && 'constructor' in other) &&
                    !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                      typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                    result = false;
                  }
                }
                stack['delete'](object);
                stack['delete'](other);
                return result;
              }

              /**
               * A specialized version of `baseRest` which flattens the rest array.
               *
               * @private
               * @param {Function} func The function to apply a rest parameter to.
               * @returns {Function} Returns the new function.
               */
              function flatRest(func) {
                return setToString(overRest(func, undefined, flatten), func + '');
              }

              /**
               * Creates an array of own enumerable property names and symbols of `object`.
               *
               * @private
               * @param {Object} object The object to query.
               * @returns {Array} Returns the array of property names and symbols.
               */
              function getAllKeys(object) {
                return baseGetAllKeys(object, keys, getSymbols);
              }

              /**
               * Creates an array of own and inherited enumerable property names and
               * symbols of `object`.
               *
               * @private
               * @param {Object} object The object to query.
               * @returns {Array} Returns the array of property names and symbols.
               */
              function getAllKeysIn(object) {
                return baseGetAllKeys(object, keysIn, getSymbolsIn);
              }

              /**
               * Gets metadata for `func`.
               *
               * @private
               * @param {Function} func The function to query.
               * @returns {*} Returns the metadata for `func`.
               */
              var getData = !metaMap ? noop : function (func) {
                return metaMap.get(func);
              };

              /**
               * Gets the name of `func`.
               *
               * @private
               * @param {Function} func The function to query.
               * @returns {string} Returns the function name.
               */
              function getFuncName(func) {
                var result = (func.name + ''),
                  array = realNames[result],
                  length = hasOwnProperty.call(realNames, result) ? array.length : 0;

                while (length--) {
                  var data = array[length],
                    otherFunc = data.func;
                  if (otherFunc == null || otherFunc == func) {
                    return data.name;
                  }
                }
                return result;
              }

              /**
               * Gets the argument placeholder value for `func`.
               *
               * @private
               * @param {Function} func The function to inspect.
               * @returns {*} Returns the placeholder value.
               */
              function getHolder(func) {
                var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
                return object.placeholder;
              }

              /**
               * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
               * this function returns the custom method, otherwise it returns `baseIteratee`.
               * If arguments are provided, the chosen function is invoked with them and
               * its result is returned.
               *
               * @private
               * @param {*} [value] The value to convert to an iteratee.
               * @param {number} [arity] The arity of the created iteratee.
               * @returns {Function} Returns the chosen function or its result.
               */
              function getIteratee() {
                var result = lodash.iteratee || iteratee;
                result = result === iteratee ? baseIteratee : result;
                return arguments.length ? result(arguments[0], arguments[1]) : result;
              }

              /**
               * Gets the data for `map`.
               *
               * @private
               * @param {Object} map The map to query.
               * @param {string} key The reference key.
               * @returns {*} Returns the map data.
               */
              function getMapData(map, key) {
                var data = map.__data__;
                return isKeyable(key) ?
                  data[typeof key == 'string' ? 'string' : 'hash'] :
                  data.map;
              }

              /**
               * Gets the property names, values, and compare flags of `object`.
               *
               * @private
               * @param {Object} object The object to query.
               * @returns {Array} Returns the match data of `object`.
               */
              function getMatchData(object) {
                var result = keys(object),
                  length = result.length;

                while (length--) {
                  var key = result[length],
                    value = object[key];

                  result[length] = [key, value, isStrictComparable(value)];
                }
                return result;
              }

              /**
               * Gets the native function at `key` of `object`.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {string} key The key of the method to get.
               * @returns {*} Returns the function if it's native, else `undefined`.
               */
              function getNative(object, key) {
                var value = getValue(object, key);
                return baseIsNative(value) ? value : undefined;
              }

              /**
               * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
               *
               * @private
               * @param {*} value The value to query.
               * @returns {string} Returns the raw `toStringTag`.
               */
              function getRawTag(value) {
                var isOwn = hasOwnProperty.call(value, symToStringTag),
                  tag = value[symToStringTag];

                try {
                  value[symToStringTag] = undefined;
                  var unmasked = true;
                } catch (e) {}

                var result = nativeObjectToString.call(value);
                if (unmasked) {
                  if (isOwn) {
                    value[symToStringTag] = tag;
                  } else {
                    delete value[symToStringTag];
                  }
                }
                return result;
              }

              /**
               * Creates an array of the own enumerable symbols of `object`.
               *
               * @private
               * @param {Object} object The object to query.
               * @returns {Array} Returns the array of symbols.
               */
              var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
                if (object == null) {
                  return [];
                }
                object = Object(object);
                return arrayFilter(nativeGetSymbols(object), function (symbol) {
                  return propertyIsEnumerable.call(object, symbol);
                });
              };

              /**
               * Creates an array of the own and inherited enumerable symbols of `object`.
               *
               * @private
               * @param {Object} object The object to query.
               * @returns {Array} Returns the array of symbols.
               */
              var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
                var result = [];
                while (object) {
                  arrayPush(result, getSymbols(object));
                  object = getPrototype(object);
                }
                return result;
              };

              /**
               * Gets the `toStringTag` of `value`.
               *
               * @private
               * @param {*} value The value to query.
               * @returns {string} Returns the `toStringTag`.
               */
              var getTag = baseGetTag;

              // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
              if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                (Map && getTag(new Map) != mapTag) ||
                (Promise && getTag(Promise.resolve()) != promiseTag) ||
                (Set && getTag(new Set) != setTag) ||
                (WeakMap && getTag(new WeakMap) != weakMapTag)) {
                getTag = function (value) {
                  var result = baseGetTag(value),
                    Ctor = result == objectTag ? value.constructor : undefined,
                    ctorString = Ctor ? toSource(Ctor) : '';

                  if (ctorString) {
                    switch (ctorString) {
                    case dataViewCtorString:
                      return dataViewTag;
                    case mapCtorString:
                      return mapTag;
                    case promiseCtorString:
                      return promiseTag;
                    case setCtorString:
                      return setTag;
                    case weakMapCtorString:
                      return weakMapTag;
                    }
                  }
                  return result;
                };
              }

              /**
               * Gets the view, applying any `transforms` to the `start` and `end` positions.
               *
               * @private
               * @param {number} start The start of the view.
               * @param {number} end The end of the view.
               * @param {Array} transforms The transformations to apply to the view.
               * @returns {Object} Returns an object containing the `start` and `end`
               *  positions of the view.
               */
              function getView(start, end, transforms) {
                var index = -1,
                  length = transforms.length;

                while (++index < length) {
                  var data = transforms[index],
                    size = data.size;

                  switch (data.type) {
                  case 'drop':
                    start += size;
                    break;
                  case 'dropRight':
                    end -= size;
                    break;
                  case 'take':
                    end = nativeMin(end, start + size);
                    break;
                  case 'takeRight':
                    start = nativeMax(start, end - size);
                    break;
                  }
                }
                return { 'start': start, 'end': end };
              }

              /**
               * Extracts wrapper details from the `source` body comment.
               *
               * @private
               * @param {string} source The source to inspect.
               * @returns {Array} Returns the wrapper details.
               */
              function getWrapDetails(source) {
                var match = source.match(reWrapDetails);
                return match ? match[1].split(reSplitDetails) : [];
              }

              /**
               * Checks if `path` exists on `object`.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {Array|string} path The path to check.
               * @param {Function} hasFunc The function to check properties.
               * @returns {boolean} Returns `true` if `path` exists, else `false`.
               */
              function hasPath(object, path, hasFunc) {
                path = castPath(path, object);

                var index = -1,
                  length = path.length,
                  result = false;

                while (++index < length) {
                  var key = toKey(path[index]);
                  if (!(result = object != null && hasFunc(object, key))) {
                    break;
                  }
                  object = object[key];
                }
                if (result || ++index != length) {
                  return result;
                }
                length = object == null ? 0 : object.length;
                return !!length && isLength(length) && isIndex(key, length) &&
                  (isArray(object) || isArguments(object));
              }

              /**
               * Initializes an array clone.
               *
               * @private
               * @param {Array} array The array to clone.
               * @returns {Array} Returns the initialized clone.
               */
              function initCloneArray(array) {
                var length = array.length,
                  result = array.constructor(length);

                // Add properties assigned by `RegExp#exec`.
                if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                  result.index = array.index;
                  result.input = array.input;
                }
                return result;
              }

              /**
               * Initializes an object clone.
               *
               * @private
               * @param {Object} object The object to clone.
               * @returns {Object} Returns the initialized clone.
               */
              function initCloneObject(object) {
                return (typeof object.constructor == 'function' && !isPrototype(object)) ?
                  baseCreate(getPrototype(object)) :
                  {};
              }

              /**
               * Initializes an object clone based on its `toStringTag`.
               *
               * **Note:** This function only supports cloning values with tags of
               * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
               *
               * @private
               * @param {Object} object The object to clone.
               * @param {string} tag The `toStringTag` of the object to clone.
               * @param {Function} cloneFunc The function to clone values.
               * @param {boolean} [isDeep] Specify a deep clone.
               * @returns {Object} Returns the initialized clone.
               */
              function initCloneByTag(object, tag, cloneFunc, isDeep) {
                var Ctor = object.constructor;
                switch (tag) {
                case arrayBufferTag:
                  return cloneArrayBuffer(object);

                case boolTag:
                case dateTag:
                  return new Ctor(+object);

                case dataViewTag:
                  return cloneDataView(object, isDeep);

                case float32Tag:
                case float64Tag:
                case int8Tag:
                case int16Tag:
                case int32Tag:
                case uint8Tag:
                case uint8ClampedTag:
                case uint16Tag:
                case uint32Tag:
                  return cloneTypedArray(object, isDeep);

                case mapTag:
                  return cloneMap(object, isDeep, cloneFunc);

                case numberTag:
                case stringTag:
                  return new Ctor(object);

                case regexpTag:
                  return cloneRegExp(object);

                case setTag:
                  return cloneSet(object, isDeep, cloneFunc);

                case symbolTag:
                  return cloneSymbol(object);
                }
              }

              /**
               * Inserts wrapper `details` in a comment at the top of the `source` body.
               *
               * @private
               * @param {string} source The source to modify.
               * @returns {Array} details The details to insert.
               * @returns {string} Returns the modified source.
               */
              function insertWrapDetails(source, details) {
                var length = details.length;
                if (!length) {
                  return source;
                }
                var lastIndex = length - 1;
                details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
                details = details.join(length > 2 ? ', ' : ' ');
                return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
              }

              /**
               * Checks if `value` is a flattenable `arguments` object or array.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
               */
              function isFlattenable(value) {
                return isArray(value) || isArguments(value) ||
                  !!(spreadableSymbol && value && value[spreadableSymbol]);
              }

              /**
               * Checks if `value` is a valid array-like index.
               *
               * @private
               * @param {*} value The value to check.
               * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
               * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
               */
              function isIndex(value, length) {
                length = length == null ? MAX_SAFE_INTEGER : length;
                return !!length &&
                  (typeof value == 'number' || reIsUint.test(value)) &&
                  (value > -1 && value % 1 == 0 && value < length);
              }

              /**
               * Checks if the given arguments are from an iteratee call.
               *
               * @private
               * @param {*} value The potential iteratee value argument.
               * @param {*} index The potential iteratee index or key argument.
               * @param {*} object The potential iteratee object argument.
               * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
               *  else `false`.
               */
              function isIterateeCall(value, index, object) {
                if (!isObject(object)) {
                  return false;
                }
                var type = typeof index;
                if (type == 'number' ?
                  (isArrayLike(object) && isIndex(index, object.length)) :
                  (type == 'string' && index in object)
                ) {
                  return eq(object[index], value);
                }
                return false;
              }

              /**
               * Checks if `value` is a property name and not a property path.
               *
               * @private
               * @param {*} value The value to check.
               * @param {Object} [object] The object to query keys on.
               * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
               */
              function isKey(value, object) {
                if (isArray(value)) {
                  return false;
                }
                var type = typeof value;
                if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                  value == null || isSymbol(value)) {
                  return true;
                }
                return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                  (object != null && value in Object(object));
              }

              /**
               * Checks if `value` is suitable for use as unique object key.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
               */
              function isKeyable(value) {
                var type = typeof value;
                return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean') ?
                  (value !== '__proto__') :
                  (value === null);
              }

              /**
               * Checks if `func` has a lazy counterpart.
               *
               * @private
               * @param {Function} func The function to check.
               * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
               *  else `false`.
               */
              function isLaziable(func) {
                var funcName = getFuncName(func),
                  other = lodash[funcName];

                if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                  return false;
                }
                if (func === other) {
                  return true;
                }
                var data = getData(other);
                return !!data && func === data[0];
              }

              /**
               * Checks if `func` has its source masked.
               *
               * @private
               * @param {Function} func The function to check.
               * @returns {boolean} Returns `true` if `func` is masked, else `false`.
               */
              function isMasked(func) {
                return !!maskSrcKey && (maskSrcKey in func);
              }

              /**
               * Checks if `func` is capable of being masked.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
               */
              var isMaskable = coreJsData ? isFunction : stubFalse;

              /**
               * Checks if `value` is likely a prototype object.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
               */
              function isPrototype(value) {
                var Ctor = value && value.constructor,
                  proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                return value === proto;
              }

              /**
               * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` if suitable for strict
               *  equality comparisons, else `false`.
               */
              function isStrictComparable(value) {
                return value === value && !isObject(value);
              }

              /**
               * A specialized version of `matchesProperty` for source values suitable
               * for strict equality comparisons, i.e. `===`.
               *
               * @private
               * @param {string} key The key of the property to get.
               * @param {*} srcValue The value to match.
               * @returns {Function} Returns the new spec function.
               */
              function matchesStrictComparable(key, srcValue) {
                return function (object) {
                  if (object == null) {
                    return false;
                  }
                  return object[key] === srcValue &&
                    (srcValue !== undefined || (key in Object(object)));
                };
              }

              /**
               * A specialized version of `_.memoize` which clears the memoized function's
               * cache when it exceeds `MAX_MEMOIZE_SIZE`.
               *
               * @private
               * @param {Function} func The function to have its output memoized.
               * @returns {Function} Returns the new memoized function.
               */
              function memoizeCapped(func) {
                var result = memoize(func, function (key) {
                  if (cache.size === MAX_MEMOIZE_SIZE) {
                    cache.clear();
                  }
                  return key;
                });

                var cache = result.cache;
                return result;
              }

              /**
               * Merges the function metadata of `source` into `data`.
               *
               * Merging metadata reduces the number of wrappers used to invoke a function.
               * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
               * may be applied regardless of execution order. Methods like `_.ary` and
               * `_.rearg` modify function arguments, making the order in which they are
               * executed important, preventing the merging of metadata. However, we make
               * an exception for a safe combined case where curried functions have `_.ary`
               * and or `_.rearg` applied.
               *
               * @private
               * @param {Array} data The destination metadata.
               * @param {Array} source The source metadata.
               * @returns {Array} Returns `data`.
               */
              function mergeData(data, source) {
                var bitmask = data[1],
                  srcBitmask = source[1],
                  newBitmask = bitmask | srcBitmask,
                  isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

                var isCombo =
                  ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
                  ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
                  ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

                // Exit early if metadata can't be merged.
                if (!(isCommon || isCombo)) {
                  return data;
                }
                // Use source `thisArg` if available.
                if (srcBitmask & WRAP_BIND_FLAG) {
                  data[2] = source[2];
                  // Set when currying a bound function.
                  newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                }
                // Compose partial arguments.
                var value = source[3];
                if (value) {
                  var partials = data[3];
                  data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                  data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                }
                // Compose partial right arguments.
                value = source[5];
                if (value) {
                  partials = data[5];
                  data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                  data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                }
                // Use source `argPos` if available.
                value = source[7];
                if (value) {
                  data[7] = value;
                }
                // Use source `ary` if it's smaller.
                if (srcBitmask & WRAP_ARY_FLAG) {
                  data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                }
                // Use source `arity` if one is not provided.
                if (data[9] == null) {
                  data[9] = source[9];
                }
                // Use source `func` and merge bitmasks.
                data[0] = source[0];
                data[1] = newBitmask;

                return data;
              }

              /**
               * This function is like
               * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
               * except that it includes inherited enumerable properties.
               *
               * @private
               * @param {Object} object The object to query.
               * @returns {Array} Returns the array of property names.
               */
              function nativeKeysIn(object) {
                var result = [];
                if (object != null) {
                  for (var key in Object(object)) {
                    result.push(key);
                  }
                }
                return result;
              }

              /**
               * Converts `value` to a string using `Object.prototype.toString`.
               *
               * @private
               * @param {*} value The value to convert.
               * @returns {string} Returns the converted string.
               */
              function objectToString(value) {
                return nativeObjectToString.call(value);
              }

              /**
               * A specialized version of `baseRest` which transforms the rest array.
               *
               * @private
               * @param {Function} func The function to apply a rest parameter to.
               * @param {number} [start=func.length-1] The start position of the rest parameter.
               * @param {Function} transform The rest array transform.
               * @returns {Function} Returns the new function.
               */
              function overRest(func, start, transform) {
                start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
                return function () {
                  var args = arguments,
                    index = -1,
                    length = nativeMax(args.length - start, 0),
                    array = Array(length);

                  while (++index < length) {
                    array[index] = args[start + index];
                  }
                  index = -1;
                  var otherArgs = Array(start + 1);
                  while (++index < start) {
                    otherArgs[index] = args[index];
                  }
                  otherArgs[start] = transform(array);
                  return apply(func, this, otherArgs);
                };
              }

              /**
               * Gets the parent value at `path` of `object`.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {Array} path The path to get the parent value of.
               * @returns {*} Returns the parent value.
               */
              function parent(object, path) {
                return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
              }

              /**
               * Reorder `array` according to the specified indexes where the element at
               * the first index is assigned as the first element, the element at
               * the second index is assigned as the second element, and so on.
               *
               * @private
               * @param {Array} array The array to reorder.
               * @param {Array} indexes The arranged array indexes.
               * @returns {Array} Returns `array`.
               */
              function reorder(array, indexes) {
                var arrLength = array.length,
                  length = nativeMin(indexes.length, arrLength),
                  oldArray = copyArray(array);

                while (length--) {
                  var index = indexes[length];
                  array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
                }
                return array;
              }

              /**
               * Sets metadata for `func`.
               *
               * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
               * period of time, it will trip its breaker and transition to an identity
               * function to avoid garbage collection pauses in V8. See
               * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
               * for more details.
               *
               * @private
               * @param {Function} func The function to associate metadata with.
               * @param {*} data The metadata.
               * @returns {Function} Returns `func`.
               */
              var setData = shortOut(baseSetData);

              /**
               * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
               *
               * @private
               * @param {Function} func The function to delay.
               * @param {number} wait The number of milliseconds to delay invocation.
               * @returns {number|Object} Returns the timer id or timeout object.
               */
              var setTimeout = ctxSetTimeout || function (func, wait) {
                return root.setTimeout(func, wait);
              };

              /**
               * Sets the `toString` method of `func` to return `string`.
               *
               * @private
               * @param {Function} func The function to modify.
               * @param {Function} string The `toString` result.
               * @returns {Function} Returns `func`.
               */
              var setToString = shortOut(baseSetToString);

              /**
               * Sets the `toString` method of `wrapper` to mimic the source of `reference`
               * with wrapper details in a comment at the top of the source body.
               *
               * @private
               * @param {Function} wrapper The function to modify.
               * @param {Function} reference The reference function.
               * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
               * @returns {Function} Returns `wrapper`.
               */
              function setWrapToString(wrapper, reference, bitmask) {
                var source = (reference + '');
                return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
              }

              /**
               * Creates a function that'll short out and invoke `identity` instead
               * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
               * milliseconds.
               *
               * @private
               * @param {Function} func The function to restrict.
               * @returns {Function} Returns the new shortable function.
               */
              function shortOut(func) {
                var count = 0,
                  lastCalled = 0;

                return function () {
                  var stamp = nativeNow(),
                    remaining = HOT_SPAN - (stamp - lastCalled);

                  lastCalled = stamp;
                  if (remaining > 0) {
                    if (++count >= HOT_COUNT) {
                      return arguments[0];
                    }
                  } else {
                    count = 0;
                  }
                  return func.apply(undefined, arguments);
                };
              }

              /**
               * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
               *
               * @private
               * @param {Array} array The array to shuffle.
               * @param {number} [size=array.length] The size of `array`.
               * @returns {Array} Returns `array`.
               */
              function shuffleSelf(array, size) {
                var index = -1,
                  length = array.length,
                  lastIndex = length - 1;

                size = size === undefined ? length : size;
                while (++index < size) {
                  var rand = baseRandom(index, lastIndex),
                    value = array[rand];

                  array[rand] = array[index];
                  array[index] = value;
                }
                array.length = size;
                return array;
              }

              /**
               * Converts `string` to a property path array.
               *
               * @private
               * @param {string} string The string to convert.
               * @returns {Array} Returns the property path array.
               */
              var stringToPath = memoizeCapped(function (string) {
                var result = [];
                if (reLeadingDot.test(string)) {
                  result.push('');
                }
                string.replace(rePropName, function (match, number, quote, string) {
                  result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
                });
                return result;
              });

              /**
               * Converts `value` to a string key if it's not a string or symbol.
               *
               * @private
               * @param {*} value The value to inspect.
               * @returns {string|symbol} Returns the key.
               */
              function toKey(value) {
                if (typeof value == 'string' || isSymbol(value)) {
                  return value;
                }
                var result = (value + '');
                return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
              }

              /**
               * Converts `func` to its source code.
               *
               * @private
               * @param {Function} func The function to convert.
               * @returns {string} Returns the source code.
               */
              function toSource(func) {
                if (func != null) {
                  try {
                    return funcToString.call(func);
                  } catch (e) {}
                  try {
                    return (func + '');
                  } catch (e) {}
                }
                return '';
              }

              /**
               * Updates wrapper `details` based on `bitmask` flags.
               *
               * @private
               * @returns {Array} details The details to modify.
               * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
               * @returns {Array} Returns `details`.
               */
              function updateWrapDetails(details, bitmask) {
                arrayEach(wrapFlags, function (pair) {
                  var value = '_.' + pair[0];
                  if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
                    details.push(value);
                  }
                });
                return details.sort();
              }

              /**
               * Creates a clone of `wrapper`.
               *
               * @private
               * @param {Object} wrapper The wrapper to clone.
               * @returns {Object} Returns the cloned wrapper.
               */
              function wrapperClone(wrapper) {
                if (wrapper instanceof LazyWrapper) {
                  return wrapper.clone();
                }
                var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                result.__actions__ = copyArray(wrapper.__actions__);
                result.__index__ = wrapper.__index__;
                result.__values__ = wrapper.__values__;
                return result;
              }

              /*------------------------------------------------------------------------*/

              /**
               * Creates an array of elements split into groups the length of `size`.
               * If `array` can't be split evenly, the final chunk will be the remaining
               * elements.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Array
               * @param {Array} array The array to process.
               * @param {number} [size=1] The length of each chunk
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {Array} Returns the new array of chunks.
               * @example
               *
               * _.chunk(['a', 'b', 'c', 'd'], 2);
               * // => [['a', 'b'], ['c', 'd']]
               *
               * _.chunk(['a', 'b', 'c', 'd'], 3);
               * // => [['a', 'b', 'c'], ['d']]
               */
              function chunk(array, size, guard) {
                if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
                  size = 1;
                } else {
                  size = nativeMax(toInteger(size), 0);
                }
                var length = array == null ? 0 : array.length;
                if (!length || size < 1) {
                  return [];
                }
                var index = 0,
                  resIndex = 0,
                  result = Array(nativeCeil(length / size));

                while (index < length) {
                  result[resIndex++] = baseSlice(array, index, (index += size));
                }
                return result;
              }

              /**
               * Creates an array with all falsey values removed. The values `false`, `null`,
               * `0`, `""`, `undefined`, and `NaN` are falsey.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {Array} array The array to compact.
               * @returns {Array} Returns the new array of filtered values.
               * @example
               *
               * _.compact([0, 1, false, 2, '', 3]);
               * // => [1, 2, 3]
               */
              function compact(array) {
                var index = -1,
                  length = array == null ? 0 : array.length,
                  resIndex = 0,
                  result = [];

                while (++index < length) {
                  var value = array[index];
                  if (value) {
                    result[resIndex++] = value;
                  }
                }
                return result;
              }

              /**
               * Creates a new array concatenating `array` with any additional arrays
               * and/or values.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to concatenate.
               * @param {...*} [values] The values to concatenate.
               * @returns {Array} Returns the new concatenated array.
               * @example
               *
               * var array = [1];
               * var other = _.concat(array, 2, [3], [[4]]);
               *
               * console.log(other);
               * // => [1, 2, 3, [4]]
               *
               * console.log(array);
               * // => [1]
               */
              function concat() {
                var length = arguments.length;
                if (!length) {
                  return [];
                }
                var args = Array(length - 1),
                  array = arguments[0],
                  index = length;

                while (index--) {
                  args[index - 1] = arguments[index];
                }
                return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
              }

              /**
               * Creates an array of `array` values not included in the other given arrays
               * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
               * for equality comparisons. The order and references of result values are
               * determined by the first array.
               *
               * **Note:** Unlike `_.pullAll`, this method returns a new array.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @param {...Array} [values] The values to exclude.
               * @returns {Array} Returns the new array of filtered values.
               * @see _.without, _.xor
               * @example
               *
               * _.difference([2, 1], [2, 3]);
               * // => [1]
               */
              var difference = baseRest(function (array, values) {
                return isArrayLikeObject(array) ?
                  baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) :
                  [];
              });

              /**
               * This method is like `_.difference` except that it accepts `iteratee` which
               * is invoked for each element of `array` and `values` to generate the criterion
               * by which they're compared. The order and references of result values are
               * determined by the first array. The iteratee is invoked with one argument:
               * (value).
               *
               * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @param {...Array} [values] The values to exclude.
               * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
               * @returns {Array} Returns the new array of filtered values.
               * @example
               *
               * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
               * // => [1.2]
               *
               * // The `_.property` iteratee shorthand.
               * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
               * // => [{ 'x': 2 }]
               */
              var differenceBy = baseRest(function (array, values) {
                var iteratee = last(values);
                if (isArrayLikeObject(iteratee)) {
                  iteratee = undefined;
                }
                return isArrayLikeObject(array) ?
                  baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) :
                  [];
              });

              /**
               * This method is like `_.difference` except that it accepts `comparator`
               * which is invoked to compare elements of `array` to `values`. The order and
               * references of result values are determined by the first array. The comparator
               * is invoked with two arguments: (arrVal, othVal).
               *
               * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @param {...Array} [values] The values to exclude.
               * @param {Function} [comparator] The comparator invoked per element.
               * @returns {Array} Returns the new array of filtered values.
               * @example
               *
               * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
               *
               * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
               * // => [{ 'x': 2, 'y': 1 }]
               */
              var differenceWith = baseRest(function (array, values) {
                var comparator = last(values);
                if (isArrayLikeObject(comparator)) {
                  comparator = undefined;
                }
                return isArrayLikeObject(array) ?
                  baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) :
                  [];
              });

              /**
               * Creates a slice of `array` with `n` elements dropped from the beginning.
               *
               * @static
               * @memberOf _
               * @since 0.5.0
               * @category Array
               * @param {Array} array The array to query.
               * @param {number} [n=1] The number of elements to drop.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {Array} Returns the slice of `array`.
               * @example
               *
               * _.drop([1, 2, 3]);
               * // => [2, 3]
               *
               * _.drop([1, 2, 3], 2);
               * // => [3]
               *
               * _.drop([1, 2, 3], 5);
               * // => []
               *
               * _.drop([1, 2, 3], 0);
               * // => [1, 2, 3]
               */
              function drop(array, n, guard) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                  return [];
                }
                n = (guard || n === undefined) ? 1 : toInteger(n);
                return baseSlice(array, n < 0 ? 0 : n, length);
              }

              /**
               * Creates a slice of `array` with `n` elements dropped from the end.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Array
               * @param {Array} array The array to query.
               * @param {number} [n=1] The number of elements to drop.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {Array} Returns the slice of `array`.
               * @example
               *
               * _.dropRight([1, 2, 3]);
               * // => [1, 2]
               *
               * _.dropRight([1, 2, 3], 2);
               * // => [1]
               *
               * _.dropRight([1, 2, 3], 5);
               * // => []
               *
               * _.dropRight([1, 2, 3], 0);
               * // => [1, 2, 3]
               */
              function dropRight(array, n, guard) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                  return [];
                }
                n = (guard || n === undefined) ? 1 : toInteger(n);
                n = length - n;
                return baseSlice(array, 0, n < 0 ? 0 : n);
              }

              /**
               * Creates a slice of `array` excluding elements dropped from the end.
               * Elements are dropped until `predicate` returns falsey. The predicate is
               * invoked with three arguments: (value, index, array).
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Array
               * @param {Array} array The array to query.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @returns {Array} Returns the slice of `array`.
               * @example
               *
               * var users = [
               *   { 'user': 'barney',  'active': true },
               *   { 'user': 'fred',    'active': false },
               *   { 'user': 'pebbles', 'active': false }
               * ];
               *
               * _.dropRightWhile(users, function(o) { return !o.active; });
               * // => objects for ['barney']
               *
               * // The `_.matches` iteratee shorthand.
               * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
               * // => objects for ['barney', 'fred']
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.dropRightWhile(users, ['active', false]);
               * // => objects for ['barney']
               *
               * // The `_.property` iteratee shorthand.
               * _.dropRightWhile(users, 'active');
               * // => objects for ['barney', 'fred', 'pebbles']
               */
              function dropRightWhile(array, predicate) {
                return (array && array.length) ?
                  baseWhile(array, getIteratee(predicate, 3), true, true) :
                  [];
              }

              /**
               * Creates a slice of `array` excluding elements dropped from the beginning.
               * Elements are dropped until `predicate` returns falsey. The predicate is
               * invoked with three arguments: (value, index, array).
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Array
               * @param {Array} array The array to query.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @returns {Array} Returns the slice of `array`.
               * @example
               *
               * var users = [
               *   { 'user': 'barney',  'active': false },
               *   { 'user': 'fred',    'active': false },
               *   { 'user': 'pebbles', 'active': true }
               * ];
               *
               * _.dropWhile(users, function(o) { return !o.active; });
               * // => objects for ['pebbles']
               *
               * // The `_.matches` iteratee shorthand.
               * _.dropWhile(users, { 'user': 'barney', 'active': false });
               * // => objects for ['fred', 'pebbles']
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.dropWhile(users, ['active', false]);
               * // => objects for ['pebbles']
               *
               * // The `_.property` iteratee shorthand.
               * _.dropWhile(users, 'active');
               * // => objects for ['barney', 'fred', 'pebbles']
               */
              function dropWhile(array, predicate) {
                return (array && array.length) ?
                  baseWhile(array, getIteratee(predicate, 3), true) :
                  [];
              }

              /**
               * Fills elements of `array` with `value` from `start` up to, but not
               * including, `end`.
               *
               * **Note:** This method mutates `array`.
               *
               * @static
               * @memberOf _
               * @since 3.2.0
               * @category Array
               * @param {Array} array The array to fill.
               * @param {*} value The value to fill `array` with.
               * @param {number} [start=0] The start position.
               * @param {number} [end=array.length] The end position.
               * @returns {Array} Returns `array`.
               * @example
               *
               * var array = [1, 2, 3];
               *
               * _.fill(array, 'a');
               * console.log(array);
               * // => ['a', 'a', 'a']
               *
               * _.fill(Array(3), 2);
               * // => [2, 2, 2]
               *
               * _.fill([4, 6, 8, 10], '*', 1, 3);
               * // => [4, '*', '*', 10]
               */
              function fill(array, value, start, end) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                  return [];
                }
                if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                  start = 0;
                  end = length;
                }
                return baseFill(array, value, start, end);
              }

              /**
               * This method is like `_.find` except that it returns the index of the first
               * element `predicate` returns truthy for instead of the element itself.
               *
               * @static
               * @memberOf _
               * @since 1.1.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @param {number} [fromIndex=0] The index to search from.
               * @returns {number} Returns the index of the found element, else `-1`.
               * @example
               *
               * var users = [
               *   { 'user': 'barney',  'active': false },
               *   { 'user': 'fred',    'active': false },
               *   { 'user': 'pebbles', 'active': true }
               * ];
               *
               * _.findIndex(users, function(o) { return o.user == 'barney'; });
               * // => 0
               *
               * // The `_.matches` iteratee shorthand.
               * _.findIndex(users, { 'user': 'fred', 'active': false });
               * // => 1
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.findIndex(users, ['active', false]);
               * // => 0
               *
               * // The `_.property` iteratee shorthand.
               * _.findIndex(users, 'active');
               * // => 2
               */
              function findIndex(array, predicate, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                  return -1;
                }
                var index = fromIndex == null ? 0 : toInteger(fromIndex);
                if (index < 0) {
                  index = nativeMax(length + index, 0);
                }
                return baseFindIndex(array, getIteratee(predicate, 3), index);
              }

              /**
               * This method is like `_.findIndex` except that it iterates over elements
               * of `collection` from right to left.
               *
               * @static
               * @memberOf _
               * @since 2.0.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @param {number} [fromIndex=array.length-1] The index to search from.
               * @returns {number} Returns the index of the found element, else `-1`.
               * @example
               *
               * var users = [
               *   { 'user': 'barney',  'active': true },
               *   { 'user': 'fred',    'active': false },
               *   { 'user': 'pebbles', 'active': false }
               * ];
               *
               * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
               * // => 2
               *
               * // The `_.matches` iteratee shorthand.
               * _.findLastIndex(users, { 'user': 'barney', 'active': true });
               * // => 0
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.findLastIndex(users, ['active', false]);
               * // => 2
               *
               * // The `_.property` iteratee shorthand.
               * _.findLastIndex(users, 'active');
               * // => 0
               */
              function findLastIndex(array, predicate, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                  return -1;
                }
                var index = length - 1;
                if (fromIndex !== undefined) {
                  index = toInteger(fromIndex);
                  index = fromIndex < 0 ?
                    nativeMax(length + index, 0) :
                    nativeMin(index, length - 1);
                }
                return baseFindIndex(array, getIteratee(predicate, 3), index, true);
              }

              /**
               * Flattens `array` a single level deep.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {Array} array The array to flatten.
               * @returns {Array} Returns the new flattened array.
               * @example
               *
               * _.flatten([1, [2, [3, [4]], 5]]);
               * // => [1, 2, [3, [4]], 5]
               */
              function flatten(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseFlatten(array, 1) : [];
              }

              /**
               * Recursively flattens `array`.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Array
               * @param {Array} array The array to flatten.
               * @returns {Array} Returns the new flattened array.
               * @example
               *
               * _.flattenDeep([1, [2, [3, [4]], 5]]);
               * // => [1, 2, 3, 4, 5]
               */
              function flattenDeep(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseFlatten(array, INFINITY) : [];
              }

              /**
               * Recursively flatten `array` up to `depth` times.
               *
               * @static
               * @memberOf _
               * @since 4.4.0
               * @category Array
               * @param {Array} array The array to flatten.
               * @param {number} [depth=1] The maximum recursion depth.
               * @returns {Array} Returns the new flattened array.
               * @example
               *
               * var array = [1, [2, [3, [4]], 5]];
               *
               * _.flattenDepth(array, 1);
               * // => [1, 2, [3, [4]], 5]
               *
               * _.flattenDepth(array, 2);
               * // => [1, 2, 3, [4], 5]
               */
              function flattenDepth(array, depth) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                  return [];
                }
                depth = depth === undefined ? 1 : toInteger(depth);
                return baseFlatten(array, depth);
              }

              /**
               * The inverse of `_.toPairs`; this method returns an object composed
               * from key-value `pairs`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} pairs The key-value pairs.
               * @returns {Object} Returns the new object.
               * @example
               *
               * _.fromPairs([['a', 1], ['b', 2]]);
               * // => { 'a': 1, 'b': 2 }
               */
              function fromPairs(pairs) {
                var index = -1,
                  length = pairs == null ? 0 : pairs.length,
                  result = {};

                while (++index < length) {
                  var pair = pairs[index];
                  result[pair[0]] = pair[1];
                }
                return result;
              }

              /**
               * Gets the first element of `array`.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @alias first
               * @category Array
               * @param {Array} array The array to query.
               * @returns {*} Returns the first element of `array`.
               * @example
               *
               * _.head([1, 2, 3]);
               * // => 1
               *
               * _.head([]);
               * // => undefined
               */
              function head(array) {
                return (array && array.length) ? array[0] : undefined;
              }

              /**
               * Gets the index at which the first occurrence of `value` is found in `array`
               * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
               * for equality comparisons. If `fromIndex` is negative, it's used as the
               * offset from the end of `array`.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} [fromIndex=0] The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               * @example
               *
               * _.indexOf([1, 2, 1, 2], 2);
               * // => 1
               *
               * // Search from the `fromIndex`.
               * _.indexOf([1, 2, 1, 2], 2, 2);
               * // => 3
               */
              function indexOf(array, value, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                  return -1;
                }
                var index = fromIndex == null ? 0 : toInteger(fromIndex);
                if (index < 0) {
                  index = nativeMax(length + index, 0);
                }
                return baseIndexOf(array, value, index);
              }

              /**
               * Gets all but the last element of `array`.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {Array} array The array to query.
               * @returns {Array} Returns the slice of `array`.
               * @example
               *
               * _.initial([1, 2, 3]);
               * // => [1, 2]
               */
              function initial(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseSlice(array, 0, -1) : [];
              }

              /**
               * Creates an array of unique values that are included in all given arrays
               * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
               * for equality comparisons. The order and references of result values are
               * determined by the first array.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {...Array} [arrays] The arrays to inspect.
               * @returns {Array} Returns the new array of intersecting values.
               * @example
               *
               * _.intersection([2, 1], [2, 3]);
               * // => [2]
               */
              var intersection = baseRest(function (arrays) {
                var mapped = arrayMap(arrays, castArrayLikeObject);
                return (mapped.length && mapped[0] === arrays[0]) ?
                  baseIntersection(mapped) :
                  [];
              });

              /**
               * This method is like `_.intersection` except that it accepts `iteratee`
               * which is invoked for each element of each `arrays` to generate the criterion
               * by which they're compared. The order and references of result values are
               * determined by the first array. The iteratee is invoked with one argument:
               * (value).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {...Array} [arrays] The arrays to inspect.
               * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
               * @returns {Array} Returns the new array of intersecting values.
               * @example
               *
               * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
               * // => [2.1]
               *
               * // The `_.property` iteratee shorthand.
               * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
               * // => [{ 'x': 1 }]
               */
              var intersectionBy = baseRest(function (arrays) {
                var iteratee = last(arrays),
                  mapped = arrayMap(arrays, castArrayLikeObject);

                if (iteratee === last(mapped)) {
                  iteratee = undefined;
                } else {
                  mapped.pop();
                }
                return (mapped.length && mapped[0] === arrays[0]) ?
                  baseIntersection(mapped, getIteratee(iteratee, 2)) :
                  [];
              });

              /**
               * This method is like `_.intersection` except that it accepts `comparator`
               * which is invoked to compare elements of `arrays`. The order and references
               * of result values are determined by the first array. The comparator is
               * invoked with two arguments: (arrVal, othVal).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {...Array} [arrays] The arrays to inspect.
               * @param {Function} [comparator] The comparator invoked per element.
               * @returns {Array} Returns the new array of intersecting values.
               * @example
               *
               * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
               * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
               *
               * _.intersectionWith(objects, others, _.isEqual);
               * // => [{ 'x': 1, 'y': 2 }]
               */
              var intersectionWith = baseRest(function (arrays) {
                var comparator = last(arrays),
                  mapped = arrayMap(arrays, castArrayLikeObject);

                comparator = typeof comparator == 'function' ? comparator : undefined;
                if (comparator) {
                  mapped.pop();
                }
                return (mapped.length && mapped[0] === arrays[0]) ?
                  baseIntersection(mapped, undefined, comparator) :
                  [];
              });

              /**
               * Converts all elements in `array` into a string separated by `separator`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to convert.
               * @param {string} [separator=','] The element separator.
               * @returns {string} Returns the joined string.
               * @example
               *
               * _.join(['a', 'b', 'c'], '~');
               * // => 'a~b~c'
               */
              function join(array, separator) {
                return array == null ? '' : nativeJoin.call(array, separator);
              }

              /**
               * Gets the last element of `array`.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {Array} array The array to query.
               * @returns {*} Returns the last element of `array`.
               * @example
               *
               * _.last([1, 2, 3]);
               * // => 3
               */
              function last(array) {
                var length = array == null ? 0 : array.length;
                return length ? array[length - 1] : undefined;
              }

              /**
               * This method is like `_.indexOf` except that it iterates over elements of
               * `array` from right to left.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} [fromIndex=array.length-1] The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               * @example
               *
               * _.lastIndexOf([1, 2, 1, 2], 2);
               * // => 3
               *
               * // Search from the `fromIndex`.
               * _.lastIndexOf([1, 2, 1, 2], 2, 2);
               * // => 1
               */
              function lastIndexOf(array, value, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                  return -1;
                }
                var index = length;
                if (fromIndex !== undefined) {
                  index = toInteger(fromIndex);
                  index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                }
                return value === value ?
                  strictLastIndexOf(array, value, index) :
                  baseFindIndex(array, baseIsNaN, index, true);
              }

              /**
               * Gets the element at index `n` of `array`. If `n` is negative, the nth
               * element from the end is returned.
               *
               * @static
               * @memberOf _
               * @since 4.11.0
               * @category Array
               * @param {Array} array The array to query.
               * @param {number} [n=0] The index of the element to return.
               * @returns {*} Returns the nth element of `array`.
               * @example
               *
               * var array = ['a', 'b', 'c', 'd'];
               *
               * _.nth(array, 1);
               * // => 'b'
               *
               * _.nth(array, -2);
               * // => 'c';
               */
              function nth(array, n) {
                return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
              }

              /**
               * Removes all given values from `array` using
               * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
               * for equality comparisons.
               *
               * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
               * to remove elements from an array by predicate.
               *
               * @static
               * @memberOf _
               * @since 2.0.0
               * @category Array
               * @param {Array} array The array to modify.
               * @param {...*} [values] The values to remove.
               * @returns {Array} Returns `array`.
               * @example
               *
               * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
               *
               * _.pull(array, 'a', 'c');
               * console.log(array);
               * // => ['b', 'b']
               */
              var pull = baseRest(pullAll);

              /**
               * This method is like `_.pull` except that it accepts an array of values to remove.
               *
               * **Note:** Unlike `_.difference`, this method mutates `array`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to modify.
               * @param {Array} values The values to remove.
               * @returns {Array} Returns `array`.
               * @example
               *
               * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
               *
               * _.pullAll(array, ['a', 'c']);
               * console.log(array);
               * // => ['b', 'b']
               */
              function pullAll(array, values) {
                return (array && array.length && values && values.length) ?
                  basePullAll(array, values) :
                  array;
              }

              /**
               * This method is like `_.pullAll` except that it accepts `iteratee` which is
               * invoked for each element of `array` and `values` to generate the criterion
               * by which they're compared. The iteratee is invoked with one argument: (value).
               *
               * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to modify.
               * @param {Array} values The values to remove.
               * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
               * @returns {Array} Returns `array`.
               * @example
               *
               * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
               *
               * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
               * console.log(array);
               * // => [{ 'x': 2 }]
               */
              function pullAllBy(array, values, iteratee) {
                return (array && array.length && values && values.length) ?
                  basePullAll(array, values, getIteratee(iteratee, 2)) :
                  array;
              }

              /**
               * This method is like `_.pullAll` except that it accepts `comparator` which
               * is invoked to compare elements of `array` to `values`. The comparator is
               * invoked with two arguments: (arrVal, othVal).
               *
               * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
               *
               * @static
               * @memberOf _
               * @since 4.6.0
               * @category Array
               * @param {Array} array The array to modify.
               * @param {Array} values The values to remove.
               * @param {Function} [comparator] The comparator invoked per element.
               * @returns {Array} Returns `array`.
               * @example
               *
               * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
               *
               * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
               * console.log(array);
               * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
               */
              function pullAllWith(array, values, comparator) {
                return (array && array.length && values && values.length) ?
                  basePullAll(array, values, undefined, comparator) :
                  array;
              }

              /**
               * Removes elements from `array` corresponding to `indexes` and returns an
               * array of removed elements.
               *
               * **Note:** Unlike `_.at`, this method mutates `array`.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Array
               * @param {Array} array The array to modify.
               * @param {...(number|number[])} [indexes] The indexes of elements to remove.
               * @returns {Array} Returns the new array of removed elements.
               * @example
               *
               * var array = ['a', 'b', 'c', 'd'];
               * var pulled = _.pullAt(array, [1, 3]);
               *
               * console.log(array);
               * // => ['a', 'c']
               *
               * console.log(pulled);
               * // => ['b', 'd']
               */
              var pullAt = flatRest(function (array, indexes) {
                var length = array == null ? 0 : array.length,
                  result = baseAt(array, indexes);

                basePullAt(array, arrayMap(indexes, function (index) {
                  return isIndex(index, length) ? +index : index;
                }).sort(compareAscending));

                return result;
              });

              /**
               * Removes all elements from `array` that `predicate` returns truthy for
               * and returns an array of the removed elements. The predicate is invoked
               * with three arguments: (value, index, array).
               *
               * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
               * to pull elements from an array by value.
               *
               * @static
               * @memberOf _
               * @since 2.0.0
               * @category Array
               * @param {Array} array The array to modify.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @returns {Array} Returns the new array of removed elements.
               * @example
               *
               * var array = [1, 2, 3, 4];
               * var evens = _.remove(array, function(n) {
               *   return n % 2 == 0;
               * });
               *
               * console.log(array);
               * // => [1, 3]
               *
               * console.log(evens);
               * // => [2, 4]
               */
              function remove(array, predicate) {
                var result = [];
                if (!(array && array.length)) {
                  return result;
                }
                var index = -1,
                  indexes = [],
                  length = array.length;

                predicate = getIteratee(predicate, 3);
                while (++index < length) {
                  var value = array[index];
                  if (predicate(value, index, array)) {
                    result.push(value);
                    indexes.push(index);
                  }
                }
                basePullAt(array, indexes);
                return result;
              }

              /**
               * Reverses `array` so that the first element becomes the last, the second
               * element becomes the second to last, and so on.
               *
               * **Note:** This method mutates `array` and is based on
               * [`Array#reverse`](https://mdn.io/Array/reverse).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to modify.
               * @returns {Array} Returns `array`.
               * @example
               *
               * var array = [1, 2, 3];
               *
               * _.reverse(array);
               * // => [3, 2, 1]
               *
               * console.log(array);
               * // => [3, 2, 1]
               */
              function reverse(array) {
                return array == null ? array : nativeReverse.call(array);
              }

              /**
               * Creates a slice of `array` from `start` up to, but not including, `end`.
               *
               * **Note:** This method is used instead of
               * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
               * returned.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Array
               * @param {Array} array The array to slice.
               * @param {number} [start=0] The start position.
               * @param {number} [end=array.length] The end position.
               * @returns {Array} Returns the slice of `array`.
               */
              function slice(array, start, end) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                  return [];
                }
                if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                  start = 0;
                  end = length;
                } else {
                  start = start == null ? 0 : toInteger(start);
                  end = end === undefined ? length : toInteger(end);
                }
                return baseSlice(array, start, end);
              }

              /**
               * Uses a binary search to determine the lowest index at which `value`
               * should be inserted into `array` in order to maintain its sort order.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {Array} array The sorted array to inspect.
               * @param {*} value The value to evaluate.
               * @returns {number} Returns the index at which `value` should be inserted
               *  into `array`.
               * @example
               *
               * _.sortedIndex([30, 50], 40);
               * // => 1
               */
              function sortedIndex(array, value) {
                return baseSortedIndex(array, value);
              }

              /**
               * This method is like `_.sortedIndex` except that it accepts `iteratee`
               * which is invoked for `value` and each element of `array` to compute their
               * sort ranking. The iteratee is invoked with one argument: (value).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The sorted array to inspect.
               * @param {*} value The value to evaluate.
               * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
               * @returns {number} Returns the index at which `value` should be inserted
               *  into `array`.
               * @example
               *
               * var objects = [{ 'x': 4 }, { 'x': 5 }];
               *
               * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
               * // => 0
               *
               * // The `_.property` iteratee shorthand.
               * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
               * // => 0
               */
              function sortedIndexBy(array, value, iteratee) {
                return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
              }

              /**
               * This method is like `_.indexOf` except that it performs a binary
               * search on a sorted `array`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @returns {number} Returns the index of the matched value, else `-1`.
               * @example
               *
               * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
               * // => 1
               */
              function sortedIndexOf(array, value) {
                var length = array == null ? 0 : array.length;
                if (length) {
                  var index = baseSortedIndex(array, value);
                  if (index < length && eq(array[index], value)) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * This method is like `_.sortedIndex` except that it returns the highest
               * index at which `value` should be inserted into `array` in order to
               * maintain its sort order.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Array
               * @param {Array} array The sorted array to inspect.
               * @param {*} value The value to evaluate.
               * @returns {number} Returns the index at which `value` should be inserted
               *  into `array`.
               * @example
               *
               * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
               * // => 4
               */
              function sortedLastIndex(array, value) {
                return baseSortedIndex(array, value, true);
              }

              /**
               * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
               * which is invoked for `value` and each element of `array` to compute their
               * sort ranking. The iteratee is invoked with one argument: (value).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The sorted array to inspect.
               * @param {*} value The value to evaluate.
               * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
               * @returns {number} Returns the index at which `value` should be inserted
               *  into `array`.
               * @example
               *
               * var objects = [{ 'x': 4 }, { 'x': 5 }];
               *
               * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
               * // => 1
               *
               * // The `_.property` iteratee shorthand.
               * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
               * // => 1
               */
              function sortedLastIndexBy(array, value, iteratee) {
                return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
              }

              /**
               * This method is like `_.lastIndexOf` except that it performs a binary
               * search on a sorted `array`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @returns {number} Returns the index of the matched value, else `-1`.
               * @example
               *
               * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
               * // => 3
               */
              function sortedLastIndexOf(array, value) {
                var length = array == null ? 0 : array.length;
                if (length) {
                  var index = baseSortedIndex(array, value, true) - 1;
                  if (eq(array[index], value)) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * This method is like `_.uniq` except that it's designed and optimized
               * for sorted arrays.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @returns {Array} Returns the new duplicate free array.
               * @example
               *
               * _.sortedUniq([1, 1, 2]);
               * // => [1, 2]
               */
              function sortedUniq(array) {
                return (array && array.length) ?
                  baseSortedUniq(array) :
                  [];
              }

              /**
               * This method is like `_.uniqBy` except that it's designed and optimized
               * for sorted arrays.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @param {Function} [iteratee] The iteratee invoked per element.
               * @returns {Array} Returns the new duplicate free array.
               * @example
               *
               * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
               * // => [1.1, 2.3]
               */
              function sortedUniqBy(array, iteratee) {
                return (array && array.length) ?
                  baseSortedUniq(array, getIteratee(iteratee, 2)) :
                  [];
              }

              /**
               * Gets all but the first element of `array`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to query.
               * @returns {Array} Returns the slice of `array`.
               * @example
               *
               * _.tail([1, 2, 3]);
               * // => [2, 3]
               */
              function tail(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseSlice(array, 1, length) : [];
              }

              /**
               * Creates a slice of `array` with `n` elements taken from the beginning.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {Array} array The array to query.
               * @param {number} [n=1] The number of elements to take.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {Array} Returns the slice of `array`.
               * @example
               *
               * _.take([1, 2, 3]);
               * // => [1]
               *
               * _.take([1, 2, 3], 2);
               * // => [1, 2]
               *
               * _.take([1, 2, 3], 5);
               * // => [1, 2, 3]
               *
               * _.take([1, 2, 3], 0);
               * // => []
               */
              function take(array, n, guard) {
                if (!(array && array.length)) {
                  return [];
                }
                n = (guard || n === undefined) ? 1 : toInteger(n);
                return baseSlice(array, 0, n < 0 ? 0 : n);
              }

              /**
               * Creates a slice of `array` with `n` elements taken from the end.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Array
               * @param {Array} array The array to query.
               * @param {number} [n=1] The number of elements to take.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {Array} Returns the slice of `array`.
               * @example
               *
               * _.takeRight([1, 2, 3]);
               * // => [3]
               *
               * _.takeRight([1, 2, 3], 2);
               * // => [2, 3]
               *
               * _.takeRight([1, 2, 3], 5);
               * // => [1, 2, 3]
               *
               * _.takeRight([1, 2, 3], 0);
               * // => []
               */
              function takeRight(array, n, guard) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                  return [];
                }
                n = (guard || n === undefined) ? 1 : toInteger(n);
                n = length - n;
                return baseSlice(array, n < 0 ? 0 : n, length);
              }

              /**
               * Creates a slice of `array` with elements taken from the end. Elements are
               * taken until `predicate` returns falsey. The predicate is invoked with
               * three arguments: (value, index, array).
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Array
               * @param {Array} array The array to query.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @returns {Array} Returns the slice of `array`.
               * @example
               *
               * var users = [
               *   { 'user': 'barney',  'active': true },
               *   { 'user': 'fred',    'active': false },
               *   { 'user': 'pebbles', 'active': false }
               * ];
               *
               * _.takeRightWhile(users, function(o) { return !o.active; });
               * // => objects for ['fred', 'pebbles']
               *
               * // The `_.matches` iteratee shorthand.
               * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
               * // => objects for ['pebbles']
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.takeRightWhile(users, ['active', false]);
               * // => objects for ['fred', 'pebbles']
               *
               * // The `_.property` iteratee shorthand.
               * _.takeRightWhile(users, 'active');
               * // => []
               */
              function takeRightWhile(array, predicate) {
                return (array && array.length) ?
                  baseWhile(array, getIteratee(predicate, 3), false, true) :
                  [];
              }

              /**
               * Creates a slice of `array` with elements taken from the beginning. Elements
               * are taken until `predicate` returns falsey. The predicate is invoked with
               * three arguments: (value, index, array).
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Array
               * @param {Array} array The array to query.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @returns {Array} Returns the slice of `array`.
               * @example
               *
               * var users = [
               *   { 'user': 'barney',  'active': false },
               *   { 'user': 'fred',    'active': false },
               *   { 'user': 'pebbles', 'active': true }
               * ];
               *
               * _.takeWhile(users, function(o) { return !o.active; });
               * // => objects for ['barney', 'fred']
               *
               * // The `_.matches` iteratee shorthand.
               * _.takeWhile(users, { 'user': 'barney', 'active': false });
               * // => objects for ['barney']
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.takeWhile(users, ['active', false]);
               * // => objects for ['barney', 'fred']
               *
               * // The `_.property` iteratee shorthand.
               * _.takeWhile(users, 'active');
               * // => []
               */
              function takeWhile(array, predicate) {
                return (array && array.length) ?
                  baseWhile(array, getIteratee(predicate, 3)) :
                  [];
              }

              /**
               * Creates an array of unique values, in order, from all given arrays using
               * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
               * for equality comparisons.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {...Array} [arrays] The arrays to inspect.
               * @returns {Array} Returns the new array of combined values.
               * @example
               *
               * _.union([2], [1, 2]);
               * // => [2, 1]
               */
              var union = baseRest(function (arrays) {
                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
              });

              /**
               * This method is like `_.union` except that it accepts `iteratee` which is
               * invoked for each element of each `arrays` to generate the criterion by
               * which uniqueness is computed. Result values are chosen from the first
               * array in which the value occurs. The iteratee is invoked with one argument:
               * (value).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {...Array} [arrays] The arrays to inspect.
               * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
               * @returns {Array} Returns the new array of combined values.
               * @example
               *
               * _.unionBy([2.1], [1.2, 2.3], Math.floor);
               * // => [2.1, 1.2]
               *
               * // The `_.property` iteratee shorthand.
               * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
               * // => [{ 'x': 1 }, { 'x': 2 }]
               */
              var unionBy = baseRest(function (arrays) {
                var iteratee = last(arrays);
                if (isArrayLikeObject(iteratee)) {
                  iteratee = undefined;
                }
                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
              });

              /**
               * This method is like `_.union` except that it accepts `comparator` which
               * is invoked to compare elements of `arrays`. Result values are chosen from
               * the first array in which the value occurs. The comparator is invoked
               * with two arguments: (arrVal, othVal).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {...Array} [arrays] The arrays to inspect.
               * @param {Function} [comparator] The comparator invoked per element.
               * @returns {Array} Returns the new array of combined values.
               * @example
               *
               * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
               * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
               *
               * _.unionWith(objects, others, _.isEqual);
               * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
               */
              var unionWith = baseRest(function (arrays) {
                var comparator = last(arrays);
                comparator = typeof comparator == 'function' ? comparator : undefined;
                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
              });

              /**
               * Creates a duplicate-free version of an array, using
               * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
               * for equality comparisons, in which only the first occurrence of each element
               * is kept. The order of result values is determined by the order they occur
               * in the array.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @returns {Array} Returns the new duplicate free array.
               * @example
               *
               * _.uniq([2, 1, 2]);
               * // => [2, 1]
               */
              function uniq(array) {
                return (array && array.length) ? baseUniq(array) : [];
              }

              /**
               * This method is like `_.uniq` except that it accepts `iteratee` which is
               * invoked for each element in `array` to generate the criterion by which
               * uniqueness is computed. The order of result values is determined by the
               * order they occur in the array. The iteratee is invoked with one argument:
               * (value).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
               * @returns {Array} Returns the new duplicate free array.
               * @example
               *
               * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
               * // => [2.1, 1.2]
               *
               * // The `_.property` iteratee shorthand.
               * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
               * // => [{ 'x': 1 }, { 'x': 2 }]
               */
              function uniqBy(array, iteratee) {
                return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
              }

              /**
               * This method is like `_.uniq` except that it accepts `comparator` which
               * is invoked to compare elements of `array`. The order of result values is
               * determined by the order they occur in the array.The comparator is invoked
               * with two arguments: (arrVal, othVal).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @param {Function} [comparator] The comparator invoked per element.
               * @returns {Array} Returns the new duplicate free array.
               * @example
               *
               * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
               *
               * _.uniqWith(objects, _.isEqual);
               * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
               */
              function uniqWith(array, comparator) {
                comparator = typeof comparator == 'function' ? comparator : undefined;
                return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
              }

              /**
               * This method is like `_.zip` except that it accepts an array of grouped
               * elements and creates an array regrouping the elements to their pre-zip
               * configuration.
               *
               * @static
               * @memberOf _
               * @since 1.2.0
               * @category Array
               * @param {Array} array The array of grouped elements to process.
               * @returns {Array} Returns the new array of regrouped elements.
               * @example
               *
               * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
               * // => [['a', 1, true], ['b', 2, false]]
               *
               * _.unzip(zipped);
               * // => [['a', 'b'], [1, 2], [true, false]]
               */
              function unzip(array) {
                if (!(array && array.length)) {
                  return [];
                }
                var length = 0;
                array = arrayFilter(array, function (group) {
                  if (isArrayLikeObject(group)) {
                    length = nativeMax(group.length, length);
                    return true;
                  }
                });
                return baseTimes(length, function (index) {
                  return arrayMap(array, baseProperty(index));
                });
              }

              /**
               * This method is like `_.unzip` except that it accepts `iteratee` to specify
               * how regrouped values should be combined. The iteratee is invoked with the
               * elements of each group: (...group).
               *
               * @static
               * @memberOf _
               * @since 3.8.0
               * @category Array
               * @param {Array} array The array of grouped elements to process.
               * @param {Function} [iteratee=_.identity] The function to combine
               *  regrouped values.
               * @returns {Array} Returns the new array of regrouped elements.
               * @example
               *
               * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
               * // => [[1, 10, 100], [2, 20, 200]]
               *
               * _.unzipWith(zipped, _.add);
               * // => [3, 30, 300]
               */
              function unzipWith(array, iteratee) {
                if (!(array && array.length)) {
                  return [];
                }
                var result = unzip(array);
                if (iteratee == null) {
                  return result;
                }
                return arrayMap(result, function (group) {
                  return apply(iteratee, undefined, group);
                });
              }

              /**
               * Creates an array excluding all given values using
               * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
               * for equality comparisons.
               *
               * **Note:** Unlike `_.pull`, this method returns a new array.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {Array} array The array to inspect.
               * @param {...*} [values] The values to exclude.
               * @returns {Array} Returns the new array of filtered values.
               * @see _.difference, _.xor
               * @example
               *
               * _.without([2, 1, 2, 3], 1, 2);
               * // => [3]
               */
              var without = baseRest(function (array, values) {
                return isArrayLikeObject(array) ?
                  baseDifference(array, values) :
                  [];
              });

              /**
               * Creates an array of unique values that is the
               * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
               * of the given arrays. The order of result values is determined by the order
               * they occur in the arrays.
               *
               * @static
               * @memberOf _
               * @since 2.4.0
               * @category Array
               * @param {...Array} [arrays] The arrays to inspect.
               * @returns {Array} Returns the new array of filtered values.
               * @see _.difference, _.without
               * @example
               *
               * _.xor([2, 1], [2, 3]);
               * // => [1, 3]
               */
              var xor = baseRest(function (arrays) {
                return baseXor(arrayFilter(arrays, isArrayLikeObject));
              });

              /**
               * This method is like `_.xor` except that it accepts `iteratee` which is
               * invoked for each element of each `arrays` to generate the criterion by
               * which by which they're compared. The order of result values is determined
               * by the order they occur in the arrays. The iteratee is invoked with one
               * argument: (value).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {...Array} [arrays] The arrays to inspect.
               * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
               * @returns {Array} Returns the new array of filtered values.
               * @example
               *
               * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
               * // => [1.2, 3.4]
               *
               * // The `_.property` iteratee shorthand.
               * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
               * // => [{ 'x': 2 }]
               */
              var xorBy = baseRest(function (arrays) {
                var iteratee = last(arrays);
                if (isArrayLikeObject(iteratee)) {
                  iteratee = undefined;
                }
                return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
              });

              /**
               * This method is like `_.xor` except that it accepts `comparator` which is
               * invoked to compare elements of `arrays`. The order of result values is
               * determined by the order they occur in the arrays. The comparator is invoked
               * with two arguments: (arrVal, othVal).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Array
               * @param {...Array} [arrays] The arrays to inspect.
               * @param {Function} [comparator] The comparator invoked per element.
               * @returns {Array} Returns the new array of filtered values.
               * @example
               *
               * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
               * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
               *
               * _.xorWith(objects, others, _.isEqual);
               * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
               */
              var xorWith = baseRest(function (arrays) {
                var comparator = last(arrays);
                comparator = typeof comparator == 'function' ? comparator : undefined;
                return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
              });

              /**
               * Creates an array of grouped elements, the first of which contains the
               * first elements of the given arrays, the second of which contains the
               * second elements of the given arrays, and so on.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Array
               * @param {...Array} [arrays] The arrays to process.
               * @returns {Array} Returns the new array of grouped elements.
               * @example
               *
               * _.zip(['a', 'b'], [1, 2], [true, false]);
               * // => [['a', 1, true], ['b', 2, false]]
               */
              var zip = baseRest(unzip);

              /**
               * This method is like `_.fromPairs` except that it accepts two arrays,
               * one of property identifiers and one of corresponding values.
               *
               * @static
               * @memberOf _
               * @since 0.4.0
               * @category Array
               * @param {Array} [props=[]] The property identifiers.
               * @param {Array} [values=[]] The property values.
               * @returns {Object} Returns the new object.
               * @example
               *
               * _.zipObject(['a', 'b'], [1, 2]);
               * // => { 'a': 1, 'b': 2 }
               */
              function zipObject(props, values) {
                return baseZipObject(props || [], values || [], assignValue);
              }

              /**
               * This method is like `_.zipObject` except that it supports property paths.
               *
               * @static
               * @memberOf _
               * @since 4.1.0
               * @category Array
               * @param {Array} [props=[]] The property identifiers.
               * @param {Array} [values=[]] The property values.
               * @returns {Object} Returns the new object.
               * @example
               *
               * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
               * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
               */
              function zipObjectDeep(props, values) {
                return baseZipObject(props || [], values || [], baseSet);
              }

              /**
               * This method is like `_.zip` except that it accepts `iteratee` to specify
               * how grouped values should be combined. The iteratee is invoked with the
               * elements of each group: (...group).
               *
               * @static
               * @memberOf _
               * @since 3.8.0
               * @category Array
               * @param {...Array} [arrays] The arrays to process.
               * @param {Function} [iteratee=_.identity] The function to combine
               *  grouped values.
               * @returns {Array} Returns the new array of grouped elements.
               * @example
               *
               * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
               *   return a + b + c;
               * });
               * // => [111, 222]
               */
              var zipWith = baseRest(function (arrays) {
                var length = arrays.length,
                  iteratee = length > 1 ? arrays[length - 1] : undefined;

                iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
                return unzipWith(arrays, iteratee);
              });

              /*------------------------------------------------------------------------*/

              /**
               * Creates a `lodash` wrapper instance that wraps `value` with explicit method
               * chain sequences enabled. The result of such sequences must be unwrapped
               * with `_#value`.
               *
               * @static
               * @memberOf _
               * @since 1.3.0
               * @category Seq
               * @param {*} value The value to wrap.
               * @returns {Object} Returns the new `lodash` wrapper instance.
               * @example
               *
               * var users = [
               *   { 'user': 'barney',  'age': 36 },
               *   { 'user': 'fred',    'age': 40 },
               *   { 'user': 'pebbles', 'age': 1 }
               * ];
               *
               * var youngest = _
               *   .chain(users)
               *   .sortBy('age')
               *   .map(function(o) {
               *     return o.user + ' is ' + o.age;
               *   })
               *   .head()
               *   .value();
               * // => 'pebbles is 1'
               */
              function chain(value) {
                var result = lodash(value);
                result.__chain__ = true;
                return result;
              }

              /**
               * This method invokes `interceptor` and returns `value`. The interceptor
               * is invoked with one argument; (value). The purpose of this method is to
               * "tap into" a method chain sequence in order to modify intermediate results.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Seq
               * @param {*} value The value to provide to `interceptor`.
               * @param {Function} interceptor The function to invoke.
               * @returns {*} Returns `value`.
               * @example
               *
               * _([1, 2, 3])
               *  .tap(function(array) {
               *    // Mutate input array.
               *    array.pop();
               *  })
               *  .reverse()
               *  .value();
               * // => [2, 1]
               */
              function tap(value, interceptor) {
                interceptor(value);
                return value;
              }

              /**
               * This method is like `_.tap` except that it returns the result of `interceptor`.
               * The purpose of this method is to "pass thru" values replacing intermediate
               * results in a method chain sequence.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Seq
               * @param {*} value The value to provide to `interceptor`.
               * @param {Function} interceptor The function to invoke.
               * @returns {*} Returns the result of `interceptor`.
               * @example
               *
               * _('  abc  ')
               *  .chain()
               *  .trim()
               *  .thru(function(value) {
               *    return [value];
               *  })
               *  .value();
               * // => ['abc']
               */
              function thru(value, interceptor) {
                return interceptor(value);
              }

              /**
               * This method is the wrapper version of `_.at`.
               *
               * @name at
               * @memberOf _
               * @since 1.0.0
               * @category Seq
               * @param {...(string|string[])} [paths] The property paths to pick.
               * @returns {Object} Returns the new `lodash` wrapper instance.
               * @example
               *
               * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
               *
               * _(object).at(['a[0].b.c', 'a[1]']).value();
               * // => [3, 4]
               */
              var wrapperAt = flatRest(function (paths) {
                var length = paths.length,
                  start = length ? paths[0] : 0,
                  value = this.__wrapped__,
                  interceptor = function (object) { return baseAt(object, paths); };

                if (length > 1 || this.__actions__.length ||
                  !(value instanceof LazyWrapper) || !isIndex(start)) {
                  return this.thru(interceptor);
                }
                value = value.slice(start, +start + (length ? 1 : 0));
                value.__actions__.push({
                  'func': thru,
                  'args': [interceptor],
                  'thisArg': undefined
                });
                return new LodashWrapper(value, this.__chain__).thru(function (array) {
                  if (length && !array.length) {
                    array.push(undefined);
                  }
                  return array;
                });
              });

              /**
               * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
               *
               * @name chain
               * @memberOf _
               * @since 0.1.0
               * @category Seq
               * @returns {Object} Returns the new `lodash` wrapper instance.
               * @example
               *
               * var users = [
               *   { 'user': 'barney', 'age': 36 },
               *   { 'user': 'fred',   'age': 40 }
               * ];
               *
               * // A sequence without explicit chaining.
               * _(users).head();
               * // => { 'user': 'barney', 'age': 36 }
               *
               * // A sequence with explicit chaining.
               * _(users)
               *   .chain()
               *   .head()
               *   .pick('user')
               *   .value();
               * // => { 'user': 'barney' }
               */
              function wrapperChain() {
                return chain(this);
              }

              /**
               * Executes the chain sequence and returns the wrapped result.
               *
               * @name commit
               * @memberOf _
               * @since 3.2.0
               * @category Seq
               * @returns {Object} Returns the new `lodash` wrapper instance.
               * @example
               *
               * var array = [1, 2];
               * var wrapped = _(array).push(3);
               *
               * console.log(array);
               * // => [1, 2]
               *
               * wrapped = wrapped.commit();
               * console.log(array);
               * // => [1, 2, 3]
               *
               * wrapped.last();
               * // => 3
               *
               * console.log(array);
               * // => [1, 2, 3]
               */
              function wrapperCommit() {
                return new LodashWrapper(this.value(), this.__chain__);
              }

              /**
               * Gets the next value on a wrapped object following the
               * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
               *
               * @name next
               * @memberOf _
               * @since 4.0.0
               * @category Seq
               * @returns {Object} Returns the next iterator value.
               * @example
               *
               * var wrapped = _([1, 2]);
               *
               * wrapped.next();
               * // => { 'done': false, 'value': 1 }
               *
               * wrapped.next();
               * // => { 'done': false, 'value': 2 }
               *
               * wrapped.next();
               * // => { 'done': true, 'value': undefined }
               */
              function wrapperNext() {
                if (this.__values__ === undefined) {
                  this.__values__ = toArray(this.value());
                }
                var done = this.__index__ >= this.__values__.length,
                  value = done ? undefined : this.__values__[this.__index__++];

                return { 'done': done, 'value': value };
              }

              /**
               * Enables the wrapper to be iterable.
               *
               * @name Symbol.iterator
               * @memberOf _
               * @since 4.0.0
               * @category Seq
               * @returns {Object} Returns the wrapper object.
               * @example
               *
               * var wrapped = _([1, 2]);
               *
               * wrapped[Symbol.iterator]() === wrapped;
               * // => true
               *
               * Array.from(wrapped);
               * // => [1, 2]
               */
              function wrapperToIterator() {
                return this;
              }

              /**
               * Creates a clone of the chain sequence planting `value` as the wrapped value.
               *
               * @name plant
               * @memberOf _
               * @since 3.2.0
               * @category Seq
               * @param {*} value The value to plant.
               * @returns {Object} Returns the new `lodash` wrapper instance.
               * @example
               *
               * function square(n) {
               *   return n * n;
               * }
               *
               * var wrapped = _([1, 2]).map(square);
               * var other = wrapped.plant([3, 4]);
               *
               * other.value();
               * // => [9, 16]
               *
               * wrapped.value();
               * // => [1, 4]
               */
              function wrapperPlant(value) {
                var result,
                  parent = this;

                while (parent instanceof baseLodash) {
                  var clone = wrapperClone(parent);
                  clone.__index__ = 0;
                  clone.__values__ = undefined;
                  if (result) {
                    previous.__wrapped__ = clone;
                  } else {
                    result = clone;
                  }
                  var previous = clone;
                  parent = parent.__wrapped__;
                }
                previous.__wrapped__ = value;
                return result;
              }

              /**
               * This method is the wrapper version of `_.reverse`.
               *
               * **Note:** This method mutates the wrapped array.
               *
               * @name reverse
               * @memberOf _
               * @since 0.1.0
               * @category Seq
               * @returns {Object} Returns the new `lodash` wrapper instance.
               * @example
               *
               * var array = [1, 2, 3];
               *
               * _(array).reverse().value()
               * // => [3, 2, 1]
               *
               * console.log(array);
               * // => [3, 2, 1]
               */
              function wrapperReverse() {
                var value = this.__wrapped__;
                if (value instanceof LazyWrapper) {
                  var wrapped = value;
                  if (this.__actions__.length) {
                    wrapped = new LazyWrapper(this);
                  }
                  wrapped = wrapped.reverse();
                  wrapped.__actions__.push({
                    'func': thru,
                    'args': [reverse],
                    'thisArg': undefined
                  });
                  return new LodashWrapper(wrapped, this.__chain__);
                }
                return this.thru(reverse);
              }

              /**
               * Executes the chain sequence to resolve the unwrapped value.
               *
               * @name value
               * @memberOf _
               * @since 0.1.0
               * @alias toJSON, valueOf
               * @category Seq
               * @returns {*} Returns the resolved unwrapped value.
               * @example
               *
               * _([1, 2, 3]).value();
               * // => [1, 2, 3]
               */
              function wrapperValue() {
                return baseWrapperValue(this.__wrapped__, this.__actions__);
              }

              /*------------------------------------------------------------------------*/

              /**
               * Creates an object composed of keys generated from the results of running
               * each element of `collection` thru `iteratee`. The corresponding value of
               * each key is the number of times the key was returned by `iteratee`. The
               * iteratee is invoked with one argument: (value).
               *
               * @static
               * @memberOf _
               * @since 0.5.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
               * @returns {Object} Returns the composed aggregate object.
               * @example
               *
               * _.countBy([6.1, 4.2, 6.3], Math.floor);
               * // => { '4': 1, '6': 2 }
               *
               * // The `_.property` iteratee shorthand.
               * _.countBy(['one', 'two', 'three'], 'length');
               * // => { '3': 2, '5': 1 }
               */
              var countBy = createAggregator(function (result, value, key) {
                if (hasOwnProperty.call(result, key)) {
                  ++result[key];
                } else {
                  baseAssignValue(result, key, 1);
                }
              });

              /**
               * Checks if `predicate` returns truthy for **all** elements of `collection`.
               * Iteration is stopped once `predicate` returns falsey. The predicate is
               * invoked with three arguments: (value, index|key, collection).
               *
               * **Note:** This method returns `true` for
               * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
               * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
               * elements of empty collections.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {boolean} Returns `true` if all elements pass the predicate check,
               *  else `false`.
               * @example
               *
               * _.every([true, 1, null, 'yes'], Boolean);
               * // => false
               *
               * var users = [
               *   { 'user': 'barney', 'age': 36, 'active': false },
               *   { 'user': 'fred',   'age': 40, 'active': false }
               * ];
               *
               * // The `_.matches` iteratee shorthand.
               * _.every(users, { 'user': 'barney', 'active': false });
               * // => false
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.every(users, ['active', false]);
               * // => true
               *
               * // The `_.property` iteratee shorthand.
               * _.every(users, 'active');
               * // => false
               */
              function every(collection, predicate, guard) {
                var func = isArray(collection) ? arrayEvery : baseEvery;
                if (guard && isIterateeCall(collection, predicate, guard)) {
                  predicate = undefined;
                }
                return func(collection, getIteratee(predicate, 3));
              }

              /**
               * Iterates over elements of `collection`, returning an array of all elements
               * `predicate` returns truthy for. The predicate is invoked with three
               * arguments: (value, index|key, collection).
               *
               * **Note:** Unlike `_.remove`, this method returns a new array.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @returns {Array} Returns the new filtered array.
               * @see _.reject
               * @example
               *
               * var users = [
               *   { 'user': 'barney', 'age': 36, 'active': true },
               *   { 'user': 'fred',   'age': 40, 'active': false }
               * ];
               *
               * _.filter(users, function(o) { return !o.active; });
               * // => objects for ['fred']
               *
               * // The `_.matches` iteratee shorthand.
               * _.filter(users, { 'age': 36, 'active': true });
               * // => objects for ['barney']
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.filter(users, ['active', false]);
               * // => objects for ['fred']
               *
               * // The `_.property` iteratee shorthand.
               * _.filter(users, 'active');
               * // => objects for ['barney']
               */
              function filter(collection, predicate) {
                var func = isArray(collection) ? arrayFilter : baseFilter;
                return func(collection, getIteratee(predicate, 3));
              }

              /**
               * Iterates over elements of `collection`, returning the first element
               * `predicate` returns truthy for. The predicate is invoked with three
               * arguments: (value, index|key, collection).
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Collection
               * @param {Array|Object} collection The collection to inspect.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @param {number} [fromIndex=0] The index to search from.
               * @returns {*} Returns the matched element, else `undefined`.
               * @example
               *
               * var users = [
               *   { 'user': 'barney',  'age': 36, 'active': true },
               *   { 'user': 'fred',    'age': 40, 'active': false },
               *   { 'user': 'pebbles', 'age': 1,  'active': true }
               * ];
               *
               * _.find(users, function(o) { return o.age < 40; });
               * // => object for 'barney'
               *
               * // The `_.matches` iteratee shorthand.
               * _.find(users, { 'age': 1, 'active': true });
               * // => object for 'pebbles'
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.find(users, ['active', false]);
               * // => object for 'fred'
               *
               * // The `_.property` iteratee shorthand.
               * _.find(users, 'active');
               * // => object for 'barney'
               */
              var find = createFind(findIndex);

              /**
               * This method is like `_.find` except that it iterates over elements of
               * `collection` from right to left.
               *
               * @static
               * @memberOf _
               * @since 2.0.0
               * @category Collection
               * @param {Array|Object} collection The collection to inspect.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @param {number} [fromIndex=collection.length-1] The index to search from.
               * @returns {*} Returns the matched element, else `undefined`.
               * @example
               *
               * _.findLast([1, 2, 3, 4], function(n) {
               *   return n % 2 == 1;
               * });
               * // => 3
               */
              var findLast = createFind(findLastIndex);

              /**
               * Creates a flattened array of values by running each element in `collection`
               * thru `iteratee` and flattening the mapped results. The iteratee is invoked
               * with three arguments: (value, index|key, collection).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @returns {Array} Returns the new flattened array.
               * @example
               *
               * function duplicate(n) {
               *   return [n, n];
               * }
               *
               * _.flatMap([1, 2], duplicate);
               * // => [1, 1, 2, 2]
               */
              function flatMap(collection, iteratee) {
                return baseFlatten(map(collection, iteratee), 1);
              }

              /**
               * This method is like `_.flatMap` except that it recursively flattens the
               * mapped results.
               *
               * @static
               * @memberOf _
               * @since 4.7.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @returns {Array} Returns the new flattened array.
               * @example
               *
               * function duplicate(n) {
               *   return [[[n, n]]];
               * }
               *
               * _.flatMapDeep([1, 2], duplicate);
               * // => [1, 1, 2, 2]
               */
              function flatMapDeep(collection, iteratee) {
                return baseFlatten(map(collection, iteratee), INFINITY);
              }

              /**
               * This method is like `_.flatMap` except that it recursively flattens the
               * mapped results up to `depth` times.
               *
               * @static
               * @memberOf _
               * @since 4.7.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @param {number} [depth=1] The maximum recursion depth.
               * @returns {Array} Returns the new flattened array.
               * @example
               *
               * function duplicate(n) {
               *   return [[[n, n]]];
               * }
               *
               * _.flatMapDepth([1, 2], duplicate, 2);
               * // => [[1, 1], [2, 2]]
               */
              function flatMapDepth(collection, iteratee, depth) {
                depth = depth === undefined ? 1 : toInteger(depth);
                return baseFlatten(map(collection, iteratee), depth);
              }

              /**
               * Iterates over elements of `collection` and invokes `iteratee` for each element.
               * The iteratee is invoked with three arguments: (value, index|key, collection).
               * Iteratee functions may exit iteration early by explicitly returning `false`.
               *
               * **Note:** As with other "Collections" methods, objects with a "length"
               * property are iterated like arrays. To avoid this behavior use `_.forIn`
               * or `_.forOwn` for object iteration.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @alias each
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @returns {Array|Object} Returns `collection`.
               * @see _.forEachRight
               * @example
               *
               * _.forEach([1, 2], function(value) {
               *   console.log(value);
               * });
               * // => Logs `1` then `2`.
               *
               * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
               *   console.log(key);
               * });
               * // => Logs 'a' then 'b' (iteration order is not guaranteed).
               */
              function forEach(collection, iteratee) {
                var func = isArray(collection) ? arrayEach : baseEach;
                return func(collection, getIteratee(iteratee, 3));
              }

              /**
               * This method is like `_.forEach` except that it iterates over elements of
               * `collection` from right to left.
               *
               * @static
               * @memberOf _
               * @since 2.0.0
               * @alias eachRight
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @returns {Array|Object} Returns `collection`.
               * @see _.forEach
               * @example
               *
               * _.forEachRight([1, 2], function(value) {
               *   console.log(value);
               * });
               * // => Logs `2` then `1`.
               */
              function forEachRight(collection, iteratee) {
                var func = isArray(collection) ? arrayEachRight : baseEachRight;
                return func(collection, getIteratee(iteratee, 3));
              }

              /**
               * Creates an object composed of keys generated from the results of running
               * each element of `collection` thru `iteratee`. The order of grouped values
               * is determined by the order they occur in `collection`. The corresponding
               * value of each key is an array of elements responsible for generating the
               * key. The iteratee is invoked with one argument: (value).
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
               * @returns {Object} Returns the composed aggregate object.
               * @example
               *
               * _.groupBy([6.1, 4.2, 6.3], Math.floor);
               * // => { '4': [4.2], '6': [6.1, 6.3] }
               *
               * // The `_.property` iteratee shorthand.
               * _.groupBy(['one', 'two', 'three'], 'length');
               * // => { '3': ['one', 'two'], '5': ['three'] }
               */
              var groupBy = createAggregator(function (result, value, key) {
                if (hasOwnProperty.call(result, key)) {
                  result[key].push(value);
                } else {
                  baseAssignValue(result, key, [value]);
                }
              });

              /**
               * Checks if `value` is in `collection`. If `collection` is a string, it's
               * checked for a substring of `value`, otherwise
               * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
               * is used for equality comparisons. If `fromIndex` is negative, it's used as
               * the offset from the end of `collection`.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Collection
               * @param {Array|Object|string} collection The collection to inspect.
               * @param {*} value The value to search for.
               * @param {number} [fromIndex=0] The index to search from.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
               * @returns {boolean} Returns `true` if `value` is found, else `false`.
               * @example
               *
               * _.includes([1, 2, 3], 1);
               * // => true
               *
               * _.includes([1, 2, 3], 1, 2);
               * // => false
               *
               * _.includes({ 'a': 1, 'b': 2 }, 1);
               * // => true
               *
               * _.includes('abcd', 'bc');
               * // => true
               */
              function includes(collection, value, fromIndex, guard) {
                collection = isArrayLike(collection) ? collection : values(collection);
                fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

                var length = collection.length;
                if (fromIndex < 0) {
                  fromIndex = nativeMax(length + fromIndex, 0);
                }
                return isString(collection) ?
                  (fromIndex <= length && collection.indexOf(value, fromIndex) > -1) :
                  (!!length && baseIndexOf(collection, value, fromIndex) > -1);
              }

              /**
               * Invokes the method at `path` of each element in `collection`, returning
               * an array of the results of each invoked method. Any additional arguments
               * are provided to each invoked method. If `path` is a function, it's invoked
               * for, and `this` bound to, each element in `collection`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Array|Function|string} path The path of the method to invoke or
               *  the function invoked per iteration.
               * @param {...*} [args] The arguments to invoke each method with.
               * @returns {Array} Returns the array of results.
               * @example
               *
               * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
               * // => [[1, 5, 7], [1, 2, 3]]
               *
               * _.invokeMap([123, 456], String.prototype.split, '');
               * // => [['1', '2', '3'], ['4', '5', '6']]
               */
              var invokeMap = baseRest(function (collection, path, args) {
                var index = -1,
                  isFunc = typeof path == 'function',
                  result = isArrayLike(collection) ? Array(collection.length) : [];

                baseEach(collection, function (value) {
                  result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
                });
                return result;
              });

              /**
               * Creates an object composed of keys generated from the results of running
               * each element of `collection` thru `iteratee`. The corresponding value of
               * each key is the last element responsible for generating the key. The
               * iteratee is invoked with one argument: (value).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
               * @returns {Object} Returns the composed aggregate object.
               * @example
               *
               * var array = [
               *   { 'dir': 'left', 'code': 97 },
               *   { 'dir': 'right', 'code': 100 }
               * ];
               *
               * _.keyBy(array, function(o) {
               *   return String.fromCharCode(o.code);
               * });
               * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
               *
               * _.keyBy(array, 'dir');
               * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
               */
              var keyBy = createAggregator(function (result, value, key) {
                baseAssignValue(result, key, value);
              });

              /**
               * Creates an array of values by running each element in `collection` thru
               * `iteratee`. The iteratee is invoked with three arguments:
               * (value, index|key, collection).
               *
               * Many lodash methods are guarded to work as iteratees for methods like
               * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
               *
               * The guarded methods are:
               * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
               * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
               * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
               * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @returns {Array} Returns the new mapped array.
               * @example
               *
               * function square(n) {
               *   return n * n;
               * }
               *
               * _.map([4, 8], square);
               * // => [16, 64]
               *
               * _.map({ 'a': 4, 'b': 8 }, square);
               * // => [16, 64] (iteration order is not guaranteed)
               *
               * var users = [
               *   { 'user': 'barney' },
               *   { 'user': 'fred' }
               * ];
               *
               * // The `_.property` iteratee shorthand.
               * _.map(users, 'user');
               * // => ['barney', 'fred']
               */
              function map(collection, iteratee) {
                var func = isArray(collection) ? arrayMap : baseMap;
                return func(collection, getIteratee(iteratee, 3));
              }

              /**
               * This method is like `_.sortBy` except that it allows specifying the sort
               * orders of the iteratees to sort by. If `orders` is unspecified, all values
               * are sorted in ascending order. Otherwise, specify an order of "desc" for
               * descending or "asc" for ascending sort order of corresponding values.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
               *  The iteratees to sort by.
               * @param {string[]} [orders] The sort orders of `iteratees`.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
               * @returns {Array} Returns the new sorted array.
               * @example
               *
               * var users = [
               *   { 'user': 'fred',   'age': 48 },
               *   { 'user': 'barney', 'age': 34 },
               *   { 'user': 'fred',   'age': 40 },
               *   { 'user': 'barney', 'age': 36 }
               * ];
               *
               * // Sort by `user` in ascending order and by `age` in descending order.
               * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
               * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
               */
              function orderBy(collection, iteratees, orders, guard) {
                if (collection == null) {
                  return [];
                }
                if (!isArray(iteratees)) {
                  iteratees = iteratees == null ? [] : [iteratees];
                }
                orders = guard ? undefined : orders;
                if (!isArray(orders)) {
                  orders = orders == null ? [] : [orders];
                }
                return baseOrderBy(collection, iteratees, orders);
              }

              /**
               * Creates an array of elements split into two groups, the first of which
               * contains elements `predicate` returns truthy for, the second of which
               * contains elements `predicate` returns falsey for. The predicate is
               * invoked with one argument: (value).
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @returns {Array} Returns the array of grouped elements.
               * @example
               *
               * var users = [
               *   { 'user': 'barney',  'age': 36, 'active': false },
               *   { 'user': 'fred',    'age': 40, 'active': true },
               *   { 'user': 'pebbles', 'age': 1,  'active': false }
               * ];
               *
               * _.partition(users, function(o) { return o.active; });
               * // => objects for [['fred'], ['barney', 'pebbles']]
               *
               * // The `_.matches` iteratee shorthand.
               * _.partition(users, { 'age': 1, 'active': false });
               * // => objects for [['pebbles'], ['barney', 'fred']]
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.partition(users, ['active', false]);
               * // => objects for [['barney', 'pebbles'], ['fred']]
               *
               * // The `_.property` iteratee shorthand.
               * _.partition(users, 'active');
               * // => objects for [['fred'], ['barney', 'pebbles']]
               */
              var partition = createAggregator(function (result, value, key) {
                result[key ? 0 : 1].push(value);
              }, function () { return [
                  [],
                  []
                ]; });

              /**
               * Reduces `collection` to a value which is the accumulated result of running
               * each element in `collection` thru `iteratee`, where each successive
               * invocation is supplied the return value of the previous. If `accumulator`
               * is not given, the first element of `collection` is used as the initial
               * value. The iteratee is invoked with four arguments:
               * (accumulator, value, index|key, collection).
               *
               * Many lodash methods are guarded to work as iteratees for methods like
               * `_.reduce`, `_.reduceRight`, and `_.transform`.
               *
               * The guarded methods are:
               * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
               * and `sortBy`
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @param {*} [accumulator] The initial value.
               * @returns {*} Returns the accumulated value.
               * @see _.reduceRight
               * @example
               *
               * _.reduce([1, 2], function(sum, n) {
               *   return sum + n;
               * }, 0);
               * // => 3
               *
               * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
               *   (result[value] || (result[value] = [])).push(key);
               *   return result;
               * }, {});
               * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
               */
              function reduce(collection, iteratee, accumulator) {
                var func = isArray(collection) ? arrayReduce : baseReduce,
                  initAccum = arguments.length < 3;

                return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
              }

              /**
               * This method is like `_.reduce` except that it iterates over elements of
               * `collection` from right to left.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @param {*} [accumulator] The initial value.
               * @returns {*} Returns the accumulated value.
               * @see _.reduce
               * @example
               *
               * var array = [[0, 1], [2, 3], [4, 5]];
               *
               * _.reduceRight(array, function(flattened, other) {
               *   return flattened.concat(other);
               * }, []);
               * // => [4, 5, 2, 3, 0, 1]
               */
              function reduceRight(collection, iteratee, accumulator) {
                var func = isArray(collection) ? arrayReduceRight : baseReduce,
                  initAccum = arguments.length < 3;

                return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
              }

              /**
               * The opposite of `_.filter`; this method returns the elements of `collection`
               * that `predicate` does **not** return truthy for.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @returns {Array} Returns the new filtered array.
               * @see _.filter
               * @example
               *
               * var users = [
               *   { 'user': 'barney', 'age': 36, 'active': false },
               *   { 'user': 'fred',   'age': 40, 'active': true }
               * ];
               *
               * _.reject(users, function(o) { return !o.active; });
               * // => objects for ['fred']
               *
               * // The `_.matches` iteratee shorthand.
               * _.reject(users, { 'age': 40, 'active': true });
               * // => objects for ['barney']
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.reject(users, ['active', false]);
               * // => objects for ['fred']
               *
               * // The `_.property` iteratee shorthand.
               * _.reject(users, 'active');
               * // => objects for ['barney']
               */
              function reject(collection, predicate) {
                var func = isArray(collection) ? arrayFilter : baseFilter;
                return func(collection, negate(getIteratee(predicate, 3)));
              }

              /**
               * Gets a random element from `collection`.
               *
               * @static
               * @memberOf _
               * @since 2.0.0
               * @category Collection
               * @param {Array|Object} collection The collection to sample.
               * @returns {*} Returns the random element.
               * @example
               *
               * _.sample([1, 2, 3, 4]);
               * // => 2
               */
              function sample(collection) {
                var func = isArray(collection) ? arraySample : baseSample;
                return func(collection);
              }

              /**
               * Gets `n` random elements at unique keys from `collection` up to the
               * size of `collection`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Collection
               * @param {Array|Object} collection The collection to sample.
               * @param {number} [n=1] The number of elements to sample.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {Array} Returns the random elements.
               * @example
               *
               * _.sampleSize([1, 2, 3], 2);
               * // => [3, 1]
               *
               * _.sampleSize([1, 2, 3], 4);
               * // => [2, 3, 1]
               */
              function sampleSize(collection, n, guard) {
                if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
                  n = 1;
                } else {
                  n = toInteger(n);
                }
                var func = isArray(collection) ? arraySampleSize : baseSampleSize;
                return func(collection, n);
              }

              /**
               * Creates an array of shuffled values, using a version of the
               * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Collection
               * @param {Array|Object} collection The collection to shuffle.
               * @returns {Array} Returns the new shuffled array.
               * @example
               *
               * _.shuffle([1, 2, 3, 4]);
               * // => [4, 1, 3, 2]
               */
              function shuffle(collection) {
                var func = isArray(collection) ? arrayShuffle : baseShuffle;
                return func(collection);
              }

              /**
               * Gets the size of `collection` by returning its length for array-like
               * values or the number of own enumerable string keyed properties for objects.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Collection
               * @param {Array|Object|string} collection The collection to inspect.
               * @returns {number} Returns the collection size.
               * @example
               *
               * _.size([1, 2, 3]);
               * // => 3
               *
               * _.size({ 'a': 1, 'b': 2 });
               * // => 2
               *
               * _.size('pebbles');
               * // => 7
               */
              function size(collection) {
                if (collection == null) {
                  return 0;
                }
                if (isArrayLike(collection)) {
                  return isString(collection) ? stringSize(collection) : collection.length;
                }
                var tag = getTag(collection);
                if (tag == mapTag || tag == setTag) {
                  return collection.size;
                }
                return baseKeys(collection).length;
              }

              /**
               * Checks if `predicate` returns truthy for **any** element of `collection`.
               * Iteration is stopped once `predicate` returns truthy. The predicate is
               * invoked with three arguments: (value, index|key, collection).
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {boolean} Returns `true` if any element passes the predicate check,
               *  else `false`.
               * @example
               *
               * _.some([null, 0, 'yes', false], Boolean);
               * // => true
               *
               * var users = [
               *   { 'user': 'barney', 'active': true },
               *   { 'user': 'fred',   'active': false }
               * ];
               *
               * // The `_.matches` iteratee shorthand.
               * _.some(users, { 'user': 'barney', 'active': false });
               * // => false
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.some(users, ['active', false]);
               * // => true
               *
               * // The `_.property` iteratee shorthand.
               * _.some(users, 'active');
               * // => true
               */
              function some(collection, predicate, guard) {
                var func = isArray(collection) ? arraySome : baseSome;
                if (guard && isIterateeCall(collection, predicate, guard)) {
                  predicate = undefined;
                }
                return func(collection, getIteratee(predicate, 3));
              }

              /**
               * Creates an array of elements, sorted in ascending order by the results of
               * running each element in a collection thru each iteratee. This method
               * performs a stable sort, that is, it preserves the original sort order of
               * equal elements. The iteratees are invoked with one argument: (value).
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Collection
               * @param {Array|Object} collection The collection to iterate over.
               * @param {...(Function|Function[])} [iteratees=[_.identity]]
               *  The iteratees to sort by.
               * @returns {Array} Returns the new sorted array.
               * @example
               *
               * var users = [
               *   { 'user': 'fred',   'age': 48 },
               *   { 'user': 'barney', 'age': 36 },
               *   { 'user': 'fred',   'age': 40 },
               *   { 'user': 'barney', 'age': 34 }
               * ];
               *
               * _.sortBy(users, [function(o) { return o.user; }]);
               * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
               *
               * _.sortBy(users, ['user', 'age']);
               * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
               */
              var sortBy = baseRest(function (collection, iteratees) {
                if (collection == null) {
                  return [];
                }
                var length = iteratees.length;
                if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                  iteratees = [];
                } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                  iteratees = [iteratees[0]];
                }
                return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
              });

              /*------------------------------------------------------------------------*/

              /**
               * Gets the timestamp of the number of milliseconds that have elapsed since
               * the Unix epoch (1 January 1970 00:00:00 UTC).
               *
               * @static
               * @memberOf _
               * @since 2.4.0
               * @category Date
               * @returns {number} Returns the timestamp.
               * @example
               *
               * _.defer(function(stamp) {
               *   console.log(_.now() - stamp);
               * }, _.now());
               * // => Logs the number of milliseconds it took for the deferred invocation.
               */
              var now = ctxNow || function () {
                return root.Date.now();
              };

              /*------------------------------------------------------------------------*/

              /**
               * The opposite of `_.before`; this method creates a function that invokes
               * `func` once it's called `n` or more times.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Function
               * @param {number} n The number of calls before `func` is invoked.
               * @param {Function} func The function to restrict.
               * @returns {Function} Returns the new restricted function.
               * @example
               *
               * var saves = ['profile', 'settings'];
               *
               * var done = _.after(saves.length, function() {
               *   console.log('done saving!');
               * });
               *
               * _.forEach(saves, function(type) {
               *   asyncSave({ 'type': type, 'complete': done });
               * });
               * // => Logs 'done saving!' after the two async saves have completed.
               */
              function after(n, func) {
                if (typeof func != 'function') {
                  throw new TypeError(FUNC_ERROR_TEXT);
                }
                n = toInteger(n);
                return function () {
                  if (--n < 1) {
                    return func.apply(this, arguments);
                  }
                };
              }

              /**
               * Creates a function that invokes `func`, with up to `n` arguments,
               * ignoring any additional arguments.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Function
               * @param {Function} func The function to cap arguments for.
               * @param {number} [n=func.length] The arity cap.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {Function} Returns the new capped function.
               * @example
               *
               * _.map(['6', '8', '10'], _.ary(parseInt, 1));
               * // => [6, 8, 10]
               */
              function ary(func, n, guard) {
                n = guard ? undefined : n;
                n = (func && n == null) ? func.length : n;
                return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
              }

              /**
               * Creates a function that invokes `func`, with the `this` binding and arguments
               * of the created function, while it's called less than `n` times. Subsequent
               * calls to the created function return the result of the last `func` invocation.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Function
               * @param {number} n The number of calls at which `func` is no longer invoked.
               * @param {Function} func The function to restrict.
               * @returns {Function} Returns the new restricted function.
               * @example
               *
               * jQuery(element).on('click', _.before(5, addContactToList));
               * // => Allows adding up to 4 contacts to the list.
               */
              function before(n, func) {
                var result;
                if (typeof func != 'function') {
                  throw new TypeError(FUNC_ERROR_TEXT);
                }
                n = toInteger(n);
                return function () {
                  if (--n > 0) {
                    result = func.apply(this, arguments);
                  }
                  if (n <= 1) {
                    func = undefined;
                  }
                  return result;
                };
              }

              /**
               * Creates a function that invokes `func` with the `this` binding of `thisArg`
               * and `partials` prepended to the arguments it receives.
               *
               * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
               * may be used as a placeholder for partially applied arguments.
               *
               * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
               * property of bound functions.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Function
               * @param {Function} func The function to bind.
               * @param {*} thisArg The `this` binding of `func`.
               * @param {...*} [partials] The arguments to be partially applied.
               * @returns {Function} Returns the new bound function.
               * @example
               *
               * function greet(greeting, punctuation) {
               *   return greeting + ' ' + this.user + punctuation;
               * }
               *
               * var object = { 'user': 'fred' };
               *
               * var bound = _.bind(greet, object, 'hi');
               * bound('!');
               * // => 'hi fred!'
               *
               * // Bound with placeholders.
               * var bound = _.bind(greet, object, _, '!');
               * bound('hi');
               * // => 'hi fred!'
               */
              var bind = baseRest(function (func, thisArg, partials) {
                var bitmask = WRAP_BIND_FLAG;
                if (partials.length) {
                  var holders = replaceHolders(partials, getHolder(bind));
                  bitmask |= WRAP_PARTIAL_FLAG;
                }
                return createWrap(func, bitmask, thisArg, partials, holders);
              });

              /**
               * Creates a function that invokes the method at `object[key]` with `partials`
               * prepended to the arguments it receives.
               *
               * This method differs from `_.bind` by allowing bound functions to reference
               * methods that may be redefined or don't yet exist. See
               * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
               * for more details.
               *
               * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
               * builds, may be used as a placeholder for partially applied arguments.
               *
               * @static
               * @memberOf _
               * @since 0.10.0
               * @category Function
               * @param {Object} object The object to invoke the method on.
               * @param {string} key The key of the method.
               * @param {...*} [partials] The arguments to be partially applied.
               * @returns {Function} Returns the new bound function.
               * @example
               *
               * var object = {
               *   'user': 'fred',
               *   'greet': function(greeting, punctuation) {
               *     return greeting + ' ' + this.user + punctuation;
               *   }
               * };
               *
               * var bound = _.bindKey(object, 'greet', 'hi');
               * bound('!');
               * // => 'hi fred!'
               *
               * object.greet = function(greeting, punctuation) {
               *   return greeting + 'ya ' + this.user + punctuation;
               * };
               *
               * bound('!');
               * // => 'hiya fred!'
               *
               * // Bound with placeholders.
               * var bound = _.bindKey(object, 'greet', _, '!');
               * bound('hi');
               * // => 'hiya fred!'
               */
              var bindKey = baseRest(function (object, key, partials) {
                var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                if (partials.length) {
                  var holders = replaceHolders(partials, getHolder(bindKey));
                  bitmask |= WRAP_PARTIAL_FLAG;
                }
                return createWrap(key, bitmask, object, partials, holders);
              });

              /**
               * Creates a function that accepts arguments of `func` and either invokes
               * `func` returning its result, if at least `arity` number of arguments have
               * been provided, or returns a function that accepts the remaining `func`
               * arguments, and so on. The arity of `func` may be specified if `func.length`
               * is not sufficient.
               *
               * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
               * may be used as a placeholder for provided arguments.
               *
               * **Note:** This method doesn't set the "length" property of curried functions.
               *
               * @static
               * @memberOf _
               * @since 2.0.0
               * @category Function
               * @param {Function} func The function to curry.
               * @param {number} [arity=func.length] The arity of `func`.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {Function} Returns the new curried function.
               * @example
               *
               * var abc = function(a, b, c) {
               *   return [a, b, c];
               * };
               *
               * var curried = _.curry(abc);
               *
               * curried(1)(2)(3);
               * // => [1, 2, 3]
               *
               * curried(1, 2)(3);
               * // => [1, 2, 3]
               *
               * curried(1, 2, 3);
               * // => [1, 2, 3]
               *
               * // Curried with placeholders.
               * curried(1)(_, 3)(2);
               * // => [1, 2, 3]
               */
              function curry(func, arity, guard) {
                arity = guard ? undefined : arity;
                var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                result.placeholder = curry.placeholder;
                return result;
              }

              /**
               * This method is like `_.curry` except that arguments are applied to `func`
               * in the manner of `_.partialRight` instead of `_.partial`.
               *
               * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
               * builds, may be used as a placeholder for provided arguments.
               *
               * **Note:** This method doesn't set the "length" property of curried functions.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Function
               * @param {Function} func The function to curry.
               * @param {number} [arity=func.length] The arity of `func`.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {Function} Returns the new curried function.
               * @example
               *
               * var abc = function(a, b, c) {
               *   return [a, b, c];
               * };
               *
               * var curried = _.curryRight(abc);
               *
               * curried(3)(2)(1);
               * // => [1, 2, 3]
               *
               * curried(2, 3)(1);
               * // => [1, 2, 3]
               *
               * curried(1, 2, 3);
               * // => [1, 2, 3]
               *
               * // Curried with placeholders.
               * curried(3)(1, _)(2);
               * // => [1, 2, 3]
               */
              function curryRight(func, arity, guard) {
                arity = guard ? undefined : arity;
                var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                result.placeholder = curryRight.placeholder;
                return result;
              }

              /**
               * Creates a debounced function that delays invoking `func` until after `wait`
               * milliseconds have elapsed since the last time the debounced function was
               * invoked. The debounced function comes with a `cancel` method to cancel
               * delayed `func` invocations and a `flush` method to immediately invoke them.
               * Provide `options` to indicate whether `func` should be invoked on the
               * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
               * with the last arguments provided to the debounced function. Subsequent
               * calls to the debounced function return the result of the last `func`
               * invocation.
               *
               * **Note:** If `leading` and `trailing` options are `true`, `func` is
               * invoked on the trailing edge of the timeout only if the debounced function
               * is invoked more than once during the `wait` timeout.
               *
               * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
               * until to the next tick, similar to `setTimeout` with a timeout of `0`.
               *
               * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
               * for details over the differences between `_.debounce` and `_.throttle`.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Function
               * @param {Function} func The function to debounce.
               * @param {number} [wait=0] The number of milliseconds to delay.
               * @param {Object} [options={}] The options object.
               * @param {boolean} [options.leading=false]
               *  Specify invoking on the leading edge of the timeout.
               * @param {number} [options.maxWait]
               *  The maximum time `func` is allowed to be delayed before it's invoked.
               * @param {boolean} [options.trailing=true]
               *  Specify invoking on the trailing edge of the timeout.
               * @returns {Function} Returns the new debounced function.
               * @example
               *
               * // Avoid costly calculations while the window size is in flux.
               * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
               *
               * // Invoke `sendMail` when clicked, debouncing subsequent calls.
               * jQuery(element).on('click', _.debounce(sendMail, 300, {
               *   'leading': true,
               *   'trailing': false
               * }));
               *
               * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
               * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
               * var source = new EventSource('/stream');
               * jQuery(source).on('message', debounced);
               *
               * // Cancel the trailing debounced invocation.
               * jQuery(window).on('popstate', debounced.cancel);
               */
              function debounce(func, wait, options) {
                var lastArgs,
                  lastThis,
                  maxWait,
                  result,
                  timerId,
                  lastCallTime,
                  lastInvokeTime = 0,
                  leading = false,
                  maxing = false,
                  trailing = true;

                if (typeof func != 'function') {
                  throw new TypeError(FUNC_ERROR_TEXT);
                }
                wait = toNumber(wait) || 0;
                if (isObject(options)) {
                  leading = !!options.leading;
                  maxing = 'maxWait' in options;
                  maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                  trailing = 'trailing' in options ? !!options.trailing : trailing;
                }

                function invokeFunc(time) {
                  var args = lastArgs,
                    thisArg = lastThis;

                  lastArgs = lastThis = undefined;
                  lastInvokeTime = time;
                  result = func.apply(thisArg, args);
                  return result;
                }

                function leadingEdge(time) {
                  // Reset any `maxWait` timer.
                  lastInvokeTime = time;
                  // Start the timer for the trailing edge.
                  timerId = setTimeout(timerExpired, wait);
                  // Invoke the leading edge.
                  return leading ? invokeFunc(time) : result;
                }

                function remainingWait(time) {
                  var timeSinceLastCall = time - lastCallTime,
                    timeSinceLastInvoke = time - lastInvokeTime,
                    result = wait - timeSinceLastCall;

                  return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
                }

                function shouldInvoke(time) {
                  var timeSinceLastCall = time - lastCallTime,
                    timeSinceLastInvoke = time - lastInvokeTime;

                  // Either this is the first call, activity has stopped and we're at the
                  // trailing edge, the system time has gone backwards and we're treating
                  // it as the trailing edge, or we've hit the `maxWait` limit.
                  return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
                    (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
                }

                function timerExpired() {
                  var time = now();
                  if (shouldInvoke(time)) {
                    return trailingEdge(time);
                  }
                  // Restart the timer.
                  timerId = setTimeout(timerExpired, remainingWait(time));
                }

                function trailingEdge(time) {
                  timerId = undefined;

                  // Only invoke if we have `lastArgs` which means `func` has been
                  // debounced at least once.
                  if (trailing && lastArgs) {
                    return invokeFunc(time);
                  }
                  lastArgs = lastThis = undefined;
                  return result;
                }

                function cancel() {
                  if (timerId !== undefined) {
                    clearTimeout(timerId);
                  }
                  lastInvokeTime = 0;
                  lastArgs = lastCallTime = lastThis = timerId = undefined;
                }

                function flush() {
                  return timerId === undefined ? result : trailingEdge(now());
                }

                function debounced() {
                  var time = now(),
                    isInvoking = shouldInvoke(time);

                  lastArgs = arguments;
                  lastThis = this;
                  lastCallTime = time;

                  if (isInvoking) {
                    if (timerId === undefined) {
                      return leadingEdge(lastCallTime);
                    }
                    if (maxing) {
                      // Handle invocations in a tight loop.
                      timerId = setTimeout(timerExpired, wait);
                      return invokeFunc(lastCallTime);
                    }
                  }
                  if (timerId === undefined) {
                    timerId = setTimeout(timerExpired, wait);
                  }
                  return result;
                }
                debounced.cancel = cancel;
                debounced.flush = flush;
                return debounced;
              }

              /**
               * Defers invoking the `func` until the current call stack has cleared. Any
               * additional arguments are provided to `func` when it's invoked.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Function
               * @param {Function} func The function to defer.
               * @param {...*} [args] The arguments to invoke `func` with.
               * @returns {number} Returns the timer id.
               * @example
               *
               * _.defer(function(text) {
               *   console.log(text);
               * }, 'deferred');
               * // => Logs 'deferred' after one millisecond.
               */
              var defer = baseRest(function (func, args) {
                return baseDelay(func, 1, args);
              });

              /**
               * Invokes `func` after `wait` milliseconds. Any additional arguments are
               * provided to `func` when it's invoked.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Function
               * @param {Function} func The function to delay.
               * @param {number} wait The number of milliseconds to delay invocation.
               * @param {...*} [args] The arguments to invoke `func` with.
               * @returns {number} Returns the timer id.
               * @example
               *
               * _.delay(function(text) {
               *   console.log(text);
               * }, 1000, 'later');
               * // => Logs 'later' after one second.
               */
              var delay = baseRest(function (func, wait, args) {
                return baseDelay(func, toNumber(wait) || 0, args);
              });

              /**
               * Creates a function that invokes `func` with arguments reversed.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Function
               * @param {Function} func The function to flip arguments for.
               * @returns {Function} Returns the new flipped function.
               * @example
               *
               * var flipped = _.flip(function() {
               *   return _.toArray(arguments);
               * });
               *
               * flipped('a', 'b', 'c', 'd');
               * // => ['d', 'c', 'b', 'a']
               */
              function flip(func) {
                return createWrap(func, WRAP_FLIP_FLAG);
              }

              /**
               * Creates a function that memoizes the result of `func`. If `resolver` is
               * provided, it determines the cache key for storing the result based on the
               * arguments provided to the memoized function. By default, the first argument
               * provided to the memoized function is used as the map cache key. The `func`
               * is invoked with the `this` binding of the memoized function.
               *
               * **Note:** The cache is exposed as the `cache` property on the memoized
               * function. Its creation may be customized by replacing the `_.memoize.Cache`
               * constructor with one whose instances implement the
               * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
               * method interface of `clear`, `delete`, `get`, `has`, and `set`.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Function
               * @param {Function} func The function to have its output memoized.
               * @param {Function} [resolver] The function to resolve the cache key.
               * @returns {Function} Returns the new memoized function.
               * @example
               *
               * var object = { 'a': 1, 'b': 2 };
               * var other = { 'c': 3, 'd': 4 };
               *
               * var values = _.memoize(_.values);
               * values(object);
               * // => [1, 2]
               *
               * values(other);
               * // => [3, 4]
               *
               * object.a = 2;
               * values(object);
               * // => [1, 2]
               *
               * // Modify the result cache.
               * values.cache.set(object, ['a', 'b']);
               * values(object);
               * // => ['a', 'b']
               *
               * // Replace `_.memoize.Cache`.
               * _.memoize.Cache = WeakMap;
               */
              function memoize(func, resolver) {
                if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                  throw new TypeError(FUNC_ERROR_TEXT);
                }
                var memoized = function () {
                  var args = arguments,
                    key = resolver ? resolver.apply(this, args) : args[0],
                    cache = memoized.cache;

                  if (cache.has(key)) {
                    return cache.get(key);
                  }
                  var result = func.apply(this, args);
                  memoized.cache = cache.set(key, result) || cache;
                  return result;
                };
                memoized.cache = new(memoize.Cache || MapCache);
                return memoized;
              }

              // Expose `MapCache`.
              memoize.Cache = MapCache;

              /**
               * Creates a function that negates the result of the predicate `func`. The
               * `func` predicate is invoked with the `this` binding and arguments of the
               * created function.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Function
               * @param {Function} predicate The predicate to negate.
               * @returns {Function} Returns the new negated function.
               * @example
               *
               * function isEven(n) {
               *   return n % 2 == 0;
               * }
               *
               * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
               * // => [1, 3, 5]
               */
              function negate(predicate) {
                if (typeof predicate != 'function') {
                  throw new TypeError(FUNC_ERROR_TEXT);
                }
                return function () {
                  var args = arguments;
                  switch (args.length) {
                  case 0:
                    return !predicate.call(this);
                  case 1:
                    return !predicate.call(this, args[0]);
                  case 2:
                    return !predicate.call(this, args[0], args[1]);
                  case 3:
                    return !predicate.call(this, args[0], args[1], args[2]);
                  }
                  return !predicate.apply(this, args);
                };
              }

              /**
               * Creates a function that is restricted to invoking `func` once. Repeat calls
               * to the function return the value of the first invocation. The `func` is
               * invoked with the `this` binding and arguments of the created function.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Function
               * @param {Function} func The function to restrict.
               * @returns {Function} Returns the new restricted function.
               * @example
               *
               * var initialize = _.once(createApplication);
               * initialize();
               * initialize();
               * // => `createApplication` is invoked once
               */
              function once(func) {
                return before(2, func);
              }

              /**
               * Creates a function that invokes `func` with its arguments transformed.
               *
               * @static
               * @since 4.0.0
               * @memberOf _
               * @category Function
               * @param {Function} func The function to wrap.
               * @param {...(Function|Function[])} [transforms=[_.identity]]
               *  The argument transforms.
               * @returns {Function} Returns the new function.
               * @example
               *
               * function doubled(n) {
               *   return n * 2;
               * }
               *
               * function square(n) {
               *   return n * n;
               * }
               *
               * var func = _.overArgs(function(x, y) {
               *   return [x, y];
               * }, [square, doubled]);
               *
               * func(9, 3);
               * // => [81, 6]
               *
               * func(10, 5);
               * // => [100, 10]
               */
              var overArgs = castRest(function (func, transforms) {
                transforms = (transforms.length == 1 && isArray(transforms[0])) ?
                  arrayMap(transforms[0], baseUnary(getIteratee())) :
                  arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

                var funcsLength = transforms.length;
                return baseRest(function (args) {
                  var index = -1,
                    length = nativeMin(args.length, funcsLength);

                  while (++index < length) {
                    args[index] = transforms[index].call(this, args[index]);
                  }
                  return apply(func, this, args);
                });
              });

              /**
               * Creates a function that invokes `func` with `partials` prepended to the
               * arguments it receives. This method is like `_.bind` except it does **not**
               * alter the `this` binding.
               *
               * The `_.partial.placeholder` value, which defaults to `_` in monolithic
               * builds, may be used as a placeholder for partially applied arguments.
               *
               * **Note:** This method doesn't set the "length" property of partially
               * applied functions.
               *
               * @static
               * @memberOf _
               * @since 0.2.0
               * @category Function
               * @param {Function} func The function to partially apply arguments to.
               * @param {...*} [partials] The arguments to be partially applied.
               * @returns {Function} Returns the new partially applied function.
               * @example
               *
               * function greet(greeting, name) {
               *   return greeting + ' ' + name;
               * }
               *
               * var sayHelloTo = _.partial(greet, 'hello');
               * sayHelloTo('fred');
               * // => 'hello fred'
               *
               * // Partially applied with placeholders.
               * var greetFred = _.partial(greet, _, 'fred');
               * greetFred('hi');
               * // => 'hi fred'
               */
              var partial = baseRest(function (func, partials) {
                var holders = replaceHolders(partials, getHolder(partial));
                return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
              });

              /**
               * This method is like `_.partial` except that partially applied arguments
               * are appended to the arguments it receives.
               *
               * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
               * builds, may be used as a placeholder for partially applied arguments.
               *
               * **Note:** This method doesn't set the "length" property of partially
               * applied functions.
               *
               * @static
               * @memberOf _
               * @since 1.0.0
               * @category Function
               * @param {Function} func The function to partially apply arguments to.
               * @param {...*} [partials] The arguments to be partially applied.
               * @returns {Function} Returns the new partially applied function.
               * @example
               *
               * function greet(greeting, name) {
               *   return greeting + ' ' + name;
               * }
               *
               * var greetFred = _.partialRight(greet, 'fred');
               * greetFred('hi');
               * // => 'hi fred'
               *
               * // Partially applied with placeholders.
               * var sayHelloTo = _.partialRight(greet, 'hello', _);
               * sayHelloTo('fred');
               * // => 'hello fred'
               */
              var partialRight = baseRest(function (func, partials) {
                var holders = replaceHolders(partials, getHolder(partialRight));
                return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
              });

              /**
               * Creates a function that invokes `func` with arguments arranged according
               * to the specified `indexes` where the argument value at the first index is
               * provided as the first argument, the argument value at the second index is
               * provided as the second argument, and so on.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Function
               * @param {Function} func The function to rearrange arguments for.
               * @param {...(number|number[])} indexes The arranged argument indexes.
               * @returns {Function} Returns the new function.
               * @example
               *
               * var rearged = _.rearg(function(a, b, c) {
               *   return [a, b, c];
               * }, [2, 0, 1]);
               *
               * rearged('b', 'c', 'a')
               * // => ['a', 'b', 'c']
               */
              var rearg = flatRest(function (func, indexes) {
                return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
              });

              /**
               * Creates a function that invokes `func` with the `this` binding of the
               * created function and arguments from `start` and beyond provided as
               * an array.
               *
               * **Note:** This method is based on the
               * [rest parameter](https://mdn.io/rest_parameters).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Function
               * @param {Function} func The function to apply a rest parameter to.
               * @param {number} [start=func.length-1] The start position of the rest parameter.
               * @returns {Function} Returns the new function.
               * @example
               *
               * var say = _.rest(function(what, names) {
               *   return what + ' ' + _.initial(names).join(', ') +
               *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
               * });
               *
               * say('hello', 'fred', 'barney', 'pebbles');
               * // => 'hello fred, barney, & pebbles'
               */
              function rest(func, start) {
                if (typeof func != 'function') {
                  throw new TypeError(FUNC_ERROR_TEXT);
                }
                start = start === undefined ? start : toInteger(start);
                return baseRest(func, start);
              }

              /**
               * Creates a function that invokes `func` with the `this` binding of the
               * create function and an array of arguments much like
               * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
               *
               * **Note:** This method is based on the
               * [spread operator](https://mdn.io/spread_operator).
               *
               * @static
               * @memberOf _
               * @since 3.2.0
               * @category Function
               * @param {Function} func The function to spread arguments over.
               * @param {number} [start=0] The start position of the spread.
               * @returns {Function} Returns the new function.
               * @example
               *
               * var say = _.spread(function(who, what) {
               *   return who + ' says ' + what;
               * });
               *
               * say(['fred', 'hello']);
               * // => 'fred says hello'
               *
               * var numbers = Promise.all([
               *   Promise.resolve(40),
               *   Promise.resolve(36)
               * ]);
               *
               * numbers.then(_.spread(function(x, y) {
               *   return x + y;
               * }));
               * // => a Promise of 76
               */
              function spread(func, start) {
                if (typeof func != 'function') {
                  throw new TypeError(FUNC_ERROR_TEXT);
                }
                start = start == null ? 0 : nativeMax(toInteger(start), 0);
                return baseRest(function (args) {
                  var array = args[start],
                    otherArgs = castSlice(args, 0, start);

                  if (array) {
                    arrayPush(otherArgs, array);
                  }
                  return apply(func, this, otherArgs);
                });
              }

              /**
               * Creates a throttled function that only invokes `func` at most once per
               * every `wait` milliseconds. The throttled function comes with a `cancel`
               * method to cancel delayed `func` invocations and a `flush` method to
               * immediately invoke them. Provide `options` to indicate whether `func`
               * should be invoked on the leading and/or trailing edge of the `wait`
               * timeout. The `func` is invoked with the last arguments provided to the
               * throttled function. Subsequent calls to the throttled function return the
               * result of the last `func` invocation.
               *
               * **Note:** If `leading` and `trailing` options are `true`, `func` is
               * invoked on the trailing edge of the timeout only if the throttled function
               * is invoked more than once during the `wait` timeout.
               *
               * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
               * until to the next tick, similar to `setTimeout` with a timeout of `0`.
               *
               * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
               * for details over the differences between `_.throttle` and `_.debounce`.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Function
               * @param {Function} func The function to throttle.
               * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
               * @param {Object} [options={}] The options object.
               * @param {boolean} [options.leading=true]
               *  Specify invoking on the leading edge of the timeout.
               * @param {boolean} [options.trailing=true]
               *  Specify invoking on the trailing edge of the timeout.
               * @returns {Function} Returns the new throttled function.
               * @example
               *
               * // Avoid excessively updating the position while scrolling.
               * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
               *
               * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
               * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
               * jQuery(element).on('click', throttled);
               *
               * // Cancel the trailing throttled invocation.
               * jQuery(window).on('popstate', throttled.cancel);
               */
              function throttle(func, wait, options) {
                var leading = true,
                  trailing = true;

                if (typeof func != 'function') {
                  throw new TypeError(FUNC_ERROR_TEXT);
                }
                if (isObject(options)) {
                  leading = 'leading' in options ? !!options.leading : leading;
                  trailing = 'trailing' in options ? !!options.trailing : trailing;
                }
                return debounce(func, wait, {
                  'leading': leading,
                  'maxWait': wait,
                  'trailing': trailing
                });
              }

              /**
               * Creates a function that accepts up to one argument, ignoring any
               * additional arguments.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Function
               * @param {Function} func The function to cap arguments for.
               * @returns {Function} Returns the new capped function.
               * @example
               *
               * _.map(['6', '8', '10'], _.unary(parseInt));
               * // => [6, 8, 10]
               */
              function unary(func) {
                return ary(func, 1);
              }

              /**
               * Creates a function that provides `value` to `wrapper` as its first
               * argument. Any additional arguments provided to the function are appended
               * to those provided to the `wrapper`. The wrapper is invoked with the `this`
               * binding of the created function.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Function
               * @param {*} value The value to wrap.
               * @param {Function} [wrapper=identity] The wrapper function.
               * @returns {Function} Returns the new function.
               * @example
               *
               * var p = _.wrap(_.escape, function(func, text) {
               *   return '<p>' + func(text) + '</p>';
               * });
               *
               * p('fred, barney, & pebbles');
               * // => '<p>fred, barney, &amp; pebbles</p>'
               */
              function wrap(value, wrapper) {
                return partial(castFunction(wrapper), value);
              }

              /*------------------------------------------------------------------------*/

              /**
               * Casts `value` as an array if it's not one.
               *
               * @static
               * @memberOf _
               * @since 4.4.0
               * @category Lang
               * @param {*} value The value to inspect.
               * @returns {Array} Returns the cast array.
               * @example
               *
               * _.castArray(1);
               * // => [1]
               *
               * _.castArray({ 'a': 1 });
               * // => [{ 'a': 1 }]
               *
               * _.castArray('abc');
               * // => ['abc']
               *
               * _.castArray(null);
               * // => [null]
               *
               * _.castArray(undefined);
               * // => [undefined]
               *
               * _.castArray();
               * // => []
               *
               * var array = [1, 2, 3];
               * console.log(_.castArray(array) === array);
               * // => true
               */
              function castArray() {
                if (!arguments.length) {
                  return [];
                }
                var value = arguments[0];
                return isArray(value) ? value : [value];
              }

              /**
               * Creates a shallow clone of `value`.
               *
               * **Note:** This method is loosely based on the
               * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
               * and supports cloning arrays, array buffers, booleans, date objects, maps,
               * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
               * arrays. The own enumerable properties of `arguments` objects are cloned
               * as plain objects. An empty object is returned for uncloneable values such
               * as error objects, functions, DOM nodes, and WeakMaps.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to clone.
               * @returns {*} Returns the cloned value.
               * @see _.cloneDeep
               * @example
               *
               * var objects = [{ 'a': 1 }, { 'b': 2 }];
               *
               * var shallow = _.clone(objects);
               * console.log(shallow[0] === objects[0]);
               * // => true
               */
              function clone(value) {
                return baseClone(value, CLONE_SYMBOLS_FLAG);
              }

              /**
               * This method is like `_.clone` except that it accepts `customizer` which
               * is invoked to produce the cloned value. If `customizer` returns `undefined`,
               * cloning is handled by the method instead. The `customizer` is invoked with
               * up to four arguments; (value [, index|key, object, stack]).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to clone.
               * @param {Function} [customizer] The function to customize cloning.
               * @returns {*} Returns the cloned value.
               * @see _.cloneDeepWith
               * @example
               *
               * function customizer(value) {
               *   if (_.isElement(value)) {
               *     return value.cloneNode(false);
               *   }
               * }
               *
               * var el = _.cloneWith(document.body, customizer);
               *
               * console.log(el === document.body);
               * // => false
               * console.log(el.nodeName);
               * // => 'BODY'
               * console.log(el.childNodes.length);
               * // => 0
               */
              function cloneWith(value, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined;
                return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
              }

              /**
               * This method is like `_.clone` except that it recursively clones `value`.
               *
               * @static
               * @memberOf _
               * @since 1.0.0
               * @category Lang
               * @param {*} value The value to recursively clone.
               * @returns {*} Returns the deep cloned value.
               * @see _.clone
               * @example
               *
               * var objects = [{ 'a': 1 }, { 'b': 2 }];
               *
               * var deep = _.cloneDeep(objects);
               * console.log(deep[0] === objects[0]);
               * // => false
               */
              function cloneDeep(value) {
                return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
              }

              /**
               * This method is like `_.cloneWith` except that it recursively clones `value`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to recursively clone.
               * @param {Function} [customizer] The function to customize cloning.
               * @returns {*} Returns the deep cloned value.
               * @see _.cloneWith
               * @example
               *
               * function customizer(value) {
               *   if (_.isElement(value)) {
               *     return value.cloneNode(true);
               *   }
               * }
               *
               * var el = _.cloneDeepWith(document.body, customizer);
               *
               * console.log(el === document.body);
               * // => false
               * console.log(el.nodeName);
               * // => 'BODY'
               * console.log(el.childNodes.length);
               * // => 20
               */
              function cloneDeepWith(value, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined;
                return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
              }

              /**
               * Checks if `object` conforms to `source` by invoking the predicate
               * properties of `source` with the corresponding property values of `object`.
               *
               * **Note:** This method is equivalent to `_.conforms` when `source` is
               * partially applied.
               *
               * @static
               * @memberOf _
               * @since 4.14.0
               * @category Lang
               * @param {Object} object The object to inspect.
               * @param {Object} source The object of property predicates to conform to.
               * @returns {boolean} Returns `true` if `object` conforms, else `false`.
               * @example
               *
               * var object = { 'a': 1, 'b': 2 };
               *
               * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
               * // => true
               *
               * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
               * // => false
               */
              function conformsTo(object, source) {
                return source == null || baseConformsTo(object, source, keys(source));
              }

              /**
               * Performs a
               * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
               * comparison between two values to determine if they are equivalent.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to compare.
               * @param {*} other The other value to compare.
               * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
               * @example
               *
               * var object = { 'a': 1 };
               * var other = { 'a': 1 };
               *
               * _.eq(object, object);
               * // => true
               *
               * _.eq(object, other);
               * // => false
               *
               * _.eq('a', 'a');
               * // => true
               *
               * _.eq('a', Object('a'));
               * // => false
               *
               * _.eq(NaN, NaN);
               * // => true
               */
              function eq(value, other) {
                return value === other || (value !== value && other !== other);
              }

              /**
               * Checks if `value` is greater than `other`.
               *
               * @static
               * @memberOf _
               * @since 3.9.0
               * @category Lang
               * @param {*} value The value to compare.
               * @param {*} other The other value to compare.
               * @returns {boolean} Returns `true` if `value` is greater than `other`,
               *  else `false`.
               * @see _.lt
               * @example
               *
               * _.gt(3, 1);
               * // => true
               *
               * _.gt(3, 3);
               * // => false
               *
               * _.gt(1, 3);
               * // => false
               */
              var gt = createRelationalOperation(baseGt);

              /**
               * Checks if `value` is greater than or equal to `other`.
               *
               * @static
               * @memberOf _
               * @since 3.9.0
               * @category Lang
               * @param {*} value The value to compare.
               * @param {*} other The other value to compare.
               * @returns {boolean} Returns `true` if `value` is greater than or equal to
               *  `other`, else `false`.
               * @see _.lte
               * @example
               *
               * _.gte(3, 1);
               * // => true
               *
               * _.gte(3, 3);
               * // => true
               *
               * _.gte(1, 3);
               * // => false
               */
              var gte = createRelationalOperation(function (value, other) {
                return value >= other;
              });

              /**
               * Checks if `value` is likely an `arguments` object.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is an `arguments` object,
               *  else `false`.
               * @example
               *
               * _.isArguments(function() { return arguments; }());
               * // => true
               *
               * _.isArguments([1, 2, 3]);
               * // => false
               */
              var isArguments = baseIsArguments(function () { return arguments; }()) ? baseIsArguments : function (value) {
                return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                  !propertyIsEnumerable.call(value, 'callee');
              };

              /**
               * Checks if `value` is classified as an `Array` object.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is an array, else `false`.
               * @example
               *
               * _.isArray([1, 2, 3]);
               * // => true
               *
               * _.isArray(document.body.children);
               * // => false
               *
               * _.isArray('abc');
               * // => false
               *
               * _.isArray(_.noop);
               * // => false
               */
              var isArray = Array.isArray;

              /**
               * Checks if `value` is classified as an `ArrayBuffer` object.
               *
               * @static
               * @memberOf _
               * @since 4.3.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
               * @example
               *
               * _.isArrayBuffer(new ArrayBuffer(2));
               * // => true
               *
               * _.isArrayBuffer(new Array(2));
               * // => false
               */
              var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

              /**
               * Checks if `value` is array-like. A value is considered array-like if it's
               * not a function and has a `value.length` that's an integer greater than or
               * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
               * @example
               *
               * _.isArrayLike([1, 2, 3]);
               * // => true
               *
               * _.isArrayLike(document.body.children);
               * // => true
               *
               * _.isArrayLike('abc');
               * // => true
               *
               * _.isArrayLike(_.noop);
               * // => false
               */
              function isArrayLike(value) {
                return value != null && isLength(value.length) && !isFunction(value);
              }

              /**
               * This method is like `_.isArrayLike` except that it also checks if `value`
               * is an object.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is an array-like object,
               *  else `false`.
               * @example
               *
               * _.isArrayLikeObject([1, 2, 3]);
               * // => true
               *
               * _.isArrayLikeObject(document.body.children);
               * // => true
               *
               * _.isArrayLikeObject('abc');
               * // => false
               *
               * _.isArrayLikeObject(_.noop);
               * // => false
               */
              function isArrayLikeObject(value) {
                return isObjectLike(value) && isArrayLike(value);
              }

              /**
               * Checks if `value` is classified as a boolean primitive or object.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
               * @example
               *
               * _.isBoolean(false);
               * // => true
               *
               * _.isBoolean(null);
               * // => false
               */
              function isBoolean(value) {
                return value === true || value === false ||
                  (isObjectLike(value) && baseGetTag(value) == boolTag);
              }

              /**
               * Checks if `value` is a buffer.
               *
               * @static
               * @memberOf _
               * @since 4.3.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
               * @example
               *
               * _.isBuffer(new Buffer(2));
               * // => true
               *
               * _.isBuffer(new Uint8Array(2));
               * // => false
               */
              var isBuffer = nativeIsBuffer || stubFalse;

              /**
               * Checks if `value` is classified as a `Date` object.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
               * @example
               *
               * _.isDate(new Date);
               * // => true
               *
               * _.isDate('Mon April 23 2012');
               * // => false
               */
              var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

              /**
               * Checks if `value` is likely a DOM element.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
               * @example
               *
               * _.isElement(document.body);
               * // => true
               *
               * _.isElement('<body>');
               * // => false
               */
              function isElement(value) {
                return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
              }

              /**
               * Checks if `value` is an empty object, collection, map, or set.
               *
               * Objects are considered empty if they have no own enumerable string keyed
               * properties.
               *
               * Array-like values such as `arguments` objects, arrays, buffers, strings, or
               * jQuery-like collections are considered empty if they have a `length` of `0`.
               * Similarly, maps and sets are considered empty if they have a `size` of `0`.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is empty, else `false`.
               * @example
               *
               * _.isEmpty(null);
               * // => true
               *
               * _.isEmpty(true);
               * // => true
               *
               * _.isEmpty(1);
               * // => true
               *
               * _.isEmpty([1, 2, 3]);
               * // => false
               *
               * _.isEmpty({ 'a': 1 });
               * // => false
               */
              function isEmpty(value) {
                if (value == null) {
                  return true;
                }
                if (isArrayLike(value) &&
                  (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                    isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                  return !value.length;
                }
                var tag = getTag(value);
                if (tag == mapTag || tag == setTag) {
                  return !value.size;
                }
                if (isPrototype(value)) {
                  return !baseKeys(value).length;
                }
                for (var key in value) {
                  if (hasOwnProperty.call(value, key)) {
                    return false;
                  }
                }
                return true;
              }

              /**
               * Performs a deep comparison between two values to determine if they are
               * equivalent.
               *
               * **Note:** This method supports comparing arrays, array buffers, booleans,
               * date objects, error objects, maps, numbers, `Object` objects, regexes,
               * sets, strings, symbols, and typed arrays. `Object` objects are compared
               * by their own, not inherited, enumerable properties. Functions and DOM
               * nodes are compared by strict equality, i.e. `===`.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to compare.
               * @param {*} other The other value to compare.
               * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
               * @example
               *
               * var object = { 'a': 1 };
               * var other = { 'a': 1 };
               *
               * _.isEqual(object, other);
               * // => true
               *
               * object === other;
               * // => false
               */
              function isEqual(value, other) {
                return baseIsEqual(value, other);
              }

              /**
               * This method is like `_.isEqual` except that it accepts `customizer` which
               * is invoked to compare values. If `customizer` returns `undefined`, comparisons
               * are handled by the method instead. The `customizer` is invoked with up to
               * six arguments: (objValue, othValue [, index|key, object, other, stack]).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to compare.
               * @param {*} other The other value to compare.
               * @param {Function} [customizer] The function to customize comparisons.
               * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
               * @example
               *
               * function isGreeting(value) {
               *   return /^h(?:i|ello)$/.test(value);
               * }
               *
               * function customizer(objValue, othValue) {
               *   if (isGreeting(objValue) && isGreeting(othValue)) {
               *     return true;
               *   }
               * }
               *
               * var array = ['hello', 'goodbye'];
               * var other = ['hi', 'goodbye'];
               *
               * _.isEqualWith(array, other, customizer);
               * // => true
               */
              function isEqualWith(value, other, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined;
                var result = customizer ? customizer(value, other) : undefined;
                return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
              }

              /**
               * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
               * `SyntaxError`, `TypeError`, or `URIError` object.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
               * @example
               *
               * _.isError(new Error);
               * // => true
               *
               * _.isError(Error);
               * // => false
               */
              function isError(value) {
                if (!isObjectLike(value)) {
                  return false;
                }
                var tag = baseGetTag(value);
                return tag == errorTag || tag == domExcTag ||
                  (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
              }

              /**
               * Checks if `value` is a finite primitive number.
               *
               * **Note:** This method is based on
               * [`Number.isFinite`](https://mdn.io/Number/isFinite).
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
               * @example
               *
               * _.isFinite(3);
               * // => true
               *
               * _.isFinite(Number.MIN_VALUE);
               * // => true
               *
               * _.isFinite(Infinity);
               * // => false
               *
               * _.isFinite('3');
               * // => false
               */
              function isFinite(value) {
                return typeof value == 'number' && nativeIsFinite(value);
              }

              /**
               * Checks if `value` is classified as a `Function` object.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a function, else `false`.
               * @example
               *
               * _.isFunction(_);
               * // => true
               *
               * _.isFunction(/abc/);
               * // => false
               */
              function isFunction(value) {
                if (!isObject(value)) {
                  return false;
                }
                // The use of `Object#toString` avoids issues with the `typeof` operator
                // in Safari 9 which returns 'object' for typed arrays and other constructors.
                var tag = baseGetTag(value);
                return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
              }

              /**
               * Checks if `value` is an integer.
               *
               * **Note:** This method is based on
               * [`Number.isInteger`](https://mdn.io/Number/isInteger).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
               * @example
               *
               * _.isInteger(3);
               * // => true
               *
               * _.isInteger(Number.MIN_VALUE);
               * // => false
               *
               * _.isInteger(Infinity);
               * // => false
               *
               * _.isInteger('3');
               * // => false
               */
              function isInteger(value) {
                return typeof value == 'number' && value == toInteger(value);
              }

              /**
               * Checks if `value` is a valid array-like length.
               *
               * **Note:** This method is loosely based on
               * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
               * @example
               *
               * _.isLength(3);
               * // => true
               *
               * _.isLength(Number.MIN_VALUE);
               * // => false
               *
               * _.isLength(Infinity);
               * // => false
               *
               * _.isLength('3');
               * // => false
               */
              function isLength(value) {
                return typeof value == 'number' &&
                  value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
              }

              /**
               * Checks if `value` is the
               * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
               * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is an object, else `false`.
               * @example
               *
               * _.isObject({});
               * // => true
               *
               * _.isObject([1, 2, 3]);
               * // => true
               *
               * _.isObject(_.noop);
               * // => true
               *
               * _.isObject(null);
               * // => false
               */
              function isObject(value) {
                var type = typeof value;
                return value != null && (type == 'object' || type == 'function');
              }

              /**
               * Checks if `value` is object-like. A value is object-like if it's not `null`
               * and has a `typeof` result of "object".
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
               * @example
               *
               * _.isObjectLike({});
               * // => true
               *
               * _.isObjectLike([1, 2, 3]);
               * // => true
               *
               * _.isObjectLike(_.noop);
               * // => false
               *
               * _.isObjectLike(null);
               * // => false
               */
              function isObjectLike(value) {
                return value != null && typeof value == 'object';
              }

              /**
               * Checks if `value` is classified as a `Map` object.
               *
               * @static
               * @memberOf _
               * @since 4.3.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a map, else `false`.
               * @example
               *
               * _.isMap(new Map);
               * // => true
               *
               * _.isMap(new WeakMap);
               * // => false
               */
              var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

              /**
               * Performs a partial deep comparison between `object` and `source` to
               * determine if `object` contains equivalent property values.
               *
               * **Note:** This method is equivalent to `_.matches` when `source` is
               * partially applied.
               *
               * Partial comparisons will match empty array and empty object `source`
               * values against any array or object value, respectively. See `_.isEqual`
               * for a list of supported value comparisons.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Lang
               * @param {Object} object The object to inspect.
               * @param {Object} source The object of property values to match.
               * @returns {boolean} Returns `true` if `object` is a match, else `false`.
               * @example
               *
               * var object = { 'a': 1, 'b': 2 };
               *
               * _.isMatch(object, { 'b': 2 });
               * // => true
               *
               * _.isMatch(object, { 'b': 1 });
               * // => false
               */
              function isMatch(object, source) {
                return object === source || baseIsMatch(object, source, getMatchData(source));
              }

              /**
               * This method is like `_.isMatch` except that it accepts `customizer` which
               * is invoked to compare values. If `customizer` returns `undefined`, comparisons
               * are handled by the method instead. The `customizer` is invoked with five
               * arguments: (objValue, srcValue, index|key, object, source).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {Object} object The object to inspect.
               * @param {Object} source The object of property values to match.
               * @param {Function} [customizer] The function to customize comparisons.
               * @returns {boolean} Returns `true` if `object` is a match, else `false`.
               * @example
               *
               * function isGreeting(value) {
               *   return /^h(?:i|ello)$/.test(value);
               * }
               *
               * function customizer(objValue, srcValue) {
               *   if (isGreeting(objValue) && isGreeting(srcValue)) {
               *     return true;
               *   }
               * }
               *
               * var object = { 'greeting': 'hello' };
               * var source = { 'greeting': 'hi' };
               *
               * _.isMatchWith(object, source, customizer);
               * // => true
               */
              function isMatchWith(object, source, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined;
                return baseIsMatch(object, source, getMatchData(source), customizer);
              }

              /**
               * Checks if `value` is `NaN`.
               *
               * **Note:** This method is based on
               * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
               * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
               * `undefined` and other non-number values.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
               * @example
               *
               * _.isNaN(NaN);
               * // => true
               *
               * _.isNaN(new Number(NaN));
               * // => true
               *
               * isNaN(undefined);
               * // => true
               *
               * _.isNaN(undefined);
               * // => false
               */
              function isNaN(value) {
                // An `NaN` primitive is the only value that is not equal to itself.
                // Perform the `toStringTag` check first to avoid errors with some
                // ActiveX objects in IE.
                return isNumber(value) && value != +value;
              }

              /**
               * Checks if `value` is a pristine native function.
               *
               * **Note:** This method can't reliably detect native functions in the presence
               * of the core-js package because core-js circumvents this kind of detection.
               * Despite multiple requests, the core-js maintainer has made it clear: any
               * attempt to fix the detection will be obstructed. As a result, we're left
               * with little choice but to throw an error. Unfortunately, this also affects
               * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
               * which rely on core-js.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a native function,
               *  else `false`.
               * @example
               *
               * _.isNative(Array.prototype.push);
               * // => true
               *
               * _.isNative(_);
               * // => false
               */
              function isNative(value) {
                if (isMaskable(value)) {
                  throw new Error(CORE_ERROR_TEXT);
                }
                return baseIsNative(value);
              }

              /**
               * Checks if `value` is `null`.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
               * @example
               *
               * _.isNull(null);
               * // => true
               *
               * _.isNull(void 0);
               * // => false
               */
              function isNull(value) {
                return value === null;
              }

              /**
               * Checks if `value` is `null` or `undefined`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
               * @example
               *
               * _.isNil(null);
               * // => true
               *
               * _.isNil(void 0);
               * // => true
               *
               * _.isNil(NaN);
               * // => false
               */
              function isNil(value) {
                return value == null;
              }

              /**
               * Checks if `value` is classified as a `Number` primitive or object.
               *
               * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
               * classified as numbers, use the `_.isFinite` method.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a number, else `false`.
               * @example
               *
               * _.isNumber(3);
               * // => true
               *
               * _.isNumber(Number.MIN_VALUE);
               * // => true
               *
               * _.isNumber(Infinity);
               * // => true
               *
               * _.isNumber('3');
               * // => false
               */
              function isNumber(value) {
                return typeof value == 'number' ||
                  (isObjectLike(value) && baseGetTag(value) == numberTag);
              }

              /**
               * Checks if `value` is a plain object, that is, an object created by the
               * `Object` constructor or one with a `[[Prototype]]` of `null`.
               *
               * @static
               * @memberOf _
               * @since 0.8.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
               * @example
               *
               * function Foo() {
               *   this.a = 1;
               * }
               *
               * _.isPlainObject(new Foo);
               * // => false
               *
               * _.isPlainObject([1, 2, 3]);
               * // => false
               *
               * _.isPlainObject({ 'x': 0, 'y': 0 });
               * // => true
               *
               * _.isPlainObject(Object.create(null));
               * // => true
               */
              function isPlainObject(value) {
                if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                  return false;
                }
                var proto = getPrototype(value);
                if (proto === null) {
                  return true;
                }
                var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                return typeof Ctor == 'function' && Ctor instanceof Ctor &&
                  funcToString.call(Ctor) == objectCtorString;
              }

              /**
               * Checks if `value` is classified as a `RegExp` object.
               *
               * @static
               * @memberOf _
               * @since 0.1.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
               * @example
               *
               * _.isRegExp(/abc/);
               * // => true
               *
               * _.isRegExp('/abc/');
               * // => false
               */
              var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

              /**
               * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
               * double precision number which isn't the result of a rounded unsafe integer.
               *
               * **Note:** This method is based on
               * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
               * @example
               *
               * _.isSafeInteger(3);
               * // => true
               *
               * _.isSafeInteger(Number.MIN_VALUE);
               * // => false
               *
               * _.isSafeInteger(Infinity);
               * // => false
               *
               * _.isSafeInteger('3');
               * // => false
               */
              function isSafeInteger(value) {
                return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
              }

              /**
               * Checks if `value` is classified as a `Set` object.
               *
               * @static
               * @memberOf _
               * @since 4.3.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a set, else `false`.
               * @example
               *
               * _.isSet(new Set);
               * // => true
               *
               * _.isSet(new WeakSet);
               * // => false
               */
              var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

              /**
               * Checks if `value` is classified as a `String` primitive or object.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a string, else `false`.
               * @example
               *
               * _.isString('abc');
               * // => true
               *
               * _.isString(1);
               * // => false
               */
              function isString(value) {
                return typeof value == 'string' ||
                  (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
              }

              /**
               * Checks if `value` is classified as a `Symbol` primitive or object.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
               * @example
               *
               * _.isSymbol(Symbol.iterator);
               * // => true
               *
               * _.isSymbol('abc');
               * // => false
               */
              function isSymbol(value) {
                return typeof value == 'symbol' ||
                  (isObjectLike(value) && baseGetTag(value) == symbolTag);
              }

              /**
               * Checks if `value` is classified as a typed array.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
               * @example
               *
               * _.isTypedArray(new Uint8Array);
               * // => true
               *
               * _.isTypedArray([]);
               * // => false
               */
              var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

              /**
               * Checks if `value` is `undefined`.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
               * @example
               *
               * _.isUndefined(void 0);
               * // => true
               *
               * _.isUndefined(null);
               * // => false
               */
              function isUndefined(value) {
                return value === undefined;
              }

              /**
               * Checks if `value` is classified as a `WeakMap` object.
               *
               * @static
               * @memberOf _
               * @since 4.3.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
               * @example
               *
               * _.isWeakMap(new WeakMap);
               * // => true
               *
               * _.isWeakMap(new Map);
               * // => false
               */
              function isWeakMap(value) {
                return isObjectLike(value) && getTag(value) == weakMapTag;
              }

              /**
               * Checks if `value` is classified as a `WeakSet` object.
               *
               * @static
               * @memberOf _
               * @since 4.3.0
               * @category Lang
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
               * @example
               *
               * _.isWeakSet(new WeakSet);
               * // => true
               *
               * _.isWeakSet(new Set);
               * // => false
               */
              function isWeakSet(value) {
                return isObjectLike(value) && baseGetTag(value) == weakSetTag;
              }

              /**
               * Checks if `value` is less than `other`.
               *
               * @static
               * @memberOf _
               * @since 3.9.0
               * @category Lang
               * @param {*} value The value to compare.
               * @param {*} other The other value to compare.
               * @returns {boolean} Returns `true` if `value` is less than `other`,
               *  else `false`.
               * @see _.gt
               * @example
               *
               * _.lt(1, 3);
               * // => true
               *
               * _.lt(3, 3);
               * // => false
               *
               * _.lt(3, 1);
               * // => false
               */
              var lt = createRelationalOperation(baseLt);

              /**
               * Checks if `value` is less than or equal to `other`.
               *
               * @static
               * @memberOf _
               * @since 3.9.0
               * @category Lang
               * @param {*} value The value to compare.
               * @param {*} other The other value to compare.
               * @returns {boolean} Returns `true` if `value` is less than or equal to
               *  `other`, else `false`.
               * @see _.gte
               * @example
               *
               * _.lte(1, 3);
               * // => true
               *
               * _.lte(3, 3);
               * // => true
               *
               * _.lte(3, 1);
               * // => false
               */
              var lte = createRelationalOperation(function (value, other) {
                return value <= other;
              });

              /**
               * Converts `value` to an array.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Lang
               * @param {*} value The value to convert.
               * @returns {Array} Returns the converted array.
               * @example
               *
               * _.toArray({ 'a': 1, 'b': 2 });
               * // => [1, 2]
               *
               * _.toArray('abc');
               * // => ['a', 'b', 'c']
               *
               * _.toArray(1);
               * // => []
               *
               * _.toArray(null);
               * // => []
               */
              function toArray(value) {
                if (!value) {
                  return [];
                }
                if (isArrayLike(value)) {
                  return isString(value) ? stringToArray(value) : copyArray(value);
                }
                if (symIterator && value[symIterator]) {
                  return iteratorToArray(value[symIterator]());
                }
                var tag = getTag(value),
                  func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

                return func(value);
              }

              /**
               * Converts `value` to a finite number.
               *
               * @static
               * @memberOf _
               * @since 4.12.0
               * @category Lang
               * @param {*} value The value to convert.
               * @returns {number} Returns the converted number.
               * @example
               *
               * _.toFinite(3.2);
               * // => 3.2
               *
               * _.toFinite(Number.MIN_VALUE);
               * // => 5e-324
               *
               * _.toFinite(Infinity);
               * // => 1.7976931348623157e+308
               *
               * _.toFinite('3.2');
               * // => 3.2
               */
              function toFinite(value) {
                if (!value) {
                  return value === 0 ? value : 0;
                }
                value = toNumber(value);
                if (value === INFINITY || value === -INFINITY) {
                  var sign = (value < 0 ? -1 : 1);
                  return sign * MAX_INTEGER;
                }
                return value === value ? value : 0;
              }

              /**
               * Converts `value` to an integer.
               *
               * **Note:** This method is loosely based on
               * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to convert.
               * @returns {number} Returns the converted integer.
               * @example
               *
               * _.toInteger(3.2);
               * // => 3
               *
               * _.toInteger(Number.MIN_VALUE);
               * // => 0
               *
               * _.toInteger(Infinity);
               * // => 1.7976931348623157e+308
               *
               * _.toInteger('3.2');
               * // => 3
               */
              function toInteger(value) {
                var result = toFinite(value),
                  remainder = result % 1;

                return result === result ? (remainder ? result - remainder : result) : 0;
              }

              /**
               * Converts `value` to an integer suitable for use as the length of an
               * array-like object.
               *
               * **Note:** This method is based on
               * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to convert.
               * @returns {number} Returns the converted integer.
               * @example
               *
               * _.toLength(3.2);
               * // => 3
               *
               * _.toLength(Number.MIN_VALUE);
               * // => 0
               *
               * _.toLength(Infinity);
               * // => 4294967295
               *
               * _.toLength('3.2');
               * // => 3
               */
              function toLength(value) {
                return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
              }

              /**
               * Converts `value` to a number.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to process.
               * @returns {number} Returns the number.
               * @example
               *
               * _.toNumber(3.2);
               * // => 3.2
               *
               * _.toNumber(Number.MIN_VALUE);
               * // => 5e-324
               *
               * _.toNumber(Infinity);
               * // => Infinity
               *
               * _.toNumber('3.2');
               * // => 3.2
               */
              function toNumber(value) {
                if (typeof value == 'number') {
                  return value;
                }
                if (isSymbol(value)) {
                  return NAN;
                }
                if (isObject(value)) {
                  var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                  value = isObject(other) ? (other + '') : other;
                }
                if (typeof value != 'string') {
                  return value === 0 ? value : +value;
                }
                value = value.replace(reTrim, '');
                var isBinary = reIsBinary.test(value);
                return (isBinary || reIsOctal.test(value)) ?
                  freeParseInt(value.slice(2), isBinary ? 2 : 8) :
                  (reIsBadHex.test(value) ? NAN : +value);
              }

              /**
               * Converts `value` to a plain object flattening inherited enumerable string
               * keyed properties of `value` to own properties of the plain object.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Lang
               * @param {*} value The value to convert.
               * @returns {Object} Returns the converted plain object.
               * @example
               *
               * function Foo() {
               *   this.b = 2;
               * }
               *
               * Foo.prototype.c = 3;
               *
               * _.assign({ 'a': 1 }, new Foo);
               * // => { 'a': 1, 'b': 2 }
               *
               * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
               * // => { 'a': 1, 'b': 2, 'c': 3 }
               */
              function toPlainObject(value) {
                return copyObject(value, keysIn(value));
              }

              /**
               * Converts `value` to a safe integer. A safe integer can be compared and
               * represented correctly.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to convert.
               * @returns {number} Returns the converted integer.
               * @example
               *
               * _.toSafeInteger(3.2);
               * // => 3
               *
               * _.toSafeInteger(Number.MIN_VALUE);
               * // => 0
               *
               * _.toSafeInteger(Infinity);
               * // => 9007199254740991
               *
               * _.toSafeInteger('3.2');
               * // => 3
               */
              function toSafeInteger(value) {
                return value ?
                  baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) :
                  (value === 0 ? value : 0);
              }

              /**
               * Converts `value` to a string. An empty string is returned for `null`
               * and `undefined` values. The sign of `-0` is preserved.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Lang
               * @param {*} value The value to convert.
               * @returns {string} Returns the converted string.
               * @example
               *
               * _.toString(null);
               * // => ''
               *
               * _.toString(-0);
               * // => '-0'
               *
               * _.toString([1, 2, 3]);
               * // => '1,2,3'
               */
              function toString(value) {
                return value == null ? '' : baseToString(value);
              }

              /*------------------------------------------------------------------------*/

              /**
               * Assigns own enumerable string keyed properties of source objects to the
               * destination object. Source objects are applied from left to right.
               * Subsequent sources overwrite property assignments of previous sources.
               *
               * **Note:** This method mutates `object` and is loosely based on
               * [`Object.assign`](https://mdn.io/Object/assign).
               *
               * @static
               * @memberOf _
               * @since 0.10.0
               * @category Object
               * @param {Object} object The destination object.
               * @param {...Object} [sources] The source objects.
               * @returns {Object} Returns `object`.
               * @see _.assignIn
               * @example
               *
               * function Foo() {
               *   this.a = 1;
               * }
               *
               * function Bar() {
               *   this.c = 3;
               * }
               *
               * Foo.prototype.b = 2;
               * Bar.prototype.d = 4;
               *
               * _.assign({ 'a': 0 }, new Foo, new Bar);
               * // => { 'a': 1, 'c': 3 }
               */
              var assign = createAssigner(function (object, source) {
                if (isPrototype(source) || isArrayLike(source)) {
                  copyObject(source, keys(source), object);
                  return;
                }
                for (var key in source) {
                  if (hasOwnProperty.call(source, key)) {
                    assignValue(object, key, source[key]);
                  }
                }
              });

              /**
               * This method is like `_.assign` except that it iterates over own and
               * inherited source properties.
               *
               * **Note:** This method mutates `object`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @alias extend
               * @category Object
               * @param {Object} object The destination object.
               * @param {...Object} [sources] The source objects.
               * @returns {Object} Returns `object`.
               * @see _.assign
               * @example
               *
               * function Foo() {
               *   this.a = 1;
               * }
               *
               * function Bar() {
               *   this.c = 3;
               * }
               *
               * Foo.prototype.b = 2;
               * Bar.prototype.d = 4;
               *
               * _.assignIn({ 'a': 0 }, new Foo, new Bar);
               * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
               */
              var assignIn = createAssigner(function (object, source) {
                copyObject(source, keysIn(source), object);
              });

              /**
               * This method is like `_.assignIn` except that it accepts `customizer`
               * which is invoked to produce the assigned values. If `customizer` returns
               * `undefined`, assignment is handled by the method instead. The `customizer`
               * is invoked with five arguments: (objValue, srcValue, key, object, source).
               *
               * **Note:** This method mutates `object`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @alias extendWith
               * @category Object
               * @param {Object} object The destination object.
               * @param {...Object} sources The source objects.
               * @param {Function} [customizer] The function to customize assigned values.
               * @returns {Object} Returns `object`.
               * @see _.assignWith
               * @example
               *
               * function customizer(objValue, srcValue) {
               *   return _.isUndefined(objValue) ? srcValue : objValue;
               * }
               *
               * var defaults = _.partialRight(_.assignInWith, customizer);
               *
               * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
               * // => { 'a': 1, 'b': 2 }
               */
              var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
                copyObject(source, keysIn(source), object, customizer);
              });

              /**
               * This method is like `_.assign` except that it accepts `customizer`
               * which is invoked to produce the assigned values. If `customizer` returns
               * `undefined`, assignment is handled by the method instead. The `customizer`
               * is invoked with five arguments: (objValue, srcValue, key, object, source).
               *
               * **Note:** This method mutates `object`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Object
               * @param {Object} object The destination object.
               * @param {...Object} sources The source objects.
               * @param {Function} [customizer] The function to customize assigned values.
               * @returns {Object} Returns `object`.
               * @see _.assignInWith
               * @example
               *
               * function customizer(objValue, srcValue) {
               *   return _.isUndefined(objValue) ? srcValue : objValue;
               * }
               *
               * var defaults = _.partialRight(_.assignWith, customizer);
               *
               * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
               * // => { 'a': 1, 'b': 2 }
               */
              var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
                copyObject(source, keys(source), object, customizer);
              });

              /**
               * Creates an array of values corresponding to `paths` of `object`.
               *
               * @static
               * @memberOf _
               * @since 1.0.0
               * @category Object
               * @param {Object} object The object to iterate over.
               * @param {...(string|string[])} [paths] The property paths to pick.
               * @returns {Array} Returns the picked values.
               * @example
               *
               * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
               *
               * _.at(object, ['a[0].b.c', 'a[1]']);
               * // => [3, 4]
               */
              var at = flatRest(baseAt);

              /**
               * Creates an object that inherits from the `prototype` object. If a
               * `properties` object is given, its own enumerable string keyed properties
               * are assigned to the created object.
               *
               * @static
               * @memberOf _
               * @since 2.3.0
               * @category Object
               * @param {Object} prototype The object to inherit from.
               * @param {Object} [properties] The properties to assign to the object.
               * @returns {Object} Returns the new object.
               * @example
               *
               * function Shape() {
               *   this.x = 0;
               *   this.y = 0;
               * }
               *
               * function Circle() {
               *   Shape.call(this);
               * }
               *
               * Circle.prototype = _.create(Shape.prototype, {
               *   'constructor': Circle
               * });
               *
               * var circle = new Circle;
               * circle instanceof Circle;
               * // => true
               *
               * circle instanceof Shape;
               * // => true
               */
              function create(prototype, properties) {
                var result = baseCreate(prototype);
                return properties == null ? result : baseAssign(result, properties);
              }

              /**
               * Assigns own and inherited enumerable string keyed properties of source
               * objects to the destination object for all destination properties that
               * resolve to `undefined`. Source objects are applied from left to right.
               * Once a property is set, additional values of the same property are ignored.
               *
               * **Note:** This method mutates `object`.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Object
               * @param {Object} object The destination object.
               * @param {...Object} [sources] The source objects.
               * @returns {Object} Returns `object`.
               * @see _.defaultsDeep
               * @example
               *
               * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
               * // => { 'a': 1, 'b': 2 }
               */
              var defaults = baseRest(function (args) {
                args.push(undefined, customDefaultsAssignIn);
                return apply(assignInWith, undefined, args);
              });

              /**
               * This method is like `_.defaults` except that it recursively assigns
               * default properties.
               *
               * **Note:** This method mutates `object`.
               *
               * @static
               * @memberOf _
               * @since 3.10.0
               * @category Object
               * @param {Object} object The destination object.
               * @param {...Object} [sources] The source objects.
               * @returns {Object} Returns `object`.
               * @see _.defaults
               * @example
               *
               * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
               * // => { 'a': { 'b': 2, 'c': 3 } }
               */
              var defaultsDeep = baseRest(function (args) {
                args.push(undefined, customDefaultsMerge);
                return apply(mergeWith, undefined, args);
              });

              /**
               * This method is like `_.find` except that it returns the key of the first
               * element `predicate` returns truthy for instead of the element itself.
               *
               * @static
               * @memberOf _
               * @since 1.1.0
               * @category Object
               * @param {Object} object The object to inspect.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @returns {string|undefined} Returns the key of the matched element,
               *  else `undefined`.
               * @example
               *
               * var users = {
               *   'barney':  { 'age': 36, 'active': true },
               *   'fred':    { 'age': 40, 'active': false },
               *   'pebbles': { 'age': 1,  'active': true }
               * };
               *
               * _.findKey(users, function(o) { return o.age < 40; });
               * // => 'barney' (iteration order is not guaranteed)
               *
               * // The `_.matches` iteratee shorthand.
               * _.findKey(users, { 'age': 1, 'active': true });
               * // => 'pebbles'
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.findKey(users, ['active', false]);
               * // => 'fred'
               *
               * // The `_.property` iteratee shorthand.
               * _.findKey(users, 'active');
               * // => 'barney'
               */
              function findKey(object, predicate) {
                return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
              }

              /**
               * This method is like `_.findKey` except that it iterates over elements of
               * a collection in the opposite order.
               *
               * @static
               * @memberOf _
               * @since 2.0.0
               * @category Object
               * @param {Object} object The object to inspect.
               * @param {Function} [predicate=_.identity] The function invoked per iteration.
               * @returns {string|undefined} Returns the key of the matched element,
               *  else `undefined`.
               * @example
               *
               * var users = {
               *   'barney':  { 'age': 36, 'active': true },
               *   'fred':    { 'age': 40, 'active': false },
               *   'pebbles': { 'age': 1,  'active': true }
               * };
               *
               * _.findLastKey(users, function(o) { return o.age < 40; });
               * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
               *
               * // The `_.matches` iteratee shorthand.
               * _.findLastKey(users, { 'age': 36, 'active': true });
               * // => 'barney'
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.findLastKey(users, ['active', false]);
               * // => 'fred'
               *
               * // The `_.property` iteratee shorthand.
               * _.findLastKey(users, 'active');
               * // => 'pebbles'
               */
              function findLastKey(object, predicate) {
                return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
              }

              /**
               * Iterates over own and inherited enumerable string keyed properties of an
               * object and invokes `iteratee` for each property. The iteratee is invoked
               * with three arguments: (value, key, object). Iteratee functions may exit
               * iteration early by explicitly returning `false`.
               *
               * @static
               * @memberOf _
               * @since 0.3.0
               * @category Object
               * @param {Object} object The object to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @returns {Object} Returns `object`.
               * @see _.forInRight
               * @example
               *
               * function Foo() {
               *   this.a = 1;
               *   this.b = 2;
               * }
               *
               * Foo.prototype.c = 3;
               *
               * _.forIn(new Foo, function(value, key) {
               *   console.log(key);
               * });
               * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
               */
              function forIn(object, iteratee) {
                return object == null ?
                  object :
                  baseFor(object, getIteratee(iteratee, 3), keysIn);
              }

              /**
               * This method is like `_.forIn` except that it iterates over properties of
               * `object` in the opposite order.
               *
               * @static
               * @memberOf _
               * @since 2.0.0
               * @category Object
               * @param {Object} object The object to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @returns {Object} Returns `object`.
               * @see _.forIn
               * @example
               *
               * function Foo() {
               *   this.a = 1;
               *   this.b = 2;
               * }
               *
               * Foo.prototype.c = 3;
               *
               * _.forInRight(new Foo, function(value, key) {
               *   console.log(key);
               * });
               * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
               */
              function forInRight(object, iteratee) {
                return object == null ?
                  object :
                  baseForRight(object, getIteratee(iteratee, 3), keysIn);
              }

              /**
               * Iterates over own enumerable string keyed properties of an object and
               * invokes `iteratee` for each property. The iteratee is invoked with three
               * arguments: (value, key, object). Iteratee functions may exit iteration
               * early by explicitly returning `false`.
               *
               * @static
               * @memberOf _
               * @since 0.3.0
               * @category Object
               * @param {Object} object The object to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @returns {Object} Returns `object`.
               * @see _.forOwnRight
               * @example
               *
               * function Foo() {
               *   this.a = 1;
               *   this.b = 2;
               * }
               *
               * Foo.prototype.c = 3;
               *
               * _.forOwn(new Foo, function(value, key) {
               *   console.log(key);
               * });
               * // => Logs 'a' then 'b' (iteration order is not guaranteed).
               */
              function forOwn(object, iteratee) {
                return object && baseForOwn(object, getIteratee(iteratee, 3));
              }

              /**
               * This method is like `_.forOwn` except that it iterates over properties of
               * `object` in the opposite order.
               *
               * @static
               * @memberOf _
               * @since 2.0.0
               * @category Object
               * @param {Object} object The object to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @returns {Object} Returns `object`.
               * @see _.forOwn
               * @example
               *
               * function Foo() {
               *   this.a = 1;
               *   this.b = 2;
               * }
               *
               * Foo.prototype.c = 3;
               *
               * _.forOwnRight(new Foo, function(value, key) {
               *   console.log(key);
               * });
               * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
               */
              function forOwnRight(object, iteratee) {
                return object && baseForOwnRight(object, getIteratee(iteratee, 3));
              }

              /**
               * Creates an array of function property names from own enumerable properties
               * of `object`.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Object
               * @param {Object} object The object to inspect.
               * @returns {Array} Returns the function names.
               * @see _.functionsIn
               * @example
               *
               * function Foo() {
               *   this.a = _.constant('a');
               *   this.b = _.constant('b');
               * }
               *
               * Foo.prototype.c = _.constant('c');
               *
               * _.functions(new Foo);
               * // => ['a', 'b']
               */
              function functions(object) {
                return object == null ? [] : baseFunctions(object, keys(object));
              }

              /**
               * Creates an array of function property names from own and inherited
               * enumerable properties of `object`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Object
               * @param {Object} object The object to inspect.
               * @returns {Array} Returns the function names.
               * @see _.functions
               * @example
               *
               * function Foo() {
               *   this.a = _.constant('a');
               *   this.b = _.constant('b');
               * }
               *
               * Foo.prototype.c = _.constant('c');
               *
               * _.functionsIn(new Foo);
               * // => ['a', 'b', 'c']
               */
              function functionsIn(object) {
                return object == null ? [] : baseFunctions(object, keysIn(object));
              }

              /**
               * Gets the value at `path` of `object`. If the resolved value is
               * `undefined`, the `defaultValue` is returned in its place.
               *
               * @static
               * @memberOf _
               * @since 3.7.0
               * @category Object
               * @param {Object} object The object to query.
               * @param {Array|string} path The path of the property to get.
               * @param {*} [defaultValue] The value returned for `undefined` resolved values.
               * @returns {*} Returns the resolved value.
               * @example
               *
               * var object = { 'a': [{ 'b': { 'c': 3 } }] };
               *
               * _.get(object, 'a[0].b.c');
               * // => 3
               *
               * _.get(object, ['a', '0', 'b', 'c']);
               * // => 3
               *
               * _.get(object, 'a.b.c', 'default');
               * // => 'default'
               */
              function get(object, path, defaultValue) {
                var result = object == null ? undefined : baseGet(object, path);
                return result === undefined ? defaultValue : result;
              }

              /**
               * Checks if `path` is a direct property of `object`.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Object
               * @param {Object} object The object to query.
               * @param {Array|string} path The path to check.
               * @returns {boolean} Returns `true` if `path` exists, else `false`.
               * @example
               *
               * var object = { 'a': { 'b': 2 } };
               * var other = _.create({ 'a': _.create({ 'b': 2 }) });
               *
               * _.has(object, 'a');
               * // => true
               *
               * _.has(object, 'a.b');
               * // => true
               *
               * _.has(object, ['a', 'b']);
               * // => true
               *
               * _.has(other, 'a');
               * // => false
               */
              function has(object, path) {
                return object != null && hasPath(object, path, baseHas);
              }

              /**
               * Checks if `path` is a direct or inherited property of `object`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Object
               * @param {Object} object The object to query.
               * @param {Array|string} path The path to check.
               * @returns {boolean} Returns `true` if `path` exists, else `false`.
               * @example
               *
               * var object = _.create({ 'a': _.create({ 'b': 2 }) });
               *
               * _.hasIn(object, 'a');
               * // => true
               *
               * _.hasIn(object, 'a.b');
               * // => true
               *
               * _.hasIn(object, ['a', 'b']);
               * // => true
               *
               * _.hasIn(object, 'b');
               * // => false
               */
              function hasIn(object, path) {
                return object != null && hasPath(object, path, baseHasIn);
              }

              /**
               * Creates an object composed of the inverted keys and values of `object`.
               * If `object` contains duplicate values, subsequent values overwrite
               * property assignments of previous values.
               *
               * @static
               * @memberOf _
               * @since 0.7.0
               * @category Object
               * @param {Object} object The object to invert.
               * @returns {Object} Returns the new inverted object.
               * @example
               *
               * var object = { 'a': 1, 'b': 2, 'c': 1 };
               *
               * _.invert(object);
               * // => { '1': 'c', '2': 'b' }
               */
              var invert = createInverter(function (result, value, key) {
                result[value] = key;
              }, constant(identity));

              /**
               * This method is like `_.invert` except that the inverted object is generated
               * from the results of running each element of `object` thru `iteratee`. The
               * corresponding inverted value of each inverted key is an array of keys
               * responsible for generating the inverted value. The iteratee is invoked
               * with one argument: (value).
               *
               * @static
               * @memberOf _
               * @since 4.1.0
               * @category Object
               * @param {Object} object The object to invert.
               * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
               * @returns {Object} Returns the new inverted object.
               * @example
               *
               * var object = { 'a': 1, 'b': 2, 'c': 1 };
               *
               * _.invertBy(object);
               * // => { '1': ['a', 'c'], '2': ['b'] }
               *
               * _.invertBy(object, function(value) {
               *   return 'group' + value;
               * });
               * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
               */
              var invertBy = createInverter(function (result, value, key) {
                if (hasOwnProperty.call(result, value)) {
                  result[value].push(key);
                } else {
                  result[value] = [key];
                }
              }, getIteratee);

              /**
               * Invokes the method at `path` of `object`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Object
               * @param {Object} object The object to query.
               * @param {Array|string} path The path of the method to invoke.
               * @param {...*} [args] The arguments to invoke the method with.
               * @returns {*} Returns the result of the invoked method.
               * @example
               *
               * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
               *
               * _.invoke(object, 'a[0].b.c.slice', 1, 3);
               * // => [2, 3]
               */
              var invoke = baseRest(baseInvoke);

              /**
               * Creates an array of the own enumerable property names of `object`.
               *
               * **Note:** Non-object values are coerced to objects. See the
               * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
               * for more details.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Object
               * @param {Object} object The object to query.
               * @returns {Array} Returns the array of property names.
               * @example
               *
               * function Foo() {
               *   this.a = 1;
               *   this.b = 2;
               * }
               *
               * Foo.prototype.c = 3;
               *
               * _.keys(new Foo);
               * // => ['a', 'b'] (iteration order is not guaranteed)
               *
               * _.keys('hi');
               * // => ['0', '1']
               */
              function keys(object) {
                return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
              }

              /**
               * Creates an array of the own and inherited enumerable property names of `object`.
               *
               * **Note:** Non-object values are coerced to objects.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Object
               * @param {Object} object The object to query.
               * @returns {Array} Returns the array of property names.
               * @example
               *
               * function Foo() {
               *   this.a = 1;
               *   this.b = 2;
               * }
               *
               * Foo.prototype.c = 3;
               *
               * _.keysIn(new Foo);
               * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
               */
              function keysIn(object) {
                return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
              }

              /**
               * The opposite of `_.mapValues`; this method creates an object with the
               * same values as `object` and keys generated by running each own enumerable
               * string keyed property of `object` thru `iteratee`. The iteratee is invoked
               * with three arguments: (value, key, object).
               *
               * @static
               * @memberOf _
               * @since 3.8.0
               * @category Object
               * @param {Object} object The object to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @returns {Object} Returns the new mapped object.
               * @see _.mapValues
               * @example
               *
               * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
               *   return key + value;
               * });
               * // => { 'a1': 1, 'b2': 2 }
               */
              function mapKeys(object, iteratee) {
                var result = {};
                iteratee = getIteratee(iteratee, 3);

                baseForOwn(object, function (value, key, object) {
                  baseAssignValue(result, iteratee(value, key, object), value);
                });
                return result;
              }

              /**
               * Creates an object with the same keys as `object` and values generated
               * by running each own enumerable string keyed property of `object` thru
               * `iteratee`. The iteratee is invoked with three arguments:
               * (value, key, object).
               *
               * @static
               * @memberOf _
               * @since 2.4.0
               * @category Object
               * @param {Object} object The object to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @returns {Object} Returns the new mapped object.
               * @see _.mapKeys
               * @example
               *
               * var users = {
               *   'fred':    { 'user': 'fred',    'age': 40 },
               *   'pebbles': { 'user': 'pebbles', 'age': 1 }
               * };
               *
               * _.mapValues(users, function(o) { return o.age; });
               * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
               *
               * // The `_.property` iteratee shorthand.
               * _.mapValues(users, 'age');
               * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
               */
              function mapValues(object, iteratee) {
                var result = {};
                iteratee = getIteratee(iteratee, 3);

                baseForOwn(object, function (value, key, object) {
                  baseAssignValue(result, key, iteratee(value, key, object));
                });
                return result;
              }

              /**
               * This method is like `_.assign` except that it recursively merges own and
               * inherited enumerable string keyed properties of source objects into the
               * destination object. Source properties that resolve to `undefined` are
               * skipped if a destination value exists. Array and plain object properties
               * are merged recursively. Other objects and value types are overridden by
               * assignment. Source objects are applied from left to right. Subsequent
               * sources overwrite property assignments of previous sources.
               *
               * **Note:** This method mutates `object`.
               *
               * @static
               * @memberOf _
               * @since 0.5.0
               * @category Object
               * @param {Object} object The destination object.
               * @param {...Object} [sources] The source objects.
               * @returns {Object} Returns `object`.
               * @example
               *
               * var object = {
               *   'a': [{ 'b': 2 }, { 'd': 4 }]
               * };
               *
               * var other = {
               *   'a': [{ 'c': 3 }, { 'e': 5 }]
               * };
               *
               * _.merge(object, other);
               * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
               */
              var merge = createAssigner(function (object, source, srcIndex) {
                baseMerge(object, source, srcIndex);
              });

              /**
               * This method is like `_.merge` except that it accepts `customizer` which
               * is invoked to produce the merged values of the destination and source
               * properties. If `customizer` returns `undefined`, merging is handled by the
               * method instead. The `customizer` is invoked with six arguments:
               * (objValue, srcValue, key, object, source, stack).
               *
               * **Note:** This method mutates `object`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Object
               * @param {Object} object The destination object.
               * @param {...Object} sources The source objects.
               * @param {Function} customizer The function to customize assigned values.
               * @returns {Object} Returns `object`.
               * @example
               *
               * function customizer(objValue, srcValue) {
               *   if (_.isArray(objValue)) {
               *     return objValue.concat(srcValue);
               *   }
               * }
               *
               * var object = { 'a': [1], 'b': [2] };
               * var other = { 'a': [3], 'b': [4] };
               *
               * _.mergeWith(object, other, customizer);
               * // => { 'a': [1, 3], 'b': [2, 4] }
               */
              var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
                baseMerge(object, source, srcIndex, customizer);
              });

              /**
               * The opposite of `_.pick`; this method creates an object composed of the
               * own and inherited enumerable property paths of `object` that are not omitted.
               *
               * **Note:** This method is considerably slower than `_.pick`.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Object
               * @param {Object} object The source object.
               * @param {...(string|string[])} [paths] The property paths to omit.
               * @returns {Object} Returns the new object.
               * @example
               *
               * var object = { 'a': 1, 'b': '2', 'c': 3 };
               *
               * _.omit(object, ['a', 'c']);
               * // => { 'b': '2' }
               */
              var omit = flatRest(function (object, paths) {
                var result = {};
                if (object == null) {
                  return result;
                }
                var isDeep = false;
                paths = arrayMap(paths, function (path) {
                  path = castPath(path, object);
                  isDeep || (isDeep = path.length > 1);
                  return path;
                });
                copyObject(object, getAllKeysIn(object), result);
                if (isDeep) {
                  result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
                }
                var length = paths.length;
                while (length--) {
                  baseUnset(result, paths[length]);
                }
                return result;
              });

              /**
               * The opposite of `_.pickBy`; this method creates an object composed of
               * the own and inherited enumerable string keyed properties of `object` that
               * `predicate` doesn't return truthy for. The predicate is invoked with two
               * arguments: (value, key).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Object
               * @param {Object} object The source object.
               * @param {Function} [predicate=_.identity] The function invoked per property.
               * @returns {Object} Returns the new object.
               * @example
               *
               * var object = { 'a': 1, 'b': '2', 'c': 3 };
               *
               * _.omitBy(object, _.isNumber);
               * // => { 'b': '2' }
               */
              function omitBy(object, predicate) {
                return pickBy(object, negate(getIteratee(predicate)));
              }

              /**
               * Creates an object composed of the picked `object` properties.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Object
               * @param {Object} object The source object.
               * @param {...(string|string[])} [paths] The property paths to pick.
               * @returns {Object} Returns the new object.
               * @example
               *
               * var object = { 'a': 1, 'b': '2', 'c': 3 };
               *
               * _.pick(object, ['a', 'c']);
               * // => { 'a': 1, 'c': 3 }
               */
              var pick = flatRest(function (object, paths) {
                return object == null ? {} : basePick(object, paths);
              });

              /**
               * Creates an object composed of the `object` properties `predicate` returns
               * truthy for. The predicate is invoked with two arguments: (value, key).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Object
               * @param {Object} object The source object.
               * @param {Function} [predicate=_.identity] The function invoked per property.
               * @returns {Object} Returns the new object.
               * @example
               *
               * var object = { 'a': 1, 'b': '2', 'c': 3 };
               *
               * _.pickBy(object, _.isNumber);
               * // => { 'a': 1, 'c': 3 }
               */
              function pickBy(object, predicate) {
                if (object == null) {
                  return {};
                }
                var props = arrayMap(getAllKeysIn(object), function (prop) {
                  return [prop];
                });
                predicate = getIteratee(predicate);
                return basePickBy(object, props, function (value, path) {
                  return predicate(value, path[0]);
                });
              }

              /**
               * This method is like `_.get` except that if the resolved value is a
               * function it's invoked with the `this` binding of its parent object and
               * its result is returned.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Object
               * @param {Object} object The object to query.
               * @param {Array|string} path The path of the property to resolve.
               * @param {*} [defaultValue] The value returned for `undefined` resolved values.
               * @returns {*} Returns the resolved value.
               * @example
               *
               * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
               *
               * _.result(object, 'a[0].b.c1');
               * // => 3
               *
               * _.result(object, 'a[0].b.c2');
               * // => 4
               *
               * _.result(object, 'a[0].b.c3', 'default');
               * // => 'default'
               *
               * _.result(object, 'a[0].b.c3', _.constant('default'));
               * // => 'default'
               */
              function result(object, path, defaultValue) {
                path = castPath(path, object);

                var index = -1,
                  length = path.length;

                // Ensure the loop is entered when path is empty.
                if (!length) {
                  length = 1;
                  object = undefined;
                }
                while (++index < length) {
                  var value = object == null ? undefined : object[toKey(path[index])];
                  if (value === undefined) {
                    index = length;
                    value = defaultValue;
                  }
                  object = isFunction(value) ? value.call(object) : value;
                }
                return object;
              }

              /**
               * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
               * it's created. Arrays are created for missing index properties while objects
               * are created for all other missing properties. Use `_.setWith` to customize
               * `path` creation.
               *
               * **Note:** This method mutates `object`.
               *
               * @static
               * @memberOf _
               * @since 3.7.0
               * @category Object
               * @param {Object} object The object to modify.
               * @param {Array|string} path The path of the property to set.
               * @param {*} value The value to set.
               * @returns {Object} Returns `object`.
               * @example
               *
               * var object = { 'a': [{ 'b': { 'c': 3 } }] };
               *
               * _.set(object, 'a[0].b.c', 4);
               * console.log(object.a[0].b.c);
               * // => 4
               *
               * _.set(object, ['x', '0', 'y', 'z'], 5);
               * console.log(object.x[0].y.z);
               * // => 5
               */
              function set(object, path, value) {
                return object == null ? object : baseSet(object, path, value);
              }

              /**
               * This method is like `_.set` except that it accepts `customizer` which is
               * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
               * path creation is handled by the method instead. The `customizer` is invoked
               * with three arguments: (nsValue, key, nsObject).
               *
               * **Note:** This method mutates `object`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Object
               * @param {Object} object The object to modify.
               * @param {Array|string} path The path of the property to set.
               * @param {*} value The value to set.
               * @param {Function} [customizer] The function to customize assigned values.
               * @returns {Object} Returns `object`.
               * @example
               *
               * var object = {};
               *
               * _.setWith(object, '[0][1]', 'a', Object);
               * // => { '0': { '1': 'a' } }
               */
              function setWith(object, path, value, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined;
                return object == null ? object : baseSet(object, path, value, customizer);
              }

              /**
               * Creates an array of own enumerable string keyed-value pairs for `object`
               * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
               * entries are returned.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @alias entries
               * @category Object
               * @param {Object} object The object to query.
               * @returns {Array} Returns the key-value pairs.
               * @example
               *
               * function Foo() {
               *   this.a = 1;
               *   this.b = 2;
               * }
               *
               * Foo.prototype.c = 3;
               *
               * _.toPairs(new Foo);
               * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
               */
              var toPairs = createToPairs(keys);

              /**
               * Creates an array of own and inherited enumerable string keyed-value pairs
               * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
               * or set, its entries are returned.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @alias entriesIn
               * @category Object
               * @param {Object} object The object to query.
               * @returns {Array} Returns the key-value pairs.
               * @example
               *
               * function Foo() {
               *   this.a = 1;
               *   this.b = 2;
               * }
               *
               * Foo.prototype.c = 3;
               *
               * _.toPairsIn(new Foo);
               * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
               */
              var toPairsIn = createToPairs(keysIn);

              /**
               * An alternative to `_.reduce`; this method transforms `object` to a new
               * `accumulator` object which is the result of running each of its own
               * enumerable string keyed properties thru `iteratee`, with each invocation
               * potentially mutating the `accumulator` object. If `accumulator` is not
               * provided, a new object with the same `[[Prototype]]` will be used. The
               * iteratee is invoked with four arguments: (accumulator, value, key, object).
               * Iteratee functions may exit iteration early by explicitly returning `false`.
               *
               * @static
               * @memberOf _
               * @since 1.3.0
               * @category Object
               * @param {Object} object The object to iterate over.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @param {*} [accumulator] The custom accumulator value.
               * @returns {*} Returns the accumulated value.
               * @example
               *
               * _.transform([2, 3, 4], function(result, n) {
               *   result.push(n *= n);
               *   return n % 2 == 0;
               * }, []);
               * // => [4, 9]
               *
               * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
               *   (result[value] || (result[value] = [])).push(key);
               * }, {});
               * // => { '1': ['a', 'c'], '2': ['b'] }
               */
              function transform(object, iteratee, accumulator) {
                var isArr = isArray(object),
                  isArrLike = isArr || isBuffer(object) || isTypedArray(object);

                iteratee = getIteratee(iteratee, 4);
                if (accumulator == null) {
                  var Ctor = object && object.constructor;
                  if (isArrLike) {
                    accumulator = isArr ? new Ctor : [];
                  } else if (isObject(object)) {
                    accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                  } else {
                    accumulator = {};
                  }
                }
                (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
                  return iteratee(accumulator, value, index, object);
                });
                return accumulator;
              }

              /**
               * Removes the property at `path` of `object`.
               *
               * **Note:** This method mutates `object`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Object
               * @param {Object} object The object to modify.
               * @param {Array|string} path The path of the property to unset.
               * @returns {boolean} Returns `true` if the property is deleted, else `false`.
               * @example
               *
               * var object = { 'a': [{ 'b': { 'c': 7 } }] };
               * _.unset(object, 'a[0].b.c');
               * // => true
               *
               * console.log(object);
               * // => { 'a': [{ 'b': {} }] };
               *
               * _.unset(object, ['a', '0', 'b', 'c']);
               * // => true
               *
               * console.log(object);
               * // => { 'a': [{ 'b': {} }] };
               */
              function unset(object, path) {
                return object == null ? true : baseUnset(object, path);
              }

              /**
               * This method is like `_.set` except that accepts `updater` to produce the
               * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
               * is invoked with one argument: (value).
               *
               * **Note:** This method mutates `object`.
               *
               * @static
               * @memberOf _
               * @since 4.6.0
               * @category Object
               * @param {Object} object The object to modify.
               * @param {Array|string} path The path of the property to set.
               * @param {Function} updater The function to produce the updated value.
               * @returns {Object} Returns `object`.
               * @example
               *
               * var object = { 'a': [{ 'b': { 'c': 3 } }] };
               *
               * _.update(object, 'a[0].b.c', function(n) { return n * n; });
               * console.log(object.a[0].b.c);
               * // => 9
               *
               * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
               * console.log(object.x[0].y.z);
               * // => 0
               */
              function update(object, path, updater) {
                return object == null ? object : baseUpdate(object, path, castFunction(updater));
              }

              /**
               * This method is like `_.update` except that it accepts `customizer` which is
               * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
               * path creation is handled by the method instead. The `customizer` is invoked
               * with three arguments: (nsValue, key, nsObject).
               *
               * **Note:** This method mutates `object`.
               *
               * @static
               * @memberOf _
               * @since 4.6.0
               * @category Object
               * @param {Object} object The object to modify.
               * @param {Array|string} path The path of the property to set.
               * @param {Function} updater The function to produce the updated value.
               * @param {Function} [customizer] The function to customize assigned values.
               * @returns {Object} Returns `object`.
               * @example
               *
               * var object = {};
               *
               * _.updateWith(object, '[0][1]', _.constant('a'), Object);
               * // => { '0': { '1': 'a' } }
               */
              function updateWith(object, path, updater, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined;
                return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
              }

              /**
               * Creates an array of the own enumerable string keyed property values of `object`.
               *
               * **Note:** Non-object values are coerced to objects.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Object
               * @param {Object} object The object to query.
               * @returns {Array} Returns the array of property values.
               * @example
               *
               * function Foo() {
               *   this.a = 1;
               *   this.b = 2;
               * }
               *
               * Foo.prototype.c = 3;
               *
               * _.values(new Foo);
               * // => [1, 2] (iteration order is not guaranteed)
               *
               * _.values('hi');
               * // => ['h', 'i']
               */
              function values(object) {
                return object == null ? [] : baseValues(object, keys(object));
              }

              /**
               * Creates an array of the own and inherited enumerable string keyed property
               * values of `object`.
               *
               * **Note:** Non-object values are coerced to objects.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Object
               * @param {Object} object The object to query.
               * @returns {Array} Returns the array of property values.
               * @example
               *
               * function Foo() {
               *   this.a = 1;
               *   this.b = 2;
               * }
               *
               * Foo.prototype.c = 3;
               *
               * _.valuesIn(new Foo);
               * // => [1, 2, 3] (iteration order is not guaranteed)
               */
              function valuesIn(object) {
                return object == null ? [] : baseValues(object, keysIn(object));
              }

              /*------------------------------------------------------------------------*/

              /**
               * Clamps `number` within the inclusive `lower` and `upper` bounds.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Number
               * @param {number} number The number to clamp.
               * @param {number} [lower] The lower bound.
               * @param {number} upper The upper bound.
               * @returns {number} Returns the clamped number.
               * @example
               *
               * _.clamp(-10, -5, 5);
               * // => -5
               *
               * _.clamp(10, -5, 5);
               * // => 5
               */
              function clamp(number, lower, upper) {
                if (upper === undefined) {
                  upper = lower;
                  lower = undefined;
                }
                if (upper !== undefined) {
                  upper = toNumber(upper);
                  upper = upper === upper ? upper : 0;
                }
                if (lower !== undefined) {
                  lower = toNumber(lower);
                  lower = lower === lower ? lower : 0;
                }
                return baseClamp(toNumber(number), lower, upper);
              }

              /**
               * Checks if `n` is between `start` and up to, but not including, `end`. If
               * `end` is not specified, it's set to `start` with `start` then set to `0`.
               * If `start` is greater than `end` the params are swapped to support
               * negative ranges.
               *
               * @static
               * @memberOf _
               * @since 3.3.0
               * @category Number
               * @param {number} number The number to check.
               * @param {number} [start=0] The start of the range.
               * @param {number} end The end of the range.
               * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
               * @see _.range, _.rangeRight
               * @example
               *
               * _.inRange(3, 2, 4);
               * // => true
               *
               * _.inRange(4, 8);
               * // => true
               *
               * _.inRange(4, 2);
               * // => false
               *
               * _.inRange(2, 2);
               * // => false
               *
               * _.inRange(1.2, 2);
               * // => true
               *
               * _.inRange(5.2, 4);
               * // => false
               *
               * _.inRange(-3, -2, -6);
               * // => true
               */
              function inRange(number, start, end) {
                start = toFinite(start);
                if (end === undefined) {
                  end = start;
                  start = 0;
                } else {
                  end = toFinite(end);
                }
                number = toNumber(number);
                return baseInRange(number, start, end);
              }

              /**
               * Produces a random number between the inclusive `lower` and `upper` bounds.
               * If only one argument is provided a number between `0` and the given number
               * is returned. If `floating` is `true`, or either `lower` or `upper` are
               * floats, a floating-point number is returned instead of an integer.
               *
               * **Note:** JavaScript follows the IEEE-754 standard for resolving
               * floating-point values which can produce unexpected results.
               *
               * @static
               * @memberOf _
               * @since 0.7.0
               * @category Number
               * @param {number} [lower=0] The lower bound.
               * @param {number} [upper=1] The upper bound.
               * @param {boolean} [floating] Specify returning a floating-point number.
               * @returns {number} Returns the random number.
               * @example
               *
               * _.random(0, 5);
               * // => an integer between 0 and 5
               *
               * _.random(5);
               * // => also an integer between 0 and 5
               *
               * _.random(5, true);
               * // => a floating-point number between 0 and 5
               *
               * _.random(1.2, 5.2);
               * // => a floating-point number between 1.2 and 5.2
               */
              function random(lower, upper, floating) {
                if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                  upper = floating = undefined;
                }
                if (floating === undefined) {
                  if (typeof upper == 'boolean') {
                    floating = upper;
                    upper = undefined;
                  } else if (typeof lower == 'boolean') {
                    floating = lower;
                    lower = undefined;
                  }
                }
                if (lower === undefined && upper === undefined) {
                  lower = 0;
                  upper = 1;
                } else {
                  lower = toFinite(lower);
                  if (upper === undefined) {
                    upper = lower;
                    lower = 0;
                  } else {
                    upper = toFinite(upper);
                  }
                }
                if (lower > upper) {
                  var temp = lower;
                  lower = upper;
                  upper = temp;
                }
                if (floating || lower % 1 || upper % 1) {
                  var rand = nativeRandom();
                  return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
                }
                return baseRandom(lower, upper);
              }

              /*------------------------------------------------------------------------*/

              /**
               * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category String
               * @param {string} [string=''] The string to convert.
               * @returns {string} Returns the camel cased string.
               * @example
               *
               * _.camelCase('Foo Bar');
               * // => 'fooBar'
               *
               * _.camelCase('--foo-bar--');
               * // => 'fooBar'
               *
               * _.camelCase('__FOO_BAR__');
               * // => 'fooBar'
               */
              var camelCase = createCompounder(function (result, word, index) {
                word = word.toLowerCase();
                return result + (index ? capitalize(word) : word);
              });

              /**
               * Converts the first character of `string` to upper case and the remaining
               * to lower case.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category String
               * @param {string} [string=''] The string to capitalize.
               * @returns {string} Returns the capitalized string.
               * @example
               *
               * _.capitalize('FRED');
               * // => 'Fred'
               */
              function capitalize(string) {
                return upperFirst(toString(string).toLowerCase());
              }

              /**
               * Deburrs `string` by converting
               * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
               * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
               * letters to basic Latin letters and removing
               * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category String
               * @param {string} [string=''] The string to deburr.
               * @returns {string} Returns the deburred string.
               * @example
               *
               * _.deburr('déjà vu');
               * // => 'deja vu'
               */
              function deburr(string) {
                string = toString(string);
                return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
              }

              /**
               * Checks if `string` ends with the given target string.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category String
               * @param {string} [string=''] The string to inspect.
               * @param {string} [target] The string to search for.
               * @param {number} [position=string.length] The position to search up to.
               * @returns {boolean} Returns `true` if `string` ends with `target`,
               *  else `false`.
               * @example
               *
               * _.endsWith('abc', 'c');
               * // => true
               *
               * _.endsWith('abc', 'b');
               * // => false
               *
               * _.endsWith('abc', 'b', 2);
               * // => true
               */
              function endsWith(string, target, position) {
                string = toString(string);
                target = baseToString(target);

                var length = string.length;
                position = position === undefined ?
                  length :
                  baseClamp(toInteger(position), 0, length);

                var end = position;
                position -= target.length;
                return position >= 0 && string.slice(position, end) == target;
              }

              /**
               * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
               * corresponding HTML entities.
               *
               * **Note:** No other characters are escaped. To escape additional
               * characters use a third-party library like [_he_](https://mths.be/he).
               *
               * Though the ">" character is escaped for symmetry, characters like
               * ">" and "/" don't need escaping in HTML and have no special meaning
               * unless they're part of a tag or unquoted attribute value. See
               * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
               * (under "semi-related fun fact") for more details.
               *
               * When working with HTML you should always
               * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
               * XSS vectors.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category String
               * @param {string} [string=''] The string to escape.
               * @returns {string} Returns the escaped string.
               * @example
               *
               * _.escape('fred, barney, & pebbles');
               * // => 'fred, barney, &amp; pebbles'
               */
              function escape(string) {
                string = toString(string);
                return (string && reHasUnescapedHtml.test(string)) ?
                  string.replace(reUnescapedHtml, escapeHtmlChar) :
                  string;
              }

              /**
               * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
               * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category String
               * @param {string} [string=''] The string to escape.
               * @returns {string} Returns the escaped string.
               * @example
               *
               * _.escapeRegExp('[lodash](https://lodash.com/)');
               * // => '\[lodash\]\(https://lodash\.com/\)'
               */
              function escapeRegExp(string) {
                string = toString(string);
                return (string && reHasRegExpChar.test(string)) ?
                  string.replace(reRegExpChar, '\\$&') :
                  string;
              }

              /**
               * Converts `string` to
               * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category String
               * @param {string} [string=''] The string to convert.
               * @returns {string} Returns the kebab cased string.
               * @example
               *
               * _.kebabCase('Foo Bar');
               * // => 'foo-bar'
               *
               * _.kebabCase('fooBar');
               * // => 'foo-bar'
               *
               * _.kebabCase('__FOO_BAR__');
               * // => 'foo-bar'
               */
              var kebabCase = createCompounder(function (result, word, index) {
                return result + (index ? '-' : '') + word.toLowerCase();
              });

              /**
               * Converts `string`, as space separated words, to lower case.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category String
               * @param {string} [string=''] The string to convert.
               * @returns {string} Returns the lower cased string.
               * @example
               *
               * _.lowerCase('--Foo-Bar--');
               * // => 'foo bar'
               *
               * _.lowerCase('fooBar');
               * // => 'foo bar'
               *
               * _.lowerCase('__FOO_BAR__');
               * // => 'foo bar'
               */
              var lowerCase = createCompounder(function (result, word, index) {
                return result + (index ? ' ' : '') + word.toLowerCase();
              });

              /**
               * Converts the first character of `string` to lower case.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category String
               * @param {string} [string=''] The string to convert.
               * @returns {string} Returns the converted string.
               * @example
               *
               * _.lowerFirst('Fred');
               * // => 'fred'
               *
               * _.lowerFirst('FRED');
               * // => 'fRED'
               */
              var lowerFirst = createCaseFirst('toLowerCase');

              /**
               * Pads `string` on the left and right sides if it's shorter than `length`.
               * Padding characters are truncated if they can't be evenly divided by `length`.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category String
               * @param {string} [string=''] The string to pad.
               * @param {number} [length=0] The padding length.
               * @param {string} [chars=' '] The string used as padding.
               * @returns {string} Returns the padded string.
               * @example
               *
               * _.pad('abc', 8);
               * // => '  abc   '
               *
               * _.pad('abc', 8, '_-');
               * // => '_-abc_-_'
               *
               * _.pad('abc', 3);
               * // => 'abc'
               */
              function pad(string, length, chars) {
                string = toString(string);
                length = toInteger(length);

                var strLength = length ? stringSize(string) : 0;
                if (!length || strLength >= length) {
                  return string;
                }
                var mid = (length - strLength) / 2;
                return (
                  createPadding(nativeFloor(mid), chars) +
                  string +
                  createPadding(nativeCeil(mid), chars)
                );
              }

              /**
               * Pads `string` on the right side if it's shorter than `length`. Padding
               * characters are truncated if they exceed `length`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category String
               * @param {string} [string=''] The string to pad.
               * @param {number} [length=0] The padding length.
               * @param {string} [chars=' '] The string used as padding.
               * @returns {string} Returns the padded string.
               * @example
               *
               * _.padEnd('abc', 6);
               * // => 'abc   '
               *
               * _.padEnd('abc', 6, '_-');
               * // => 'abc_-_'
               *
               * _.padEnd('abc', 3);
               * // => 'abc'
               */
              function padEnd(string, length, chars) {
                string = toString(string);
                length = toInteger(length);

                var strLength = length ? stringSize(string) : 0;
                return (length && strLength < length) ?
                  (string + createPadding(length - strLength, chars)) :
                  string;
              }

              /**
               * Pads `string` on the left side if it's shorter than `length`. Padding
               * characters are truncated if they exceed `length`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category String
               * @param {string} [string=''] The string to pad.
               * @param {number} [length=0] The padding length.
               * @param {string} [chars=' '] The string used as padding.
               * @returns {string} Returns the padded string.
               * @example
               *
               * _.padStart('abc', 6);
               * // => '   abc'
               *
               * _.padStart('abc', 6, '_-');
               * // => '_-_abc'
               *
               * _.padStart('abc', 3);
               * // => 'abc'
               */
              function padStart(string, length, chars) {
                string = toString(string);
                length = toInteger(length);

                var strLength = length ? stringSize(string) : 0;
                return (length && strLength < length) ?
                  (createPadding(length - strLength, chars) + string) :
                  string;
              }

              /**
               * Converts `string` to an integer of the specified radix. If `radix` is
               * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
               * hexadecimal, in which case a `radix` of `16` is used.
               *
               * **Note:** This method aligns with the
               * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
               *
               * @static
               * @memberOf _
               * @since 1.1.0
               * @category String
               * @param {string} string The string to convert.
               * @param {number} [radix=10] The radix to interpret `value` by.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {number} Returns the converted integer.
               * @example
               *
               * _.parseInt('08');
               * // => 8
               *
               * _.map(['6', '08', '10'], _.parseInt);
               * // => [6, 8, 10]
               */
              function parseInt(string, radix, guard) {
                if (guard || radix == null) {
                  radix = 0;
                } else if (radix) {
                  radix = +radix;
                }
                return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
              }

              /**
               * Repeats the given string `n` times.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category String
               * @param {string} [string=''] The string to repeat.
               * @param {number} [n=1] The number of times to repeat the string.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {string} Returns the repeated string.
               * @example
               *
               * _.repeat('*', 3);
               * // => '***'
               *
               * _.repeat('abc', 2);
               * // => 'abcabc'
               *
               * _.repeat('abc', 0);
               * // => ''
               */
              function repeat(string, n, guard) {
                if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
                  n = 1;
                } else {
                  n = toInteger(n);
                }
                return baseRepeat(toString(string), n);
              }

              /**
               * Replaces matches for `pattern` in `string` with `replacement`.
               *
               * **Note:** This method is based on
               * [`String#replace`](https://mdn.io/String/replace).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category String
               * @param {string} [string=''] The string to modify.
               * @param {RegExp|string} pattern The pattern to replace.
               * @param {Function|string} replacement The match replacement.
               * @returns {string} Returns the modified string.
               * @example
               *
               * _.replace('Hi Fred', 'Fred', 'Barney');
               * // => 'Hi Barney'
               */
              function replace() {
                var args = arguments,
                  string = toString(args[0]);

                return args.length < 3 ? string : string.replace(args[1], args[2]);
              }

              /**
               * Converts `string` to
               * [snake case](https://en.wikipedia.org/wiki/Snake_case).
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category String
               * @param {string} [string=''] The string to convert.
               * @returns {string} Returns the snake cased string.
               * @example
               *
               * _.snakeCase('Foo Bar');
               * // => 'foo_bar'
               *
               * _.snakeCase('fooBar');
               * // => 'foo_bar'
               *
               * _.snakeCase('--FOO-BAR--');
               * // => 'foo_bar'
               */
              var snakeCase = createCompounder(function (result, word, index) {
                return result + (index ? '_' : '') + word.toLowerCase();
              });

              /**
               * Splits `string` by `separator`.
               *
               * **Note:** This method is based on
               * [`String#split`](https://mdn.io/String/split).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category String
               * @param {string} [string=''] The string to split.
               * @param {RegExp|string} separator The separator pattern to split by.
               * @param {number} [limit] The length to truncate results to.
               * @returns {Array} Returns the string segments.
               * @example
               *
               * _.split('a-b-c', '-', 2);
               * // => ['a', 'b']
               */
              function split(string, separator, limit) {
                if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                  separator = limit = undefined;
                }
                limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
                if (!limit) {
                  return [];
                }
                string = toString(string);
                if (string && (
                    typeof separator == 'string' ||
                    (separator != null && !isRegExp(separator))
                  )) {
                  separator = baseToString(separator);
                  if (!separator && hasUnicode(string)) {
                    return castSlice(stringToArray(string), 0, limit);
                  }
                }
                return string.split(separator, limit);
              }

              /**
               * Converts `string` to
               * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
               *
               * @static
               * @memberOf _
               * @since 3.1.0
               * @category String
               * @param {string} [string=''] The string to convert.
               * @returns {string} Returns the start cased string.
               * @example
               *
               * _.startCase('--foo-bar--');
               * // => 'Foo Bar'
               *
               * _.startCase('fooBar');
               * // => 'Foo Bar'
               *
               * _.startCase('__FOO_BAR__');
               * // => 'FOO BAR'
               */
              var startCase = createCompounder(function (result, word, index) {
                return result + (index ? ' ' : '') + upperFirst(word);
              });

              /**
               * Checks if `string` starts with the given target string.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category String
               * @param {string} [string=''] The string to inspect.
               * @param {string} [target] The string to search for.
               * @param {number} [position=0] The position to search from.
               * @returns {boolean} Returns `true` if `string` starts with `target`,
               *  else `false`.
               * @example
               *
               * _.startsWith('abc', 'a');
               * // => true
               *
               * _.startsWith('abc', 'b');
               * // => false
               *
               * _.startsWith('abc', 'b', 1);
               * // => true
               */
              function startsWith(string, target, position) {
                string = toString(string);
                position = position == null ?
                  0 :
                  baseClamp(toInteger(position), 0, string.length);

                target = baseToString(target);
                return string.slice(position, position + target.length) == target;
              }

              /**
               * Creates a compiled template function that can interpolate data properties
               * in "interpolate" delimiters, HTML-escape interpolated data properties in
               * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
               * properties may be accessed as free variables in the template. If a setting
               * object is given, it takes precedence over `_.templateSettings` values.
               *
               * **Note:** In the development build `_.template` utilizes
               * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
               * for easier debugging.
               *
               * For more information on precompiling templates see
               * [lodash's custom builds documentation](https://lodash.com/custom-builds).
               *
               * For more information on Chrome extension sandboxes see
               * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category String
               * @param {string} [string=''] The template string.
               * @param {Object} [options={}] The options object.
               * @param {RegExp} [options.escape=_.templateSettings.escape]
               *  The HTML "escape" delimiter.
               * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
               *  The "evaluate" delimiter.
               * @param {Object} [options.imports=_.templateSettings.imports]
               *  An object to import into the template as free variables.
               * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
               *  The "interpolate" delimiter.
               * @param {string} [options.sourceURL='lodash.templateSources[n]']
               *  The sourceURL of the compiled template.
               * @param {string} [options.variable='obj']
               *  The data object variable name.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {Function} Returns the compiled template function.
               * @example
               *
               * // Use the "interpolate" delimiter to create a compiled template.
               * var compiled = _.template('hello <%= user %>!');
               * compiled({ 'user': 'fred' });
               * // => 'hello fred!'
               *
               * // Use the HTML "escape" delimiter to escape data property values.
               * var compiled = _.template('<b><%- value %></b>');
               * compiled({ 'value': '<script>' });
               * // => '<b>&lt;script&gt;</b>'
               *
               * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
               * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
               * compiled({ 'users': ['fred', 'barney'] });
               * // => '<li>fred</li><li>barney</li>'
               *
               * // Use the internal `print` function in "evaluate" delimiters.
               * var compiled = _.template('<% print("hello " + user); %>!');
               * compiled({ 'user': 'barney' });
               * // => 'hello barney!'
               *
               * // Use the ES template literal delimiter as an "interpolate" delimiter.
               * // Disable support by replacing the "interpolate" delimiter.
               * var compiled = _.template('hello ${ user }!');
               * compiled({ 'user': 'pebbles' });
               * // => 'hello pebbles!'
               *
               * // Use backslashes to treat delimiters as plain text.
               * var compiled = _.template('<%= "\\<%- value %\\>" %>');
               * compiled({ 'value': 'ignored' });
               * // => '<%- value %>'
               *
               * // Use the `imports` option to import `jQuery` as `jq`.
               * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
               * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
               * compiled({ 'users': ['fred', 'barney'] });
               * // => '<li>fred</li><li>barney</li>'
               *
               * // Use the `sourceURL` option to specify a custom sourceURL for the template.
               * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
               * compiled(data);
               * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
               *
               * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
               * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
               * compiled.source;
               * // => function(data) {
               * //   var __t, __p = '';
               * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
               * //   return __p;
               * // }
               *
               * // Use custom template delimiters.
               * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
               * var compiled = _.template('hello {{ user }}!');
               * compiled({ 'user': 'mustache' });
               * // => 'hello mustache!'
               *
               * // Use the `source` property to inline compiled templates for meaningful
               * // line numbers in error messages and stack traces.
               * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
               *   var JST = {\
               *     "main": ' + _.template(mainText).source + '\
               *   };\
               * ');
               */
              function template(string, options, guard) {
                // Based on John Resig's `tmpl` implementation
                // (http://ejohn.org/blog/javascript-micro-templating/)
                // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                var settings = lodash.templateSettings;

                if (guard && isIterateeCall(string, options, guard)) {
                  options = undefined;
                }
                string = toString(string);
                options = assignInWith({}, options, settings, customDefaultsAssignIn);

                var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
                  importsKeys = keys(imports),
                  importsValues = baseValues(imports, importsKeys);

                var isEscaping,
                  isEvaluating,
                  index = 0,
                  interpolate = options.interpolate || reNoMatch,
                  source = "__p += '";

                // Compile the regexp to match each delimiter.
                var reDelimiters = RegExp(
                  (options.escape || reNoMatch).source + '|' +
                  interpolate.source + '|' +
                  (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
                  (options.evaluate || reNoMatch).source + '|$', 'g');

                // Use a sourceURL for easier debugging.
                var sourceURL = '//# sourceURL=' +
                  ('sourceURL' in options ?
                    options.sourceURL :
                    ('lodash.templateSources[' + (++templateCounter) + ']')
                  ) + '\n';

                string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                  interpolateValue || (interpolateValue = esTemplateValue);

                  // Escape characters that can't be included in string literals.
                  source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

                  // Replace delimiters with snippets.
                  if (escapeValue) {
                    isEscaping = true;
                    source += "' +\n__e(" + escapeValue + ") +\n'";
                  }
                  if (evaluateValue) {
                    isEvaluating = true;
                    source += "';\n" + evaluateValue + ";\n__p += '";
                  }
                  if (interpolateValue) {
                    source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                  }
                  index = offset + match.length;

                  // The JS engine embedded in Adobe products needs `match` returned in
                  // order to produce the correct `offset` value.
                  return match;
                });

                source += "';\n";

                // If `variable` is not specified wrap a with-statement around the generated
                // code to add the data object to the top of the scope chain.
                var variable = options.variable;
                if (!variable) {
                  source = 'with (obj) {\n' + source + '\n}\n';
                }
                // Cleanup code by stripping empty strings.
                source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
                  .replace(reEmptyStringMiddle, '$1')
                  .replace(reEmptyStringTrailing, '$1;');

                // Frame code as the function body.
                source = 'function(' + (variable || 'obj') + ') {\n' +
                  (variable ?
                    '' :
                    'obj || (obj = {});\n'
                  ) +
                  "var __t, __p = ''" +
                  (isEscaping ?
                    ', __e = _.escape' :
                    ''
                  ) +
                  (isEvaluating ?
                    ', __j = Array.prototype.join;\n' +
                    "function print() { __p += __j.call(arguments, '') }\n" :
                    ';\n'
                  ) +
                  source +
                  'return __p\n}';

                var result = attempt(function () {
                  return Function(importsKeys, sourceURL + 'return ' + source)
                    .apply(undefined, importsValues);
                });

                // Provide the compiled function's source by its `toString` method or
                // the `source` property as a convenience for inlining compiled templates.
                result.source = source;
                if (isError(result)) {
                  throw result;
                }
                return result;
              }

              /**
               * Converts `string`, as a whole, to lower case just like
               * [String#toLowerCase](https://mdn.io/toLowerCase).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category String
               * @param {string} [string=''] The string to convert.
               * @returns {string} Returns the lower cased string.
               * @example
               *
               * _.toLower('--Foo-Bar--');
               * // => '--foo-bar--'
               *
               * _.toLower('fooBar');
               * // => 'foobar'
               *
               * _.toLower('__FOO_BAR__');
               * // => '__foo_bar__'
               */
              function toLower(value) {
                return toString(value).toLowerCase();
              }

              /**
               * Converts `string`, as a whole, to upper case just like
               * [String#toUpperCase](https://mdn.io/toUpperCase).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category String
               * @param {string} [string=''] The string to convert.
               * @returns {string} Returns the upper cased string.
               * @example
               *
               * _.toUpper('--foo-bar--');
               * // => '--FOO-BAR--'
               *
               * _.toUpper('fooBar');
               * // => 'FOOBAR'
               *
               * _.toUpper('__foo_bar__');
               * // => '__FOO_BAR__'
               */
              function toUpper(value) {
                return toString(value).toUpperCase();
              }

              /**
               * Removes leading and trailing whitespace or specified characters from `string`.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category String
               * @param {string} [string=''] The string to trim.
               * @param {string} [chars=whitespace] The characters to trim.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {string} Returns the trimmed string.
               * @example
               *
               * _.trim('  abc  ');
               * // => 'abc'
               *
               * _.trim('-_-abc-_-', '_-');
               * // => 'abc'
               *
               * _.map(['  foo  ', '  bar  '], _.trim);
               * // => ['foo', 'bar']
               */
              function trim(string, chars, guard) {
                string = toString(string);
                if (string && (guard || chars === undefined)) {
                  return string.replace(reTrim, '');
                }
                if (!string || !(chars = baseToString(chars))) {
                  return string;
                }
                var strSymbols = stringToArray(string),
                  chrSymbols = stringToArray(chars),
                  start = charsStartIndex(strSymbols, chrSymbols),
                  end = charsEndIndex(strSymbols, chrSymbols) + 1;

                return castSlice(strSymbols, start, end).join('');
              }

              /**
               * Removes trailing whitespace or specified characters from `string`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category String
               * @param {string} [string=''] The string to trim.
               * @param {string} [chars=whitespace] The characters to trim.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {string} Returns the trimmed string.
               * @example
               *
               * _.trimEnd('  abc  ');
               * // => '  abc'
               *
               * _.trimEnd('-_-abc-_-', '_-');
               * // => '-_-abc'
               */
              function trimEnd(string, chars, guard) {
                string = toString(string);
                if (string && (guard || chars === undefined)) {
                  return string.replace(reTrimEnd, '');
                }
                if (!string || !(chars = baseToString(chars))) {
                  return string;
                }
                var strSymbols = stringToArray(string),
                  end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

                return castSlice(strSymbols, 0, end).join('');
              }

              /**
               * Removes leading whitespace or specified characters from `string`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category String
               * @param {string} [string=''] The string to trim.
               * @param {string} [chars=whitespace] The characters to trim.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {string} Returns the trimmed string.
               * @example
               *
               * _.trimStart('  abc  ');
               * // => 'abc  '
               *
               * _.trimStart('-_-abc-_-', '_-');
               * // => 'abc-_-'
               */
              function trimStart(string, chars, guard) {
                string = toString(string);
                if (string && (guard || chars === undefined)) {
                  return string.replace(reTrimStart, '');
                }
                if (!string || !(chars = baseToString(chars))) {
                  return string;
                }
                var strSymbols = stringToArray(string),
                  start = charsStartIndex(strSymbols, stringToArray(chars));

                return castSlice(strSymbols, start).join('');
              }

              /**
               * Truncates `string` if it's longer than the given maximum string length.
               * The last characters of the truncated string are replaced with the omission
               * string which defaults to "...".
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category String
               * @param {string} [string=''] The string to truncate.
               * @param {Object} [options={}] The options object.
               * @param {number} [options.length=30] The maximum string length.
               * @param {string} [options.omission='...'] The string to indicate text is omitted.
               * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
               * @returns {string} Returns the truncated string.
               * @example
               *
               * _.truncate('hi-diddly-ho there, neighborino');
               * // => 'hi-diddly-ho there, neighbo...'
               *
               * _.truncate('hi-diddly-ho there, neighborino', {
               *   'length': 24,
               *   'separator': ' '
               * });
               * // => 'hi-diddly-ho there,...'
               *
               * _.truncate('hi-diddly-ho there, neighborino', {
               *   'length': 24,
               *   'separator': /,? +/
               * });
               * // => 'hi-diddly-ho there...'
               *
               * _.truncate('hi-diddly-ho there, neighborino', {
               *   'omission': ' [...]'
               * });
               * // => 'hi-diddly-ho there, neig [...]'
               */
              function truncate(string, options) {
                var length = DEFAULT_TRUNC_LENGTH,
                  omission = DEFAULT_TRUNC_OMISSION;

                if (isObject(options)) {
                  var separator = 'separator' in options ? options.separator : separator;
                  length = 'length' in options ? toInteger(options.length) : length;
                  omission = 'omission' in options ? baseToString(options.omission) : omission;
                }
                string = toString(string);

                var strLength = string.length;
                if (hasUnicode(string)) {
                  var strSymbols = stringToArray(string);
                  strLength = strSymbols.length;
                }
                if (length >= strLength) {
                  return string;
                }
                var end = length - stringSize(omission);
                if (end < 1) {
                  return omission;
                }
                var result = strSymbols ?
                  castSlice(strSymbols, 0, end).join('') :
                  string.slice(0, end);

                if (separator === undefined) {
                  return result + omission;
                }
                if (strSymbols) {
                  end += (result.length - end);
                }
                if (isRegExp(separator)) {
                  if (string.slice(end).search(separator)) {
                    var match,
                      substring = result;

                    if (!separator.global) {
                      separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                    }
                    separator.lastIndex = 0;
                    while ((match = separator.exec(substring))) {
                      var newEnd = match.index;
                    }
                    result = result.slice(0, newEnd === undefined ? end : newEnd);
                  }
                } else if (string.indexOf(baseToString(separator), end) != end) {
                  var index = result.lastIndexOf(separator);
                  if (index > -1) {
                    result = result.slice(0, index);
                  }
                }
                return result + omission;
              }

              /**
               * The inverse of `_.escape`; this method converts the HTML entities
               * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
               * their corresponding characters.
               *
               * **Note:** No other HTML entities are unescaped. To unescape additional
               * HTML entities use a third-party library like [_he_](https://mths.be/he).
               *
               * @static
               * @memberOf _
               * @since 0.6.0
               * @category String
               * @param {string} [string=''] The string to unescape.
               * @returns {string} Returns the unescaped string.
               * @example
               *
               * _.unescape('fred, barney, &amp; pebbles');
               * // => 'fred, barney, & pebbles'
               */
              function unescape(string) {
                string = toString(string);
                return (string && reHasEscapedHtml.test(string)) ?
                  string.replace(reEscapedHtml, unescapeHtmlChar) :
                  string;
              }

              /**
               * Converts `string`, as space separated words, to upper case.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category String
               * @param {string} [string=''] The string to convert.
               * @returns {string} Returns the upper cased string.
               * @example
               *
               * _.upperCase('--foo-bar');
               * // => 'FOO BAR'
               *
               * _.upperCase('fooBar');
               * // => 'FOO BAR'
               *
               * _.upperCase('__foo_bar__');
               * // => 'FOO BAR'
               */
              var upperCase = createCompounder(function (result, word, index) {
                return result + (index ? ' ' : '') + word.toUpperCase();
              });

              /**
               * Converts the first character of `string` to upper case.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category String
               * @param {string} [string=''] The string to convert.
               * @returns {string} Returns the converted string.
               * @example
               *
               * _.upperFirst('fred');
               * // => 'Fred'
               *
               * _.upperFirst('FRED');
               * // => 'FRED'
               */
              var upperFirst = createCaseFirst('toUpperCase');

              /**
               * Splits `string` into an array of its words.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category String
               * @param {string} [string=''] The string to inspect.
               * @param {RegExp|string} [pattern] The pattern to match words.
               * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
               * @returns {Array} Returns the words of `string`.
               * @example
               *
               * _.words('fred, barney, & pebbles');
               * // => ['fred', 'barney', 'pebbles']
               *
               * _.words('fred, barney, & pebbles', /[^, ]+/g);
               * // => ['fred', 'barney', '&', 'pebbles']
               */
              function words(string, pattern, guard) {
                string = toString(string);
                pattern = guard ? undefined : pattern;

                if (pattern === undefined) {
                  return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                }
                return string.match(pattern) || [];
              }

              /*------------------------------------------------------------------------*/

              /**
               * Attempts to invoke `func`, returning either the result or the caught error
               * object. Any additional arguments are provided to `func` when it's invoked.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Util
               * @param {Function} func The function to attempt.
               * @param {...*} [args] The arguments to invoke `func` with.
               * @returns {*} Returns the `func` result or error object.
               * @example
               *
               * // Avoid throwing errors for invalid selectors.
               * var elements = _.attempt(function(selector) {
               *   return document.querySelectorAll(selector);
               * }, '>_>');
               *
               * if (_.isError(elements)) {
               *   elements = [];
               * }
               */
              var attempt = baseRest(function (func, args) {
                try {
                  return apply(func, undefined, args);
                } catch (e) {
                  return isError(e) ? e : new Error(e);
                }
              });

              /**
               * Binds methods of an object to the object itself, overwriting the existing
               * method.
               *
               * **Note:** This method doesn't set the "length" property of bound functions.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Util
               * @param {Object} object The object to bind and assign the bound methods to.
               * @param {...(string|string[])} methodNames The object method names to bind.
               * @returns {Object} Returns `object`.
               * @example
               *
               * var view = {
               *   'label': 'docs',
               *   'click': function() {
               *     console.log('clicked ' + this.label);
               *   }
               * };
               *
               * _.bindAll(view, ['click']);
               * jQuery(element).on('click', view.click);
               * // => Logs 'clicked docs' when clicked.
               */
              var bindAll = flatRest(function (object, methodNames) {
                arrayEach(methodNames, function (key) {
                  key = toKey(key);
                  baseAssignValue(object, key, bind(object[key], object));
                });
                return object;
              });

              /**
               * Creates a function that iterates over `pairs` and invokes the corresponding
               * function of the first predicate to return truthy. The predicate-function
               * pairs are invoked with the `this` binding and arguments of the created
               * function.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Util
               * @param {Array} pairs The predicate-function pairs.
               * @returns {Function} Returns the new composite function.
               * @example
               *
               * var func = _.cond([
               *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
               *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
               *   [_.stubTrue,                      _.constant('no match')]
               * ]);
               *
               * func({ 'a': 1, 'b': 2 });
               * // => 'matches A'
               *
               * func({ 'a': 0, 'b': 1 });
               * // => 'matches B'
               *
               * func({ 'a': '1', 'b': '2' });
               * // => 'no match'
               */
              function cond(pairs) {
                var length = pairs == null ? 0 : pairs.length,
                  toIteratee = getIteratee();

                pairs = !length ? [] : arrayMap(pairs, function (pair) {
                  if (typeof pair[1] != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  return [toIteratee(pair[0]), pair[1]];
                });

                return baseRest(function (args) {
                  var index = -1;
                  while (++index < length) {
                    var pair = pairs[index];
                    if (apply(pair[0], this, args)) {
                      return apply(pair[1], this, args);
                    }
                  }
                });
              }

              /**
               * Creates a function that invokes the predicate properties of `source` with
               * the corresponding property values of a given object, returning `true` if
               * all predicates return truthy, else `false`.
               *
               * **Note:** The created function is equivalent to `_.conformsTo` with
               * `source` partially applied.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Util
               * @param {Object} source The object of property predicates to conform to.
               * @returns {Function} Returns the new spec function.
               * @example
               *
               * var objects = [
               *   { 'a': 2, 'b': 1 },
               *   { 'a': 1, 'b': 2 }
               * ];
               *
               * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
               * // => [{ 'a': 1, 'b': 2 }]
               */
              function conforms(source) {
                return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
              }

              /**
               * Creates a function that returns `value`.
               *
               * @static
               * @memberOf _
               * @since 2.4.0
               * @category Util
               * @param {*} value The value to return from the new function.
               * @returns {Function} Returns the new constant function.
               * @example
               *
               * var objects = _.times(2, _.constant({ 'a': 1 }));
               *
               * console.log(objects);
               * // => [{ 'a': 1 }, { 'a': 1 }]
               *
               * console.log(objects[0] === objects[1]);
               * // => true
               */
              function constant(value) {
                return function () {
                  return value;
                };
              }

              /**
               * Checks `value` to determine whether a default value should be returned in
               * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
               * or `undefined`.
               *
               * @static
               * @memberOf _
               * @since 4.14.0
               * @category Util
               * @param {*} value The value to check.
               * @param {*} defaultValue The default value.
               * @returns {*} Returns the resolved value.
               * @example
               *
               * _.defaultTo(1, 10);
               * // => 1
               *
               * _.defaultTo(undefined, 10);
               * // => 10
               */
              function defaultTo(value, defaultValue) {
                return (value == null || value !== value) ? defaultValue : value;
              }

              /**
               * Creates a function that returns the result of invoking the given functions
               * with the `this` binding of the created function, where each successive
               * invocation is supplied the return value of the previous.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Util
               * @param {...(Function|Function[])} [funcs] The functions to invoke.
               * @returns {Function} Returns the new composite function.
               * @see _.flowRight
               * @example
               *
               * function square(n) {
               *   return n * n;
               * }
               *
               * var addSquare = _.flow([_.add, square]);
               * addSquare(1, 2);
               * // => 9
               */
              var flow = createFlow();

              /**
               * This method is like `_.flow` except that it creates a function that
               * invokes the given functions from right to left.
               *
               * @static
               * @since 3.0.0
               * @memberOf _
               * @category Util
               * @param {...(Function|Function[])} [funcs] The functions to invoke.
               * @returns {Function} Returns the new composite function.
               * @see _.flow
               * @example
               *
               * function square(n) {
               *   return n * n;
               * }
               *
               * var addSquare = _.flowRight([square, _.add]);
               * addSquare(1, 2);
               * // => 9
               */
              var flowRight = createFlow(true);

              /**
               * This method returns the first argument it receives.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Util
               * @param {*} value Any value.
               * @returns {*} Returns `value`.
               * @example
               *
               * var object = { 'a': 1 };
               *
               * console.log(_.identity(object) === object);
               * // => true
               */
              function identity(value) {
                return value;
              }

              /**
               * Creates a function that invokes `func` with the arguments of the created
               * function. If `func` is a property name, the created function returns the
               * property value for a given element. If `func` is an array or object, the
               * created function returns `true` for elements that contain the equivalent
               * source properties, otherwise it returns `false`.
               *
               * @static
               * @since 4.0.0
               * @memberOf _
               * @category Util
               * @param {*} [func=_.identity] The value to convert to a callback.
               * @returns {Function} Returns the callback.
               * @example
               *
               * var users = [
               *   { 'user': 'barney', 'age': 36, 'active': true },
               *   { 'user': 'fred',   'age': 40, 'active': false }
               * ];
               *
               * // The `_.matches` iteratee shorthand.
               * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
               * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
               *
               * // The `_.matchesProperty` iteratee shorthand.
               * _.filter(users, _.iteratee(['user', 'fred']));
               * // => [{ 'user': 'fred', 'age': 40 }]
               *
               * // The `_.property` iteratee shorthand.
               * _.map(users, _.iteratee('user'));
               * // => ['barney', 'fred']
               *
               * // Create custom iteratee shorthands.
               * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
               *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
               *     return func.test(string);
               *   };
               * });
               *
               * _.filter(['abc', 'def'], /ef/);
               * // => ['def']
               */
              function iteratee(func) {
                return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
              }

              /**
               * Creates a function that performs a partial deep comparison between a given
               * object and `source`, returning `true` if the given object has equivalent
               * property values, else `false`.
               *
               * **Note:** The created function is equivalent to `_.isMatch` with `source`
               * partially applied.
               *
               * Partial comparisons will match empty array and empty object `source`
               * values against any array or object value, respectively. See `_.isEqual`
               * for a list of supported value comparisons.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Util
               * @param {Object} source The object of property values to match.
               * @returns {Function} Returns the new spec function.
               * @example
               *
               * var objects = [
               *   { 'a': 1, 'b': 2, 'c': 3 },
               *   { 'a': 4, 'b': 5, 'c': 6 }
               * ];
               *
               * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
               * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
               */
              function matches(source) {
                return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
              }

              /**
               * Creates a function that performs a partial deep comparison between the
               * value at `path` of a given object to `srcValue`, returning `true` if the
               * object value is equivalent, else `false`.
               *
               * **Note:** Partial comparisons will match empty array and empty object
               * `srcValue` values against any array or object value, respectively. See
               * `_.isEqual` for a list of supported value comparisons.
               *
               * @static
               * @memberOf _
               * @since 3.2.0
               * @category Util
               * @param {Array|string} path The path of the property to get.
               * @param {*} srcValue The value to match.
               * @returns {Function} Returns the new spec function.
               * @example
               *
               * var objects = [
               *   { 'a': 1, 'b': 2, 'c': 3 },
               *   { 'a': 4, 'b': 5, 'c': 6 }
               * ];
               *
               * _.find(objects, _.matchesProperty('a', 4));
               * // => { 'a': 4, 'b': 5, 'c': 6 }
               */
              function matchesProperty(path, srcValue) {
                return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
              }

              /**
               * Creates a function that invokes the method at `path` of a given object.
               * Any additional arguments are provided to the invoked method.
               *
               * @static
               * @memberOf _
               * @since 3.7.0
               * @category Util
               * @param {Array|string} path The path of the method to invoke.
               * @param {...*} [args] The arguments to invoke the method with.
               * @returns {Function} Returns the new invoker function.
               * @example
               *
               * var objects = [
               *   { 'a': { 'b': _.constant(2) } },
               *   { 'a': { 'b': _.constant(1) } }
               * ];
               *
               * _.map(objects, _.method('a.b'));
               * // => [2, 1]
               *
               * _.map(objects, _.method(['a', 'b']));
               * // => [2, 1]
               */
              var method = baseRest(function (path, args) {
                return function (object) {
                  return baseInvoke(object, path, args);
                };
              });

              /**
               * The opposite of `_.method`; this method creates a function that invokes
               * the method at a given path of `object`. Any additional arguments are
               * provided to the invoked method.
               *
               * @static
               * @memberOf _
               * @since 3.7.0
               * @category Util
               * @param {Object} object The object to query.
               * @param {...*} [args] The arguments to invoke the method with.
               * @returns {Function} Returns the new invoker function.
               * @example
               *
               * var array = _.times(3, _.constant),
               *     object = { 'a': array, 'b': array, 'c': array };
               *
               * _.map(['a[2]', 'c[0]'], _.methodOf(object));
               * // => [2, 0]
               *
               * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
               * // => [2, 0]
               */
              var methodOf = baseRest(function (object, args) {
                return function (path) {
                  return baseInvoke(object, path, args);
                };
              });

              /**
               * Adds all own enumerable string keyed function properties of a source
               * object to the destination object. If `object` is a function, then methods
               * are added to its prototype as well.
               *
               * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
               * avoid conflicts caused by modifying the original.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Util
               * @param {Function|Object} [object=lodash] The destination object.
               * @param {Object} source The object of functions to add.
               * @param {Object} [options={}] The options object.
               * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
               * @returns {Function|Object} Returns `object`.
               * @example
               *
               * function vowels(string) {
               *   return _.filter(string, function(v) {
               *     return /[aeiou]/i.test(v);
               *   });
               * }
               *
               * _.mixin({ 'vowels': vowels });
               * _.vowels('fred');
               * // => ['e']
               *
               * _('fred').vowels().value();
               * // => ['e']
               *
               * _.mixin({ 'vowels': vowels }, { 'chain': false });
               * _('fred').vowels();
               * // => ['e']
               */
              function mixin(object, source, options) {
                var props = keys(source),
                  methodNames = baseFunctions(source, props);

                if (options == null &&
                  !(isObject(source) && (methodNames.length || !props.length))) {
                  options = source;
                  source = object;
                  object = this;
                  methodNames = baseFunctions(source, keys(source));
                }
                var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
                  isFunc = isFunction(object);

                arrayEach(methodNames, function (methodName) {
                  var func = source[methodName];
                  object[methodName] = func;
                  if (isFunc) {
                    object.prototype[methodName] = function () {
                      var chainAll = this.__chain__;
                      if (chain || chainAll) {
                        var result = object(this.__wrapped__),
                          actions = result.__actions__ = copyArray(this.__actions__);

                        actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                        result.__chain__ = chainAll;
                        return result;
                      }
                      return func.apply(object, arrayPush([this.value()], arguments));
                    };
                  }
                });

                return object;
              }

              /**
               * Reverts the `_` variable to its previous value and returns a reference to
               * the `lodash` function.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Util
               * @returns {Function} Returns the `lodash` function.
               * @example
               *
               * var lodash = _.noConflict();
               */
              function noConflict() {
                if (root._ === this) {
                  root._ = oldDash;
                }
                return this;
              }

              /**
               * This method returns `undefined`.
               *
               * @static
               * @memberOf _
               * @since 2.3.0
               * @category Util
               * @example
               *
               * _.times(2, _.noop);
               * // => [undefined, undefined]
               */
              function noop() {
                // No operation performed.
              }

              /**
               * Creates a function that gets the argument at index `n`. If `n` is negative,
               * the nth argument from the end is returned.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Util
               * @param {number} [n=0] The index of the argument to return.
               * @returns {Function} Returns the new pass-thru function.
               * @example
               *
               * var func = _.nthArg(1);
               * func('a', 'b', 'c', 'd');
               * // => 'b'
               *
               * var func = _.nthArg(-2);
               * func('a', 'b', 'c', 'd');
               * // => 'c'
               */
              function nthArg(n) {
                n = toInteger(n);
                return baseRest(function (args) {
                  return baseNth(args, n);
                });
              }

              /**
               * Creates a function that invokes `iteratees` with the arguments it receives
               * and returns their results.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Util
               * @param {...(Function|Function[])} [iteratees=[_.identity]]
               *  The iteratees to invoke.
               * @returns {Function} Returns the new function.
               * @example
               *
               * var func = _.over([Math.max, Math.min]);
               *
               * func(1, 2, 3, 4);
               * // => [4, 1]
               */
              var over = createOver(arrayMap);

              /**
               * Creates a function that checks if **all** of the `predicates` return
               * truthy when invoked with the arguments it receives.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Util
               * @param {...(Function|Function[])} [predicates=[_.identity]]
               *  The predicates to check.
               * @returns {Function} Returns the new function.
               * @example
               *
               * var func = _.overEvery([Boolean, isFinite]);
               *
               * func('1');
               * // => true
               *
               * func(null);
               * // => false
               *
               * func(NaN);
               * // => false
               */
              var overEvery = createOver(arrayEvery);

              /**
               * Creates a function that checks if **any** of the `predicates` return
               * truthy when invoked with the arguments it receives.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Util
               * @param {...(Function|Function[])} [predicates=[_.identity]]
               *  The predicates to check.
               * @returns {Function} Returns the new function.
               * @example
               *
               * var func = _.overSome([Boolean, isFinite]);
               *
               * func('1');
               * // => true
               *
               * func(null);
               * // => true
               *
               * func(NaN);
               * // => false
               */
              var overSome = createOver(arraySome);

              /**
               * Creates a function that returns the value at `path` of a given object.
               *
               * @static
               * @memberOf _
               * @since 2.4.0
               * @category Util
               * @param {Array|string} path The path of the property to get.
               * @returns {Function} Returns the new accessor function.
               * @example
               *
               * var objects = [
               *   { 'a': { 'b': 2 } },
               *   { 'a': { 'b': 1 } }
               * ];
               *
               * _.map(objects, _.property('a.b'));
               * // => [2, 1]
               *
               * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
               * // => [1, 2]
               */
              function property(path) {
                return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
              }

              /**
               * The opposite of `_.property`; this method creates a function that returns
               * the value at a given path of `object`.
               *
               * @static
               * @memberOf _
               * @since 3.0.0
               * @category Util
               * @param {Object} object The object to query.
               * @returns {Function} Returns the new accessor function.
               * @example
               *
               * var array = [0, 1, 2],
               *     object = { 'a': array, 'b': array, 'c': array };
               *
               * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
               * // => [2, 0]
               *
               * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
               * // => [2, 0]
               */
              function propertyOf(object) {
                return function (path) {
                  return object == null ? undefined : baseGet(object, path);
                };
              }

              /**
               * Creates an array of numbers (positive and/or negative) progressing from
               * `start` up to, but not including, `end`. A step of `-1` is used if a negative
               * `start` is specified without an `end` or `step`. If `end` is not specified,
               * it's set to `start` with `start` then set to `0`.
               *
               * **Note:** JavaScript follows the IEEE-754 standard for resolving
               * floating-point values which can produce unexpected results.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Util
               * @param {number} [start=0] The start of the range.
               * @param {number} end The end of the range.
               * @param {number} [step=1] The value to increment or decrement by.
               * @returns {Array} Returns the range of numbers.
               * @see _.inRange, _.rangeRight
               * @example
               *
               * _.range(4);
               * // => [0, 1, 2, 3]
               *
               * _.range(-4);
               * // => [0, -1, -2, -3]
               *
               * _.range(1, 5);
               * // => [1, 2, 3, 4]
               *
               * _.range(0, 20, 5);
               * // => [0, 5, 10, 15]
               *
               * _.range(0, -4, -1);
               * // => [0, -1, -2, -3]
               *
               * _.range(1, 4, 0);
               * // => [1, 1, 1]
               *
               * _.range(0);
               * // => []
               */
              var range = createRange();

              /**
               * This method is like `_.range` except that it populates values in
               * descending order.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Util
               * @param {number} [start=0] The start of the range.
               * @param {number} end The end of the range.
               * @param {number} [step=1] The value to increment or decrement by.
               * @returns {Array} Returns the range of numbers.
               * @see _.inRange, _.range
               * @example
               *
               * _.rangeRight(4);
               * // => [3, 2, 1, 0]
               *
               * _.rangeRight(-4);
               * // => [-3, -2, -1, 0]
               *
               * _.rangeRight(1, 5);
               * // => [4, 3, 2, 1]
               *
               * _.rangeRight(0, 20, 5);
               * // => [15, 10, 5, 0]
               *
               * _.rangeRight(0, -4, -1);
               * // => [-3, -2, -1, 0]
               *
               * _.rangeRight(1, 4, 0);
               * // => [1, 1, 1]
               *
               * _.rangeRight(0);
               * // => []
               */
              var rangeRight = createRange(true);

              /**
               * This method returns a new empty array.
               *
               * @static
               * @memberOf _
               * @since 4.13.0
               * @category Util
               * @returns {Array} Returns the new empty array.
               * @example
               *
               * var arrays = _.times(2, _.stubArray);
               *
               * console.log(arrays);
               * // => [[], []]
               *
               * console.log(arrays[0] === arrays[1]);
               * // => false
               */
              function stubArray() {
                return [];
              }

              /**
               * This method returns `false`.
               *
               * @static
               * @memberOf _
               * @since 4.13.0
               * @category Util
               * @returns {boolean} Returns `false`.
               * @example
               *
               * _.times(2, _.stubFalse);
               * // => [false, false]
               */
              function stubFalse() {
                return false;
              }

              /**
               * This method returns a new empty object.
               *
               * @static
               * @memberOf _
               * @since 4.13.0
               * @category Util
               * @returns {Object} Returns the new empty object.
               * @example
               *
               * var objects = _.times(2, _.stubObject);
               *
               * console.log(objects);
               * // => [{}, {}]
               *
               * console.log(objects[0] === objects[1]);
               * // => false
               */
              function stubObject() {
                return {};
              }

              /**
               * This method returns an empty string.
               *
               * @static
               * @memberOf _
               * @since 4.13.0
               * @category Util
               * @returns {string} Returns the empty string.
               * @example
               *
               * _.times(2, _.stubString);
               * // => ['', '']
               */
              function stubString() {
                return '';
              }

              /**
               * This method returns `true`.
               *
               * @static
               * @memberOf _
               * @since 4.13.0
               * @category Util
               * @returns {boolean} Returns `true`.
               * @example
               *
               * _.times(2, _.stubTrue);
               * // => [true, true]
               */
              function stubTrue() {
                return true;
              }

              /**
               * Invokes the iteratee `n` times, returning an array of the results of
               * each invocation. The iteratee is invoked with one argument; (index).
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Util
               * @param {number} n The number of times to invoke `iteratee`.
               * @param {Function} [iteratee=_.identity] The function invoked per iteration.
               * @returns {Array} Returns the array of results.
               * @example
               *
               * _.times(3, String);
               * // => ['0', '1', '2']
               *
               *  _.times(4, _.constant(0));
               * // => [0, 0, 0, 0]
               */
              function times(n, iteratee) {
                n = toInteger(n);
                if (n < 1 || n > MAX_SAFE_INTEGER) {
                  return [];
                }
                var index = MAX_ARRAY_LENGTH,
                  length = nativeMin(n, MAX_ARRAY_LENGTH);

                iteratee = getIteratee(iteratee);
                n -= MAX_ARRAY_LENGTH;

                var result = baseTimes(length, iteratee);
                while (++index < n) {
                  iteratee(index);
                }
                return result;
              }

              /**
               * Converts `value` to a property path array.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Util
               * @param {*} value The value to convert.
               * @returns {Array} Returns the new property path array.
               * @example
               *
               * _.toPath('a.b.c');
               * // => ['a', 'b', 'c']
               *
               * _.toPath('a[0].b.c');
               * // => ['a', '0', 'b', 'c']
               */
              function toPath(value) {
                if (isArray(value)) {
                  return arrayMap(value, toKey);
                }
                return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
              }

              /**
               * Generates a unique ID. If `prefix` is given, the ID is appended to it.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Util
               * @param {string} [prefix=''] The value to prefix the ID with.
               * @returns {string} Returns the unique ID.
               * @example
               *
               * _.uniqueId('contact_');
               * // => 'contact_104'
               *
               * _.uniqueId();
               * // => '105'
               */
              function uniqueId(prefix) {
                var id = ++idCounter;
                return toString(prefix) + id;
              }

              /*------------------------------------------------------------------------*/

              /**
               * Adds two numbers.
               *
               * @static
               * @memberOf _
               * @since 3.4.0
               * @category Math
               * @param {number} augend The first number in an addition.
               * @param {number} addend The second number in an addition.
               * @returns {number} Returns the total.
               * @example
               *
               * _.add(6, 4);
               * // => 10
               */
              var add = createMathOperation(function (augend, addend) {
                return augend + addend;
              }, 0);

              /**
               * Computes `number` rounded up to `precision`.
               *
               * @static
               * @memberOf _
               * @since 3.10.0
               * @category Math
               * @param {number} number The number to round up.
               * @param {number} [precision=0] The precision to round up to.
               * @returns {number} Returns the rounded up number.
               * @example
               *
               * _.ceil(4.006);
               * // => 5
               *
               * _.ceil(6.004, 2);
               * // => 6.01
               *
               * _.ceil(6040, -2);
               * // => 6100
               */
              var ceil = createRound('ceil');

              /**
               * Divide two numbers.
               *
               * @static
               * @memberOf _
               * @since 4.7.0
               * @category Math
               * @param {number} dividend The first number in a division.
               * @param {number} divisor The second number in a division.
               * @returns {number} Returns the quotient.
               * @example
               *
               * _.divide(6, 4);
               * // => 1.5
               */
              var divide = createMathOperation(function (dividend, divisor) {
                return dividend / divisor;
              }, 1);

              /**
               * Computes `number` rounded down to `precision`.
               *
               * @static
               * @memberOf _
               * @since 3.10.0
               * @category Math
               * @param {number} number The number to round down.
               * @param {number} [precision=0] The precision to round down to.
               * @returns {number} Returns the rounded down number.
               * @example
               *
               * _.floor(4.006);
               * // => 4
               *
               * _.floor(0.046, 2);
               * // => 0.04
               *
               * _.floor(4060, -2);
               * // => 4000
               */
              var floor = createRound('floor');

              /**
               * Computes the maximum value of `array`. If `array` is empty or falsey,
               * `undefined` is returned.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Math
               * @param {Array} array The array to iterate over.
               * @returns {*} Returns the maximum value.
               * @example
               *
               * _.max([4, 2, 8, 6]);
               * // => 8
               *
               * _.max([]);
               * // => undefined
               */
              function max(array) {
                return (array && array.length) ?
                  baseExtremum(array, identity, baseGt) :
                  undefined;
              }

              /**
               * This method is like `_.max` except that it accepts `iteratee` which is
               * invoked for each element in `array` to generate the criterion by which
               * the value is ranked. The iteratee is invoked with one argument: (value).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Math
               * @param {Array} array The array to iterate over.
               * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
               * @returns {*} Returns the maximum value.
               * @example
               *
               * var objects = [{ 'n': 1 }, { 'n': 2 }];
               *
               * _.maxBy(objects, function(o) { return o.n; });
               * // => { 'n': 2 }
               *
               * // The `_.property` iteratee shorthand.
               * _.maxBy(objects, 'n');
               * // => { 'n': 2 }
               */
              function maxBy(array, iteratee) {
                return (array && array.length) ?
                  baseExtremum(array, getIteratee(iteratee, 2), baseGt) :
                  undefined;
              }

              /**
               * Computes the mean of the values in `array`.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Math
               * @param {Array} array The array to iterate over.
               * @returns {number} Returns the mean.
               * @example
               *
               * _.mean([4, 2, 8, 6]);
               * // => 5
               */
              function mean(array) {
                return baseMean(array, identity);
              }

              /**
               * This method is like `_.mean` except that it accepts `iteratee` which is
               * invoked for each element in `array` to generate the value to be averaged.
               * The iteratee is invoked with one argument: (value).
               *
               * @static
               * @memberOf _
               * @since 4.7.0
               * @category Math
               * @param {Array} array The array to iterate over.
               * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
               * @returns {number} Returns the mean.
               * @example
               *
               * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
               *
               * _.meanBy(objects, function(o) { return o.n; });
               * // => 5
               *
               * // The `_.property` iteratee shorthand.
               * _.meanBy(objects, 'n');
               * // => 5
               */
              function meanBy(array, iteratee) {
                return baseMean(array, getIteratee(iteratee, 2));
              }

              /**
               * Computes the minimum value of `array`. If `array` is empty or falsey,
               * `undefined` is returned.
               *
               * @static
               * @since 0.1.0
               * @memberOf _
               * @category Math
               * @param {Array} array The array to iterate over.
               * @returns {*} Returns the minimum value.
               * @example
               *
               * _.min([4, 2, 8, 6]);
               * // => 2
               *
               * _.min([]);
               * // => undefined
               */
              function min(array) {
                return (array && array.length) ?
                  baseExtremum(array, identity, baseLt) :
                  undefined;
              }

              /**
               * This method is like `_.min` except that it accepts `iteratee` which is
               * invoked for each element in `array` to generate the criterion by which
               * the value is ranked. The iteratee is invoked with one argument: (value).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Math
               * @param {Array} array The array to iterate over.
               * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
               * @returns {*} Returns the minimum value.
               * @example
               *
               * var objects = [{ 'n': 1 }, { 'n': 2 }];
               *
               * _.minBy(objects, function(o) { return o.n; });
               * // => { 'n': 1 }
               *
               * // The `_.property` iteratee shorthand.
               * _.minBy(objects, 'n');
               * // => { 'n': 1 }
               */
              function minBy(array, iteratee) {
                return (array && array.length) ?
                  baseExtremum(array, getIteratee(iteratee, 2), baseLt) :
                  undefined;
              }

              /**
               * Multiply two numbers.
               *
               * @static
               * @memberOf _
               * @since 4.7.0
               * @category Math
               * @param {number} multiplier The first number in a multiplication.
               * @param {number} multiplicand The second number in a multiplication.
               * @returns {number} Returns the product.
               * @example
               *
               * _.multiply(6, 4);
               * // => 24
               */
              var multiply = createMathOperation(function (multiplier, multiplicand) {
                return multiplier * multiplicand;
              }, 1);

              /**
               * Computes `number` rounded to `precision`.
               *
               * @static
               * @memberOf _
               * @since 3.10.0
               * @category Math
               * @param {number} number The number to round.
               * @param {number} [precision=0] The precision to round to.
               * @returns {number} Returns the rounded number.
               * @example
               *
               * _.round(4.006);
               * // => 4
               *
               * _.round(4.006, 2);
               * // => 4.01
               *
               * _.round(4060, -2);
               * // => 4100
               */
              var round = createRound('round');

              /**
               * Subtract two numbers.
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Math
               * @param {number} minuend The first number in a subtraction.
               * @param {number} subtrahend The second number in a subtraction.
               * @returns {number} Returns the difference.
               * @example
               *
               * _.subtract(6, 4);
               * // => 2
               */
              var subtract = createMathOperation(function (minuend, subtrahend) {
                return minuend - subtrahend;
              }, 0);

              /**
               * Computes the sum of the values in `array`.
               *
               * @static
               * @memberOf _
               * @since 3.4.0
               * @category Math
               * @param {Array} array The array to iterate over.
               * @returns {number} Returns the sum.
               * @example
               *
               * _.sum([4, 2, 8, 6]);
               * // => 20
               */
              function sum(array) {
                return (array && array.length) ?
                  baseSum(array, identity) :
                  0;
              }

              /**
               * This method is like `_.sum` except that it accepts `iteratee` which is
               * invoked for each element in `array` to generate the value to be summed.
               * The iteratee is invoked with one argument: (value).
               *
               * @static
               * @memberOf _
               * @since 4.0.0
               * @category Math
               * @param {Array} array The array to iterate over.
               * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
               * @returns {number} Returns the sum.
               * @example
               *
               * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
               *
               * _.sumBy(objects, function(o) { return o.n; });
               * // => 20
               *
               * // The `_.property` iteratee shorthand.
               * _.sumBy(objects, 'n');
               * // => 20
               */
              function sumBy(array, iteratee) {
                return (array && array.length) ?
                  baseSum(array, getIteratee(iteratee, 2)) :
                  0;
              }

              /*------------------------------------------------------------------------*/

              // Add methods that return wrapped values in chain sequences.
              lodash.after = after;
              lodash.ary = ary;
              lodash.assign = assign;
              lodash.assignIn = assignIn;
              lodash.assignInWith = assignInWith;
              lodash.assignWith = assignWith;
              lodash.at = at;
              lodash.before = before;
              lodash.bind = bind;
              lodash.bindAll = bindAll;
              lodash.bindKey = bindKey;
              lodash.castArray = castArray;
              lodash.chain = chain;
              lodash.chunk = chunk;
              lodash.compact = compact;
              lodash.concat = concat;
              lodash.cond = cond;
              lodash.conforms = conforms;
              lodash.constant = constant;
              lodash.countBy = countBy;
              lodash.create = create;
              lodash.curry = curry;
              lodash.curryRight = curryRight;
              lodash.debounce = debounce;
              lodash.defaults = defaults;
              lodash.defaultsDeep = defaultsDeep;
              lodash.defer = defer;
              lodash.delay = delay;
              lodash.difference = difference;
              lodash.differenceBy = differenceBy;
              lodash.differenceWith = differenceWith;
              lodash.drop = drop;
              lodash.dropRight = dropRight;
              lodash.dropRightWhile = dropRightWhile;
              lodash.dropWhile = dropWhile;
              lodash.fill = fill;
              lodash.filter = filter;
              lodash.flatMap = flatMap;
              lodash.flatMapDeep = flatMapDeep;
              lodash.flatMapDepth = flatMapDepth;
              lodash.flatten = flatten;
              lodash.flattenDeep = flattenDeep;
              lodash.flattenDepth = flattenDepth;
              lodash.flip = flip;
              lodash.flow = flow;
              lodash.flowRight = flowRight;
              lodash.fromPairs = fromPairs;
              lodash.functions = functions;
              lodash.functionsIn = functionsIn;
              lodash.groupBy = groupBy;
              lodash.initial = initial;
              lodash.intersection = intersection;
              lodash.intersectionBy = intersectionBy;
              lodash.intersectionWith = intersectionWith;
              lodash.invert = invert;
              lodash.invertBy = invertBy;
              lodash.invokeMap = invokeMap;
              lodash.iteratee = iteratee;
              lodash.keyBy = keyBy;
              lodash.keys = keys;
              lodash.keysIn = keysIn;
              lodash.map = map;
              lodash.mapKeys = mapKeys;
              lodash.mapValues = mapValues;
              lodash.matches = matches;
              lodash.matchesProperty = matchesProperty;
              lodash.memoize = memoize;
              lodash.merge = merge;
              lodash.mergeWith = mergeWith;
              lodash.method = method;
              lodash.methodOf = methodOf;
              lodash.mixin = mixin;
              lodash.negate = negate;
              lodash.nthArg = nthArg;
              lodash.omit = omit;
              lodash.omitBy = omitBy;
              lodash.once = once;
              lodash.orderBy = orderBy;
              lodash.over = over;
              lodash.overArgs = overArgs;
              lodash.overEvery = overEvery;
              lodash.overSome = overSome;
              lodash.partial = partial;
              lodash.partialRight = partialRight;
              lodash.partition = partition;
              lodash.pick = pick;
              lodash.pickBy = pickBy;
              lodash.property = property;
              lodash.propertyOf = propertyOf;
              lodash.pull = pull;
              lodash.pullAll = pullAll;
              lodash.pullAllBy = pullAllBy;
              lodash.pullAllWith = pullAllWith;
              lodash.pullAt = pullAt;
              lodash.range = range;
              lodash.rangeRight = rangeRight;
              lodash.rearg = rearg;
              lodash.reject = reject;
              lodash.remove = remove;
              lodash.rest = rest;
              lodash.reverse = reverse;
              lodash.sampleSize = sampleSize;
              lodash.set = set;
              lodash.setWith = setWith;
              lodash.shuffle = shuffle;
              lodash.slice = slice;
              lodash.sortBy = sortBy;
              lodash.sortedUniq = sortedUniq;
              lodash.sortedUniqBy = sortedUniqBy;
              lodash.split = split;
              lodash.spread = spread;
              lodash.tail = tail;
              lodash.take = take;
              lodash.takeRight = takeRight;
              lodash.takeRightWhile = takeRightWhile;
              lodash.takeWhile = takeWhile;
              lodash.tap = tap;
              lodash.throttle = throttle;
              lodash.thru = thru;
              lodash.toArray = toArray;
              lodash.toPairs = toPairs;
              lodash.toPairsIn = toPairsIn;
              lodash.toPath = toPath;
              lodash.toPlainObject = toPlainObject;
              lodash.transform = transform;
              lodash.unary = unary;
              lodash.union = union;
              lodash.unionBy = unionBy;
              lodash.unionWith = unionWith;
              lodash.uniq = uniq;
              lodash.uniqBy = uniqBy;
              lodash.uniqWith = uniqWith;
              lodash.unset = unset;
              lodash.unzip = unzip;
              lodash.unzipWith = unzipWith;
              lodash.update = update;
              lodash.updateWith = updateWith;
              lodash.values = values;
              lodash.valuesIn = valuesIn;
              lodash.without = without;
              lodash.words = words;
              lodash.wrap = wrap;
              lodash.xor = xor;
              lodash.xorBy = xorBy;
              lodash.xorWith = xorWith;
              lodash.zip = zip;
              lodash.zipObject = zipObject;
              lodash.zipObjectDeep = zipObjectDeep;
              lodash.zipWith = zipWith;

              // Add aliases.
              lodash.entries = toPairs;
              lodash.entriesIn = toPairsIn;
              lodash.extend = assignIn;
              lodash.extendWith = assignInWith;

              // Add methods to `lodash.prototype`.
              mixin(lodash, lodash);

              /*------------------------------------------------------------------------*/

              // Add methods that return unwrapped values in chain sequences.
              lodash.add = add;
              lodash.attempt = attempt;
              lodash.camelCase = camelCase;
              lodash.capitalize = capitalize;
              lodash.ceil = ceil;
              lodash.clamp = clamp;
              lodash.clone = clone;
              lodash.cloneDeep = cloneDeep;
              lodash.cloneDeepWith = cloneDeepWith;
              lodash.cloneWith = cloneWith;
              lodash.conformsTo = conformsTo;
              lodash.deburr = deburr;
              lodash.defaultTo = defaultTo;
              lodash.divide = divide;
              lodash.endsWith = endsWith;
              lodash.eq = eq;
              lodash.escape = escape;
              lodash.escapeRegExp = escapeRegExp;
              lodash.every = every;
              lodash.find = find;
              lodash.findIndex = findIndex;
              lodash.findKey = findKey;
              lodash.findLast = findLast;
              lodash.findLastIndex = findLastIndex;
              lodash.findLastKey = findLastKey;
              lodash.floor = floor;
              lodash.forEach = forEach;
              lodash.forEachRight = forEachRight;
              lodash.forIn = forIn;
              lodash.forInRight = forInRight;
              lodash.forOwn = forOwn;
              lodash.forOwnRight = forOwnRight;
              lodash.get = get;
              lodash.gt = gt;
              lodash.gte = gte;
              lodash.has = has;
              lodash.hasIn = hasIn;
              lodash.head = head;
              lodash.identity = identity;
              lodash.includes = includes;
              lodash.indexOf = indexOf;
              lodash.inRange = inRange;
              lodash.invoke = invoke;
              lodash.isArguments = isArguments;
              lodash.isArray = isArray;
              lodash.isArrayBuffer = isArrayBuffer;
              lodash.isArrayLike = isArrayLike;
              lodash.isArrayLikeObject = isArrayLikeObject;
              lodash.isBoolean = isBoolean;
              lodash.isBuffer = isBuffer;
              lodash.isDate = isDate;
              lodash.isElement = isElement;
              lodash.isEmpty = isEmpty;
              lodash.isEqual = isEqual;
              lodash.isEqualWith = isEqualWith;
              lodash.isError = isError;
              lodash.isFinite = isFinite;
              lodash.isFunction = isFunction;
              lodash.isInteger = isInteger;
              lodash.isLength = isLength;
              lodash.isMap = isMap;
              lodash.isMatch = isMatch;
              lodash.isMatchWith = isMatchWith;
              lodash.isNaN = isNaN;
              lodash.isNative = isNative;
              lodash.isNil = isNil;
              lodash.isNull = isNull;
              lodash.isNumber = isNumber;
              lodash.isObject = isObject;
              lodash.isObjectLike = isObjectLike;
              lodash.isPlainObject = isPlainObject;
              lodash.isRegExp = isRegExp;
              lodash.isSafeInteger = isSafeInteger;
              lodash.isSet = isSet;
              lodash.isString = isString;
              lodash.isSymbol = isSymbol;
              lodash.isTypedArray = isTypedArray;
              lodash.isUndefined = isUndefined;
              lodash.isWeakMap = isWeakMap;
              lodash.isWeakSet = isWeakSet;
              lodash.join = join;
              lodash.kebabCase = kebabCase;
              lodash.last = last;
              lodash.lastIndexOf = lastIndexOf;
              lodash.lowerCase = lowerCase;
              lodash.lowerFirst = lowerFirst;
              lodash.lt = lt;
              lodash.lte = lte;
              lodash.max = max;
              lodash.maxBy = maxBy;
              lodash.mean = mean;
              lodash.meanBy = meanBy;
              lodash.min = min;
              lodash.minBy = minBy;
              lodash.stubArray = stubArray;
              lodash.stubFalse = stubFalse;
              lodash.stubObject = stubObject;
              lodash.stubString = stubString;
              lodash.stubTrue = stubTrue;
              lodash.multiply = multiply;
              lodash.nth = nth;
              lodash.noConflict = noConflict;
              lodash.noop = noop;
              lodash.now = now;
              lodash.pad = pad;
              lodash.padEnd = padEnd;
              lodash.padStart = padStart;
              lodash.parseInt = parseInt;
              lodash.random = random;
              lodash.reduce = reduce;
              lodash.reduceRight = reduceRight;
              lodash.repeat = repeat;
              lodash.replace = replace;
              lodash.result = result;
              lodash.round = round;
              lodash.runInContext = runInContext;
              lodash.sample = sample;
              lodash.size = size;
              lodash.snakeCase = snakeCase;
              lodash.some = some;
              lodash.sortedIndex = sortedIndex;
              lodash.sortedIndexBy = sortedIndexBy;
              lodash.sortedIndexOf = sortedIndexOf;
              lodash.sortedLastIndex = sortedLastIndex;
              lodash.sortedLastIndexBy = sortedLastIndexBy;
              lodash.sortedLastIndexOf = sortedLastIndexOf;
              lodash.startCase = startCase;
              lodash.startsWith = startsWith;
              lodash.subtract = subtract;
              lodash.sum = sum;
              lodash.sumBy = sumBy;
              lodash.template = template;
              lodash.times = times;
              lodash.toFinite = toFinite;
              lodash.toInteger = toInteger;
              lodash.toLength = toLength;
              lodash.toLower = toLower;
              lodash.toNumber = toNumber;
              lodash.toSafeInteger = toSafeInteger;
              lodash.toString = toString;
              lodash.toUpper = toUpper;
              lodash.trim = trim;
              lodash.trimEnd = trimEnd;
              lodash.trimStart = trimStart;
              lodash.truncate = truncate;
              lodash.unescape = unescape;
              lodash.uniqueId = uniqueId;
              lodash.upperCase = upperCase;
              lodash.upperFirst = upperFirst;

              // Add aliases.
              lodash.each = forEach;
              lodash.eachRight = forEachRight;
              lodash.first = head;

              mixin(lodash, (function () {
                var source = {};
                baseForOwn(lodash, function (func, methodName) {
                  if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                    source[methodName] = func;
                  }
                });
                return source;
              }()), { 'chain': false });

              /*------------------------------------------------------------------------*/

              /**
               * The semantic version number.
               *
               * @static
               * @memberOf _
               * @type {string}
               */
              lodash.VERSION = VERSION;

              // Assign default placeholders.
              arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
                lodash[methodName].placeholder = lodash;
              });

              // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
              arrayEach(['drop', 'take'], function (methodName, index) {
                LazyWrapper.prototype[methodName] = function (n) {
                  n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                  var result = (this.__filtered__ && !index) ?
                    new LazyWrapper(this) :
                    this.clone();

                  if (result.__filtered__) {
                    result.__takeCount__ = nativeMin(n, result.__takeCount__);
                  } else {
                    result.__views__.push({
                      'size': nativeMin(n, MAX_ARRAY_LENGTH),
                      'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                    });
                  }
                  return result;
                };

                LazyWrapper.prototype[methodName + 'Right'] = function (n) {
                  return this.reverse()[methodName](n).reverse();
                };
              });

              // Add `LazyWrapper` methods that accept an `iteratee` value.
              arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
                var type = index + 1,
                  isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                LazyWrapper.prototype[methodName] = function (iteratee) {
                  var result = this.clone();
                  result.__iteratees__.push({
                    'iteratee': getIteratee(iteratee, 3),
                    'type': type
                  });
                  result.__filtered__ = result.__filtered__ || isFilter;
                  return result;
                };
              });

              // Add `LazyWrapper` methods for `_.head` and `_.last`.
              arrayEach(['head', 'last'], function (methodName, index) {
                var takeName = 'take' + (index ? 'Right' : '');

                LazyWrapper.prototype[methodName] = function () {
                  return this[takeName](1).value()[0];
                };
              });

              // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
              arrayEach(['initial', 'tail'], function (methodName, index) {
                var dropName = 'drop' + (index ? '' : 'Right');

                LazyWrapper.prototype[methodName] = function () {
                  return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                };
              });

              LazyWrapper.prototype.compact = function () {
                return this.filter(identity);
              };

              LazyWrapper.prototype.find = function (predicate) {
                return this.filter(predicate).head();
              };

              LazyWrapper.prototype.findLast = function (predicate) {
                return this.reverse().find(predicate);
              };

              LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
                if (typeof path == 'function') {
                  return new LazyWrapper(this);
                }
                return this.map(function (value) {
                  return baseInvoke(value, path, args);
                });
              });

              LazyWrapper.prototype.reject = function (predicate) {
                return this.filter(negate(getIteratee(predicate)));
              };

              LazyWrapper.prototype.slice = function (start, end) {
                start = toInteger(start);

                var result = this;
                if (result.__filtered__ && (start > 0 || end < 0)) {
                  return new LazyWrapper(result);
                }
                if (start < 0) {
                  result = result.takeRight(-start);
                } else if (start) {
                  result = result.drop(start);
                }
                if (end !== undefined) {
                  end = toInteger(end);
                  result = end < 0 ? result.dropRight(-end) : result.take(end - start);
                }
                return result;
              };

              LazyWrapper.prototype.takeRightWhile = function (predicate) {
                return this.reverse().takeWhile(predicate).reverse();
              };

              LazyWrapper.prototype.toArray = function () {
                return this.take(MAX_ARRAY_LENGTH);
              };

              // Add `LazyWrapper` methods to `lodash.prototype`.
              baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
                  isTaker = /^(?:head|last)$/.test(methodName),
                  lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
                  retUnwrapped = isTaker || /^find/.test(methodName);

                if (!lodashFunc) {
                  return;
                }
                lodash.prototype[methodName] = function () {
                  var value = this.__wrapped__,
                    args = isTaker ? [1] : arguments,
                    isLazy = value instanceof LazyWrapper,
                    iteratee = args[0],
                    useLazy = isLazy || isArray(value);

                  var interceptor = function (value) {
                    var result = lodashFunc.apply(lodash, arrayPush([value], args));
                    return (isTaker && chainAll) ? result[0] : result;
                  };

                  if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                    // Avoid lazy use if the iteratee has a "length" value other than `1`.
                    isLazy = useLazy = false;
                  }
                  var chainAll = this.__chain__,
                    isHybrid = !!this.__actions__.length,
                    isUnwrapped = retUnwrapped && !chainAll,
                    onlyLazy = isLazy && !isHybrid;

                  if (!retUnwrapped && useLazy) {
                    value = onlyLazy ? value : new LazyWrapper(this);
                    var result = func.apply(value, args);
                    result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
                    return new LodashWrapper(result, chainAll);
                  }
                  if (isUnwrapped && onlyLazy) {
                    return func.apply(this, args);
                  }
                  result = this.thru(interceptor);
                  return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
                };
              });

              // Add `Array` methods to `lodash.prototype`.
              arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
                var func = arrayProto[methodName],
                  chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
                  retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                lodash.prototype[methodName] = function () {
                  var args = arguments;
                  if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                  }
                  return this[chainName](function (value) {
                    return func.apply(isArray(value) ? value : [], args);
                  });
                };
              });

              // Map minified method names to their real names.
              baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                var lodashFunc = lodash[methodName];
                if (lodashFunc) {
                  var key = (lodashFunc.name + ''),
                    names = realNames[key] || (realNames[key] = []);

                  names.push({ 'name': methodName, 'func': lodashFunc });
                }
              });

              realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
                'name': 'wrapper',
                'func': undefined
              }];

              // Add methods to `LazyWrapper`.
              LazyWrapper.prototype.clone = lazyClone;
              LazyWrapper.prototype.reverse = lazyReverse;
              LazyWrapper.prototype.value = lazyValue;

              // Add chain sequence methods to the `lodash` wrapper.
              lodash.prototype.at = wrapperAt;
              lodash.prototype.chain = wrapperChain;
              lodash.prototype.commit = wrapperCommit;
              lodash.prototype.next = wrapperNext;
              lodash.prototype.plant = wrapperPlant;
              lodash.prototype.reverse = wrapperReverse;
              lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

              // Add lazy aliases.
              lodash.prototype.first = lodash.prototype.head;

              if (symIterator) {
                lodash.prototype[symIterator] = wrapperToIterator;
              }
              return lodash;
            });

            /*--------------------------------------------------------------------------*/

            // Export lodash.
            var _ = runInContext();

            // Some AMD build optimizers, like r.js, check for condition patterns like:
            if (true) {
              // Expose Lodash on the global object to prevent errors when Lodash is
              // loaded by a script tag in the presence of an AMD loader.
              // See http://requirejs.org/docs/errors.html#mismatch for more details.
              // Use `_.noConflict` to remove Lodash from the global object.
              root._ = _;

              // Define as an anonymous module so, through path mapping, it can be
              // referenced as the "underscore" module.
              !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
                return _;
              }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            }
            // Check for `exports` after `define` in case a build optimizer adds it.
            else if (freeModule) {
              // Export for Node.js.
              (freeModule.exports = _)._ = _;
              // Export for CommonJS support.
              freeExports._ = _;
            } else {
              // Export to the global object.
              root._ = _;
            }
          }.call(this));

          /* WEBPACK VAR INJECTION */
        }.call(exports, (function () { return this; }()), __webpack_require__(70)(module)))

        /***/
      }),
      /* 70 */
      /***/
      (function (module, exports) {

        module.exports = function (module) {
          if (!module.webpackPolyfill) {
            module.deprecate = function () {};
            module.paths = [];
            // module.parent = undefined by default
            module.children = [];
            module.webpackPolyfill = 1;
          }
          return module;
        }


        /***/
      }),
      /* 71 */
      /***/
      (function (module, exports) {

        /* WEBPACK VAR INJECTION */
        (function (global) {
          /*!
          	Copyright (C) 2015-2017 Andrea Giammarchi - @WebReflection

          	Permission is hereby granted, free of charge, to any person obtaining a copy
          	of this software and associated documentation files (the "Software"), to deal
          	in the Software without restriction, including without limitation the rights
          	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          	copies of the Software, and to permit persons to whom the Software is
          	furnished to do so, subject to the following conditions:

          	The above copyright notice and this permission notice shall be included in
          	all copies or substantial portions of the Software.

          	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
          	THE SOFTWARE.

          	*/
          'use strict';

          function URLSearchParams(query) {
            var
              index, key, value,
              pairs, i, length,
              dict = Object.create(null);
            this[secret] = dict;
            if (!query) return;
            if (typeof query === 'string') {
              if (query.charAt(0) === '?') {
                query = query.slice(1);
              }
              for (
                pairs = query.split('&'),
                i = 0,
                length = pairs.length; i < length; i++
              ) {
                value = pairs[i];
                index = value.indexOf('=');
                if (-1 < index) {
                  appendTo(
                    dict,
                    decode(value.slice(0, index)),
                    decode(value.slice(index + 1))
                  );
                } else if (value.length) {
                  appendTo(
                    dict,
                    decode(value),
                    ''
                  );
                }
              }
            } else {
              if (isArray(query)) {
                for (
                  i = 0,
                  length = query.length; i < length; i++
                ) {
                  value = query[i];
                  appendTo(dict, value[0], value[1]);
                }
              } else {
                for (key in query) {
                  appendTo(dict, key, query[key]);
                }
              }
            }
          }

          var
            isArray = Array.isArray,
            URLSearchParamsProto = URLSearchParams.prototype,
            find = /[!'\(\)~]|%20|%00/g,
            plus = /\+/g,
            replace = {
              '!': '%21',
              "'": '%27',
              '(': '%28',
              ')': '%29',
              '~': '%7E',
              '%20': '+',
              '%00': '\x00'
            },
            replacer = function (match) {
              return replace[match];
            },
            iterable = isIterable(),
            secret = '__URLSearchParams__:' + Math.random();

          function appendTo(dict, name, value) {
            if (name in dict) {
              dict[name].push('' + value);
            } else {
              dict[name] = isArray(value) ? value : ['' + value];
            }
          }

          function decode(str) {
            return decodeURIComponent(str.replace(plus, ' '));
          }

          function encode(str) {
            return encodeURIComponent(str).replace(find, replacer);
          }

          function isIterable() {
            try {
              return !!Symbol.iterator;
            } catch (error) {
              return false;
            }
          }

          URLSearchParamsProto.append = function append(name, value) {
            appendTo(this[secret], name, value);
          };

          URLSearchParamsProto.delete = function del(name) {
            delete this[secret][name];
          };

          URLSearchParamsProto.get = function get(name) {
            var dict = this[secret];
            return name in dict ? dict[name][0] : null;
          };

          URLSearchParamsProto.getAll = function getAll(name) {
            var dict = this[secret];
            return name in dict ? dict[name].slice(0) : [];
          };

          URLSearchParamsProto.has = function has(name) {
            return name in this[secret];
          };

          URLSearchParamsProto.set = function set(name, value) {
            this[secret][name] = ['' + value];
          };

          URLSearchParamsProto.forEach = function forEach(callback, thisArg) {
            var dict = this[secret];
            Object.getOwnPropertyNames(dict).forEach(function (name) {
              dict[name].forEach(function (value) {
                callback.call(thisArg, value, name, this);
              }, this);
            }, this);
          };

          URLSearchParamsProto.keys = function keys() {
            var items = [];
            this.forEach(function (value, name) { items.push(name); });
            var iterator = {
              next: function () {
                var value = items.shift();
                return { done: value === undefined, value: value };
              }
            };

            if (iterable) {
              iterator[Symbol.iterator] = function () {
                return iterator;
              };
            }

            return iterator;
          };

          URLSearchParamsProto.values = function values() {
            var items = [];
            this.forEach(function (value) { items.push(value); });
            var iterator = {
              next: function () {
                var value = items.shift();
                return { done: value === undefined, value: value };
              }
            };

            if (iterable) {
              iterator[Symbol.iterator] = function () {
                return iterator;
              };
            }

            return iterator;
          };

          URLSearchParamsProto.entries = function entries() {
            var items = [];
            this.forEach(function (value, name) { items.push([name, value]); });
            var iterator = {
              next: function () {
                var value = items.shift();
                return { done: value === undefined, value: value };
              }
            };

            if (iterable) {
              iterator[Symbol.iterator] = function () {
                return iterator;
              };
            }

            return iterator;
          };

          if (iterable) {
            URLSearchParamsProto[Symbol.iterator] = URLSearchParamsProto.entries;
          }

          /*
          URLSearchParamsProto.toBody = function() {
            return new Blob(
              [this.toString()],
              {type: 'application/x-www-form-urlencoded'}
            );
          };
          */

          URLSearchParamsProto.toJSON = function toJSON() {
            return {};
          };

          URLSearchParamsProto.toString = function toString() {
            var dict = this[secret],
              query = [],
              i, key, name, value;
            for (key in dict) {
              name = encode(key);
              for (
                i = 0,
                value = dict[key]; i < value.length; i++
              ) {
                query.push(name + '=' + encode(value[i]));
              }
            }
            return query.join('&');
          };

          URLSearchParams = (module.exports = global.URLSearchParams || URLSearchParams);

          if (!('sort' in URLSearchParams.prototype)) {
            URLSearchParams.prototype.sort = function sort() {
              var
                entries = this.entries(),
                entry = entries.next(),
                done = entry.done,
                keys = [],
                values = Object.create(null),
                i, key, value;
              while (!done) {
                value = entry.value;
                key = value[0];
                keys.push(key);
                if (!(key in values)) {
                  values[key] = [];
                }
                values[key].push(value[1]);
                entry = entries.next();
                done = entry.done;
              }
              // not the champion in efficiency
              // but these two bits just do the job
              keys.sort();
              for (i = 0; i < keys.length; i++) {
                this.delete(keys[i]);
              }
              for (i = 0; i < keys.length; i++) {
                key = keys[i];
                this.append(key, values[key].shift());
              }
            };
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, (function () { return this; }())))

        /***/
      }),
      /* 72 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         */

        var fbemitter = {
          EventEmitter: __webpack_require__(73),
          EmitterSubscription: __webpack_require__(74)
        };

        module.exports = fbemitter;


        /***/
      }),
      /* 73 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         *
         * @providesModule BaseEventEmitter
         * @typechecks
         */

        'use strict';

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

        var EmitterSubscription = __webpack_require__(74);
        var EventSubscriptionVendor = __webpack_require__(76);

        var emptyFunction = __webpack_require__(78);
        var invariant = __webpack_require__(77);

        /**
         * @class BaseEventEmitter
         * @description
         * An EventEmitter is responsible for managing a set of listeners and publishing
         * events to them when it is told that such events happened. In addition to the
         * data for the given event it also sends a event control object which allows
         * the listeners/handlers to prevent the default behavior of the given event.
         *
         * The emitter is designed to be generic enough to support all the different
         * contexts in which one might want to emit events. It is a simple multicast
         * mechanism on top of which extra functionality can be composed. For example, a
         * more advanced emitter may use an EventHolder and EventFactory.
         */

        var BaseEventEmitter = (function () {
          /**
           * @constructor
           */

          function BaseEventEmitter() {
            _classCallCheck(this, BaseEventEmitter);

            this._subscriber = new EventSubscriptionVendor();
            this._currentSubscription = null;
          }

          /**
           * Adds a listener to be invoked when events of the specified type are
           * emitted. An optional calling context may be provided. The data arguments
           * emitted will be passed to the listener function.
           *
           * TODO: Annotate the listener arg's type. This is tricky because listeners
           *       can be invoked with varargs.
           *
           * @param {string} eventType - Name of the event to listen to
           * @param {function} listener - Function to invoke when the specified event is
           *   emitted
           * @param {*} context - Optional context object to use when invoking the
           *   listener
           */

          BaseEventEmitter.prototype.addListener = function addListener(eventType, listener, context) {
            return this._subscriber.addSubscription(eventType, new EmitterSubscription(this._subscriber, listener, context));
          };

          /**
           * Similar to addListener, except that the listener is removed after it is
           * invoked once.
           *
           * @param {string} eventType - Name of the event to listen to
           * @param {function} listener - Function to invoke only once when the
           *   specified event is emitted
           * @param {*} context - Optional context object to use when invoking the
           *   listener
           */

          BaseEventEmitter.prototype.once = function once(eventType, listener, context) {
            var emitter = this;
            return this.addListener(eventType, function () {
              emitter.removeCurrentListener();
              listener.apply(context, arguments);
            });
          };

          /**
           * Removes all of the registered listeners, including those registered as
           * listener maps.
           *
           * @param {?string} eventType - Optional name of the event whose registered
           *   listeners to remove
           */

          BaseEventEmitter.prototype.removeAllListeners = function removeAllListeners(eventType) {
            this._subscriber.removeAllSubscriptions(eventType);
          };

          /**
           * Provides an API that can be called during an eventing cycle to remove the
           * last listener that was invoked. This allows a developer to provide an event
           * object that can remove the listener (or listener map) during the
           * invocation.
           *
           * If it is called when not inside of an emitting cycle it will throw.
           *
           * @throws {Error} When called not during an eventing cycle
           *
           * @example
           *   var subscription = emitter.addListenerMap({
           *     someEvent: function(data, event) {
           *       console.log(data);
           *       emitter.removeCurrentListener();
           *     }
           *   });
           *
           *   emitter.emit('someEvent', 'abc'); // logs 'abc'
           *   emitter.emit('someEvent', 'def'); // does not log anything
           */

          BaseEventEmitter.prototype.removeCurrentListener = function removeCurrentListener() {
            !!!this._currentSubscription ? (undefined) !== 'production' ? invariant(false, 'Not in an emitting cycle; there is no current subscription') : invariant(false) : undefined;
            this._subscriber.removeSubscription(this._currentSubscription);
          };

          /**
           * Returns an array of listeners that are currently registered for the given
           * event.
           *
           * @param {string} eventType - Name of the event to query
           * @return {array}
           */

          BaseEventEmitter.prototype.listeners = function listeners(eventType) /* TODO: Array<EventSubscription> */ {
            var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
            return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
              return subscription.listener;
            }) : [];
          };

          /**
           * Emits an event of the given type with the given data. All handlers of that
           * particular type will be notified.
           *
           * @param {string} eventType - Name of the event to emit
           * @param {*} Arbitrary arguments to be passed to each registered listener
           *
           * @example
           *   emitter.addListener('someEvent', function(message) {
           *     console.log(message);
           *   });
           *
           *   emitter.emit('someEvent', 'abc'); // logs 'abc'
           */

          BaseEventEmitter.prototype.emit = function emit(eventType) {
            var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
            if (subscriptions) {
              var keys = Object.keys(subscriptions);
              for (var ii = 0; ii < keys.length; ii++) {
                var key = keys[ii];
                var subscription = subscriptions[key];
                // The subscription may have been removed during this event loop.
                if (subscription) {
                  this._currentSubscription = subscription;
                  this.__emitToSubscription.apply(this, [subscription].concat(Array.prototype.slice.call(arguments)));
                }
              }
              this._currentSubscription = null;
            }
          };

          /**
           * Provides a hook to override how the emitter emits an event to a specific
           * subscription. This allows you to set up logging and error boundaries
           * specific to your environment.
           *
           * @param {EmitterSubscription} subscription
           * @param {string} eventType
           * @param {*} Arbitrary arguments to be passed to each registered listener
           */

          BaseEventEmitter.prototype.__emitToSubscription = function __emitToSubscription(subscription, eventType) {
            var args = Array.prototype.slice.call(arguments, 2);
            subscription.listener.apply(subscription.context, args);
          };

          return BaseEventEmitter;
        })();

        module.exports = BaseEventEmitter;

        /***/
      }),
      /* 74 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         * 
         * @providesModule EmitterSubscription
         * @typechecks
         */

        'use strict';

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var EventSubscription = __webpack_require__(75);

        /**
         * EmitterSubscription represents a subscription with listener and context data.
         */

        var EmitterSubscription = (function (_EventSubscription) {
          _inherits(EmitterSubscription, _EventSubscription);

          /**
           * @param {EventSubscriptionVendor} subscriber - The subscriber that controls
           *   this subscription
           * @param {function} listener - Function to invoke when the specified event is
           *   emitted
           * @param {*} context - Optional context object to use when invoking the
           *   listener
           */

          function EmitterSubscription(subscriber, listener, context) {
            _classCallCheck(this, EmitterSubscription);

            _EventSubscription.call(this, subscriber);
            this.listener = listener;
            this.context = context;
          }

          return EmitterSubscription;
        })(EventSubscription);

        module.exports = EmitterSubscription;

        /***/
      }),
      /* 75 */
      /***/
      (function (module, exports) {

        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         *
         * @providesModule EventSubscription
         * @typechecks
         */

        'use strict';

        /**
         * EventSubscription represents a subscription to a particular event. It can
         * remove its own subscription.
         */

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

        var EventSubscription = (function () {

          /**
           * @param {EventSubscriptionVendor} subscriber the subscriber that controls
           *   this subscription.
           */

          function EventSubscription(subscriber) {
            _classCallCheck(this, EventSubscription);

            this.subscriber = subscriber;
          }

          /**
           * Removes this subscription from the subscriber that controls it.
           */

          EventSubscription.prototype.remove = function remove() {
            if (this.subscriber) {
              this.subscriber.removeSubscription(this);
              this.subscriber = null;
            }
          };

          return EventSubscription;
        })();

        module.exports = EventSubscription;

        /***/
      }),
      /* 76 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         * 
         * @providesModule EventSubscriptionVendor
         * @typechecks
         */

        'use strict';

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

        var invariant = __webpack_require__(77);

        /**
         * EventSubscriptionVendor stores a set of EventSubscriptions that are
         * subscribed to a particular event type.
         */

        var EventSubscriptionVendor = (function () {
          function EventSubscriptionVendor() {
            _classCallCheck(this, EventSubscriptionVendor);

            this._subscriptionsForType = {};
            this._currentSubscription = null;
          }

          /**
           * Adds a subscription keyed by an event type.
           *
           * @param {string} eventType
           * @param {EventSubscription} subscription
           */

          EventSubscriptionVendor.prototype.addSubscription = function addSubscription(eventType, subscription) {
            !(subscription.subscriber === this) ? (undefined) !== 'production' ? invariant(false, 'The subscriber of the subscription is incorrectly set.'): invariant(false): undefined;
            if (!this._subscriptionsForType[eventType]) {
              this._subscriptionsForType[eventType] = [];
            }
            var key = this._subscriptionsForType[eventType].length;
            this._subscriptionsForType[eventType].push(subscription);
            subscription.eventType = eventType;
            subscription.key = key;
            return subscription;
          };

          /**
           * Removes a bulk set of the subscriptions.
           *
           * @param {?string} eventType - Optional name of the event type whose
           *   registered supscriptions to remove, if null remove all subscriptions.
           */

          EventSubscriptionVendor.prototype.removeAllSubscriptions = function removeAllSubscriptions(eventType) {
            if (eventType === undefined) {
              this._subscriptionsForType = {};
            } else {
              delete this._subscriptionsForType[eventType];
            }
          };

          /**
           * Removes a specific subscription. Instead of calling this function, call
           * `subscription.remove()` directly.
           *
           * @param {object} subscription
           */

          EventSubscriptionVendor.prototype.removeSubscription = function removeSubscription(subscription) {
            var eventType = subscription.eventType;
            var key = subscription.key;

            var subscriptionsForType = this._subscriptionsForType[eventType];
            if (subscriptionsForType) {
              delete subscriptionsForType[key];
            }
          };

          /**
           * Returns the array of subscriptions that are currently registered for the
           * given event type.
           *
           * Note: This array can be potentially sparse as subscriptions are deleted
           * from it when they are removed.
           *
           * TODO: This returns a nullable array. wat?
           *
           * @param {string} eventType
           * @return {?array}
           */

          EventSubscriptionVendor.prototype.getSubscriptionsForType = function getSubscriptionsForType(eventType) {
            return this._subscriptionsForType[eventType];
          };

          return EventSubscriptionVendor;
        })();

        module.exports = EventSubscriptionVendor;

        /***/
      }),
      /* 77 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         *
         */

        'use strict';

        /**
         * Use invariant() to assert state which your program assumes to be true.
         *
         * Provide sprintf-style format (only %s is supported) and arguments
         * to provide information about what broke and what you were
         * expecting.
         *
         * The invariant message will be stripped in production, but the invariant
         * will remain to ensure logic does not differ in production.
         */

        var validateFormat = function validateFormat(format) {};

        if ((undefined) !== 'production') {
          validateFormat = function validateFormat(format) {
            if (format === undefined) {
              throw new Error('invariant requires an error message argument');
            }
          };
        }

        function invariant(condition, format, a, b, c, d, e, f) {
          validateFormat(format);

          if (!condition) {
            var error;
            if (format === undefined) {
              error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
            } else {
              var args = [a, b, c, d, e, f];
              var argIndex = 0;
              error = new Error(format.replace(/%s/g, function () {
                return args[argIndex++];
              }));
              error.name = 'Invariant Violation';
            }

            error.framesToPop = 1; // we don't care about invariant's own frame
            throw error;
          }
        }

        module.exports = invariant;

        /***/
      }),
      /* 78 */
      /***/
      (function (module, exports) {

        "use strict";

        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         *
         * 
         */

        function makeEmptyFunction(arg) {
          return function () {
            return arg;
          };
        }

        /**
         * This function accepts and discards inputs; it has no side effects. This is
         * primarily useful idiomatically for overridable function endpoints which
         * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
         */
        var emptyFunction = function emptyFunction() {};

        emptyFunction.thatReturns = makeEmptyFunction;
        emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
        emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
        emptyFunction.thatReturnsNull = makeEmptyFunction(null);
        emptyFunction.thatReturnsThis = function () {
          return this;
        };
        emptyFunction.thatReturnsArgument = function (arg) {
          return arg;
        };

        module.exports = emptyFunction;

        /***/
      }),
      /* 79 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.StaticSearch = undefined;

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var StaticSearch = exports.StaticSearch = function (_Component) {
          _inherits(StaticSearch, _Component);

          function StaticSearch(props) {
            _classCallCheck(this, StaticSearch);

            var _this = _possibleConstructorReturn(this, (StaticSearch.__proto__ || Object.getPrototypeOf(StaticSearch)).call(this, props));

            _this.state = {
              searchValue: ""
            };
            _this.handleChange = _this.handleChange.bind(_this);
            return _this;
          }

          _createClass(StaticSearch, [{
            key: "handleChange",
            value: function handleChange(event) {
              var _this2 = this;

              var value = event.target.value;
              this.setState({
                searchValue: value
              }, function () {
                _this2.props.changeCallback(_this2.state.searchValue);
              });
            }
          }, {
            key: "render",
            value: function render() {
              return _react2.default.createElement(
                "div", { className: "rbc-search-container col s12 col-xs-12" },
                _react2.default.createElement("input", {
                  type: "text",
                  className: "rbc-input col s12 col-xs-12 form-control",
                  value: this.state.searchValue,
                  placeholder: this.props.placeholder,
                  onChange: this.handleChange
                })
              );
            }
          }]);

          return StaticSearch;
        }(_react.Component);

        /***/
      }),
      /* 80 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = InitialLoader;

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function InitialLoader(props) {
          return _react2.default.createElement(
            "div", { className: "rbc rbc-initialloader" },
            props.defaultText
          );
        }

        InitialLoader.propTypes = {
          defaultText: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element])
        };

        // Default props value
        InitialLoader.defaultProps = {
          defaultText: "Initializing data.."
        };

        /***/
      }),
      /* 81 */
      /***/
      (function (module, exports) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var STRING = exports.STRING = "string";
        var KEYWORD = exports.KEYWORD = "keyword";
        var NUMBER = exports.NUMBER = "number";
        var BOOLEAN = exports.BOOLEAN = "boolean";
        var ARRAY = exports.ARRAY = "array";
        var OBJECT = exports.OBJECT = "object";
        var FUNCTION = exports.FUNCTION = "function";
        var GEO_POINT = exports.GEO_POINT = "geo_point";
        var DATE = exports.DATE = "date";

        /***/
      }),
      /* 82 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        exports.default = MultiList;

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _NativeList = __webpack_require__(59);

        var _NativeList2 = _interopRequireDefault(_NativeList);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function MultiList(props) {
          return _react2.default.createElement(_NativeList2.default, _extends({}, props, {
            component: "MultiList",
            multipleSelect: true
          }));
        }

        MultiList.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          defaultSelected: _react2.default.PropTypes.array,
          size: _react2.default.PropTypes.number,
          showCount: _react2.default.PropTypes.bool,
          sortBy: _react2.default.PropTypes.string,
          showSearch: _react2.default.PropTypes.bool,
          placeholder: _react2.default.PropTypes.string,
          customQuery: _react2.default.PropTypes.func,
          initialLoader: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          react: _react2.default.PropTypes.object,
          componentStyle: _react2.default.PropTypes.object,
          showCheckbox: _react2.default.PropTypes.bool,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        MultiList.defaultProps = {
          showCount: true,
          sort: "count",
          size: 100,
          showSearch: false,
          title: null,
          placeholder: "Search",
          showCheckbox: true,
          URLParams: false
        };

        // context type
        MultiList.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired
        };

        MultiList.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.KEYWORD,
          title: TYPES.STRING,
          react: TYPES.OBJECT,
          defaultSelected: TYPES.ARRAY,
          size: TYPES.NUMBER,
          sortBy: TYPES.STRING,
          showCount: TYPES.BOOLEAN,
          showSearch: TYPES.BOOLEAN,
          placeholder: TYPES.STRING,
          customQuery: TYPES.FUNCTION,
          initialLoader: TYPES.OBJECT,
          componentStyle: TYPES.OBJECT,
          URLParams: TYPES.BOOLEAN,
          showCheckbox: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 83 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        exports.default = SingleDataList;

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _DataList = __webpack_require__(84);

        var _DataList2 = _interopRequireDefault(_DataList);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function SingleDataList(props) {
          return _react2.default.createElement(_DataList2.default, _extends({}, props, {
            component: "SingleDataList",
            multipleSelect: false
          }));
        }

        SingleDataList.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          data: _react2.default.PropTypes.array,
          defaultSelected: _react2.default.PropTypes.string,
          customQuery: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        SingleDataList.defaultProps = {
          title: null,
          componentStyle: {},
          URLParams: false
        };

        // context type
        SingleDataList.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired
        };

        SingleDataList.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.STRING,
          title: TYPES.STRING,
          data: TYPES.ARRAY,
          defaultSelected: TYPES.STRING,
          customQuery: TYPES.FUNCTION,
          componentStyle: TYPES.OBJECT,
          URLParams: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 84 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _ChannelManager = __webpack_require__(63);

        var _ChannelManager2 = _interopRequireDefault(_ChannelManager);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint max-lines: 0 */


        var helper = __webpack_require__(65);

        var DataList = function (_Component) {
          _inherits(DataList, _Component);

          function DataList(props) {
            _classCallCheck(this, DataList);

            var _this = _possibleConstructorReturn(this, (DataList.__proto__ || Object.getPrototypeOf(DataList)).call(this, props));

            _this.state = {
              data: props.data,
              selected: null
            };

            _this.type = _this.props.multipleSelect ? "terms" : "term";
            _this.urlParams = helper.URLParams.get(_this.props.componentId, props.multipleSelect);
            _this.customQuery = _this.customQuery.bind(_this);
            _this.renderObjectList = _this.renderObjectList.bind(_this);
            _this.renderStringList = _this.renderStringList.bind(_this);
            return _this;
          }

          _createClass(DataList, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setQueryInfo();
              this.checkDefault(this.props);
              this.listenFilter();
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              var _this2 = this;

              this.setState({
                data: nextProps.data
              }, function () {
                _this2.checkDefault(nextProps);
              });
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this3 = this;

              this.filterListener = helper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this3.props.componentId) {
                  _this3.reset();
                }
              });
            }
          }, {
            key: "checkDefault",
            value: function checkDefault(props) {
              this.urlParams = helper.URLParams.get(props.componentId, props.multipleSelect);
              var defaultValue = this.urlParams !== null ? this.urlParams : props.defaultSelected;
              this.changeValue(defaultValue);
            }
          }, {
            key: "changeValue",
            value: function changeValue(defaultValue) {
              var _this4 = this;

              if (!_.isEqual(this.defaultSelected, defaultValue)) {
                this.defaultSelected = defaultValue;
                if (defaultValue) {
                  if (this.props.multipleSelect) {
                    if (Array.isArray(defaultValue)) {
                      defaultValue.forEach(function (item) {
                        _this4.state.data.some(function (record) {
                          if (record.label ? record.label === item : record === item) {
                            setTimeout(function () {
                              _this4.handleCheckboxChange(record);
                            }, 100);
                            return true;
                          }
                        });
                      });
                    } else {
                      console.error(this.props.componentId + " - defaultSelected should be an array");
                    }
                  } else {
                    this.state.data.some(function (record) {
                      if (record.label ? record.label === defaultValue : record === defaultValue) {
                        _this4.handleChange(record);
                        return true;
                      }
                    });
                  }
                } else if (defaultValue === null) {
                  if (this.props.multipleSelect) {
                    this.handleCheckboxChange(null);
                  } else {
                    this.handleChange(null);
                  }
                }
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: this.props.component
                }
              };
              helper.selectedSensor.setSensorInfo(obj);
            }
          }, {
            key: "customQuery",
            value: function customQuery(record) {
              if (record) {
                var listQuery = _defineProperty({}, this.type, _defineProperty({}, this.props.appbaseField, record));
                return this.props.multipleSelect ? record.length ? listQuery : null : listQuery;
              }
              return null;
            }
          }, {
            key: "reset",
            value: function reset() {
              this.setState({
                selected: this.props.multipleSelect ? [] : ""
              });

              var obj = {
                key: this.props.componentId,
                value: null
              };

              if (this.props.onValueChange) {
                this.props.onValueChange(null);
              }

              helper.URLParams.update(this.props.componentId, null, this.props.URLParams);
              helper.selectedSensor.set(obj, true);
            }
          }, {
            key: "handleChange",
            value: function handleChange(record) {
              var _this5 = this;

              var value = record;

              if (_typeof(this.state.data[0]) === "object") {
                value = record.value;
              }

              this.setState({
                selected: value
              }, function () {
                _this5.defaultSelected = value;
              });

              this.executeQuery(value);
            }
          }, {
            key: "handleCheckboxChange",
            value: function handleCheckboxChange(record) {
              var _this6 = this;

              var _state = this.state,
                selected = _state.selected,
                data = _state.data;

              var value = record;

              if (_typeof(data[0]) === "object") {
                value = record.value;
              }

              if (selected && selected.length) {
                var index = selected.indexOf(value);

                if (index >= 0) {
                  selected.splice(index, 1);
                } else {
                  selected.push(value);
                }
              } else {
                selected = [value];
              }

              this.setState({
                selected: selected
              }, function () {
                _this6.defaultSelected = selected;
              });

              this.executeQuery(selected);
            }
          }, {
            key: "executeQuery",
            value: function executeQuery(value) {
              var obj = {
                key: this.props.componentId,
                value: value
              };

              if (this.props.onValueChange) {
                this.props.onValueChange(value);
              }

              var selectedValue = typeof value === "string" ? value.trim() ? value : null : value;
              helper.URLParams.update(this.props.componentId, selectedValue, this.props.URLParams);
              helper.selectedSensor.set(obj, true);
            }
          }, {
            key: "renderObjectList",
            value: function renderObjectList() {
              var _this7 = this;

              var _state2 = this.state,
                data = _state2.data,
                selected = _state2.selected;

              var list = void 0;

              if (data) {
                if (this.props.multipleSelect) {
                  list = data.map(function (record, i) {
                    return _react2.default.createElement(
                      "div", {
                        className: "rbc-list-item row",
                        key: record.label + "-" + i,
                        onClick: function onClick() {
                          return _this7.handleCheckboxChange(record);
                        }
                      },
                      _react2.default.createElement("input", {
                        type: "checkbox",
                        className: "rbc-checkbox-item",
                        checked: selected && selected.indexOf(record.value) >= 0,
                        onChange: function onChange() {}
                      }),
                      _react2.default.createElement(
                        "label", { className: "rbc-label" },
                        record.label
                      )
                    );
                  });
                } else {
                  list = data.map(function (record, i) {
                    return _react2.default.createElement(
                      "div", {
                        className: "rbc-list-item row",
                        key: record.label + "-" + i,
                        onClick: function onClick() {
                          return _this7.handleChange(record);
                        }
                      },
                      _react2.default.createElement("input", {
                        type: "radio",
                        className: "rbc-radio-item",
                        checked: selected && selected === record.value,
                        onChange: function onChange() {}
                      }),
                      _react2.default.createElement(
                        "label", { className: "rbc-label" },
                        record.label
                      )
                    );
                  });
                }
              }
              return list;
            }
          }, {
            key: "renderStringList",
            value: function renderStringList() {
              var _this8 = this;

              var _state3 = this.state,
                data = _state3.data,
                selected = _state3.selected;

              var list = void 0;

              if (data) {
                if (this.props.multipleSelect) {
                  list = data.map(function (record, i) {
                    return _react2.default.createElement(
                      "div", {
                        className: "rbc-list-item row",
                        key: record + "-" + i,
                        onClick: function onClick() {
                          return _this8.handleCheckboxChange(record);
                        }
                      },
                      _react2.default.createElement("input", {
                        type: "checkbox",
                        className: "rbc-checkbox-item",
                        checked: selected && selected.indexOf(record) >= 0,
                        onChange: function onChange() {}
                      }),
                      _react2.default.createElement(
                        "label", { className: "rbc-label" },
                        record
                      )
                    );
                  });
                } else {
                  list = data.map(function (record, i) {
                    return _react2.default.createElement(
                      "div", {
                        className: "rbc-list-item row",
                        key: record + "-" + i,
                        onClick: function onClick() {
                          return _this8.handleChange(record);
                        }
                      },
                      _react2.default.createElement("input", {
                        type: "radio",
                        className: "rbc-radio-item",
                        checked: selected === record,
                        onChange: function onChange() {}
                      }),
                      _react2.default.createElement(
                        "label", { className: "rbc-label" },
                        record
                      )
                    );
                  });
                }
              }
              return list;
            }
          }, {
            key: "render",
            value: function render() {
              var listComponent = null,
                searchComponent = null,
                title = null;

              if (this.state.data.length === 0) {
                return null;
              } else {
                if (_typeof(this.state.data[0]) === "object") {
                  listComponent = this.renderObjectList();
                } else {
                  listComponent = this.renderStringList();
                }
              }

              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-placeholder-active": this.props.placeholder,
                "rbc-placeholder-inactive": !this.props.placeholder,
                "rbc-singledatalist": !this.props.multipleSelect,
                "rbc-multidatalist": this.props.multipleSelect,
                "rbc-initialloader-active": this.props.initialLoader,
                "rbc-initialloader-inactive": !this.props.initialLoader
              });

              return _react2.default.createElement(
                "div", { className: "rbc col s12 col-xs-12 card thumbnail " + cx, style: this.props.componentStyle },
                title,
                _react2.default.createElement(
                  "div", { className: "rbc-list-container clearfix" },
                  listComponent
                )
              );
            }
          }]);

          return DataList;
        }(_react.Component);

        exports.default = DataList;


        DataList.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          data: _react2.default.PropTypes.array,
          defaultSelected: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.array]),
          multipleSelect: _react2.default.PropTypes.bool,
          customQuery: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        DataList.defaultProps = {
          title: null,
          componentStyle: {},
          URLParams: false,
          multipleSelect: false,
          allowFilter: true
        };

        DataList.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        /***/
      }),
      /* 85 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        exports.default = MultiDataList;

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _DataList = __webpack_require__(84);

        var _DataList2 = _interopRequireDefault(_DataList);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function MultiDataList(props) {
          return _react2.default.createElement(_DataList2.default, _extends({}, props, {
            component: "MultiDataList",
            multipleSelect: true
          }));
        }

        MultiDataList.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          data: _react2.default.PropTypes.array,
          defaultSelected: _react2.default.PropTypes.array,
          customQuery: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        MultiDataList.defaultProps = {
          title: null,
          componentStyle: {},
          URLParams: false
        };

        // context type
        MultiDataList.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired
        };

        MultiDataList.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.STRING,
          title: TYPES.STRING,
          data: TYPES.ARRAY,
          defaultSelected: TYPES.ARRAY,
          customQuery: TYPES.FUNCTION,
          componentStyle: TYPES.OBJECT,
          URLParams: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 86 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        exports.default = SingleDropdownList;

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _DropdownList = __webpack_require__(87);

        var _DropdownList2 = _interopRequireDefault(_DropdownList);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function SingleDropdownList(props) {
          return _react2.default.createElement(_DropdownList2.default, _extends({}, props, {
            component: "SingleDropdownList",
            multipleSelect: false
          }));
        }

        SingleDropdownList.propTypes = {
          defaultSelected: _react2.default.PropTypes.string,
          componentStyle: _react2.default.PropTypes.object,
          allowFilter: _react2.default.PropTypes.bool
        };

        SingleDropdownList.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.KEYWORD,
          title: TYPES.STRING,
          react: TYPES.OBJECT,
          defaultSelected: TYPES.ARRAY,
          showCount: TYPES.STRING,
          size: TYPES.NUMBER,
          sortBy: TYPES.STRING,
          placeholder: TYPES.STRING,
          selectAllLabel: TYPES.STRING,
          customQuery: TYPES.FUNCTION,
          initialLoader: TYPES.OBJECT,
          componentStyle: TYPES.OBJECT,
          URLParams: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 87 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactSelect = __webpack_require__(88);

        var _reactSelect2 = _interopRequireDefault(_reactSelect);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _ChannelManager = __webpack_require__(63);

        var _ChannelManager2 = _interopRequireDefault(_ChannelManager);

        var _InitialLoader = __webpack_require__(80);

        var _InitialLoader2 = _interopRequireDefault(_InitialLoader);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var DropdownList = function (_Component) {
          _inherits(DropdownList, _Component);

          function DropdownList(props) {
            _classCallCheck(this, DropdownList);

            var _this = _possibleConstructorReturn(this, (DropdownList.__proto__ || Object.getPrototypeOf(DropdownList)).call(this, props));

            _this.state = {
              items: [],
              value: "",
              rawData: {
                hits: {
                  hits: []
                }
              }
            };
            _this.sortObj = {
              aggSort: _this.props.sortBy
            };
            _this.selectAll = false;
            _this.channelId = null;
            _this.channelListener = null;
            _this.previousSelectedSensor = {};
            _this.urlParams = helper.URLParams.get(_this.props.componentId, _this.props.multipleSelect);
            _this.handleChange = _this.handleChange.bind(_this);
            _this.type = _this.props.multipleSelect ? "terms" : "term";
            _this.customQuery = _this.customQuery.bind(_this);
            _this.renderOption = _this.renderOption.bind(_this);
            return _this;
          }

          // Get the items from Appbase when component is mounted


          _createClass(DropdownList, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.size = this.props.size;
              this.setQueryInfo();
              this.checkDefault(this.props);
              this.createChannel(true);
              this.listenFilter();
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              var items = this.state.items;
              this.checkDefault(nextProps);
              if (nextProps.selectAllLabel !== this.props.selectAllLabel) {
                if (this.props.selectAllLabel) {
                  items.shift();
                }
                items.unshift({ label: nextProps.selectAllLabel, value: nextProps.selectAllLabel });
                this.setState({
                  items: items
                });
              }
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this2 = this;

              this.filterListener = helper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this2.props.componentId) {
                  _this2.defaultSelected = null;
                  _this2.handleChange(null);
                }
              });
            }
          }, {
            key: "checkDefault",
            value: function checkDefault(props) {
              this.urlParams = helper.URLParams.get(props.componentId, props.multipleSelect);
              var defaultValue = this.urlParams !== null ? this.urlParams : props.defaultSelected;
              this.changeValue(defaultValue);
            }
          }, {
            key: "changeValue",
            value: function changeValue(defaultValue) {
              var _this3 = this;

              if (this.props.multipleSelect) {
                if (!_lodash2.default.isEqual(this.defaultSelected, defaultValue)) {
                  this.defaultSelected = defaultValue;
                  var records = this.state.items.filter(function (record) {
                    return _this3.defaultSelected.indexOf(record.value) > -1;
                  });
                  if (records.length) {
                    this.handleChange(records);
                  } else {
                    this.handleChange([{ value: this.defaultSelected }]);
                  }
                }
              } else if (this.defaultSelected !== defaultValue) {
                this.defaultSelected = defaultValue;
                var _records = this.state.items.filter(function (record) {
                  return record.value === _this3.defaultSelected;
                });
                if (_records.length) {
                  this.handleChange(_records);
                } else {
                  this.handleChange({ value: this.defaultSelected });
                }
              }
              if (this.sortBy !== this.props.sortBy) {
                this.sortBy = this.props.sortBy;
                this.handleSortSelect();
              }
              if (this.size !== this.props.size) {
                this.size = this.props.size;
                this.removeChannel();
                this.createChannel();
              }
            }

            // stop streaming request and remove listener when component will unmount

          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              this.removeChannel();
            }
          }, {
            key: "removeChannel",
            value: function removeChannel() {
              if (this.channelId) {
                _ChannelManager2.default.stopStream(this.channelId);
              }
              if (this.channelListener) {
                this.channelListener.remove();
              }
              if (this.loadListener) {
                this.loadListener.remove();
              }
            }

            // build query for this sensor only

          }, {
            key: "customQuery",
            value: function customQuery(value) {
              if (this.selectAll) {
                return {
                  exists: {
                    field: [this.props.appbaseField]
                  }
                };
              } else if (value) {
                return _defineProperty({}, this.type, _defineProperty({}, this.props.appbaseField, value));
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: this.props.component
                }
              };
              helper.selectedSensor.setSensorInfo(obj);
            }
          }, {
            key: "includeAggQuery",
            value: function includeAggQuery() {
              var obj = {
                key: this.props.componentId + "-sort",
                value: this.sortObj
              };
              helper.selectedSensor.setSortInfo(obj);
            }
          }, {
            key: "handleSortSelect",
            value: function handleSortSelect() {
              this.sortObj = {
                aggSort: this.props.sortBy
              };
              var obj = {
                key: this.props.componentId + "-sort",
                value: this.sortObj
              };
              if (this.props.onValueChange) {
                this.props.onValueChange(obj.value);
              }
              helper.selectedSensor.set(obj, true, "sortChange");
            }

            // Create a channel which passes the react and receive results whenever react changes

          }, {
            key: "createChannel",
            value: function createChannel() {
              var _this4 = this;

              var executeChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              // Set the react - add self aggs query as well with react
              var react = this.props.react ? this.props.react : {};
              react.aggs = {
                key: this.props.appbaseField,
                sort: this.props.sortBy,
                size: this.props.size,
                sortRef: this.props.componentId + "-sort"
              };
              var reactAnd = [this.props.componentId + "-sort", "dropdownListChanges"];
              react = helper.setupReact(react, reactAnd);
              this.includeAggQuery();
              // create a channel and listen the changes
              var channelObj = _ChannelManager2.default.create(this.context.appbaseRef, this.context.type, react, 100, 0, false, this.props.componentId);
              this.channelId = channelObj.channelId;
              this.channelListener = channelObj.emitter.addListener(channelObj.channelId, function (res) {
                if (res.error) {
                  _this4.setState({
                    queryStart: false
                  });
                }
                if (res.appliedQuery) {
                  var data = res.data;
                  var rawData = void 0;
                  if (res.mode === "streaming") {
                    rawData = _this4.state.rawData;
                    rawData.hits.hits.push(res.data);
                  } else if (res.mode === "historic") {
                    rawData = data;
                  }
                  _this4.setState({
                    queryStart: false,
                    rawData: rawData
                  });
                  _this4.setData(rawData);
                }
              });
              if (executeChannel) {
                setTimeout(function () {
                  var obj = {
                    key: "dropdownListChanges",
                    value: ""
                  };
                  helper.selectedSensor.set(obj, true);
                }, 100);
              }
              this.listenLoadingChannel(channelObj);
            }
          }, {
            key: "listenLoadingChannel",
            value: function listenLoadingChannel(channelObj) {
              var _this5 = this;

              this.loadListener = channelObj.emitter.addListener(channelObj.channelId + "-query", function (res) {
                if (res.appliedQuery) {
                  _this5.setState({
                    queryStart: res.queryState
                  });
                }
              });
            }
          }, {
            key: "setData",
            value: function setData(data) {
              if (data.aggregations && data.aggregations[this.props.appbaseField] && data.aggregations[this.props.appbaseField].buckets) {
                this.addItemsToList(data.aggregations[this.props.appbaseField].buckets);
              }
            }
          }, {
            key: "renderOption",
            value: function renderOption(option) {
              return _react2.default.createElement(
                "span", { key: option.value },
                option.value,
                " ",
                this.props.showCount && option.count ? _react2.default.createElement(
                  "span", { className: "rbc-count" },
                  option.count
                ) : null
              );
            }
          }, {
            key: "addItemsToList",
            value: function addItemsToList(newItems) {
              var _this6 = this;

              newItems = newItems.map(function (item) {
                item.label = item.key.toString();
                item.value = item.key.toString();
                item.count = null;
                if (_this6.props.showCount) {
                  item.count = item.doc_count;
                }
                return item;
              });
              newItems = newItems.filter(function (item) {
                return item && item.label && item.label.trim();
              });
              if (this.props.selectAllLabel) {
                newItems.unshift({ label: this.props.selectAllLabel, value: this.props.selectAllLabel });
              }
              this.setState({
                items: newItems
              });
              if (this.defaultSelected) {
                if (this.props.multipleSelect) {
                  var records = this.state.items.filter(function (record) {
                    return _this6.defaultSelected.indexOf(record.value) > -1;
                  });
                  if (records.length) {
                    this.handleChange(records);
                  }
                } else {
                  var _records2 = this.state.items.filter(function (record) {
                    return record.value === _this6.defaultSelected;
                  });
                  if (_records2.length) {
                    this.handleChange(_records2[0]);
                  }
                }
              }
            }

            // Handler function when a value is selected

          }, {
            key: "handleChange",
            value: function handleChange(value) {
              var result = void 0;
              this.selectAll = false;
              if (this.props.multipleSelect) {
                if (value) {
                  result = [];
                  value.map(function (item) {
                    result.push(item.value);
                  });
                  if (this.props.selectAllLabel && result.indexOf(this.props.selectAllLabel) > -1) {
                    result = this.props.selectAllLabel;
                    this.selectAll = true;
                  } else {
                    result = result.join();
                  }
                } else {
                  result = null;
                }
              } else {
                result = value ? value.value : value;
                if (this.props.selectAllLabel && result === this.props.selectAllLabel) {
                  this.selectAll = true;
                }
              }
              this.setState({
                value: result
              });

              this.setValue(result, true);
            }

            // set value

          }, {
            key: "setValue",
            value: function setValue(value) {
              var isExecuteQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

              if (this.props.multipleSelect && value) {
                value = _lodash2.default.isArray(value) ? value : value.split(",");
                value = value.length ? value : null;
              }
              value = value === "" ? null : value;
              var obj = {
                key: this.props.componentId,
                value: value
              };
              helper.URLParams.update(this.props.componentId, value, this.props.URLParams);
              helper.selectedSensor.set(obj, isExecuteQuery);
            }
          }, {
            key: "render",
            value: function render() {
              // Checking if component is single select or multiple select
              var title = null;
              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-placeholder-active": this.props.placeholder,
                "rbc-placeholder-inactive": !this.props.placeholder,
                "rbc-multidropdownlist": this.props.multipleSelect,
                "rbc-singledropdownlist": !this.props.multipleSelect,
                "rbc-count-active": this.props.showCount,
                "rbc-count-inactive": !this.props.showCount,
                "rbc-initialloader-active": this.props.initialLoader,
                "rbc-initialloader-inactive": !this.props.initialLoader
              });

              if (this.state.items.length) {
                return _react2.default.createElement(
                  "div", { className: "rbc col s12 col-xs-12 card thumbnail " + cx, style: this.props.componentStyle },
                  _react2.default.createElement(
                    "div", { className: "row" },
                    title,
                    _react2.default.createElement(
                      "div", { className: "col s12 col-xs-12" },
                      _react2.default.createElement(_reactSelect2.default, {
                        options: this.state.items,
                        clearable: false,
                        value: this.state.value,
                        onChange: this.handleChange,
                        multi: this.props.multipleSelect,
                        cache: false,
                        placeholder: this.props.placeholder,
                        optionRenderer: this.renderOption,
                        searchable: true
                      })
                    )
                  ),
                  this.props.initialLoader && this.state.queryStart ? _react2.default.createElement(_InitialLoader2.default, { defaultText: this.props.initialLoader }) : null
                );
              }

              return null;
            }
          }]);

          return DropdownList;
        }(_react.Component);

        exports.default = DropdownList;


        DropdownList.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          size: helper.sizeValidation,
          multipleSelect: _react2.default.PropTypes.bool,
          showCount: _react2.default.PropTypes.bool,
          sortBy: _react2.default.PropTypes.oneOf(["asc", "desc", "count"]),
          placeholder: _react2.default.PropTypes.string,
          selectAllLabel: _react2.default.PropTypes.string,
          initialLoader: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          defaultSelected: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.array]),
          customQuery: _react2.default.PropTypes.func,
          react: _react2.default.PropTypes.object,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        DropdownList.defaultProps = {
          showCount: true,
          sortBy: "count",
          size: 100,
          title: null,
          placeholder: "Select...",
          selectAllLabel: null,
          URLParams: false,
          allowFilter: true
        };

        // context type
        DropdownList.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        /***/
      }),
      /* 88 */
      /***/
      (function (module, exports, __webpack_require__) {

        /*!
          Copyright (c) 2016 Jed Watson.
          Licensed under the MIT License (MIT), see
          http://jedwatson.github.io/react-select
        */

        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i]; } return target; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactDom = __webpack_require__(30);

        var _reactDom2 = _interopRequireDefault(_reactDom);

        var _reactInputAutosize = __webpack_require__(89);

        var _reactInputAutosize2 = _interopRequireDefault(_reactInputAutosize);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _utilsDefaultArrowRenderer = __webpack_require__(90);

        var _utilsDefaultArrowRenderer2 = _interopRequireDefault(_utilsDefaultArrowRenderer);

        var _utilsDefaultFilterOptions = __webpack_require__(91);

        var _utilsDefaultFilterOptions2 = _interopRequireDefault(_utilsDefaultFilterOptions);

        var _utilsDefaultMenuRenderer = __webpack_require__(93);

        var _utilsDefaultMenuRenderer2 = _interopRequireDefault(_utilsDefaultMenuRenderer);

        var _utilsDefaultClearRenderer = __webpack_require__(94);

        var _utilsDefaultClearRenderer2 = _interopRequireDefault(_utilsDefaultClearRenderer);

        var _Async = __webpack_require__(95);

        var _Async2 = _interopRequireDefault(_Async);

        var _AsyncCreatable = __webpack_require__(96);

        var _AsyncCreatable2 = _interopRequireDefault(_AsyncCreatable);

        var _Creatable = __webpack_require__(97);

        var _Creatable2 = _interopRequireDefault(_Creatable);

        var _Option = __webpack_require__(98);

        var _Option2 = _interopRequireDefault(_Option);

        var _Value = __webpack_require__(99);

        var _Value2 = _interopRequireDefault(_Value);

        function stringifyValue(value) {
          var valueType = typeof value;
          if (valueType === 'string') {
            return value;
          } else if (valueType === 'object') {
            return JSON.stringify(value);
          } else if (valueType === 'number' || valueType === 'boolean') {
            return String(value);
          } else {
            return '';
          }
        }

        var stringOrNode = _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.node]);

        var instanceId = 1;

        var Select = _react2['default'].createClass({

          displayName: 'Select',

          propTypes: {
            addLabelText: _react2['default'].PropTypes.string, // placeholder displayed when you want to add a label on a multi-value input
            'aria-label': _react2['default'].PropTypes.string, // Aria label (for assistive tech)
            'aria-labelledby': _react2['default'].PropTypes.string, // HTML ID of an element that should be used as the label (for assistive tech)
            arrowRenderer: _react2['default'].PropTypes.func, // Create drop-down caret element
            autoBlur: _react2['default'].PropTypes.bool, // automatically blur the component when an option is selected
            autofocus: _react2['default'].PropTypes.bool, // autofocus the component on mount
            autosize: _react2['default'].PropTypes.bool, // whether to enable autosizing or not
            backspaceRemoves: _react2['default'].PropTypes.bool, // whether backspace removes an item if there is no text input
            backspaceToRemoveMessage: _react2['default'].PropTypes.string, // Message to use for screenreaders to press backspace to remove the current item - {label} is replaced with the item label
            className: _react2['default'].PropTypes.string, // className for the outer element
            clearAllText: stringOrNode, // title for the "clear" control when multi: true
            clearRenderer: _react2['default'].PropTypes.func, // create clearable x element
            clearValueText: stringOrNode, // title for the "clear" control
            clearable: _react2['default'].PropTypes.bool, // should it be possible to reset value
            deleteRemoves: _react2['default'].PropTypes.bool, // whether backspace removes an item if there is no text input
            delimiter: _react2['default'].PropTypes.string, // delimiter to use to join multiple values for the hidden field value
            disabled: _react2['default'].PropTypes.bool, // whether the Select is disabled or not
            escapeClearsValue: _react2['default'].PropTypes.bool, // whether escape clears the value when the menu is closed
            filterOption: _react2['default'].PropTypes.func, // method to filter a single option (option, filterString)
            filterOptions: _react2['default'].PropTypes.any, // boolean to enable default filtering or function to filter the options array ([options], filterString, [values])
            ignoreAccents: _react2['default'].PropTypes.bool, // whether to strip diacritics when filtering
            ignoreCase: _react2['default'].PropTypes.bool, // whether to perform case-insensitive filtering
            inputProps: _react2['default'].PropTypes.object, // custom attributes for the Input
            inputRenderer: _react2['default'].PropTypes.func, // returns a custom input component
            instanceId: _react2['default'].PropTypes.string, // set the components instanceId
            isLoading: _react2['default'].PropTypes.bool, // whether the Select is loading externally or not (such as options being loaded)
            joinValues: _react2['default'].PropTypes.bool, // joins multiple values into a single form field with the delimiter (legacy mode)
            labelKey: _react2['default'].PropTypes.string, // path of the label value in option objects
            matchPos: _react2['default'].PropTypes.string, // (any|start) match the start or entire string when filtering
            matchProp: _react2['default'].PropTypes.string, // (any|label|value) which option property to filter on
            menuBuffer: _react2['default'].PropTypes.number, // optional buffer (in px) between the bottom of the viewport and the bottom of the menu
            menuContainerStyle: _react2['default'].PropTypes.object, // optional style to apply to the menu container
            menuRenderer: _react2['default'].PropTypes.func, // renders a custom menu with options
            menuStyle: _react2['default'].PropTypes.object, // optional style to apply to the menu
            multi: _react2['default'].PropTypes.bool, // multi-value input
            name: _react2['default'].PropTypes.string, // generates a hidden <input /> tag with this field name for html forms
            noResultsText: stringOrNode, // placeholder displayed when there are no matching search results
            onBlur: _react2['default'].PropTypes.func, // onBlur handler: function (event) {}
            onBlurResetsInput: _react2['default'].PropTypes.bool, // whether input is cleared on blur
            onChange: _react2['default'].PropTypes.func, // onChange handler: function (newValue) {}
            onClose: _react2['default'].PropTypes.func, // fires when the menu is closed
            onCloseResetsInput: _react2['default'].PropTypes.bool, // whether input is cleared when menu is closed through the arrow
            onFocus: _react2['default'].PropTypes.func, // onFocus handler: function (event) {}
            onInputChange: _react2['default'].PropTypes.func, // onInputChange handler: function (inputValue) {}
            onInputKeyDown: _react2['default'].PropTypes.func, // input keyDown handler: function (event) {}
            onMenuScrollToBottom: _react2['default'].PropTypes.func, // fires when the menu is scrolled to the bottom; can be used to paginate options
            onOpen: _react2['default'].PropTypes.func, // fires when the menu is opened
            onValueClick: _react2['default'].PropTypes.func, // onClick handler for value labels: function (value, event) {}
            openAfterFocus: _react2['default'].PropTypes.bool, // boolean to enable opening dropdown when focused
            openOnFocus: _react2['default'].PropTypes.bool, // always open options menu on focus
            optionClassName: _react2['default'].PropTypes.string, // additional class(es) to apply to the <Option /> elements
            optionComponent: _react2['default'].PropTypes.func, // option component to render in dropdown
            optionRenderer: _react2['default'].PropTypes.func, // optionRenderer: function (option) {}
            options: _react2['default'].PropTypes.array, // array of options
            pageSize: _react2['default'].PropTypes.number, // number of entries to page when using page up/down keys
            placeholder: stringOrNode, // field placeholder, displayed when there's no value
            required: _react2['default'].PropTypes.bool, // applies HTML5 required attribute when needed
            resetValue: _react2['default'].PropTypes.any, // value to use when you clear the control
            scrollMenuIntoView: _react2['default'].PropTypes.bool, // boolean to enable the viewport to shift so that the full menu fully visible when engaged
            searchable: _react2['default'].PropTypes.bool, // whether to enable searching feature or not
            simpleValue: _react2['default'].PropTypes.bool, // pass the value to onChange as a simple value (legacy pre 1.0 mode), defaults to false
            style: _react2['default'].PropTypes.object, // optional style to apply to the control
            tabIndex: _react2['default'].PropTypes.string, // optional tab index of the control
            tabSelectsValue: _react2['default'].PropTypes.bool, // whether to treat tabbing out while focused to be value selection
            value: _react2['default'].PropTypes.any, // initial field value
            valueComponent: _react2['default'].PropTypes.func, // value component to render
            valueKey: _react2['default'].PropTypes.string, // path of the label value in option objects
            valueRenderer: _react2['default'].PropTypes.func, // valueRenderer: function (option) {}
            wrapperStyle: _react2['default'].PropTypes.object
          },

          // optional style to apply to the component wrapper
          statics: { Async: _Async2['default'], AsyncCreatable: _AsyncCreatable2['default'], Creatable: _Creatable2['default'] },

          getDefaultProps: function getDefaultProps() {
            return {
              addLabelText: 'Add "{label}"?',
              arrowRenderer: _utilsDefaultArrowRenderer2['default'],
              autosize: true,
              backspaceRemoves: true,
              backspaceToRemoveMessage: 'Press backspace to remove {label}',
              clearable: true,
              clearAllText: 'Clear all',
              clearRenderer: _utilsDefaultClearRenderer2['default'],
              clearValueText: 'Clear value',
              deleteRemoves: true,
              delimiter: ',',
              disabled: false,
              escapeClearsValue: true,
              filterOptions: _utilsDefaultFilterOptions2['default'],
              ignoreAccents: true,
              ignoreCase: true,
              inputProps: {},
              isLoading: false,
              joinValues: false,
              labelKey: 'label',
              matchPos: 'any',
              matchProp: 'any',
              menuBuffer: 0,
              menuRenderer: _utilsDefaultMenuRenderer2['default'],
              multi: false,
              noResultsText: 'No results found',
              onBlurResetsInput: true,
              onCloseResetsInput: true,
              openAfterFocus: false,
              optionComponent: _Option2['default'],
              pageSize: 5,
              placeholder: 'Select...',
              required: false,
              scrollMenuIntoView: true,
              searchable: true,
              simpleValue: false,
              tabSelectsValue: true,
              valueComponent: _Value2['default'],
              valueKey: 'value'
            };
          },

          getInitialState: function getInitialState() {
            return {
              inputValue: '',
              isFocused: false,
              isOpen: false,
              isPseudoFocused: false,
              required: false
            };
          },

          componentWillMount: function componentWillMount() {
            this._instancePrefix = 'react-select-' + (this.props.instanceId || ++instanceId) + '-';
            var valueArray = this.getValueArray(this.props.value);

            if (this.props.required) {
              this.setState({
                required: this.handleRequired(valueArray[0], this.props.multi)
              });
            }
          },

          componentDidMount: function componentDidMount() {
            if (this.props.autofocus) {
              this.focus();
            }
          },

          componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
            var valueArray = this.getValueArray(nextProps.value, nextProps);

            if (nextProps.required) {
              this.setState({
                required: this.handleRequired(valueArray[0], nextProps.multi)
              });
            }
          },

          componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
            if (nextState.isOpen !== this.state.isOpen) {
              this.toggleTouchOutsideEvent(nextState.isOpen);
              var handler = nextState.isOpen ? nextProps.onOpen : nextProps.onClose;
              handler && handler();
            }
          },

          componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
            // focus to the selected option
            if (this.menu && this.focused && this.state.isOpen && !this.hasScrolledToOption) {
              var focusedOptionNode = _reactDom2['default'].findDOMNode(this.focused);
              var menuNode = _reactDom2['default'].findDOMNode(this.menu);
              menuNode.scrollTop = focusedOptionNode.offsetTop;
              this.hasScrolledToOption = true;
            } else if (!this.state.isOpen) {
              this.hasScrolledToOption = false;
            }

            if (this._scrollToFocusedOptionOnUpdate && this.focused && this.menu) {
              this._scrollToFocusedOptionOnUpdate = false;
              var focusedDOM = _reactDom2['default'].findDOMNode(this.focused);
              var menuDOM = _reactDom2['default'].findDOMNode(this.menu);
              var focusedRect = focusedDOM.getBoundingClientRect();
              var menuRect = menuDOM.getBoundingClientRect();
              if (focusedRect.bottom > menuRect.bottom || focusedRect.top < menuRect.top) {
                menuDOM.scrollTop = focusedDOM.offsetTop + focusedDOM.clientHeight - menuDOM.offsetHeight;
              }
            }
            if (this.props.scrollMenuIntoView && this.menuContainer) {
              var menuContainerRect = this.menuContainer.getBoundingClientRect();
              if (window.innerHeight < menuContainerRect.bottom + this.props.menuBuffer) {
                window.scrollBy(0, menuContainerRect.bottom + this.props.menuBuffer - window.innerHeight);
              }
            }
            if (prevProps.disabled !== this.props.disabled) {
              this.setState({ isFocused: false }); // eslint-disable-line react/no-did-update-set-state
              this.closeMenu();
            }
          },

          componentWillUnmount: function componentWillUnmount() {
            if (!document.removeEventListener && document.detachEvent) {
              document.detachEvent('ontouchstart', this.handleTouchOutside);
            } else {
              document.removeEventListener('touchstart', this.handleTouchOutside);
            }
          },

          toggleTouchOutsideEvent: function toggleTouchOutsideEvent(enabled) {
            if (enabled) {
              if (!document.addEventListener && document.attachEvent) {
                document.attachEvent('ontouchstart', this.handleTouchOutside);
              } else {
                document.addEventListener('touchstart', this.handleTouchOutside);
              }
            } else {
              if (!document.removeEventListener && document.detachEvent) {
                document.detachEvent('ontouchstart', this.handleTouchOutside);
              } else {
                document.removeEventListener('touchstart', this.handleTouchOutside);
              }
            }
          },

          handleTouchOutside: function handleTouchOutside(event) {
            // handle touch outside on ios to dismiss menu
            if (this.wrapper && !this.wrapper.contains(event.target)) {
              this.closeMenu();
            }
          },

          focus: function focus() {
            if (!this.input) return;
            this.input.focus();

            if (this.props.openAfterFocus) {
              this.setState({
                isOpen: true
              });
            }
          },

          blurInput: function blurInput() {
            if (!this.input) return;
            this.input.blur();
          },

          handleTouchMove: function handleTouchMove(event) {
            // Set a flag that the view is being dragged
            this.dragging = true;
          },

          handleTouchStart: function handleTouchStart(event) {
            // Set a flag that the view is not being dragged
            this.dragging = false;
          },

          handleTouchEnd: function handleTouchEnd(event) {
            // Check if the view is being dragged, In this case
            // we don't want to fire the click event (because the user only wants to scroll)
            if (this.dragging) return;

            // Fire the mouse events
            this.handleMouseDown(event);
          },

          handleTouchEndClearValue: function handleTouchEndClearValue(event) {
            // Check if the view is being dragged, In this case
            // we don't want to fire the click event (because the user only wants to scroll)
            if (this.dragging) return;

            // Clear the value
            this.clearValue(event);
          },

          handleMouseDown: function handleMouseDown(event) {
            // if the event was triggered by a mousedown and not the primary
            // button, or if the component is disabled, ignore it.
            if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {
              return;
            }

            if (event.target.tagName === 'INPUT') {
              return;
            }

            // prevent default event handlers
            event.stopPropagation();
            event.preventDefault();

            // for the non-searchable select, toggle the menu
            if (!this.props.searchable) {
              this.focus();
              return this.setState({
                isOpen: !this.state.isOpen
              });
            }

            if (this.state.isFocused) {
              // On iOS, we can get into a state where we think the input is focused but it isn't really,
              // since iOS ignores programmatic calls to input.focus() that weren't triggered by a click event.
              // Call focus() again here to be safe.
              this.focus();

              var input = this.input;
              if (typeof input.getInput === 'function') {
                // Get the actual DOM input if the ref is an <AutosizeInput /> component
                input = input.getInput();
              }

              // clears the value so that the cursor will be at the end of input when the component re-renders
              input.value = '';

              // if the input is focused, ensure the menu is open
              this.setState({
                isOpen: true,
                isPseudoFocused: false
              });
            } else {
              // otherwise, focus the input and open the menu
              this._openAfterFocus = true;
              this.focus();
            }
          },

          handleMouseDownOnArrow: function handleMouseDownOnArrow(event) {
            // if the event was triggered by a mousedown and not the primary
            // button, or if the component is disabled, ignore it.
            if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {
              return;
            }
            // If the menu isn't open, let the event bubble to the main handleMouseDown
            if (!this.state.isOpen) {
              return;
            }
            // prevent default event handlers
            event.stopPropagation();
            event.preventDefault();
            // close the menu
            this.closeMenu();
          },

          handleMouseDownOnMenu: function handleMouseDownOnMenu(event) {
            // if the event was triggered by a mousedown and not the primary
            // button, or if the component is disabled, ignore it.
            if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {
              return;
            }
            event.stopPropagation();
            event.preventDefault();

            this._openAfterFocus = true;
            this.focus();
          },

          closeMenu: function closeMenu() {
            if (this.props.onCloseResetsInput) {
              this.setState({
                isOpen: false,
                isPseudoFocused: this.state.isFocused && !this.props.multi,
                inputValue: ''
              });
            } else {
              this.setState({
                isOpen: false,
                isPseudoFocused: this.state.isFocused && !this.props.multi,
                inputValue: this.state.inputValue
              });
            }
            this.hasScrolledToOption = false;
          },

          handleInputFocus: function handleInputFocus(event) {
            if (this.props.disabled) return;
            var isOpen = this.state.isOpen || this._openAfterFocus || this.props.openOnFocus;
            if (this.props.onFocus) {
              this.props.onFocus(event);
            }
            this.setState({
              isFocused: true,
              isOpen: isOpen
            });
            this._openAfterFocus = false;
          },

          handleInputBlur: function handleInputBlur(event) {
            // The check for menu.contains(activeElement) is necessary to prevent IE11's scrollbar from closing the menu in certain contexts.
            if (this.menu && (this.menu === document.activeElement || this.menu.contains(document.activeElement))) {
              this.focus();
              return;
            }

            if (this.props.onBlur) {
              this.props.onBlur(event);
            }
            var onBlurredState = {
              isFocused: false,
              isOpen: false,
              isPseudoFocused: false
            };
            if (this.props.onBlurResetsInput) {
              onBlurredState.inputValue = '';
            }
            this.setState(onBlurredState);
          },

          handleInputChange: function handleInputChange(event) {
            var newInputValue = event.target.value;

            if (this.state.inputValue !== event.target.value && this.props.onInputChange) {
              var nextState = this.props.onInputChange(newInputValue);
              // Note: != used deliberately here to catch undefined and null
              if (nextState != null && typeof nextState !== 'object') {
                newInputValue = '' + nextState;
              }
            }

            this.setState({
              isOpen: true,
              isPseudoFocused: false,
              inputValue: newInputValue
            });
          },

          handleKeyDown: function handleKeyDown(event) {
            if (this.props.disabled) return;

            if (typeof this.props.onInputKeyDown === 'function') {
              this.props.onInputKeyDown(event);
              if (event.defaultPrevented) {
                return;
              }
            }

            switch (event.keyCode) {
            case 8:
              // backspace
              if (!this.state.inputValue && this.props.backspaceRemoves) {
                event.preventDefault();
                this.popValue();
              }
              return;
            case 9:
              // tab
              if (event.shiftKey || !this.state.isOpen || !this.props.tabSelectsValue) {
                return;
              }
              this.selectFocusedOption();
              return;
            case 13:
              // enter
              if (!this.state.isOpen) return;
              event.stopPropagation();
              this.selectFocusedOption();
              break;
            case 27:
              // escape
              if (this.state.isOpen) {
                this.closeMenu();
                event.stopPropagation();
              } else if (this.props.clearable && this.props.escapeClearsValue) {
                this.clearValue(event);
                event.stopPropagation();
              }
              break;
            case 38:
              // up
              this.focusPreviousOption();
              break;
            case 40:
              // down
              this.focusNextOption();
              break;
            case 33:
              // page up
              this.focusPageUpOption();
              break;
            case 34:
              // page down
              this.focusPageDownOption();
              break;
            case 35:
              // end key
              if (event.shiftKey) {
                return;
              }
              this.focusEndOption();
              break;
            case 36:
              // home key
              if (event.shiftKey) {
                return;
              }
              this.focusStartOption();
              break;
            case 46:
              // backspace
              if (!this.state.inputValue && this.props.deleteRemoves) {
                event.preventDefault();
                this.popValue();
              }
              return;
            default:
              return;
            }
            event.preventDefault();
          },

          handleValueClick: function handleValueClick(option, event) {
            if (!this.props.onValueClick) return;
            this.props.onValueClick(option, event);
          },

          handleMenuScroll: function handleMenuScroll(event) {
            if (!this.props.onMenuScrollToBottom) return;
            var target = event.target;

            if (target.scrollHeight > target.offsetHeight && !(target.scrollHeight - target.offsetHeight - target.scrollTop)) {
              this.props.onMenuScrollToBottom();
            }
          },

          handleRequired: function handleRequired(value, multi) {
            if (!value) return true;
            return multi ? value.length === 0 : Object.keys(value).length === 0;
          },

          getOptionLabel: function getOptionLabel(op) {
            return op[this.props.labelKey];
          },

          /**
           * Turns a value into an array from the given options
           * @param	{String|Number|Array}	value		- the value of the select input
           * @param	{Object}		nextProps	- optionally specify the nextProps so the returned array uses the latest configuration
           * @returns	{Array}	the value of the select represented in an array
           */
          getValueArray: function getValueArray(value, nextProps) {
            var _this = this;

            /** support optionally passing in the `nextProps` so `componentWillReceiveProps` updates will function as expected */
            var props = typeof nextProps === 'object' ? nextProps : this.props;
            if (props.multi) {
              if (typeof value === 'string') value = value.split(props.delimiter);
              if (!Array.isArray(value)) {
                if (value === null || value === undefined) return [];
                value = [value];
              }
              return value.map(function (value) {
                return _this.expandValue(value, props);
              }).filter(function (i) {
                return i;
              });
            }
            var expandedValue = this.expandValue(value, props);
            return expandedValue ? [expandedValue] : [];
          },

          /**
           * Retrieve a value from the given options and valueKey
           * @param	{String|Number|Array}	value	- the selected value(s)
           * @param	{Object}		props	- the Select component's props (or nextProps)
           */
          expandValue: function expandValue(value, props) {
            var valueType = typeof value;
            if (valueType !== 'string' && valueType !== 'number' && valueType !== 'boolean') return value;
            var options = props.options;
            var valueKey = props.valueKey;

            if (!options) return;
            for (var i = 0; i < options.length; i++) {
              if (options[i][valueKey] === value) return options[i];
            }
          },

          setValue: function setValue(value) {
            var _this2 = this;

            if (this.props.autoBlur) {
              this.blurInput();
            }
            if (!this.props.onChange) return;
            if (this.props.required) {
              var required = this.handleRequired(value, this.props.multi);
              this.setState({ required: required });
            }
            if (this.props.simpleValue && value) {
              value = this.props.multi ? value.map(function (i) {
                return i[_this2.props.valueKey];
              }).join(this.props.delimiter) : value[this.props.valueKey];
            }
            this.props.onChange(value);
          },

          selectValue: function selectValue(value) {
            var _this3 = this;

            //NOTE: update value in the callback to make sure the input value is empty so that there are no styling issues (Chrome had issue otherwise)
            this.hasScrolledToOption = false;
            if (this.props.multi) {
              this.setState({
                inputValue: '',
                focusedIndex: null
              }, function () {
                _this3.addValue(value);
              });
            } else {
              this.setState({
                isOpen: false,
                inputValue: '',
                isPseudoFocused: this.state.isFocused
              }, function () {
                _this3.setValue(value);
              });
            }
          },

          addValue: function addValue(value) {
            var valueArray = this.getValueArray(this.props.value);
            var visibleOptions = this._visibleOptions.filter(function (val) {
              return !val.disabled;
            });
            var lastValueIndex = visibleOptions.indexOf(value);
            this.setValue(valueArray.concat(value));
            if (visibleOptions.length - 1 === lastValueIndex) {
              // the last option was selected; focus the second-last one
              this.focusOption(visibleOptions[lastValueIndex - 1]);
            } else if (visibleOptions.length > lastValueIndex) {
              // focus the option below the selected one
              this.focusOption(visibleOptions[lastValueIndex + 1]);
            }
          },

          popValue: function popValue() {
            var valueArray = this.getValueArray(this.props.value);
            if (!valueArray.length) return;
            if (valueArray[valueArray.length - 1].clearableValue === false) return;
            this.setValue(valueArray.slice(0, valueArray.length - 1));
          },

          removeValue: function removeValue(value) {
            var valueArray = this.getValueArray(this.props.value);
            this.setValue(valueArray.filter(function (i) {
              return i !== value;
            }));
            this.focus();
          },

          clearValue: function clearValue(event) {
            // if the event was triggered by a mousedown and not the primary
            // button, ignore it.
            if (event && event.type === 'mousedown' && event.button !== 0) {
              return;
            }
            event.stopPropagation();
            event.preventDefault();
            this.setValue(this.getResetValue());
            this.setState({
              isOpen: false,
              inputValue: ''
            }, this.focus);
          },

          getResetValue: function getResetValue() {
            if (this.props.resetValue !== undefined) {
              return this.props.resetValue;
            } else if (this.props.multi) {
              return [];
            } else {
              return null;
            }
          },

          focusOption: function focusOption(option) {
            this.setState({
              focusedOption: option
            });
          },

          focusNextOption: function focusNextOption() {
            this.focusAdjacentOption('next');
          },

          focusPreviousOption: function focusPreviousOption() {
            this.focusAdjacentOption('previous');
          },

          focusPageUpOption: function focusPageUpOption() {
            this.focusAdjacentOption('page_up');
          },

          focusPageDownOption: function focusPageDownOption() {
            this.focusAdjacentOption('page_down');
          },

          focusStartOption: function focusStartOption() {
            this.focusAdjacentOption('start');
          },

          focusEndOption: function focusEndOption() {
            this.focusAdjacentOption('end');
          },

          focusAdjacentOption: function focusAdjacentOption(dir) {
            var options = this._visibleOptions.map(function (option, index) {
              return { option: option, index: index };
            }).filter(function (option) {
              return !option.option.disabled;
            });
            this._scrollToFocusedOptionOnUpdate = true;
            if (!this.state.isOpen) {
              this.setState({
                isOpen: true,
                inputValue: '',
                focusedOption: this._focusedOption || (options.length ? options[dir === 'next' ? 0 : options.length - 1].option : null)
              });
              return;
            }
            if (!options.length) return;
            var focusedIndex = -1;
            for (var i = 0; i < options.length; i++) {
              if (this._focusedOption === options[i].option) {
                focusedIndex = i;
                break;
              }
            }
            if (dir === 'next' && focusedIndex !== -1) {
              focusedIndex = (focusedIndex + 1) % options.length;
            } else if (dir === 'previous') {
              if (focusedIndex > 0) {
                focusedIndex = focusedIndex - 1;
              } else {
                focusedIndex = options.length - 1;
              }
            } else if (dir === 'start') {
              focusedIndex = 0;
            } else if (dir === 'end') {
              focusedIndex = options.length - 1;
            } else if (dir === 'page_up') {
              var potentialIndex = focusedIndex - this.props.pageSize;
              if (potentialIndex < 0) {
                focusedIndex = 0;
              } else {
                focusedIndex = potentialIndex;
              }
            } else if (dir === 'page_down') {
              var potentialIndex = focusedIndex + this.props.pageSize;
              if (potentialIndex > options.length - 1) {
                focusedIndex = options.length - 1;
              } else {
                focusedIndex = potentialIndex;
              }
            }

            if (focusedIndex === -1) {
              focusedIndex = 0;
            }

            this.setState({
              focusedIndex: options[focusedIndex].index,
              focusedOption: options[focusedIndex].option
            });
          },

          getFocusedOption: function getFocusedOption() {
            return this._focusedOption;
          },

          getInputValue: function getInputValue() {
            return this.state.inputValue;
          },

          selectFocusedOption: function selectFocusedOption() {
            if (this._focusedOption) {
              return this.selectValue(this._focusedOption);
            }
          },

          renderLoading: function renderLoading() {
            if (!this.props.isLoading) return;
            return _react2['default'].createElement(
              'span', { className: 'Select-loading-zone', 'aria-hidden': 'true' },
              _react2['default'].createElement('span', { className: 'Select-loading' })
            );
          },

          renderValue: function renderValue(valueArray, isOpen) {
            var _this4 = this;

            var renderLabel = this.props.valueRenderer || this.getOptionLabel;
            var ValueComponent = this.props.valueComponent;
            if (!valueArray.length) {
              return !this.state.inputValue ? _react2['default'].createElement(
                'div', { className: 'Select-placeholder' },
                this.props.placeholder
              ) : null;
            }
            var onClick = this.props.onValueClick ? this.handleValueClick : null;
            if (this.props.multi) {
              return valueArray.map(function (value, i) {
                return _react2['default'].createElement(
                  ValueComponent, {
                    id: _this4._instancePrefix + '-value-' + i,
                    instancePrefix: _this4._instancePrefix,
                    disabled: _this4.props.disabled || value.clearableValue === false,
                    key: 'value-' + i + '-' + value[_this4.props.valueKey],
                    onClick: onClick,
                    onRemove: _this4.removeValue,
                    value: value
                  },
                  renderLabel(value, i),
                  _react2['default'].createElement(
                    'span', { className: 'Select-aria-only' },
                    ' '
                  )
                );
              });
            } else if (!this.state.inputValue) {
              if (isOpen) onClick = null;
              return _react2['default'].createElement(
                ValueComponent, {
                  id: this._instancePrefix + '-value-item',
                  disabled: this.props.disabled,
                  instancePrefix: this._instancePrefix,
                  onClick: onClick,
                  value: valueArray[0]
                },
                renderLabel(valueArray[0])
              );
            }
          },

          renderInput: function renderInput(valueArray, focusedOptionIndex) {
            var _classNames,
              _this5 = this;

            var className = (0, _classnames2['default'])('Select-input', this.props.inputProps.className);
            var isOpen = !!this.state.isOpen;

            var ariaOwns = (0, _classnames2['default'])((_classNames = {}, _defineProperty(_classNames, this._instancePrefix + '-list', isOpen), _defineProperty(_classNames, this._instancePrefix + '-backspace-remove-message', this.props.multi && !this.props.disabled && this.state.isFocused && !this.state.inputValue), _classNames));

            // TODO: Check how this project includes Object.assign()
            var inputProps = _extends({}, this.props.inputProps, {
              role: 'combobox',
              'aria-expanded': '' + isOpen,
              'aria-owns': ariaOwns,
              'aria-haspopup': '' + isOpen,
              'aria-activedescendant': isOpen ? this._instancePrefix + '-option-' + focusedOptionIndex : this._instancePrefix + '-value',
              'aria-labelledby': this.props['aria-labelledby'],
              'aria-label': this.props['aria-label'],
              className: className,
              tabIndex: this.props.tabIndex,
              onBlur: this.handleInputBlur,
              onChange: this.handleInputChange,
              onFocus: this.handleInputFocus,
              ref: function ref(_ref) {
                return _this5.input = _ref;
              },
              required: this.state.required,
              value: this.state.inputValue
            });

            if (this.props.inputRenderer) {
              return this.props.inputRenderer(inputProps);
            }

            if (this.props.disabled || !this.props.searchable) {
              var _props$inputProps = this.props.inputProps;
              var inputClassName = _props$inputProps.inputClassName;

              var divProps = _objectWithoutProperties(_props$inputProps, ['inputClassName']);

              return _react2['default'].createElement('div', _extends({}, divProps, {
                role: 'combobox',
                'aria-expanded': isOpen,
                'aria-owns': isOpen ? this._instancePrefix + '-list' : this._instancePrefix + '-value',
                'aria-activedescendant': isOpen ? this._instancePrefix + '-option-' + focusedOptionIndex : this._instancePrefix + '-value',
                className: className,
                tabIndex: this.props.tabIndex || 0,
                onBlur: this.handleInputBlur,
                onFocus: this.handleInputFocus,
                ref: function (ref) {
                  return _this5.input = ref;
                },
                'aria-readonly': '' + !!this.props.disabled,
                style: { border: 0, width: 1, display: 'inline-block' }
              }));
            }

            if (this.props.autosize) {
              return _react2['default'].createElement(_reactInputAutosize2['default'], _extends({}, inputProps, { minWidth: '5' }));
            }
            return _react2['default'].createElement(
              'div', { className: className },
              _react2['default'].createElement('input', inputProps)
            );
          },

          renderClear: function renderClear() {
            if (!this.props.clearable || !this.props.value || this.props.value === 0 || this.props.multi && !this.props.value.length || this.props.disabled || this.props.isLoading) return;
            var clear = this.props.clearRenderer();

            return _react2['default'].createElement(
              'span', {
                className: 'Select-clear-zone',
                title: this.props.multi ? this.props.clearAllText : this.props.clearValueText,
                'aria-label': this.props.multi ? this.props.clearAllText : this.props.clearValueText,
                onMouseDown: this.clearValue,
                onTouchStart: this.handleTouchStart,
                onTouchMove: this.handleTouchMove,
                onTouchEnd: this.handleTouchEndClearValue
              },
              clear
            );
          },

          renderArrow: function renderArrow() {
            var onMouseDown = this.handleMouseDownOnArrow;
            var isOpen = this.state.isOpen;
            var arrow = this.props.arrowRenderer({ onMouseDown: onMouseDown, isOpen: isOpen });

            return _react2['default'].createElement(
              'span', {
                className: 'Select-arrow-zone',
                onMouseDown: onMouseDown
              },
              arrow
            );
          },

          filterOptions: function filterOptions(excludeOptions) {
            var filterValue = this.state.inputValue;
            var options = this.props.options || [];
            if (this.props.filterOptions) {
              // Maintain backwards compatibility with boolean attribute
              var filterOptions = typeof this.props.filterOptions === 'function' ? this.props.filterOptions : _utilsDefaultFilterOptions2['default'];

              return filterOptions(options, filterValue, excludeOptions, {
                filterOption: this.props.filterOption,
                ignoreAccents: this.props.ignoreAccents,
                ignoreCase: this.props.ignoreCase,
                labelKey: this.props.labelKey,
                matchPos: this.props.matchPos,
                matchProp: this.props.matchProp,
                valueKey: this.props.valueKey
              });
            } else {
              return options;
            }
          },

          onOptionRef: function onOptionRef(ref, isFocused) {
            if (isFocused) {
              this.focused = ref;
            }
          },

          renderMenu: function renderMenu(options, valueArray, focusedOption) {
            if (options && options.length) {
              return this.props.menuRenderer({
                focusedOption: focusedOption,
                focusOption: this.focusOption,
                instancePrefix: this._instancePrefix,
                labelKey: this.props.labelKey,
                onFocus: this.focusOption,
                onSelect: this.selectValue,
                optionClassName: this.props.optionClassName,
                optionComponent: this.props.optionComponent,
                optionRenderer: this.props.optionRenderer || this.getOptionLabel,
                options: options,
                selectValue: this.selectValue,
                valueArray: valueArray,
                valueKey: this.props.valueKey,
                onOptionRef: this.onOptionRef
              });
            } else if (this.props.noResultsText) {
              return _react2['default'].createElement(
                'div', { className: 'Select-noresults' },
                this.props.noResultsText
              );
            } else {
              return null;
            }
          },

          renderHiddenField: function renderHiddenField(valueArray) {
            var _this6 = this;

            if (!this.props.name) return;
            if (this.props.joinValues) {
              var value = valueArray.map(function (i) {
                return stringifyValue(i[_this6.props.valueKey]);
              }).join(this.props.delimiter);
              return _react2['default'].createElement('input', {
                type: 'hidden',
                ref: function (ref) {
                  return _this6.value = ref;
                },
                name: this.props.name,
                value: value,
                disabled: this.props.disabled
              });
            }
            return valueArray.map(function (item, index) {
              return _react2['default'].createElement('input', {
                key: 'hidden.' + index,
                type: 'hidden',
                ref: 'value' + index,
                name: _this6.props.name,
                value: stringifyValue(item[_this6.props.valueKey]),
                disabled: _this6.props.disabled
              });
            });
          },

          getFocusableOptionIndex: function getFocusableOptionIndex(selectedOption) {
            var options = this._visibleOptions;
            if (!options.length) return null;

            var focusedOption = this.state.focusedOption || selectedOption;
            if (focusedOption && !focusedOption.disabled) {
              var focusedOptionIndex = options.indexOf(focusedOption);
              if (focusedOptionIndex !== -1) {
                return focusedOptionIndex;
              }
            }

            for (var i = 0; i < options.length; i++) {
              if (!options[i].disabled) return i;
            }
            return null;
          },

          renderOuter: function renderOuter(options, valueArray, focusedOption) {
            var _this7 = this;

            var menu = this.renderMenu(options, valueArray, focusedOption);
            if (!menu) {
              return null;
            }

            return _react2['default'].createElement(
              'div', {
                ref: function (ref) {
                  return _this7.menuContainer = ref;
                },
                className: 'Select-menu-outer',
                style: this.props.menuContainerStyle
              },
              _react2['default'].createElement(
                'div', {
                  ref: function (ref) {
                    return _this7.menu = ref;
                  },
                  role: 'listbox',
                  className: 'Select-menu',
                  id: this._instancePrefix + '-list',
                  style: this.props.menuStyle,
                  onScroll: this.handleMenuScroll,
                  onMouseDown: this.handleMouseDownOnMenu
                },
                menu
              )
            );
          },

          render: function render() {
            var _this8 = this;

            var valueArray = this.getValueArray(this.props.value);
            var options = this._visibleOptions = this.filterOptions(this.props.multi ? this.getValueArray(this.props.value) : null);
            var isOpen = this.state.isOpen;
            if (this.props.multi && !options.length && valueArray.length && !this.state.inputValue) isOpen = false;
            var focusedOptionIndex = this.getFocusableOptionIndex(valueArray[0]);

            var focusedOption = null;
            if (focusedOptionIndex !== null) {
              focusedOption = this._focusedOption = options[focusedOptionIndex];
            } else {
              focusedOption = this._focusedOption = null;
            }
            var className = (0, _classnames2['default'])('Select', this.props.className, {
              'Select--multi': this.props.multi,
              'Select--single': !this.props.multi,
              'is-disabled': this.props.disabled,
              'is-focused': this.state.isFocused,
              'is-loading': this.props.isLoading,
              'is-open': isOpen,
              'is-pseudo-focused': this.state.isPseudoFocused,
              'is-searchable': this.props.searchable,
              'has-value': valueArray.length
            });

            var removeMessage = null;
            if (this.props.multi && !this.props.disabled && valueArray.length && !this.state.inputValue && this.state.isFocused && this.props.backspaceRemoves) {
              removeMessage = _react2['default'].createElement(
                'span', { id: this._instancePrefix + '-backspace-remove-message', className: 'Select-aria-only', 'aria-live': 'assertive' },
                this.props.backspaceToRemoveMessage.replace('{label}', valueArray[valueArray.length - 1][this.props.labelKey])
              );
            }

            return _react2['default'].createElement(
              'div', {
                ref: function (ref) {
                  return _this8.wrapper = ref;
                },
                className: className,
                style: this.props.wrapperStyle
              },
              this.renderHiddenField(valueArray),
              _react2['default'].createElement(
                'div', {
                  ref: function (ref) {
                    return _this8.control = ref;
                  },
                  className: 'Select-control',
                  style: this.props.style,
                  onKeyDown: this.handleKeyDown,
                  onMouseDown: this.handleMouseDown,
                  onTouchEnd: this.handleTouchEnd,
                  onTouchStart: this.handleTouchStart,
                  onTouchMove: this.handleTouchMove
                },
                _react2['default'].createElement(
                  'span', { className: 'Select-multi-value-wrapper', id: this._instancePrefix + '-value' },
                  this.renderValue(valueArray, isOpen),
                  this.renderInput(valueArray, focusedOptionIndex)
                ),
                removeMessage,
                this.renderLoading(),
                this.renderClear(),
                this.renderArrow()
              ),
              isOpen ? this.renderOuter(options, !this.props.multi ? valueArray : null, focusedOption) : null
            );
          }

        });

        exports['default'] = Select;
        module.exports = exports['default'];

        /***/
      }),
      /* 89 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var React = __webpack_require__(3);

        var sizerStyle = { position: 'absolute', top: 0, left: 0, visibility: 'hidden', height: 0, overflow: 'scroll', whiteSpace: 'pre' };

        var AutosizeInput = React.createClass({
          displayName: 'AutosizeInput',

          propTypes: {
            className: React.PropTypes.string, // className for the outer element
            defaultValue: React.PropTypes.any, // default field value
            inputClassName: React.PropTypes.string, // className for the input element
            inputStyle: React.PropTypes.object, // css styles for the input element
            minWidth: React.PropTypes.oneOfType([ // minimum width for input element
              React.PropTypes.number, React.PropTypes.string
            ]),
            onChange: React.PropTypes.func, // onChange handler: function(newValue) {}
            placeholder: React.PropTypes.string, // placeholder text
            placeholderIsMinWidth: React.PropTypes.bool, // don't collapse size to less than the placeholder
            style: React.PropTypes.object, // css styles for the outer element
            value: React.PropTypes.any
          },
          // field value
          getDefaultProps: function getDefaultProps() {
            return {
              minWidth: 1
            };
          },
          getInitialState: function getInitialState() {
            return {
              inputWidth: this.props.minWidth
            };
          },
          componentDidMount: function componentDidMount() {
            this.copyInputStyles();
            this.updateInputWidth();
          },
          componentDidUpdate: function componentDidUpdate() {
            this.updateInputWidth();
          },
          copyInputStyles: function copyInputStyles() {
            if (!this.isMounted() || !window.getComputedStyle) {
              return;
            }
            var inputStyle = window.getComputedStyle(this.refs.input);
            if (!inputStyle) {
              return;
            }
            var widthNode = this.refs.sizer;
            widthNode.style.fontSize = inputStyle.fontSize;
            widthNode.style.fontFamily = inputStyle.fontFamily;
            widthNode.style.fontWeight = inputStyle.fontWeight;
            widthNode.style.fontStyle = inputStyle.fontStyle;
            widthNode.style.letterSpacing = inputStyle.letterSpacing;
            if (this.props.placeholder) {
              var placeholderNode = this.refs.placeholderSizer;
              placeholderNode.style.fontSize = inputStyle.fontSize;
              placeholderNode.style.fontFamily = inputStyle.fontFamily;
              placeholderNode.style.fontWeight = inputStyle.fontWeight;
              placeholderNode.style.fontStyle = inputStyle.fontStyle;
              placeholderNode.style.letterSpacing = inputStyle.letterSpacing;
            }
          },
          updateInputWidth: function updateInputWidth() {
            if (!this.isMounted() || typeof this.refs.sizer.scrollWidth === 'undefined') {
              return;
            }
            var newInputWidth = undefined;
            if (this.props.placeholder && (!this.props.value || this.props.value && this.props.placeholderIsMinWidth)) {
              newInputWidth = Math.max(this.refs.sizer.scrollWidth, this.refs.placeholderSizer.scrollWidth) + 2;
            } else {
              newInputWidth = this.refs.sizer.scrollWidth + 2;
            }
            if (newInputWidth < this.props.minWidth) {
              newInputWidth = this.props.minWidth;
            }
            if (newInputWidth !== this.state.inputWidth) {
              this.setState({
                inputWidth: newInputWidth
              });
            }
          },
          getInput: function getInput() {
            return this.refs.input;
          },
          focus: function focus() {
            this.refs.input.focus();
          },
          blur: function blur() {
            this.refs.input.blur();
          },
          select: function select() {
            this.refs.input.select();
          },
          render: function render() {
            var sizerValue = this.props.defaultValue || this.props.value || '';
            var wrapperStyle = this.props.style || {};
            if (!wrapperStyle.display) wrapperStyle.display = 'inline-block';
            var inputStyle = _extends({}, this.props.inputStyle);
            inputStyle.width = this.state.inputWidth + 'px';
            inputStyle.boxSizing = 'content-box';
            var inputProps = _extends({}, this.props);
            inputProps.className = this.props.inputClassName;
            inputProps.style = inputStyle;
            // ensure props meant for `AutosizeInput` don't end up on the `input`
            delete inputProps.inputClassName;
            delete inputProps.inputStyle;
            delete inputProps.minWidth;
            delete inputProps.placeholderIsMinWidth;
            return React.createElement(
              'div', { className: this.props.className, style: wrapperStyle },
              React.createElement('input', _extends({}, inputProps, { ref: 'input' })),
              React.createElement(
                'div', { ref: 'sizer', style: sizerStyle },
                sizerValue
              ),
              this.props.placeholder ? React.createElement(
                'div', { ref: 'placeholderSizer', style: sizerStyle },
                this.props.placeholder
              ) : null
            );
          }
        });

        module.exports = AutosizeInput;

        /***/
      }),
      /* 90 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = arrowRenderer;

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        function arrowRenderer(_ref) {
          var onMouseDown = _ref.onMouseDown;

          return _react2["default"].createElement("span", {
            className: "Select-arrow",
            onMouseDown: onMouseDown
          });
        }

        ;
        module.exports = exports["default"];

        /***/
      }),
      /* 91 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        var _stripDiacritics = __webpack_require__(92);

        var _stripDiacritics2 = _interopRequireDefault(_stripDiacritics);

        function filterOptions(options, filterValue, excludeOptions, props) {
          var _this = this;

          if (props.ignoreAccents) {
            filterValue = (0, _stripDiacritics2['default'])(filterValue);
          }

          if (props.ignoreCase) {
            filterValue = filterValue.toLowerCase();
          }

          if (excludeOptions) excludeOptions = excludeOptions.map(function (i) {
            return i[props.valueKey];
          });

          return options.filter(function (option) {
            if (excludeOptions && excludeOptions.indexOf(option[props.valueKey]) > -1) return false;
            if (props.filterOption) return props.filterOption.call(_this, option, filterValue);
            if (!filterValue) return true;
            var valueTest = String(option[props.valueKey]);
            var labelTest = String(option[props.labelKey]);
            if (props.ignoreAccents) {
              if (props.matchProp !== 'label') valueTest = (0, _stripDiacritics2['default'])(valueTest);
              if (props.matchProp !== 'value') labelTest = (0, _stripDiacritics2['default'])(labelTest);
            }
            if (props.ignoreCase) {
              if (props.matchProp !== 'label') valueTest = valueTest.toLowerCase();
              if (props.matchProp !== 'value') labelTest = labelTest.toLowerCase();
            }
            return props.matchPos === 'start' ? props.matchProp !== 'label' && valueTest.substr(0, filterValue.length) === filterValue || props.matchProp !== 'value' && labelTest.substr(0, filterValue.length) === filterValue : props.matchProp !== 'label' && valueTest.indexOf(filterValue) >= 0 || props.matchProp !== 'value' && labelTest.indexOf(filterValue) >= 0;
          });
        }

        module.exports = filterOptions;

        /***/
      }),
      /* 92 */
      /***/
      (function (module, exports) {

        'use strict';

        var map = [{ 'base': 'A', 'letters': /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g }, { 'base': 'AA', 'letters': /[\uA732]/g }, { 'base': 'AE', 'letters': /[\u00C6\u01FC\u01E2]/g }, { 'base': 'AO', 'letters': /[\uA734]/g }, { 'base': 'AU', 'letters': /[\uA736]/g }, { 'base': 'AV', 'letters': /[\uA738\uA73A]/g }, { 'base': 'AY', 'letters': /[\uA73C]/g }, { 'base': 'B', 'letters': /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g }, { 'base': 'C', 'letters': /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g }, { 'base': 'D', 'letters': /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g }, { 'base': 'DZ', 'letters': /[\u01F1\u01C4]/g }, { 'base': 'Dz', 'letters': /[\u01F2\u01C5]/g }, { 'base': 'E', 'letters': /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g }, { 'base': 'F', 'letters': /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g }, { 'base': 'G', 'letters': /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g }, { 'base': 'H', 'letters': /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g }, { 'base': 'I', 'letters': /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g }, { 'base': 'J', 'letters': /[\u004A\u24BF\uFF2A\u0134\u0248]/g }, { 'base': 'K', 'letters': /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g }, { 'base': 'L', 'letters': /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g }, { 'base': 'LJ', 'letters': /[\u01C7]/g }, { 'base': 'Lj', 'letters': /[\u01C8]/g }, { 'base': 'M', 'letters': /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g }, { 'base': 'N', 'letters': /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g }, { 'base': 'NJ', 'letters': /[\u01CA]/g }, { 'base': 'Nj', 'letters': /[\u01CB]/g }, { 'base': 'O', 'letters': /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g }, { 'base': 'OI', 'letters': /[\u01A2]/g }, { 'base': 'OO', 'letters': /[\uA74E]/g }, { 'base': 'OU', 'letters': /[\u0222]/g }, { 'base': 'P', 'letters': /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g }, { 'base': 'Q', 'letters': /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g }, { 'base': 'R', 'letters': /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g }, { 'base': 'S', 'letters': /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g }, { 'base': 'T', 'letters': /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g }, { 'base': 'TZ', 'letters': /[\uA728]/g }, { 'base': 'U', 'letters': /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g }, { 'base': 'V', 'letters': /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g }, { 'base': 'VY', 'letters': /[\uA760]/g }, { 'base': 'W', 'letters': /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g }, { 'base': 'X', 'letters': /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g }, { 'base': 'Y', 'letters': /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g }, { 'base': 'Z', 'letters': /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g }, { 'base': 'a', 'letters': /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g }, { 'base': 'aa', 'letters': /[\uA733]/g }, { 'base': 'ae', 'letters': /[\u00E6\u01FD\u01E3]/g }, { 'base': 'ao', 'letters': /[\uA735]/g }, { 'base': 'au', 'letters': /[\uA737]/g }, { 'base': 'av', 'letters': /[\uA739\uA73B]/g }, { 'base': 'ay', 'letters': /[\uA73D]/g }, { 'base': 'b', 'letters': /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g }, { 'base': 'c', 'letters': /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g }, { 'base': 'd', 'letters': /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g }, { 'base': 'dz', 'letters': /[\u01F3\u01C6]/g }, { 'base': 'e', 'letters': /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g }, { 'base': 'f', 'letters': /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g }, { 'base': 'g', 'letters': /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g }, { 'base': 'h', 'letters': /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g }, { 'base': 'hv', 'letters': /[\u0195]/g }, { 'base': 'i', 'letters': /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g }, { 'base': 'j', 'letters': /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g }, { 'base': 'k', 'letters': /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g }, { 'base': 'l', 'letters': /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g }, { 'base': 'lj', 'letters': /[\u01C9]/g }, { 'base': 'm', 'letters': /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g }, { 'base': 'n', 'letters': /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g }, { 'base': 'nj', 'letters': /[\u01CC]/g }, { 'base': 'o', 'letters': /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g }, { 'base': 'oi', 'letters': /[\u01A3]/g }, { 'base': 'ou', 'letters': /[\u0223]/g }, { 'base': 'oo', 'letters': /[\uA74F]/g }, { 'base': 'p', 'letters': /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g }, { 'base': 'q', 'letters': /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g }, { 'base': 'r', 'letters': /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g }, { 'base': 's', 'letters': /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g }, { 'base': 't', 'letters': /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g }, { 'base': 'tz', 'letters': /[\uA729]/g }, { 'base': 'u', 'letters': /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g }, { 'base': 'v', 'letters': /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g }, { 'base': 'vy', 'letters': /[\uA761]/g }, { 'base': 'w', 'letters': /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g }, { 'base': 'x', 'letters': /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g }, { 'base': 'y', 'letters': /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g }, { 'base': 'z', 'letters': /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g }];

        module.exports = function stripDiacritics(str) {
          for (var i = 0; i < map.length; i++) {
            str = str.replace(map[i].letters, map[i].base);
          }
          return str;
        };

        /***/
      }),
      /* 93 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        function menuRenderer(_ref) {
          var focusedOption = _ref.focusedOption;
          var instancePrefix = _ref.instancePrefix;
          var labelKey = _ref.labelKey;
          var onFocus = _ref.onFocus;
          var onSelect = _ref.onSelect;
          var optionClassName = _ref.optionClassName;
          var optionComponent = _ref.optionComponent;
          var optionRenderer = _ref.optionRenderer;
          var options = _ref.options;
          var valueArray = _ref.valueArray;
          var valueKey = _ref.valueKey;
          var onOptionRef = _ref.onOptionRef;

          var Option = optionComponent;

          return options.map(function (option, i) {
            var isSelected = valueArray && valueArray.indexOf(option) > -1;
            var isFocused = option === focusedOption;
            var optionClass = (0, _classnames2['default'])(optionClassName, {
              'Select-option': true,
              'is-selected': isSelected,
              'is-focused': isFocused,
              'is-disabled': option.disabled
            });

            return _react2['default'].createElement(
              Option, {
                className: optionClass,
                instancePrefix: instancePrefix,
                isDisabled: option.disabled,
                isFocused: isFocused,
                isSelected: isSelected,
                key: 'option-' + i + '-' + option[valueKey],
                onFocus: onFocus,
                onSelect: onSelect,
                option: option,
                optionIndex: i,
                ref: function (ref) {
                  onOptionRef(ref, isFocused);
                }
              },
              optionRenderer(option, i)
            );
          });
        }

        module.exports = menuRenderer;

        /***/
      }),
      /* 94 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true
        });
        exports['default'] = clearRenderer;

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        function clearRenderer() {
          return _react2['default'].createElement('span', {
            className: 'Select-clear',
            dangerouslySetInnerHTML: { __html: '&times;' }
          });
        }

        ;
        module.exports = exports['default'];

        /***/
      }),
      /* 95 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = (function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

        var _get = function get(_x, _x2, _x3) { var _again = true;
          _function: while (_again) { var object = _x,
              property = _x2,
              receiver = _x3;
            _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

        function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _Select = __webpack_require__(88);

        var _Select2 = _interopRequireDefault(_Select);

        var _utilsStripDiacritics = __webpack_require__(92);

        var _utilsStripDiacritics2 = _interopRequireDefault(_utilsStripDiacritics);

        var propTypes = {
          autoload: _react2['default'].PropTypes.bool.isRequired, // automatically call the `loadOptions` prop on-mount; defaults to true
          cache: _react2['default'].PropTypes.any, // object to use to cache results; set to null/false to disable caching
          children: _react2['default'].PropTypes.func.isRequired, // Child function responsible for creating the inner Select component; (props: Object): PropTypes.element
          ignoreAccents: _react2['default'].PropTypes.bool, // strip diacritics when filtering; defaults to true
          ignoreCase: _react2['default'].PropTypes.bool, // perform case-insensitive filtering; defaults to true
          loadingPlaceholder: _react2['default'].PropTypes.oneOfType([ // replaces the placeholder while options are loading
            _react2['default'].PropTypes.string, _react2['default'].PropTypes.node
          ]),
          loadOptions: _react2['default'].PropTypes.func.isRequired, // callback to load options asynchronously; (inputValue: string, callback: Function): ?Promise
          options: _react.PropTypes.array.isRequired, // array of options
          placeholder: _react2['default'].PropTypes.oneOfType([ // field placeholder, displayed when there's no value (shared with Select)
            _react2['default'].PropTypes.string, _react2['default'].PropTypes.node
          ]),
          noResultsText: _react2['default'].PropTypes.oneOfType([ // field noResultsText, displayed when no options come back from the server
            _react2['default'].PropTypes.string, _react2['default'].PropTypes.node
          ]),
          onChange: _react2['default'].PropTypes.func, // onChange handler: function (newValue) {}
          searchPromptText: _react2['default'].PropTypes.oneOfType([ // label to prompt for search input
            _react2['default'].PropTypes.string, _react2['default'].PropTypes.node
          ]),
          onInputChange: _react2['default'].PropTypes.func, // optional for keeping track of what is being typed
          value: _react2['default'].PropTypes.any
        };

        // initial field value
        var defaultCache = {};

        var defaultProps = {
          autoload: true,
          cache: defaultCache,
          children: defaultChildren,
          ignoreAccents: true,
          ignoreCase: true,
          loadingPlaceholder: 'Loading...',
          options: [],
          searchPromptText: 'Type to search'
        };

        var Async = (function (_Component) {
          _inherits(Async, _Component);

          function Async(props, context) {
            _classCallCheck(this, Async);

            _get(Object.getPrototypeOf(Async.prototype), 'constructor', this).call(this, props, context);

            this._cache = props.cache === defaultCache ? {} : props.cache;

            this.state = {
              isLoading: false,
              options: props.options
            };

            this._onInputChange = this._onInputChange.bind(this);
          }

          _createClass(Async, [{
            key: 'componentDidMount',
            value: function componentDidMount() {
              var autoload = this.props.autoload;

              if (autoload) {
                this.loadOptions('');
              }
            }
          }, {
            key: 'componentWillUpdate',
            value: function componentWillUpdate(nextProps, nextState) {
              var _this = this;

              var propertiesToSync = ['options'];
              propertiesToSync.forEach(function (prop) {
                if (_this.props[prop] !== nextProps[prop]) {
                  _this.setState(_defineProperty({}, prop, nextProps[prop]));
                }
              });
            }
          }, {
            key: 'clearOptions',
            value: function clearOptions() {
              this.setState({ options: [] });
            }
          }, {
            key: 'loadOptions',
            value: function loadOptions(inputValue) {
              var _this2 = this;

              var loadOptions = this.props.loadOptions;

              var cache = this._cache;

              if (cache && cache.hasOwnProperty(inputValue)) {
                this.setState({
                  options: cache[inputValue]
                });

                return;
              }

              var callback = function callback(error, data) {
                if (callback === _this2._callback) {
                  _this2._callback = null;

                  var options = data && data.options || [];

                  if (cache) {
                    cache[inputValue] = options;
                  }

                  _this2.setState({
                    isLoading: false,
                    options: options
                  });
                }
              };

              // Ignore all but the most recent request
              this._callback = callback;

              var promise = loadOptions(inputValue, callback);
              if (promise) {
                promise.then(function (data) {
                  return callback(null, data);
                }, function (error) {
                  return callback(error);
                });
              }

              if (this._callback && !this.state.isLoading) {
                this.setState({
                  isLoading: true
                });
              }

              return inputValue;
            }
          }, {
            key: '_onInputChange',
            value: function _onInputChange(inputValue) {
              var _props = this.props;
              var ignoreAccents = _props.ignoreAccents;
              var ignoreCase = _props.ignoreCase;
              var onInputChange = _props.onInputChange;

              if (ignoreAccents) {
                inputValue = (0, _utilsStripDiacritics2['default'])(inputValue);
              }

              if (ignoreCase) {
                inputValue = inputValue.toLowerCase();
              }

              if (onInputChange) {
                onInputChange(inputValue);
              }

              return this.loadOptions(inputValue);
            }
          }, {
            key: 'inputValue',
            value: function inputValue() {
              if (this.select) {
                return this.select.state.inputValue;
              }
              return '';
            }
          }, {
            key: 'noResultsText',
            value: function noResultsText() {
              var _props2 = this.props;
              var loadingPlaceholder = _props2.loadingPlaceholder;
              var noResultsText = _props2.noResultsText;
              var searchPromptText = _props2.searchPromptText;
              var isLoading = this.state.isLoading;

              var inputValue = this.inputValue();

              if (isLoading) {
                return loadingPlaceholder;
              }
              if (inputValue && noResultsText) {
                return noResultsText;
              }
              return searchPromptText;
            }
          }, {
            key: 'focus',
            value: function focus() {
              this.select.focus();
            }
          }, {
            key: 'render',
            value: function render() {
              var _this3 = this;

              var _props3 = this.props;
              var children = _props3.children;
              var loadingPlaceholder = _props3.loadingPlaceholder;
              var placeholder = _props3.placeholder;
              var _state = this.state;
              var isLoading = _state.isLoading;
              var options = _state.options;

              var props = {
                noResultsText: this.noResultsText(),
                placeholder: isLoading ? loadingPlaceholder : placeholder,
                options: isLoading && loadingPlaceholder ? [] : options,
                ref: function ref(_ref) {
                  return _this3.select = _ref;
                },
                onChange: function onChange(newValues) {
                  if (_this3.props.multi && _this3.props.value && newValues.length > _this3.props.value.length) {
                    _this3.clearOptions();
                  }
                  _this3.props.onChange(newValues);
                }
              };

              return children(_extends({}, this.props, props, {
                isLoading: isLoading,
                onInputChange: this._onInputChange
              }));
            }
          }]);

          return Async;
        })(_react.Component);

        exports['default'] = Async;

        Async.propTypes = propTypes;
        Async.defaultProps = defaultProps;

        function defaultChildren(props) {
          return _react2['default'].createElement(_Select2['default'], props);
        };
        module.exports = exports['default'];

        /***/
      }),
      /* 96 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _Select = __webpack_require__(88);

        var _Select2 = _interopRequireDefault(_Select);

        function reduce(obj) {
          var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

          return Object.keys(obj).reduce(function (props, key) {
            var value = obj[key];
            if (value !== undefined) props[key] = value;
            return props;
          }, props);
        }

        var AsyncCreatable = _react2['default'].createClass({
          displayName: 'AsyncCreatableSelect',

          render: function render() {
            var _this = this;

            return _react2['default'].createElement(
              _Select2['default'].Async,
              this.props,
              function (asyncProps) {
                return _react2['default'].createElement(
                  _Select2['default'].Creatable,
                  _this.props,
                  function (creatableProps) {
                    return _react2['default'].createElement(_Select2['default'], _extends({}, reduce(asyncProps, reduce(creatableProps, {})), {
                      onInputChange: function (input) {
                        creatableProps.onInputChange(input);
                        return asyncProps.onInputChange(input);
                      },
                      ref: function (ref) {
                        creatableProps.ref(ref);
                        asyncProps.ref(ref);
                      }
                    }));
                  }
                );
              }
            );
          }
        });

        module.exports = AsyncCreatable;

        /***/
      }),
      /* 97 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i]; } return target; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _Select = __webpack_require__(88);

        var _Select2 = _interopRequireDefault(_Select);

        var _utilsDefaultFilterOptions = __webpack_require__(91);

        var _utilsDefaultFilterOptions2 = _interopRequireDefault(_utilsDefaultFilterOptions);

        var _utilsDefaultMenuRenderer = __webpack_require__(93);

        var _utilsDefaultMenuRenderer2 = _interopRequireDefault(_utilsDefaultMenuRenderer);

        var Creatable = _react2['default'].createClass({
          displayName: 'CreatableSelect',

          propTypes: {
            // Child function responsible for creating the inner Select component
            // This component can be used to compose HOCs (eg Creatable and Async)
            // (props: Object): PropTypes.element
            children: _react2['default'].PropTypes.func,

            // See Select.propTypes.filterOptions
            filterOptions: _react2['default'].PropTypes.any,

            // Searches for any matching option within the set of options.
            // This function prevents duplicate options from being created.
            // ({ option: Object, options: Array, labelKey: string, valueKey: string }): boolean
            isOptionUnique: _react2['default'].PropTypes.func,

            // Determines if the current input text represents a valid option.
            // ({ label: string }): boolean
            isValidNewOption: _react2['default'].PropTypes.func,

            // See Select.propTypes.menuRenderer
            menuRenderer: _react2['default'].PropTypes.any,

            // Factory to create new option.
            // ({ label: string, labelKey: string, valueKey: string }): Object
            newOptionCreator: _react2['default'].PropTypes.func,

            // input change handler: function (inputValue) {}
            onInputChange: _react2['default'].PropTypes.func,

            // input keyDown handler: function (event) {}
            onInputKeyDown: _react2['default'].PropTypes.func,

            // new option click handler: function (option) {}
            onNewOptionClick: _react2['default'].PropTypes.func,

            // See Select.propTypes.options
            options: _react2['default'].PropTypes.array,

            // Creates prompt/placeholder option text.
            // (filterText: string): string
            promptTextCreator: _react2['default'].PropTypes.func,

            // Decides if a keyDown event (eg its `keyCode`) should result in the creation of a new option.
            shouldKeyDownEventCreateNewOption: _react2['default'].PropTypes.func
          },

          // Default prop methods
          statics: {
            isOptionUnique: isOptionUnique,
            isValidNewOption: isValidNewOption,
            newOptionCreator: newOptionCreator,
            promptTextCreator: promptTextCreator,
            shouldKeyDownEventCreateNewOption: shouldKeyDownEventCreateNewOption
          },

          getDefaultProps: function getDefaultProps() {
            return {
              filterOptions: _utilsDefaultFilterOptions2['default'],
              isOptionUnique: isOptionUnique,
              isValidNewOption: isValidNewOption,
              menuRenderer: _utilsDefaultMenuRenderer2['default'],
              newOptionCreator: newOptionCreator,
              promptTextCreator: promptTextCreator,
              shouldKeyDownEventCreateNewOption: shouldKeyDownEventCreateNewOption
            };
          },

          createNewOption: function createNewOption() {
            var _props = this.props;
            var isValidNewOption = _props.isValidNewOption;
            var newOptionCreator = _props.newOptionCreator;
            var onNewOptionClick = _props.onNewOptionClick;
            var _props$options = _props.options;
            var options = _props$options === undefined ? [] : _props$options;
            var shouldKeyDownEventCreateNewOption = _props.shouldKeyDownEventCreateNewOption;

            if (isValidNewOption({ label: this.inputValue })) {
              var option = newOptionCreator({ label: this.inputValue, labelKey: this.labelKey, valueKey: this.valueKey });
              var _isOptionUnique = this.isOptionUnique({ option: option });

              // Don't add the same option twice.
              if (_isOptionUnique) {
                if (onNewOptionClick) {
                  onNewOptionClick(option);
                } else {
                  options.unshift(option);

                  this.select.selectValue(option);
                }
              }
            }
          },

          filterOptions: function filterOptions() {
            var _props2 = this.props;
            var filterOptions = _props2.filterOptions;
            var isValidNewOption = _props2.isValidNewOption;
            var options = _props2.options;
            var promptTextCreator = _props2.promptTextCreator;

            // TRICKY Check currently selected options as well.
            // Don't display a create-prompt for a value that's selected.
            // This covers async edge-cases where a newly-created Option isn't yet in the async-loaded array.
            var excludeOptions = arguments[2] || [];

            var filteredOptions = filterOptions.apply(undefined, arguments) || [];

            if (isValidNewOption({ label: this.inputValue })) {
              var _newOptionCreator = this.props.newOptionCreator;

              var option = _newOptionCreator({
                label: this.inputValue,
                labelKey: this.labelKey,
                valueKey: this.valueKey
              });

              // TRICKY Compare to all options (not just filtered options) in case option has already been selected).
              // For multi-selects, this would remove it from the filtered list.
              var _isOptionUnique2 = this.isOptionUnique({
                option: option,
                options: excludeOptions.concat(filteredOptions)
              });

              if (_isOptionUnique2) {
                var _prompt = promptTextCreator(this.inputValue);

                this._createPlaceholderOption = _newOptionCreator({
                  label: _prompt,
                  labelKey: this.labelKey,
                  valueKey: this.valueKey
                });

                filteredOptions.unshift(this._createPlaceholderOption);
              }
            }

            return filteredOptions;
          },

          isOptionUnique: function isOptionUnique(_ref2) {
            var option = _ref2.option;
            var options = _ref2.options;
            var isOptionUnique = this.props.isOptionUnique;

            options = options || this.select.filterOptions();

            return isOptionUnique({
              labelKey: this.labelKey,
              option: option,
              options: options,
              valueKey: this.valueKey
            });
          },

          menuRenderer: function menuRenderer(params) {
            var menuRenderer = this.props.menuRenderer;

            return menuRenderer(_extends({}, params, {
              onSelect: this.onOptionSelect,
              selectValue: this.onOptionSelect
            }));
          },

          onInputChange: function onInputChange(input) {
            var onInputChange = this.props.onInputChange;

            if (onInputChange) {
              onInputChange(input);
            }

            // This value may be needed in between Select mounts (when this.select is null)
            this.inputValue = input;
          },

          onInputKeyDown: function onInputKeyDown(event) {
            var _props3 = this.props;
            var shouldKeyDownEventCreateNewOption = _props3.shouldKeyDownEventCreateNewOption;
            var onInputKeyDown = _props3.onInputKeyDown;

            var focusedOption = this.select.getFocusedOption();

            if (focusedOption && focusedOption === this._createPlaceholderOption && shouldKeyDownEventCreateNewOption({ keyCode: event.keyCode })) {
              this.createNewOption();

              // Prevent decorated Select from doing anything additional with this keyDown event
              event.preventDefault();
            } else if (onInputKeyDown) {
              onInputKeyDown(event);
            }
          },

          onOptionSelect: function onOptionSelect(option, event) {
            if (option === this._createPlaceholderOption) {
              this.createNewOption();
            } else {
              this.select.selectValue(option);
            }
          },

          render: function render() {
            var _this = this;

            var _props4 = this.props;
            var newOptionCreator = _props4.newOptionCreator;
            var shouldKeyDownEventCreateNewOption = _props4.shouldKeyDownEventCreateNewOption;

            var restProps = _objectWithoutProperties(_props4, ['newOptionCreator', 'shouldKeyDownEventCreateNewOption']);

            var children = this.props.children;

            // We can't use destructuring default values to set the children,
            // because it won't apply work if `children` is null. A falsy check is
            // more reliable in real world use-cases.
            if (!children) {
              children = defaultChildren;
            }

            var props = _extends({}, restProps, {
              allowCreate: true,
              filterOptions: this.filterOptions,
              menuRenderer: this.menuRenderer,
              onInputChange: this.onInputChange,
              onInputKeyDown: this.onInputKeyDown,
              ref: function ref(_ref) {
                _this.select = _ref;

                // These values may be needed in between Select mounts (when this.select is null)
                if (_ref) {
                  _this.labelKey = _ref.props.labelKey;
                  _this.valueKey = _ref.props.valueKey;
                }
              }
            });

            return children(props);
          }
        });

        function defaultChildren(props) {
          return _react2['default'].createElement(_Select2['default'], props);
        };

        function isOptionUnique(_ref3) {
          var option = _ref3.option;
          var options = _ref3.options;
          var labelKey = _ref3.labelKey;
          var valueKey = _ref3.valueKey;

          return options.filter(function (existingOption) {
            return existingOption[labelKey] === option[labelKey] || existingOption[valueKey] === option[valueKey];
          }).length === 0;
        };

        function isValidNewOption(_ref4) {
          var label = _ref4.label;

          return !!label;
        };

        function newOptionCreator(_ref5) {
          var label = _ref5.label;
          var labelKey = _ref5.labelKey;
          var valueKey = _ref5.valueKey;

          var option = {};
          option[valueKey] = label;
          option[labelKey] = label;
          option.className = 'Select-create-option-placeholder';
          return option;
        };

        function promptTextCreator(label) {
          return 'Create option "' + label + '"';
        }

        function shouldKeyDownEventCreateNewOption(_ref6) {
          var keyCode = _ref6.keyCode;

          switch (keyCode) {
          case 9: // TAB
          case 13: // ENTER
          case 188:
            // COMMA
            return true;
          }

          return false;
        };

        module.exports = Creatable;

        /***/
      }),
      /* 98 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var Option = _react2['default'].createClass({
          displayName: 'Option',

          propTypes: {
            children: _react2['default'].PropTypes.node,
            className: _react2['default'].PropTypes.string, // className (based on mouse position)
            instancePrefix: _react2['default'].PropTypes.string.isRequired, // unique prefix for the ids (used for aria)
            isDisabled: _react2['default'].PropTypes.bool, // the option is disabled
            isFocused: _react2['default'].PropTypes.bool, // the option is focused
            isSelected: _react2['default'].PropTypes.bool, // the option is selected
            onFocus: _react2['default'].PropTypes.func, // method to handle mouseEnter on option element
            onSelect: _react2['default'].PropTypes.func, // method to handle click on option element
            onUnfocus: _react2['default'].PropTypes.func, // method to handle mouseLeave on option element
            option: _react2['default'].PropTypes.object.isRequired, // object that is base for that option
            optionIndex: _react2['default'].PropTypes.number
          },
          // index of the option, used to generate unique ids for aria
          blockEvent: function blockEvent(event) {
            event.preventDefault();
            event.stopPropagation();
            if (event.target.tagName !== 'A' || !('href' in event.target)) {
              return;
            }
            if (event.target.target) {
              window.open(event.target.href, event.target.target);
            } else {
              window.location.href = event.target.href;
            }
          },

          handleMouseDown: function handleMouseDown(event) {
            event.preventDefault();
            event.stopPropagation();
            this.props.onSelect(this.props.option, event);
          },

          handleMouseEnter: function handleMouseEnter(event) {
            this.onFocus(event);
          },

          handleMouseMove: function handleMouseMove(event) {
            this.onFocus(event);
          },

          handleTouchEnd: function handleTouchEnd(event) {
            // Check if the view is being dragged, In this case
            // we don't want to fire the click event (because the user only wants to scroll)
            if (this.dragging) return;

            this.handleMouseDown(event);
          },

          handleTouchMove: function handleTouchMove(event) {
            // Set a flag that the view is being dragged
            this.dragging = true;
          },

          handleTouchStart: function handleTouchStart(event) {
            // Set a flag that the view is not being dragged
            this.dragging = false;
          },

          onFocus: function onFocus(event) {
            if (!this.props.isFocused) {
              this.props.onFocus(this.props.option, event);
            }
          },
          render: function render() {
            var _props = this.props;
            var option = _props.option;
            var instancePrefix = _props.instancePrefix;
            var optionIndex = _props.optionIndex;

            var className = (0, _classnames2['default'])(this.props.className, option.className);

            return option.disabled ? _react2['default'].createElement(
              'div', {
                className: className,
                onMouseDown: this.blockEvent,
                onClick: this.blockEvent
              },
              this.props.children
            ) : _react2['default'].createElement(
              'div', {
                className: className,
                style: option.style,
                role: 'option',
                onMouseDown: this.handleMouseDown,
                onMouseEnter: this.handleMouseEnter,
                onMouseMove: this.handleMouseMove,
                onTouchStart: this.handleTouchStart,
                onTouchMove: this.handleTouchMove,
                onTouchEnd: this.handleTouchEnd,
                id: instancePrefix + '-option-' + optionIndex,
                title: option.title
              },
              this.props.children
            );
          }
        });

        module.exports = Option;

        /***/
      }),
      /* 99 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var Value = _react2['default'].createClass({

          displayName: 'Value',

          propTypes: {
            children: _react2['default'].PropTypes.node,
            disabled: _react2['default'].PropTypes.bool, // disabled prop passed to ReactSelect
            id: _react2['default'].PropTypes.string, // Unique id for the value - used for aria
            onClick: _react2['default'].PropTypes.func, // method to handle click on value label
            onRemove: _react2['default'].PropTypes.func, // method to handle removal of the value
            value: _react2['default'].PropTypes.object.isRequired
          },

          // the option object for this value
          handleMouseDown: function handleMouseDown(event) {
            if (event.type === 'mousedown' && event.button !== 0) {
              return;
            }
            if (this.props.onClick) {
              event.stopPropagation();
              this.props.onClick(this.props.value, event);
              return;
            }
            if (this.props.value.href) {
              event.stopPropagation();
            }
          },

          onRemove: function onRemove(event) {
            event.preventDefault();
            event.stopPropagation();
            this.props.onRemove(this.props.value);
          },

          handleTouchEndRemove: function handleTouchEndRemove(event) {
            // Check if the view is being dragged, In this case
            // we don't want to fire the click event (because the user only wants to scroll)
            if (this.dragging) return;

            // Fire the mouse events
            this.onRemove(event);
          },

          handleTouchMove: function handleTouchMove(event) {
            // Set a flag that the view is being dragged
            this.dragging = true;
          },

          handleTouchStart: function handleTouchStart(event) {
            // Set a flag that the view is not being dragged
            this.dragging = false;
          },

          renderRemoveIcon: function renderRemoveIcon() {
            if (this.props.disabled || !this.props.onRemove) return;
            return _react2['default'].createElement(
              'span', {
                className: 'Select-value-icon',
                'aria-hidden': 'true',
                onMouseDown: this.onRemove,
                onTouchEnd: this.handleTouchEndRemove,
                onTouchStart: this.handleTouchStart,
                onTouchMove: this.handleTouchMove
              },
              '×'
            );
          },

          renderLabel: function renderLabel() {
            var className = 'Select-value-label';
            return this.props.onClick || this.props.value.href ? _react2['default'].createElement(
              'a', { className: className, href: this.props.value.href, target: this.props.value.target, onMouseDown: this.handleMouseDown, onTouchEnd: this.handleMouseDown },
              this.props.children
            ) : _react2['default'].createElement(
              'span', { className: className, role: 'option', 'aria-selected': 'true', id: this.props.id },
              this.props.children
            );
          },

          render: function render() {
            return _react2['default'].createElement(
              'div', {
                className: (0, _classnames2['default'])('Select-value', this.props.value.className),
                style: this.props.value.style,
                title: this.props.value.title
              },
              this.renderRemoveIcon(),
              this.renderLabel()
            );
          }

        });

        module.exports = Value;

        /***/
      }),
      /* 100 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        exports.default = MultiDropdownList;

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _DropdownList = __webpack_require__(87);

        var _DropdownList2 = _interopRequireDefault(_DropdownList);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function MultiDropdownList(props) {
          return _react2.default.createElement(_DropdownList2.default, _extends({}, props, {
            component: "MultiDropdownList",
            multipleSelect: true
          }));
        }

        MultiDropdownList.propTypes = {
          defaultSelected: _react2.default.PropTypes.array,
          componentStyle: _react2.default.PropTypes.object,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        MultiDropdownList.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.KEYWORD,
          defaultSelected: TYPES.ARRAY,
          react: TYPES.OBJECT,
          title: TYPES.STRING,
          size: TYPES.NUMBER,
          showCount: TYPES.BOOLEAN,
          sortBy: TYPES.STRING,
          placeholder: TYPES.STRING,
          selectAllLabel: TYPES.STRING,
          customQuery: TYPES.FUNCTION,
          initialLoader: TYPES.OBJECT,
          componentStyle: TYPES.OBJECT,
          URLParams: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 101 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _rcSlider = __webpack_require__(102);

        var _rcSlider2 = _interopRequireDefault(_rcSlider);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _ChannelManager = __webpack_require__(63);

        var _ChannelManager2 = _interopRequireDefault(_ChannelManager);

        var _HistoGram = __webpack_require__(253);

        var _InitialLoader = __webpack_require__(80);

        var _InitialLoader2 = _interopRequireDefault(_InitialLoader);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint max-lines: 0 */


        var helper = __webpack_require__(65);

        var RangeSlider = function (_Component) {
          _inherits(RangeSlider, _Component);

          function RangeSlider(props) {
            _classCallCheck(this, RangeSlider);

            var _this = _possibleConstructorReturn(this, (RangeSlider.__proto__ || Object.getPrototypeOf(RangeSlider)).call(this, props));

            var startThreshold = _this.props.range.start ? _this.props.range.start : 0;
            var endThreshold = _this.props.range.end ? _this.props.range.end : 5;
            var values = {};
            _this.urlParams = helper.URLParams.get(_this.props.componentId, false, true);
            _this.defaultSelected = _this.urlParams !== null ? _this.urlParams : _this.props.defaultSelected;
            values.min = _this.defaultSelected.start < startThreshold ? startThreshold : _this.defaultSelected.start;
            values.max = _this.defaultSelected.end < endThreshold ? _this.defaultSelected.end : endThreshold;
            _this.state = {
              values: values,
              startThreshold: startThreshold,
              endThreshold: endThreshold,
              currentValues: [],
              counts: [],
              rawData: {
                hits: {
                  hits: []
                }
              }
            };
            _this.maxSize = 100;
            _this.queryStartTime = 0;
            _this.type = "range";
            _this.channelId = null;
            _this.channelListener = null;
            _this.handleValuesChange = _this.handleValuesChange.bind(_this);
            _this.handleResults = _this.handleResults.bind(_this);
            _this.customQuery = _this.customQuery.bind(_this);
            _this.histogramQuery = _this.histogramQuery.bind(_this);
            return _this;
          }

          // Get the items from Appbase when component is mounted


          _createClass(RangeSlider, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setQueryInfo();
              this.createChannel();
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              var _this2 = this;

              setTimeout(function () {
                var defaultValue = _this2.urlParams !== null ? _this2.urlParams : _this2.props.defaultSelected;
                // check defaultSelected
                if (defaultValue.start !== _this2.state.values.min || defaultValue.end !== _this2.state.values.max && nextProps.range.start <= defaultValue.start && nextProps.range.end >= defaultValue.end) {
                  var rem = (defaultValue.end - defaultValue.start) % nextProps.stepValue;
                  if (rem) {
                    _this2.setState({
                      values: {
                        min: _this2.state.values.min,
                        max: defaultValue.end - rem
                      }
                    });
                    var obj = {
                      key: _this2.props.componentId,
                      value: {
                        from: _this2.state.values.min,
                        to: defaultValue.end - rem
                      }
                    };
                    setTimeout(function () {
                      if (_this2.props.onValueChange) {
                        _this2.props.onValueChange(obj.value);
                      }
                      helper.URLParams.update(_this2.props.componentId, _this2.setURLParam(obj.value), _this2.props.URLParams);
                      helper.selectedSensor.set(obj, true);
                    }, 1000);
                  } else {
                    var values = {};
                    values.min = defaultValue.start;
                    values.max = defaultValue.end;
                    _this2.setState({
                      values: values,
                      currentValues: values
                    });
                    var _obj = {
                      key: _this2.props.componentId,
                      value: {
                        from: values.min,
                        to: values.max
                      }
                    };
                    setTimeout(function () {
                      if (_this2.props.onValueChange) {
                        _this2.props.onValueChange(_obj.value);
                      }
                      helper.URLParams.update(_this2.props.componentId, _this2.setURLParam(_obj.value), _this2.props.URLParams);
                      helper.selectedSensor.set(_obj, true);
                    }, 1000);
                  }
                }
                // check range
                if (nextProps.range.start !== _this2.state.startThreshold || nextProps.range.end !== _this2.state.endThreshold) {
                  if (nextProps.range.start <= defaultValue.start && nextProps.range.end >= defaultValue.end) {
                    _this2.setState({
                      startThreshold: nextProps.range.start,
                      endThreshold: nextProps.range.end
                    });
                  } else {
                    var _values = {
                      min: _this2.state.values.min,
                      max: _this2.state.values.max
                    };
                    if (_this2.state.values.min < nextProps.range.start) {
                      _values.min = nextProps.range.start;
                    }
                    if (_this2.state.values.max > nextProps.range.end) {
                      _values.max = nextProps.range.end;
                    }
                    _this2.setState({
                      startThreshold: nextProps.range.start,
                      endThreshold: nextProps.range.end,
                      values: _values
                    });
                    var currentRange = {
                      from: _values.min,
                      to: _values.max
                    };
                    var _obj2 = {
                      key: _this2.props.componentId,
                      value: currentRange
                    };
                    if (_this2.props.onValueChange) {
                      _this2.props.onValueChange(_obj2.value);
                    }
                    helper.URLParams.update(_this2.props.componentId, _this2.setURLParam(_obj2.value), _this2.props.URLParams);
                    helper.selectedSensor.set(_obj2, true);
                  }
                  _this2.setRangeValue();
                }
                // drop value if it exceeds the threshold (based on step value)
                if (nextProps.stepValue !== _this2.props.stepValue) {
                  var _rem = (defaultValue.end - defaultValue.start) % nextProps.stepValue;
                  if (_rem) {
                    _this2.setState({
                      values: {
                        min: _this2.state.values.min,
                        max: defaultValue.end - _rem
                      }
                    });
                    var _obj3 = {
                      key: _this2.props.componentId,
                      value: {
                        from: _this2.state.values.min,
                        to: defaultValue.end - _rem
                      }
                    };
                    if (_this2.props.onValueChange) {
                      _this2.props.onValueChange(_obj3.value);
                    }
                    helper.URLParams.update(_this2.props.componentId, _this2.setURLParam(_obj3.value), _this2.props.URLParams);
                    helper.selectedSensor.set(_obj3, true);
                  }
                }
              }, 300);
            }
          }, {
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate(nextProps, nextState) {
              if (nextProps.stepValue <= 0 || nextProps.stepValue > Math.floor((nextProps.range.end - nextProps.range.start) / 2)) {
                console.error("Step value is invalid, it should be less than or equal to " + Math.floor((nextProps.range.end - nextProps.range.start) / 2) + ".");
                return false;
              } else if (nextState.values.max > nextState.endThreshold) {
                return false;
              }
              return true;
            }

            // stop streaming request and remove listener when component will unmount

          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.channelId) {
                _ChannelManager2.default.stopStream(this.channelId);
              }
              if (this.channelListener) {
                this.channelListener.remove();
              }
              if (this.loadListener) {
                this.loadListener.remove();
              }
            }
          }, {
            key: "setURLParam",
            value: function setURLParam(value) {
              if ("from" in value && "to" in value) {
                value = {
                  start: value.from,
                  end: value.to
                };
              }
              return JSON.stringify(value);
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField
                }
              };
              var obj1 = {
                key: this.props.componentId + "-internal",
                value: {
                  queryType: "range",
                  inputData: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery
                }
              };
              helper.selectedSensor.setSensorInfo(obj);
              helper.selectedSensor.setSensorInfo(obj1);
              this.setRangeValue();
            }
          }, {
            key: "setRangeValue",
            value: function setRangeValue() {
              var objValue = {
                key: this.props.componentId + "-internal",
                value: this.props.range
              };
              if (this.props.onValueChange) {
                this.props.onValueChange(objValue.value);
              }
              helper.selectedSensor.set(objValue, true);
            }
          }, {
            key: "customQuery",
            value: function customQuery(record) {
              if (record) {
                return {
                  range: _defineProperty({}, this.props.appbaseField, {
                    gte: record.start,
                    lte: record.end,
                    boost: 2.0
                  })
                };
              }
            }
          }, {
            key: "histogramQuery",
            value: function histogramQuery() {
              return _defineProperty({}, this.props.appbaseField, {
                "histogram": {
                  "field": this.props.appbaseField,
                  "interval": this.props.interval ? this.props.interval : Math.ceil((this.props.range.end - this.props.range.start) / 10)
                }
              });
            }

            // Create a channel which passes the react and receive results whenever react changes

          }, {
            key: "createChannel",
            value: function createChannel() {
              var _this3 = this;

              // Set the react - add self aggs query as well with react
              var react = this.props.react ? this.props.react : {};
              react.aggs = {
                key: this.props.appbaseField,
                sort: "asc",
                size: 1000,
                customQuery: this.histogramQuery
              };
              var reactAnd = [this.props.componentId + "-internal"];
              react = helper.setupReact(react, reactAnd);
              // create a channel and listen the changes
              var channelObj = _ChannelManager2.default.create(this.context.appbaseRef, this.context.type, react, 100, 0, false, this.props.componentId);
              this.channelId = channelObj.channelId;
              this.channelListener = channelObj.emitter.addListener(channelObj.channelId, function (res) {
                if (res.error) {
                  _this3.setState({
                    queryStart: false
                  });
                }
                if (res.appliedQuery && res.startTime > _this3.queryStartTime) {
                  _this3.queryStartTime = res.startTime ? res.startTime : 0;
                  var data = res.data;
                  var rawData = void 0;
                  if (res.mode === "streaming") {
                    rawData = _this3.state.rawData;
                    rawData.hits.hits.push(res.data);
                  } else if (res.mode === "historic") {
                    rawData = data;
                  }
                  _this3.setState({
                    queryStart: false,
                    rawData: rawData
                  });
                  _this3.setData(data);
                }
              });
              this.listenLoadingChannel(channelObj);
            }
          }, {
            key: "listenLoadingChannel",
            value: function listenLoadingChannel(channelObj) {
              var _this4 = this;

              this.loadListener = channelObj.emitter.addListener(channelObj.channelId + "-query", function (res) {
                if (res.appliedQuery) {
                  _this4.setState({
                    queryStart: res.queryState
                  });
                }
              });
            }
          }, {
            key: "getSize",
            value: function getSize() {
              return Math.min(this.props.range.end - this.props.range.start, this.maxSize);
            }
          }, {
            key: "setData",
            value: function setData(data) {
              try {
                this.addItemsToList(data.aggregations[this.props.appbaseField].buckets);
              } catch (e) {
                console.log(e);
              }
            }

            // Handle function when value slider option is changing

          }, {
            key: "handleValuesChange",
            value: function handleValuesChange(component, values) {
              this.setState({
                values: values
              });
            }
          }, {
            key: "countCalc",
            value: function countCalc(min, max, newItems) {
              // const counts = [];
              // const storeItems = {};
              // newItems.forEach((item) => {
              // 	item.key = Math.floor(item.key);
              // 	if (!(item.key in storeItems)) {
              // 		storeItems[item.key] = item.doc_count;
              // 	} else {
              // 		storeItems[item.key] += item.doc_count;
              // 	}
              // });
              // return counts;
              return newItems.map(function (item) {
                return item.doc_count;
              });
            }
          }, {
            key: "addItemsToList",
            value: function addItemsToList(newItems) {
              var _this5 = this;

              newItems = _lodash2.default.orderBy(newItems, ["key"], ["asc"]);
              var itemLength = newItems.length;
              var min = this.state.startThreshold ? this.state.startThreshold : newItems[0].key;
              var max = this.state.endThreshold ? this.state.endThreshold : newItems[itemLength - 1].key;
              if (itemLength > 1) {
                var rangeValue = {
                  counts: this.countCalc(min, max, newItems),
                  startThreshold: min,
                  endThreshold: max,
                  values: {
                    min: this.state.values.min,
                    max: this.state.values.max
                  }
                };
                this.setState(rangeValue, function () {
                  if (!_lodash2.default.isEqual(rangeValue.values, _this5.state.currentValues)) {
                    _this5.handleResults(null, rangeValue.values);
                  }
                });
              }
            }

            // Handle function when slider option change is completed

          }, {
            key: "handleResults",
            value: function handleResults(textVal, value) {
              var values = void 0;
              if (textVal) {
                values = {
                  min: textVal[0],
                  max: textVal[1]
                };
              } else {
                values = value;
              }
              var realValues = {
                from: values.min,
                to: values.max
              };
              var obj = {
                key: this.props.componentId,
                value: realValues
              };
              if (this.props.onValueChange) {
                this.props.onValueChange(obj.value);
              }
              helper.URLParams.update(this.props.componentId, this.setURLParam(obj.value), this.props.URLParams);
              helper.selectedSensor.set(obj, true);
              this.setState({
                currentValues: values,
                values: values
              });
            }
          }, {
            key: "render",
            value: function render() {
              var title = null,
                histogram = null,
                marks = {};

              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }
              if (this.state.counts && this.state.counts.length && this.props.showHistogram) {
                histogram = _react2.default.createElement(_HistoGram.HistoGramComponent, { data: this.state.counts });
              }
              if (this.props.rangeLabels.start || this.props.rangeLabels.end) {
                var _marks;

                marks = (_marks = {}, _defineProperty(_marks, this.state.startThreshold, this.props.rangeLabels.start), _defineProperty(_marks, this.state.endThreshold, this.props.rangeLabels.end), _marks);
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-labels-active": this.props.rangeLabels.start || this.props.rangeLabels.end,
                "rbc-labels-inactive": !this.props.rangeLabels.start && !this.props.rangeLabels.end,
                "rbc-initialloader-active": this.props.initialLoader,
                "rbc-initialloader-inactive": !this.props.initialLoader
              });

              return _react2.default.createElement(
                "div", { className: "rbc rbc-rangeslider card thumbnail col s12 col-xs-12 " + cx, style: this.props.componentStyle },
                title,
                histogram,
                _react2.default.createElement(
                  "div", { className: "rbc-rangeslider-container col s12 col-xs-12" },
                  _react2.default.createElement(_rcSlider2.default, {
                    range: true,
                    value: [this.state.values.min, this.state.values.max],
                    min: this.state.startThreshold,
                    max: this.state.endThreshold,
                    onChange: this.handleResults,
                    step: this.props.stepValue,
                    marks: marks
                  })
                ),
                this.props.initialLoader && this.state.queryStart ? _react2.default.createElement(_InitialLoader2.default, { defaultText: this.props.initialLoader }) : null
              );
            }
          }]);

          return RangeSlider;
        }(_react.Component);

        exports.default = RangeSlider;


        RangeSlider.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          range: _react2.default.PropTypes.shape({
            start: helper.validateThreshold,
            end: helper.validateThreshold
          }),
          rangeLabels: _react2.default.PropTypes.shape({
            start: _react2.default.PropTypes.string,
            end: _react2.default.PropTypes.string
          }),
          defaultSelected: _react2.default.PropTypes.shape({
            start: _react2.default.PropTypes.number,
            end: _react2.default.PropTypes.number
          }),
          stepValue: helper.stepValidation,
          showHistogram: _react2.default.PropTypes.bool,
          customQuery: _react2.default.PropTypes.func,
          initialLoader: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          react: _react2.default.PropTypes.object,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          interval: _react2.default.PropTypes.number,
          URLParams: _react2.default.PropTypes.bool
        };

        RangeSlider.defaultProps = {
          title: null,
          range: {
            start: 0,
            end: 10
          },
          rangeLabels: {
            start: "",
            end: ""
          },
          defaultSelected: {
            start: 0,
            end: 10
          },
          stepValue: 1,
          showHistogram: true,
          componentStyle: {},
          URLParams: false
        };

        // context type
        RangeSlider.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired
        };

        RangeSlider.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.NUMBER,
          title: TYPES.STRING,
          react: TYPES.OBJECT,
          range: TYPES.OBJECT,
          rangeLabels: TYPES.OBJECT,
          defaultSelected: TYPES.OBJECT,
          stepValue: TYPES.NUMBER,
          showHistogram: TYPES.BOOLEAN,
          customQuery: TYPES.FUNCTION,
          initialLoader: TYPES.OBJECT,
          componentStyle: TYPES.OBJECT,
          interval: TYPES.NUMBER,
          URLParams: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 102 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        module.exports = __webpack_require__(103);

        /***/
      }),
      /* 103 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _defineProperty2 = __webpack_require__(104);

        var _defineProperty3 = _interopRequireDefault(_defineProperty2);

        var _toConsumableArray2 = __webpack_require__(123);

        var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

        var _extends2 = __webpack_require__(162);

        var _extends3 = _interopRequireDefault(_extends2);

        var _classCallCheck2 = __webpack_require__(169);

        var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

        var _possibleConstructorReturn2 = __webpack_require__(170);

        var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

        var _inherits2 = __webpack_require__(193);

        var _inherits3 = _interopRequireDefault(_inherits2);

        var _reactDom = __webpack_require__(30);

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _addEventListener = __webpack_require__(201);

        var _addEventListener2 = _interopRequireDefault(_addEventListener);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _Track = __webpack_require__(206);

        var _Track2 = _interopRequireDefault(_Track);

        var _Handle = __webpack_require__(207);

        var _Handle2 = _interopRequireDefault(_Handle);

        var _Steps = __webpack_require__(250);

        var _Steps2 = _interopRequireDefault(_Steps);

        var _Marks = __webpack_require__(252);

        var _Marks2 = _interopRequireDefault(_Marks);

        var _warning = __webpack_require__(251);

        var _warning2 = _interopRequireDefault(_warning);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var noop = function noop() {};

        var isNotTouchEvent = function isNotTouchEvent(e) {
          return e.touches.length > 1 || e.type.toLowerCase() === 'touchend' && e.touches.length > 0;
        };

        var getTouchPosition = function getTouchPosition(vertical, e) {
          return vertical ? e.touches[0].clientY : e.touches[0].pageX;
        };

        var getMousePosition = function getMousePosition(vertical, e) {
          return vertical ? e.clientY : e.pageX;
        };

        var getHandleCenterPosition = function getHandleCenterPosition(vertical, handle) {
          var coords = handle.getBoundingClientRect();
          return vertical ? coords.top + coords.height * 0.5 : coords.left + coords.width * 0.5;
        };

        var pauseEvent = function pauseEvent(e) {
          e.stopPropagation();
          e.preventDefault();
        };

        var Slider = function (_React$Component) {
          (0, _inherits3["default"])(Slider, _React$Component);

          function Slider(props) {
            (0, _classCallCheck3["default"])(this, Slider);

            var _this = (0, _possibleConstructorReturn3["default"])(this, _React$Component.call(this, props));

            var range = props.range,
              min = props.min,
              max = props.max,
              step = props.step;

            var initialValue = range ? Array.apply(null, Array(range + 1)).map(function () {
              return min;
            }) : min;
            var defaultValue = 'defaultValue' in props ? props.defaultValue : initialValue;
            var value = props.value !== undefined ? props.value : defaultValue;

            var bounds = (range ? value : [min, value]).map(function (v) {
              return _this.trimAlignValue(v);
            });

            var recent = void 0;
            if (range && bounds[0] === bounds[bounds.length - 1] && bounds[0] === max) {
              recent = 0;
            } else {
              recent = bounds.length - 1;
            }

            if ((undefined) !== 'production' && step && Math.floor(step) === step && (max - min) % step !== 0) {
              (0, _warning2["default"])(false, 'Slider[max] - Slider[min] (%s) should be a multiple of Slider[step] (%s)', max - min, step);
            }

            _this.state = {
              handle: null,
              recent: recent,
              bounds: bounds
            };

            _this.onTouchStart = _this.onTouchStart.bind(_this);
            _this.onMouseDown = _this.onMouseDown.bind(_this);
            return _this;
          }

          Slider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            var _this2 = this;

            if (!('value' in nextProps || 'min' in nextProps || 'max' in nextProps)) return;

            var bounds = this.state.bounds;

            if (nextProps.range) {
              var value = nextProps.value || bounds;
              var nextBounds = value.map(function (v) {
                return _this2.trimAlignValue(v, nextProps);
              });
              if (nextBounds.every(function (v, i) {
                  return v === bounds[i];
                })) return;

              this.setState({ bounds: nextBounds });
              if (bounds.some(function (v) {
                  return _this2.isValueOutOfBounds(v, nextProps);
                })) {
                this.props.onChange(nextBounds);
              }
            } else {
              var _value = nextProps.value !== undefined ? nextProps.value : bounds[1];
              var nextValue = this.trimAlignValue(_value, nextProps);
              if (nextValue === bounds[1] && bounds[0] === nextProps.min) return;

              this.setState({ bounds: [nextProps.min, nextValue] });
              if (this.isValueOutOfBounds(bounds[1], nextProps)) {
                this.props.onChange(nextValue);
              }
            }
          };

          Slider.prototype.onChange = function onChange(state) {
            var props = this.props;
            var isNotControlled = !('value' in props);
            if (isNotControlled) {
              this.setState(state);
            } else if (state.handle !== undefined) {
              this.setState({ handle: state.handle });
            }

            var data = (0, _extends3["default"])({}, this.state, state);
            var changedValue = props.range ? data.bounds : data.bounds[1];
            props.onChange(changedValue);
          };

          Slider.prototype.onMouseDown = function onMouseDown(e) {
            if (e.button !== 0) {
              return;
            }

            var position = getMousePosition(this.props.vertical, e);
            if (!this.isEventFromHandle(e)) {
              this.dragOffset = 0;
            } else {
              var handlePosition = getHandleCenterPosition(this.props.vertical, e.target);
              this.dragOffset = position - handlePosition;
              position = handlePosition;
            }
            this.onStart(position);
            this.addDocumentEvents('mouse');
            pauseEvent(e);
          };

          Slider.prototype.onMouseMove = function onMouseMove(e) {
            var position = getMousePosition(this.props.vertical, e);
            this.onMove(e, position - this.dragOffset);
          };

          Slider.prototype.onMove = function onMove(e, position) {
            pauseEvent(e);
            var props = this.props;
            var state = this.state;

            var diffPosition = position - this.startPosition;
            diffPosition = this.props.vertical ? -diffPosition : diffPosition;
            var diffValue = diffPosition / this.getSliderLength() * (props.max - props.min);

            var value = this.trimAlignValue(this.startValue + diffValue);
            var oldValue = state.bounds[state.handle];
            if (value === oldValue) return;

            var nextBounds = [].concat((0, _toConsumableArray3["default"])(state.bounds));
            nextBounds[state.handle] = value;
            var nextHandle = state.handle;
            if (props.pushable !== false) {
              var originalValue = state.bounds[nextHandle];
              this.pushSurroundingHandles(nextBounds, nextHandle, originalValue);
            } else if (props.allowCross) {
              nextBounds.sort(function (a, b) {
                return a - b;
              });
              nextHandle = nextBounds.indexOf(value);
            }
            this.onChange({
              handle: nextHandle,
              bounds: nextBounds
            });
          };

          Slider.prototype.onStart = function onStart(position) {
            var props = this.props;
            props.onBeforeChange(this.getValue());

            var value = this.calcValueByPos(position);
            this.startValue = value;
            this.startPosition = position;

            var state = this.state;
            var bounds = state.bounds;


            var valueNeedChanging = 1;
            if (this.props.range) {
              var closestBound = 0;
              for (var i = 1; i < bounds.length - 1; ++i) {
                if (value > bounds[i]) {
                  closestBound = i;
                }
              }
              if (Math.abs(bounds[closestBound + 1] - value) < Math.abs(bounds[closestBound] - value)) {
                closestBound = closestBound + 1;
              }
              valueNeedChanging = closestBound;

              var isAtTheSamePoint = bounds[closestBound + 1] === bounds[closestBound];
              if (isAtTheSamePoint) {
                valueNeedChanging = state.recent;
              }

              if (isAtTheSamePoint && value !== bounds[closestBound + 1]) {
                valueNeedChanging = value < bounds[closestBound + 1] ? closestBound : closestBound + 1;
              }
            }

            this.setState({
              handle: valueNeedChanging,
              recent: valueNeedChanging
            });

            var oldValue = state.bounds[valueNeedChanging];
            if (value === oldValue) return;

            var nextBounds = [].concat((0, _toConsumableArray3["default"])(state.bounds));
            nextBounds[valueNeedChanging] = value;
            this.onChange({ bounds: nextBounds });
          };

          Slider.prototype.onTouchMove = function onTouchMove(e) {
            if (isNotTouchEvent(e)) {
              this.end('touch');
              return;
            }

            var position = getTouchPosition(this.props.vertical, e);
            this.onMove(e, position - this.dragOffset);
          };

          Slider.prototype.onTouchStart = function onTouchStart(e) {
            if (isNotTouchEvent(e)) return;

            var position = getTouchPosition(this.props.vertical, e);
            if (!this.isEventFromHandle(e)) {
              this.dragOffset = 0;
            } else {
              var handlePosition = getHandleCenterPosition(this.props.vertical, e.target);
              this.dragOffset = position - handlePosition;
              position = handlePosition;
            }
            this.onStart(position);
            this.addDocumentEvents('touch');
            pauseEvent(e);
          };

          /**
           * Returns an array of possible slider points, taking into account both
           * `marks` and `step`. The result is cached.
           */


          Slider.prototype.getPoints = function getPoints() {
            var _props = this.props,
              marks = _props.marks,
              step = _props.step,
              min = _props.min,
              max = _props.max;

            var cache = this._getPointsCache;
            if (!cache || cache.marks !== marks || cache.step !== step) {
              var pointsObject = (0, _extends3["default"])({}, marks);
              if (step !== null) {
                for (var point = min; point <= max; point += step) {
                  pointsObject[point] = point;
                }
              }
              var points = Object.keys(pointsObject).map(parseFloat);
              points.sort(function (a, b) {
                return a - b;
              });
              this._getPointsCache = { marks: marks, step: step, points: points };
            }
            return this._getPointsCache.points;
          };

          Slider.prototype.getPrecision = function getPrecision(step) {
            var stepString = step.toString();
            var precision = 0;
            if (stepString.indexOf('.') >= 0) {
              precision = stepString.length - stepString.indexOf('.') - 1;
            }
            return precision;
          };

          Slider.prototype.getSliderLength = function getSliderLength() {
            var slider = this.refs.slider;
            if (!slider) {
              return 0;
            }

            return this.props.vertical ? slider.clientHeight : slider.clientWidth;
          };

          Slider.prototype.getSliderStart = function getSliderStart() {
            var slider = this.refs.slider;
            var rect = slider.getBoundingClientRect();

            return this.props.vertical ? rect.top : rect.left;
          };

          Slider.prototype.getValue = function getValue() {
            var bounds = this.state.bounds;

            return this.props.range ? bounds : bounds[1];
          };

          Slider.prototype.addDocumentEvents = function addDocumentEvents(type) {
            if (type === 'touch') {
              // just work for chrome iOS Safari and Android Browser
              this.onTouchMoveListener = (0, _addEventListener2["default"])(document, 'touchmove', this.onTouchMove.bind(this));
              this.onTouchUpListener = (0, _addEventListener2["default"])(document, 'touchend', this.end.bind(this, 'touch'));
            } else if (type === 'mouse') {
              this.onMouseMoveListener = (0, _addEventListener2["default"])(document, 'mousemove', this.onMouseMove.bind(this));
              this.onMouseUpListener = (0, _addEventListener2["default"])(document, 'mouseup', this.end.bind(this, 'mouse'));
            }
          };

          Slider.prototype.calcOffset = function calcOffset(value) {
            var _props2 = this.props,
              min = _props2.min,
              max = _props2.max;

            var ratio = (value - min) / (max - min);
            return ratio * 100;
          };

          Slider.prototype.calcValue = function calcValue(offset) {
            var _props3 = this.props,
              vertical = _props3.vertical,
              min = _props3.min,
              max = _props3.max;

            var ratio = Math.abs(offset / this.getSliderLength());
            var value = vertical ? (1 - ratio) * (max - min) + min : ratio * (max - min) + min;
            return value;
          };

          Slider.prototype.calcValueByPos = function calcValueByPos(position) {
            var pixelOffset = position - this.getSliderStart();
            var nextValue = this.trimAlignValue(this.calcValue(pixelOffset));
            return nextValue;
          };

          Slider.prototype.end = function end(type) {
            this.removeEvents(type);
            this.props.onAfterChange(this.getValue());
            this.setState({ handle: null });
          };

          Slider.prototype.isEventFromHandle = function isEventFromHandle(e) {
            var _this3 = this;

            return this.state.bounds.some(function (x, i) {
              return _this3.refs['handle-' + i] && e.target === (0, _reactDom.findDOMNode)(_this3.refs['handle-' + i]);
            });
          };

          Slider.prototype.isValueOutOfBounds = function isValueOutOfBounds(value, props) {
            return value < props.min || value > props.max;
          };

          Slider.prototype.pushHandle = function pushHandle(bounds, handle, direction, amount) {
            var originalValue = bounds[handle];
            var currentValue = bounds[handle];
            while (direction * (currentValue - originalValue) < amount) {
              if (!this.pushHandleOnePoint(bounds, handle, direction)) {
                // can't push handle enough to create the needed `amount` gap, so we
                // revert its position to the original value
                bounds[handle] = originalValue;
                return false;
              }
              currentValue = bounds[handle];
            }
            // the handle was pushed enough to create the needed `amount` gap
            return true;
          };

          Slider.prototype.pushHandleOnePoint = function pushHandleOnePoint(bounds, handle, direction) {
            var points = this.getPoints();
            var pointIndex = points.indexOf(bounds[handle]);
            var nextPointIndex = pointIndex + direction;
            if (nextPointIndex >= points.length || nextPointIndex < 0) {
              // reached the minimum or maximum available point, can't push anymore
              return false;
            }
            var nextHandle = handle + direction;
            var nextValue = points[nextPointIndex];
            var threshold = this.props.pushable;

            var diffToNext = direction * (bounds[nextHandle] - nextValue);
            if (!this.pushHandle(bounds, nextHandle, direction, threshold - diffToNext)) {
              // couldn't push next handle, so we won't push this one either
              return false;
            }
            // push the handle
            bounds[handle] = nextValue;
            return true;
          };

          Slider.prototype.pushSurroundingHandles = function pushSurroundingHandles(bounds, handle, originalValue) {
            var threshold = this.props.pushable;

            var value = bounds[handle];

            var direction = 0;
            if (bounds[handle + 1] - value < threshold) {
              direction = +1;
            } else if (value - bounds[handle - 1] < threshold) {
              direction = -1;
            }

            if (direction === 0) {
              return;
            }

            var nextHandle = handle + direction;
            var diffToNext = direction * (bounds[nextHandle] - value);
            if (!this.pushHandle(bounds, nextHandle, direction, threshold - diffToNext)) {
              // revert to original value if pushing is impossible
              bounds[handle] = originalValue;
            }
          };

          Slider.prototype.removeEvents = function removeEvents(type) {
            if (type === 'touch') {
              this.onTouchMoveListener.remove();
              this.onTouchUpListener.remove();
            } else if (type === 'mouse') {
              this.onMouseMoveListener.remove();
              this.onMouseUpListener.remove();
            }
          };

          Slider.prototype.trimAlignValue = function trimAlignValue(v, nextProps) {
            var state = this.state || {};
            var handle = state.handle,
              bounds = state.bounds;

            var _props4 = (0, _extends3["default"])({}, this.props, nextProps || {}),
              marks = _props4.marks,
              step = _props4.step,
              min = _props4.min,
              max = _props4.max,
              allowCross = _props4.allowCross;

            var val = v;
            if (val <= min) {
              val = min;
            }
            if (val >= max) {
              val = max;
            }
            /* eslint-disable eqeqeq */
            if (!allowCross && handle != null && handle > 0 && val <= bounds[handle - 1]) {
              val = bounds[handle - 1];
            }
            if (!allowCross && handle != null && handle < bounds.length - 1 && val >= bounds[handle + 1]) {
              val = bounds[handle + 1];
            }
            /* eslint-enable eqeqeq */

            var points = Object.keys(marks).map(parseFloat);
            if (step !== null) {
              var closestStep = Math.round((val - min) / step) * step + min;
              points.push(closestStep);
            }

            var diffs = points.map(function (point) {
              return Math.abs(val - point);
            });
            var closestPoint = points[diffs.indexOf(Math.min.apply(Math, diffs))];

            return step !== null ? parseFloat(closestPoint.toFixed(this.getPrecision(step))) : closestPoint;
          };

          Slider.prototype.render = function render() {
            var _this4 = this,
              _classNames3;

            var _state = this.state,
              handle = _state.handle,
              bounds = _state.bounds;
            var _props5 = this.props,
              className = _props5.className,
              prefixCls = _props5.prefixCls,
              tooltipPrefixCls = _props5.tooltipPrefixCls,
              disabled = _props5.disabled,
              vertical = _props5.vertical,
              dots = _props5.dots,
              included = _props5.included,
              range = _props5.range,
              step = _props5.step,
              marks = _props5.marks,
              max = _props5.max,
              min = _props5.min,
              tipTransitionName = _props5.tipTransitionName,
              tipFormatter = _props5.tipFormatter,
              children = _props5.children,
              style = _props5.style;


            var customHandle = this.props.handle;

            var offsets = bounds.map(function (v) {
              return _this4.calcOffset(v);
            });

            var handleClassName = prefixCls + '-handle';

            var handlesClassNames = bounds.map(function (v, i) {
              var _classNames;

              return (0, _classnames2["default"])((_classNames = {}, (0, _defineProperty3["default"])(_classNames, handleClassName, true), (0, _defineProperty3["default"])(_classNames, handleClassName + '-' + (i + 1), true), (0, _defineProperty3["default"])(_classNames, handleClassName + '-lower', i === 0), (0, _defineProperty3["default"])(_classNames, handleClassName + '-upper', i === bounds.length - 1), _classNames));
            });

            var isNoTip = step === null || tipFormatter === null;

            var commonHandleProps = {
              prefixCls: prefixCls,
              tooltipPrefixCls: tooltipPrefixCls,
              noTip: isNoTip,
              tipTransitionName: tipTransitionName,
              tipFormatter: tipFormatter,
              vertical: vertical
            };

            var handles = bounds.map(function (v, i) {
              return (0, _react.cloneElement)(customHandle, (0, _extends3["default"])({}, commonHandleProps, {
                className: handlesClassNames[i],
                value: v,
                offset: offsets[i],
                dragging: handle === i,
                index: i,
                key: i,
                ref: 'handle-' + i
              }));
            });
            if (!range) {
              handles.shift();
            }

            var tracks = [];
            for (var i = 1; i < bounds.length; ++i) {
              var _classNames2;

              var trackClassName = (0, _classnames2["default"])((_classNames2 = {}, (0, _defineProperty3["default"])(_classNames2, prefixCls + '-track', true), (0, _defineProperty3["default"])(_classNames2, prefixCls + '-track-' + i, true), _classNames2));
              tracks.push(_react2["default"].createElement(_Track2["default"], {
                className: trackClassName,
                vertical: vertical,
                included: included,
                offset: offsets[i - 1],
                length: offsets[i] - offsets[i - 1],
                key: i
              }));
            }

            var sliderClassName = (0, _classnames2["default"])((_classNames3 = {}, (0, _defineProperty3["default"])(_classNames3, prefixCls, true), (0, _defineProperty3["default"])(_classNames3, prefixCls + '-with-marks', Object.keys(marks).length), (0, _defineProperty3["default"])(_classNames3, prefixCls + '-disabled', disabled), (0, _defineProperty3["default"])(_classNames3, prefixCls + '-vertical', this.props.vertical), (0, _defineProperty3["default"])(_classNames3, className, !!className), _classNames3));

            return _react2["default"].createElement(
              'div', {
                ref: 'slider',
                className: sliderClassName,
                onTouchStart: disabled ? noop : this.onTouchStart,
                onMouseDown: disabled ? noop : this.onMouseDown,
                style: style
              },
              _react2["default"].createElement('div', { className: prefixCls + '-rail' }),
              tracks,
              _react2["default"].createElement(_Steps2["default"], {
                prefixCls: prefixCls,
                vertical: vertical,
                marks: marks,
                dots: dots,
                step: step,
                included: included,
                lowerBound: bounds[0],
                upperBound: bounds[bounds.length - 1],
                max: max,
                min: min
              }),
              handles,
              _react2["default"].createElement(_Marks2["default"], {
                className: prefixCls + '-mark',
                vertical: vertical,
                marks: marks,
                included: included,
                lowerBound: bounds[0],
                upperBound: bounds[bounds.length - 1],
                max: max,
                min: min
              }),
              children
            );
          };

          return Slider;
        }(_react2["default"].Component);

        Slider.propTypes = {
          min: _react2["default"].PropTypes.number,
          max: _react2["default"].PropTypes.number,
          step: _react2["default"].PropTypes.number,
          defaultValue: _react2["default"].PropTypes.oneOfType([_react2["default"].PropTypes.number, _react2["default"].PropTypes.arrayOf(_react2["default"].PropTypes.number)]),
          value: _react2["default"].PropTypes.oneOfType([_react2["default"].PropTypes.number, _react2["default"].PropTypes.arrayOf(_react2["default"].PropTypes.number)]),
          marks: _react2["default"].PropTypes.object,
          included: _react2["default"].PropTypes.bool,
          className: _react2["default"].PropTypes.string,
          prefixCls: _react2["default"].PropTypes.string,
          tooltipPrefixCls: _react2["default"].PropTypes.string,
          disabled: _react2["default"].PropTypes.bool,
          children: _react2["default"].PropTypes.any,
          onBeforeChange: _react2["default"].PropTypes.func,
          onChange: _react2["default"].PropTypes.func,
          onAfterChange: _react2["default"].PropTypes.func,
          handle: _react2["default"].PropTypes.element,
          tipTransitionName: _react2["default"].PropTypes.string,
          tipFormatter: _react2["default"].PropTypes.func,
          dots: _react2["default"].PropTypes.bool,
          range: _react2["default"].PropTypes.oneOfType([_react2["default"].PropTypes.bool, _react2["default"].PropTypes.number]),
          vertical: _react2["default"].PropTypes.bool,
          allowCross: _react2["default"].PropTypes.bool,
          pushable: _react2["default"].PropTypes.oneOfType([_react2["default"].PropTypes.bool, _react2["default"].PropTypes.number]),
          style: _react2["default"].PropTypes.object
        };

        Slider.defaultProps = {
          prefixCls: 'rc-slider',
          className: '',
          tipTransitionName: '',
          min: 0,
          max: 100,
          step: 1,
          marks: {},
          handle: _react2["default"].createElement(_Handle2["default"], null),
          onBeforeChange: noop,
          onChange: noop,
          onAfterChange: noop,
          tipFormatter: function tipFormatter(value) {
            return value;
          },
          included: true,
          disabled: false,
          dots: false,
          range: false,
          vertical: false,
          allowCross: true,
          pushable: false
        };

        exports["default"] = Slider;
        module.exports = exports['default'];

        /***/
      }),
      /* 104 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        exports.__esModule = true;

        var _defineProperty = __webpack_require__(105);

        var _defineProperty2 = _interopRequireDefault(_defineProperty);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        exports.default = function (obj, key, value) {
          if (key in obj) {
            (0, _defineProperty2.default)(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        };

        /***/
      }),
      /* 105 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(106), __esModule: true };

        /***/
      }),
      /* 106 */
      /***/
      (function (module, exports, __webpack_require__) {

        __webpack_require__(107);
        var $Object = __webpack_require__(110).Object;
        module.exports = function defineProperty(it, key, desc) {
          return $Object.defineProperty(it, key, desc);
        };

        /***/
      }),
      /* 107 */
      /***/
      (function (module, exports, __webpack_require__) {

        var $export = __webpack_require__(108);
        // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
        $export($export.S + $export.F * !__webpack_require__(118), 'Object', { defineProperty: __webpack_require__(114).f });

        /***/
      }),
      /* 108 */
      /***/
      (function (module, exports, __webpack_require__) {

        var global = __webpack_require__(109),
          core = __webpack_require__(110),
          ctx = __webpack_require__(111),
          hide = __webpack_require__(113),
          PROTOTYPE = 'prototype';

        var $export = function (type, name, source) {
          var IS_FORCED = type & $export.F,
            IS_GLOBAL = type & $export.G,
            IS_STATIC = type & $export.S,
            IS_PROTO = type & $export.P,
            IS_BIND = type & $export.B,
            IS_WRAP = type & $export.W,
            exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
            expProto = exports[PROTOTYPE],
            target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE],
            key, own, out;
          if (IS_GLOBAL) source = name;
          for (key in source) {
            // contains in native
            own = !IS_FORCED && target && target[key] !== undefined;
            if (own && key in exports) continue;
            // export native or passed
            out = own ? target[key] : source[key];
            // prevent global pollution for namespaces
            exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
              // bind timers to global for call from export context
              :
              IS_BIND && own ? ctx(out, global)
              // wrap global constructors for prevent change them in library
              :
              IS_WRAP && target[key] == out ? (function (C) {
                var F = function (a, b, c) {
                  if (this instanceof C) {
                    switch (arguments.length) {
                    case 0:
                      return new C;
                    case 1:
                      return new C(a);
                    case 2:
                      return new C(a, b);
                    }
                    return new C(a, b, c);
                  }
                  return C.apply(this, arguments);
                };
                F[PROTOTYPE] = C[PROTOTYPE];
                return F;
                // make static versions for prototype methods
              })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
            // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
            if (IS_PROTO) {
              (exports.virtual || (exports.virtual = {}))[key] = out;
              // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
              if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
            }
          }
        };
        // type bitmap
        $export.F = 1; // forced
        $export.G = 2; // global
        $export.S = 4; // static
        $export.P = 8; // proto
        $export.B = 16; // bind
        $export.W = 32; // wrap
        $export.U = 64; // safe
        $export.R = 128; // real proto method for `library` 
        module.exports = $export;

        /***/
      }),
      /* 109 */
      /***/
      (function (module, exports) {

        // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
        var global = module.exports = typeof window != 'undefined' && window.Math == Math ?
          window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
        if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

        /***/
      }),
      /* 110 */
      /***/
      (function (module, exports) {

        var core = module.exports = { version: '2.4.0' };
        if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

        /***/
      }),
      /* 111 */
      /***/
      (function (module, exports, __webpack_require__) {

        // optional / simple context binding
        var aFunction = __webpack_require__(112);
        module.exports = function (fn, that, length) {
          aFunction(fn);
          if (that === undefined) return fn;
          switch (length) {
          case 1:
            return function (a) {
              return fn.call(that, a);
            };
          case 2:
            return function (a, b) {
              return fn.call(that, a, b);
            };
          case 3:
            return function (a, b, c) {
              return fn.call(that, a, b, c);
            };
          }
          return function ( /* ...args */ ) {
            return fn.apply(that, arguments);
          };
        };

        /***/
      }),
      /* 112 */
      /***/
      (function (module, exports) {

        module.exports = function (it) {
          if (typeof it != 'function') throw TypeError(it + ' is not a function!');
          return it;
        };

        /***/
      }),
      /* 113 */
      /***/
      (function (module, exports, __webpack_require__) {

        var dP = __webpack_require__(114),
          createDesc = __webpack_require__(122);
        module.exports = __webpack_require__(118) ? function (object, key, value) {
          return dP.f(object, key, createDesc(1, value));
        } : function (object, key, value) {
          object[key] = value;
          return object;
        };

        /***/
      }),
      /* 114 */
      /***/
      (function (module, exports, __webpack_require__) {

        var anObject = __webpack_require__(115),
          IE8_DOM_DEFINE = __webpack_require__(117),
          toPrimitive = __webpack_require__(121),
          dP = Object.defineProperty;

        exports.f = __webpack_require__(118) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
          anObject(O);
          P = toPrimitive(P, true);
          anObject(Attributes);
          if (IE8_DOM_DEFINE) try {
            return dP(O, P, Attributes);
          } catch (e) { /* empty */ }
          if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
          if ('value' in Attributes) O[P] = Attributes.value;
          return O;
        };

        /***/
      }),
      /* 115 */
      /***/
      (function (module, exports, __webpack_require__) {

        var isObject = __webpack_require__(116);
        module.exports = function (it) {
          if (!isObject(it)) throw TypeError(it + ' is not an object!');
          return it;
        };

        /***/
      }),
      /* 116 */
      /***/
      (function (module, exports) {

        module.exports = function (it) {
          return typeof it === 'object' ? it !== null : typeof it === 'function';
        };

        /***/
      }),
      /* 117 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = !__webpack_require__(118) && !__webpack_require__(119)(function () {
          return Object.defineProperty(__webpack_require__(120)('div'), 'a', { get: function () { return 7; } }).a != 7;
        });

        /***/
      }),
      /* 118 */
      /***/
      (function (module, exports, __webpack_require__) {

        // Thank's IE8 for his funny defineProperty
        module.exports = !__webpack_require__(119)(function () {
          return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
        });

        /***/
      }),
      /* 119 */
      /***/
      (function (module, exports) {

        module.exports = function (exec) {
          try {
            return !!exec();
          } catch (e) {
            return true;
          }
        };

        /***/
      }),
      /* 120 */
      /***/
      (function (module, exports, __webpack_require__) {

        var isObject = __webpack_require__(116),
          document = __webpack_require__(109).document
          // in old IE typeof document.createElement is 'object'
          ,
          is = isObject(document) && isObject(document.createElement);
        module.exports = function (it) {
          return is ? document.createElement(it) : {};
        };

        /***/
      }),
      /* 121 */
      /***/
      (function (module, exports, __webpack_require__) {

        // 7.1.1 ToPrimitive(input [, PreferredType])
        var isObject = __webpack_require__(116);
        // instead of the ES6 spec version, we didn't implement @@toPrimitive case
        // and the second argument - flag - preferred type is a string
        module.exports = function (it, S) {
          if (!isObject(it)) return it;
          var fn, val;
          if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
          if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
          if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
          throw TypeError("Can't convert object to primitive value");
        };

        /***/
      }),
      /* 122 */
      /***/
      (function (module, exports) {

        module.exports = function (bitmap, value) {
          return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value
          };
        };

        /***/
      }),
      /* 123 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        exports.__esModule = true;

        var _from = __webpack_require__(124);

        var _from2 = _interopRequireDefault(_from);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        exports.default = function (arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }

            return arr2;
          } else {
            return (0, _from2.default)(arr);
          }
        };

        /***/
      }),
      /* 124 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(125), __esModule: true };

        /***/
      }),
      /* 125 */
      /***/
      (function (module, exports, __webpack_require__) {

        __webpack_require__(126);
        __webpack_require__(155);
        module.exports = __webpack_require__(110).Array.from;

        /***/
      }),
      /* 126 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';
        var $at = __webpack_require__(127)(true);

        // 21.1.3.27 String.prototype[@@iterator]()
        __webpack_require__(130)(String, 'String', function (iterated) {
          this._t = String(iterated); // target
          this._i = 0; // next index
          // 21.1.5.2.1 %StringIteratorPrototype%.next()
        }, function () {
          var O = this._t,
            index = this._i,
            point;
          if (index >= O.length) return { value: undefined, done: true };
          point = $at(O, index);
          this._i += point.length;
          return { value: point, done: false };
        });

        /***/
      }),
      /* 127 */
      /***/
      (function (module, exports, __webpack_require__) {

        var toInteger = __webpack_require__(128),
          defined = __webpack_require__(129);
        // true  -> String#at
        // false -> String#codePointAt
        module.exports = function (TO_STRING) {
          return function (that, pos) {
            var s = String(defined(that)),
              i = toInteger(pos),
              l = s.length,
              a, b;
            if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
            a = s.charCodeAt(i);
            return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ?
              TO_STRING ? s.charAt(i) : a :
              TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
          };
        };

        /***/
      }),
      /* 128 */
      /***/
      (function (module, exports) {

        // 7.1.4 ToInteger
        var ceil = Math.ceil,
          floor = Math.floor;
        module.exports = function (it) {
          return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
        };

        /***/
      }),
      /* 129 */
      /***/
      (function (module, exports) {

        // 7.2.1 RequireObjectCoercible(argument)
        module.exports = function (it) {
          if (it == undefined) throw TypeError("Can't call method on  " + it);
          return it;
        };

        /***/
      }),
      /* 130 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';
        var LIBRARY = __webpack_require__(131),
          $export = __webpack_require__(108),
          redefine = __webpack_require__(132),
          hide = __webpack_require__(113),
          has = __webpack_require__(133),
          Iterators = __webpack_require__(134),
          $iterCreate = __webpack_require__(135),
          setToStringTag = __webpack_require__(151),
          getPrototypeOf = __webpack_require__(153),
          ITERATOR = __webpack_require__(152)('iterator'),
          BUGGY = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
          ,
          FF_ITERATOR = '@@iterator',
          KEYS = 'keys',
          VALUES = 'values';

        var returnThis = function () { return this; };

        module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
          $iterCreate(Constructor, NAME, next);
          var getMethod = function (kind) {
            if (!BUGGY && kind in proto) return proto[kind];
            switch (kind) {
            case KEYS:
              return function keys() { return new Constructor(this, kind); };
            case VALUES:
              return function values() { return new Constructor(this, kind); };
            }
            return function entries() { return new Constructor(this, kind); };
          };
          var TAG = NAME + ' Iterator',
            DEF_VALUES = DEFAULT == VALUES,
            VALUES_BUG = false,
            proto = Base.prototype,
            $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
            $default = $native || getMethod(DEFAULT),
            $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined,
            $anyNative = NAME == 'Array' ? proto.entries || $native : $native,
            methods, key, IteratorPrototype;
          // Fix native
          if ($anyNative) {
            IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
            if (IteratorPrototype !== Object.prototype) {
              // Set @@toStringTag to native iterators
              setToStringTag(IteratorPrototype, TAG, true);
              // fix for some old engines
              if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
            }
          }
          // fix Array#{values, @@iterator}.name in V8 / FF
          if (DEF_VALUES && $native && $native.name !== VALUES) {
            VALUES_BUG = true;
            $default = function values() { return $native.call(this); };
          }
          // Define iterator
          if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
            hide(proto, ITERATOR, $default);
          }
          // Plug for library
          Iterators[NAME] = $default;
          Iterators[TAG] = returnThis;
          if (DEFAULT) {
            methods = {
              values: DEF_VALUES ? $default : getMethod(VALUES),
              keys: IS_SET ? $default : getMethod(KEYS),
              entries: $entries
            };
            if (FORCED)
              for (key in methods) {
                if (!(key in proto)) redefine(proto, key, methods[key]);
              } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
          }
          return methods;
        };

        /***/
      }),
      /* 131 */
      /***/
      (function (module, exports) {

        module.exports = true;

        /***/
      }),
      /* 132 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(113);

        /***/
      }),
      /* 133 */
      /***/
      (function (module, exports) {

        var hasOwnProperty = {}.hasOwnProperty;
        module.exports = function (it, key) {
          return hasOwnProperty.call(it, key);
        };

        /***/
      }),
      /* 134 */
      /***/
      (function (module, exports) {

        module.exports = {};

        /***/
      }),
      /* 135 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';
        var create = __webpack_require__(136),
          descriptor = __webpack_require__(122),
          setToStringTag = __webpack_require__(151),
          IteratorPrototype = {};

        // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
        __webpack_require__(113)(IteratorPrototype, __webpack_require__(152)('iterator'), function () { return this; });

        module.exports = function (Constructor, NAME, next) {
          Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
          setToStringTag(Constructor, NAME + ' Iterator');
        };

        /***/
      }),
      /* 136 */
      /***/
      (function (module, exports, __webpack_require__) {

        // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
        var anObject = __webpack_require__(115),
          dPs = __webpack_require__(137),
          enumBugKeys = __webpack_require__(149),
          IE_PROTO = __webpack_require__(146)('IE_PROTO'),
          Empty = function () { /* empty */ },
          PROTOTYPE = 'prototype';

        // Create object with fake `null` prototype: use iframe Object with cleared prototype
        var createDict = function () {
          // Thrash, waste and sodomy: IE GC bug
          var iframe = __webpack_require__(120)('iframe'),
            i = enumBugKeys.length,
            lt = '<',
            gt = '>',
            iframeDocument;
          iframe.style.display = 'none';
          __webpack_require__(150).appendChild(iframe);
          iframe.src = 'javascript:'; // eslint-disable-line no-script-url
          // createDict = iframe.contentWindow.Object;
          // html.removeChild(iframe);
          iframeDocument = iframe.contentWindow.document;
          iframeDocument.open();
          iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
          iframeDocument.close();
          createDict = iframeDocument.F;
          while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
          return createDict();
        };

        module.exports = Object.create || function create(O, Properties) {
          var result;
          if (O !== null) {
            Empty[PROTOTYPE] = anObject(O);
            result = new Empty;
            Empty[PROTOTYPE] = null;
            // add "__proto__" for Object.getPrototypeOf polyfill
            result[IE_PROTO] = O;
          } else result = createDict();
          return Properties === undefined ? result : dPs(result, Properties);
        };


        /***/
      }),
      /* 137 */
      /***/
      (function (module, exports, __webpack_require__) {

        var dP = __webpack_require__(114),
          anObject = __webpack_require__(115),
          getKeys = __webpack_require__(138);

        module.exports = __webpack_require__(118) ? Object.defineProperties : function defineProperties(O, Properties) {
          anObject(O);
          var keys = getKeys(Properties),
            length = keys.length,
            i = 0,
            P;
          while (length > i) dP.f(O, P = keys[i++], Properties[P]);
          return O;
        };

        /***/
      }),
      /* 138 */
      /***/
      (function (module, exports, __webpack_require__) {

        // 19.1.2.14 / 15.2.3.14 Object.keys(O)
        var $keys = __webpack_require__(139),
          enumBugKeys = __webpack_require__(149);

        module.exports = Object.keys || function keys(O) {
          return $keys(O, enumBugKeys);
        };

        /***/
      }),
      /* 139 */
      /***/
      (function (module, exports, __webpack_require__) {

        var has = __webpack_require__(133),
          toIObject = __webpack_require__(140),
          arrayIndexOf = __webpack_require__(143)(false),
          IE_PROTO = __webpack_require__(146)('IE_PROTO');

        module.exports = function (object, names) {
          var O = toIObject(object),
            i = 0,
            result = [],
            key;
          for (key in O)
            if (key != IE_PROTO) has(O, key) && result.push(key);
            // Don't enum bug & hidden keys
          while (names.length > i)
            if (has(O, key = names[i++])) {
              ~arrayIndexOf(result, key) || result.push(key);
            }
          return result;
        };

        /***/
      }),
      /* 140 */
      /***/
      (function (module, exports, __webpack_require__) {

        // to indexed object, toObject with fallback for non-array-like ES3 strings
        var IObject = __webpack_require__(141),
          defined = __webpack_require__(129);
        module.exports = function (it) {
          return IObject(defined(it));
        };

        /***/
      }),
      /* 141 */
      /***/
      (function (module, exports, __webpack_require__) {

        // fallback for non-array-like ES3 and non-enumerable old V8 strings
        var cof = __webpack_require__(142);
        module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
          return cof(it) == 'String' ? it.split('') : Object(it);
        };

        /***/
      }),
      /* 142 */
      /***/
      (function (module, exports) {

        var toString = {}.toString;

        module.exports = function (it) {
          return toString.call(it).slice(8, -1);
        };

        /***/
      }),
      /* 143 */
      /***/
      (function (module, exports, __webpack_require__) {

        // false -> Array#indexOf
        // true  -> Array#includes
        var toIObject = __webpack_require__(140),
          toLength = __webpack_require__(144),
          toIndex = __webpack_require__(145);
        module.exports = function (IS_INCLUDES) {
          return function ($this, el, fromIndex) {
            var O = toIObject($this),
              length = toLength(O.length),
              index = toIndex(fromIndex, length),
              value;
            // Array#includes uses SameValueZero equality algorithm
            if (IS_INCLUDES && el != el)
              while (length > index) {
                value = O[index++];
                if (value != value) return true;
                // Array#toIndex ignores holes, Array#includes - not
              } else
                for (; length > index; index++)
                  if (IS_INCLUDES || index in O) {
                    if (O[index] === el) return IS_INCLUDES || index || 0;
                  }
            return !IS_INCLUDES && -1;
          };
        };

        /***/
      }),
      /* 144 */
      /***/
      (function (module, exports, __webpack_require__) {

        // 7.1.15 ToLength
        var toInteger = __webpack_require__(128),
          min = Math.min;
        module.exports = function (it) {
          return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
        };

        /***/
      }),
      /* 145 */
      /***/
      (function (module, exports, __webpack_require__) {

        var toInteger = __webpack_require__(128),
          max = Math.max,
          min = Math.min;
        module.exports = function (index, length) {
          index = toInteger(index);
          return index < 0 ? max(index + length, 0) : min(index, length);
        };

        /***/
      }),
      /* 146 */
      /***/
      (function (module, exports, __webpack_require__) {

        var shared = __webpack_require__(147)('keys'),
          uid = __webpack_require__(148);
        module.exports = function (key) {
          return shared[key] || (shared[key] = uid(key));
        };

        /***/
      }),
      /* 147 */
      /***/
      (function (module, exports, __webpack_require__) {

        var global = __webpack_require__(109),
          SHARED = '__core-js_shared__',
          store = global[SHARED] || (global[SHARED] = {});
        module.exports = function (key) {
          return store[key] || (store[key] = {});
        };

        /***/
      }),
      /* 148 */
      /***/
      (function (module, exports) {

        var id = 0,
          px = Math.random();
        module.exports = function (key) {
          return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
        };

        /***/
      }),
      /* 149 */
      /***/
      (function (module, exports) {

        // IE 8- don't enum bug keys
        module.exports = (
          'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
        ).split(',');

        /***/
      }),
      /* 150 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(109).document && document.documentElement;

        /***/
      }),
      /* 151 */
      /***/
      (function (module, exports, __webpack_require__) {

        var def = __webpack_require__(114).f,
          has = __webpack_require__(133),
          TAG = __webpack_require__(152)('toStringTag');

        module.exports = function (it, tag, stat) {
          if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
        };

        /***/
      }),
      /* 152 */
      /***/
      (function (module, exports, __webpack_require__) {

        var store = __webpack_require__(147)('wks'),
          uid = __webpack_require__(148),
          Symbol = __webpack_require__(109).Symbol,
          USE_SYMBOL = typeof Symbol == 'function';

        var $exports = module.exports = function (name) {
          return store[name] || (store[name] =
            USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
        };

        $exports.store = store;

        /***/
      }),
      /* 153 */
      /***/
      (function (module, exports, __webpack_require__) {

        // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
        var has = __webpack_require__(133),
          toObject = __webpack_require__(154),
          IE_PROTO = __webpack_require__(146)('IE_PROTO'),
          ObjectProto = Object.prototype;

        module.exports = Object.getPrototypeOf || function (O) {
          O = toObject(O);
          if (has(O, IE_PROTO)) return O[IE_PROTO];
          if (typeof O.constructor == 'function' && O instanceof O.constructor) {
            return O.constructor.prototype;
          }
          return O instanceof Object ? ObjectProto : null;
        };

        /***/
      }),
      /* 154 */
      /***/
      (function (module, exports, __webpack_require__) {

        // 7.1.13 ToObject(argument)
        var defined = __webpack_require__(129);
        module.exports = function (it) {
          return Object(defined(it));
        };

        /***/
      }),
      /* 155 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';
        var ctx = __webpack_require__(111),
          $export = __webpack_require__(108),
          toObject = __webpack_require__(154),
          call = __webpack_require__(156),
          isArrayIter = __webpack_require__(157),
          toLength = __webpack_require__(144),
          createProperty = __webpack_require__(158),
          getIterFn = __webpack_require__(159);

        $export($export.S + $export.F * !__webpack_require__(161)(function (iter) { Array.from(iter); }), 'Array', {
          // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
          from: function from(arrayLike /*, mapfn = undefined, thisArg = undefined*/ ) {
            var O = toObject(arrayLike),
              C = typeof this == 'function' ? this : Array,
              aLen = arguments.length,
              mapfn = aLen > 1 ? arguments[1] : undefined,
              mapping = mapfn !== undefined,
              index = 0,
              iterFn = getIterFn(O),
              length, result, step, iterator;
            if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
            // if object isn't iterable or it's array with default iterator - use simple case
            if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
              for (iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++) {
                createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
              }
            } else {
              length = toLength(O.length);
              for (result = new C(length); length > index; index++) {
                createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
              }
            }
            result.length = index;
            return result;
          }
        });


        /***/
      }),
      /* 156 */
      /***/
      (function (module, exports, __webpack_require__) {

        // call something on iterator step with safe closing on error
        var anObject = __webpack_require__(115);
        module.exports = function (iterator, fn, value, entries) {
          try {
            return entries ? fn(anObject(value)[0], value[1]) : fn(value);
            // 7.4.6 IteratorClose(iterator, completion)
          } catch (e) {
            var ret = iterator['return'];
            if (ret !== undefined) anObject(ret.call(iterator));
            throw e;
          }
        };

        /***/
      }),
      /* 157 */
      /***/
      (function (module, exports, __webpack_require__) {

        // check on default Array iterator
        var Iterators = __webpack_require__(134),
          ITERATOR = __webpack_require__(152)('iterator'),
          ArrayProto = Array.prototype;

        module.exports = function (it) {
          return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
        };

        /***/
      }),
      /* 158 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';
        var $defineProperty = __webpack_require__(114),
          createDesc = __webpack_require__(122);

        module.exports = function (object, index, value) {
          if (index in object) $defineProperty.f(object, index, createDesc(0, value));
          else object[index] = value;
        };

        /***/
      }),
      /* 159 */
      /***/
      (function (module, exports, __webpack_require__) {

        var classof = __webpack_require__(160),
          ITERATOR = __webpack_require__(152)('iterator'),
          Iterators = __webpack_require__(134);
        module.exports = __webpack_require__(110).getIteratorMethod = function (it) {
          if (it != undefined) return it[ITERATOR] ||
            it['@@iterator'] ||
            Iterators[classof(it)];
        };

        /***/
      }),
      /* 160 */
      /***/
      (function (module, exports, __webpack_require__) {

        // getting tag from 19.1.3.6 Object.prototype.toString()
        var cof = __webpack_require__(142),
          TAG = __webpack_require__(152)('toStringTag')
          // ES3 wrong here
          ,
          ARG = cof(function () { return arguments; }()) == 'Arguments';

        // fallback for IE11 Script Access Denied error
        var tryGet = function (it, key) {
          try {
            return it[key];
          } catch (e) { /* empty */ }
        };

        module.exports = function (it) {
          var O, T, B;
          return it === undefined ? 'Undefined' : it === null ? 'Null'
            // @@toStringTag case
            :
            typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
            // builtinTag case
            :
            ARG ? cof(O)
            // ES3 arguments fallback
            :
            (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
        };

        /***/
      }),
      /* 161 */
      /***/
      (function (module, exports, __webpack_require__) {

        var ITERATOR = __webpack_require__(152)('iterator'),
          SAFE_CLOSING = false;

        try {
          var riter = [7][ITERATOR]();
          riter['return'] = function () { SAFE_CLOSING = true; };
          Array.from(riter, function () { throw 2; });
        } catch (e) { /* empty */ }

        module.exports = function (exec, skipClosing) {
          if (!skipClosing && !SAFE_CLOSING) return false;
          var safe = false;
          try {
            var arr = [7],
              iter = arr[ITERATOR]();
            iter.next = function () { return { done: safe = true }; };
            arr[ITERATOR] = function () { return iter; };
            exec(arr);
          } catch (e) { /* empty */ }
          return safe;
        };

        /***/
      }),
      /* 162 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        exports.__esModule = true;

        var _assign = __webpack_require__(163);

        var _assign2 = _interopRequireDefault(_assign);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        exports.default = _assign2.default || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        /***/
      }),
      /* 163 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(164), __esModule: true };

        /***/
      }),
      /* 164 */
      /***/
      (function (module, exports, __webpack_require__) {

        __webpack_require__(165);
        module.exports = __webpack_require__(110).Object.assign;

        /***/
      }),
      /* 165 */
      /***/
      (function (module, exports, __webpack_require__) {

        // 19.1.3.1 Object.assign(target, source)
        var $export = __webpack_require__(108);

        $export($export.S + $export.F, 'Object', { assign: __webpack_require__(166) });

        /***/
      }),
      /* 166 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';
        // 19.1.2.1 Object.assign(target, source, ...)
        var getKeys = __webpack_require__(138),
          gOPS = __webpack_require__(167),
          pIE = __webpack_require__(168),
          toObject = __webpack_require__(154),
          IObject = __webpack_require__(141),
          $assign = Object.assign;

        // should work with symbols and should have deterministic property order (V8 bug)
        module.exports = !$assign || __webpack_require__(119)(function () {
          var A = {},
            B = {},
            S = Symbol(),
            K = 'abcdefghijklmnopqrst';
          A[S] = 7;
          K.split('').forEach(function (k) { B[k] = k; });
          return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
        }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
          var T = toObject(target),
            aLen = arguments.length,
            index = 1,
            getSymbols = gOPS.f,
            isEnum = pIE.f;
          while (aLen > index) {
            var S = IObject(arguments[index++]),
              keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S),
              length = keys.length,
              j = 0,
              key;
            while (length > j)
              if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
          }
          return T;
        } : $assign;

        /***/
      }),
      /* 167 */
      /***/
      (function (module, exports) {

        exports.f = Object.getOwnPropertySymbols;

        /***/
      }),
      /* 168 */
      /***/
      (function (module, exports) {

        exports.f = {}.propertyIsEnumerable;

        /***/
      }),
      /* 169 */
      /***/
      (function (module, exports) {

        "use strict";

        exports.__esModule = true;

        exports.default = function (instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        };

        /***/
      }),
      /* 170 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        exports.__esModule = true;

        var _typeof2 = __webpack_require__(171);

        var _typeof3 = _interopRequireDefault(_typeof2);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        exports.default = function (self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
        };

        /***/
      }),
      /* 171 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        exports.__esModule = true;

        var _iterator = __webpack_require__(172);

        var _iterator2 = _interopRequireDefault(_iterator);

        var _symbol = __webpack_require__(179);

        var _symbol2 = _interopRequireDefault(_symbol);

        var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
          return typeof obj === "undefined" ? "undefined" : _typeof(obj);
        } : function (obj) {
          return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
        };

        /***/
      }),
      /* 172 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(173), __esModule: true };

        /***/
      }),
      /* 173 */
      /***/
      (function (module, exports, __webpack_require__) {

        __webpack_require__(126);
        __webpack_require__(174);
        module.exports = __webpack_require__(178).f('iterator');

        /***/
      }),
      /* 174 */
      /***/
      (function (module, exports, __webpack_require__) {

        __webpack_require__(175);
        var global = __webpack_require__(109),
          hide = __webpack_require__(113),
          Iterators = __webpack_require__(134),
          TO_STRING_TAG = __webpack_require__(152)('toStringTag');

        for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++) {
          var NAME = collections[i],
            Collection = global[NAME],
            proto = Collection && Collection.prototype;
          if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
          Iterators[NAME] = Iterators.Array;
        }

        /***/
      }),
      /* 175 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';
        var addToUnscopables = __webpack_require__(176),
          step = __webpack_require__(177),
          Iterators = __webpack_require__(134),
          toIObject = __webpack_require__(140);

        // 22.1.3.4 Array.prototype.entries()
        // 22.1.3.13 Array.prototype.keys()
        // 22.1.3.29 Array.prototype.values()
        // 22.1.3.30 Array.prototype[@@iterator]()
        module.exports = __webpack_require__(130)(Array, 'Array', function (iterated, kind) {
          this._t = toIObject(iterated); // target
          this._i = 0; // next index
          this._k = kind; // kind
          // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
        }, function () {
          var O = this._t,
            kind = this._k,
            index = this._i++;
          if (!O || index >= O.length) {
            this._t = undefined;
            return step(1);
          }
          if (kind == 'keys') return step(0, index);
          if (kind == 'values') return step(0, O[index]);
          return step(0, [index, O[index]]);
        }, 'values');

        // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
        Iterators.Arguments = Iterators.Array;

        addToUnscopables('keys');
        addToUnscopables('values');
        addToUnscopables('entries');

        /***/
      }),
      /* 176 */
      /***/
      (function (module, exports) {

        module.exports = function () { /* empty */ };

        /***/
      }),
      /* 177 */
      /***/
      (function (module, exports) {

        module.exports = function (done, value) {
          return { value: value, done: !!done };
        };

        /***/
      }),
      /* 178 */
      /***/
      (function (module, exports, __webpack_require__) {

        exports.f = __webpack_require__(152);

        /***/
      }),
      /* 179 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(180), __esModule: true };

        /***/
      }),
      /* 180 */
      /***/
      (function (module, exports, __webpack_require__) {

        __webpack_require__(181);
        __webpack_require__(190);
        __webpack_require__(191);
        __webpack_require__(192);
        module.exports = __webpack_require__(110).Symbol;

        /***/
      }),
      /* 181 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';
        // ECMAScript 6 symbols shim
        var global = __webpack_require__(109),
          has = __webpack_require__(133),
          DESCRIPTORS = __webpack_require__(118),
          $export = __webpack_require__(108),
          redefine = __webpack_require__(132),
          META = __webpack_require__(182).KEY,
          $fails = __webpack_require__(119),
          shared = __webpack_require__(147),
          setToStringTag = __webpack_require__(151),
          uid = __webpack_require__(148),
          wks = __webpack_require__(152),
          wksExt = __webpack_require__(178),
          wksDefine = __webpack_require__(183),
          keyOf = __webpack_require__(184),
          enumKeys = __webpack_require__(185),
          isArray = __webpack_require__(186),
          anObject = __webpack_require__(115),
          toIObject = __webpack_require__(140),
          toPrimitive = __webpack_require__(121),
          createDesc = __webpack_require__(122),
          _create = __webpack_require__(136),
          gOPNExt = __webpack_require__(187),
          $GOPD = __webpack_require__(189),
          $DP = __webpack_require__(114),
          $keys = __webpack_require__(138),
          gOPD = $GOPD.f,
          dP = $DP.f,
          gOPN = gOPNExt.f,
          $Symbol = global.Symbol,
          $JSON = global.JSON,
          _stringify = $JSON && $JSON.stringify,
          PROTOTYPE = 'prototype',
          HIDDEN = wks('_hidden'),
          TO_PRIMITIVE = wks('toPrimitive'),
          isEnum = {}.propertyIsEnumerable,
          SymbolRegistry = shared('symbol-registry'),
          AllSymbols = shared('symbols'),
          OPSymbols = shared('op-symbols'),
          ObjectProto = Object[PROTOTYPE],
          USE_NATIVE = typeof $Symbol == 'function',
          QObject = global.QObject;
        // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
        var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

        // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
        var setSymbolDesc = DESCRIPTORS && $fails(function () {
          return _create(dP({}, 'a', {
            get: function () { return dP(this, 'a', { value: 7 }).a; }
          })).a != 7;
        }) ? function (it, key, D) {
          var protoDesc = gOPD(ObjectProto, key);
          if (protoDesc) delete ObjectProto[key];
          dP(it, key, D);
          if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
        } : dP;

        var wrap = function (tag) {
          var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
          sym._k = tag;
          return sym;
        };

        var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
          return typeof it == 'symbol';
        } : function (it) {
          return it instanceof $Symbol;
        };

        var $defineProperty = function defineProperty(it, key, D) {
          if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
          anObject(it);
          key = toPrimitive(key, true);
          anObject(D);
          if (has(AllSymbols, key)) {
            if (!D.enumerable) {
              if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
              it[HIDDEN][key] = true;
            } else {
              if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
              D = _create(D, { enumerable: createDesc(0, false) });
            }
            return setSymbolDesc(it, key, D);
          }
          return dP(it, key, D);
        };
        var $defineProperties = function defineProperties(it, P) {
          anObject(it);
          var keys = enumKeys(P = toIObject(P)),
            i = 0,
            l = keys.length,
            key;
          while (l > i) $defineProperty(it, key = keys[i++], P[key]);
          return it;
        };
        var $create = function create(it, P) {
          return P === undefined ? _create(it) : $defineProperties(_create(it), P);
        };
        var $propertyIsEnumerable = function propertyIsEnumerable(key) {
          var E = isEnum.call(this, key = toPrimitive(key, true));
          if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
          return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
        };
        var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
          it = toIObject(it);
          key = toPrimitive(key, true);
          if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
          var D = gOPD(it, key);
          if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
          return D;
        };
        var $getOwnPropertyNames = function getOwnPropertyNames(it) {
          var names = gOPN(toIObject(it)),
            result = [],
            i = 0,
            key;
          while (names.length > i) {
            if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
          }
          return result;
        };
        var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
          var IS_OP = it === ObjectProto,
            names = gOPN(IS_OP ? OPSymbols : toIObject(it)),
            result = [],
            i = 0,
            key;
          while (names.length > i) {
            if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
          }
          return result;
        };

        // 19.4.1.1 Symbol([description])
        if (!USE_NATIVE) {
          $Symbol = function Symbol() {
            if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
            var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
            var $set = function (value) {
              if (this === ObjectProto) $set.call(OPSymbols, value);
              if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
              setSymbolDesc(this, tag, createDesc(1, value));
            };
            if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
            return wrap(tag);
          };
          redefine($Symbol[PROTOTYPE], 'toString', function toString() {
            return this._k;
          });

          $GOPD.f = $getOwnPropertyDescriptor;
          $DP.f = $defineProperty;
          __webpack_require__(188).f = gOPNExt.f = $getOwnPropertyNames;
          __webpack_require__(168).f = $propertyIsEnumerable;
          __webpack_require__(167).f = $getOwnPropertySymbols;

          if (DESCRIPTORS && !__webpack_require__(131)) {
            redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
          }

          wksExt.f = function (name) {
            return wrap(wks(name));
          }
        }

        $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

        for (var symbols = (
            // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
            'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
          ).split(','), i = 0; symbols.length > i;) wks(symbols[i++]);

        for (var symbols = $keys(wks.store), i = 0; symbols.length > i;) wksDefine(symbols[i++]);

        $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
          // 19.4.2.1 Symbol.for(key)
          'for': function (key) {
            return has(SymbolRegistry, key += '') ?
              SymbolRegistry[key] :
              SymbolRegistry[key] = $Symbol(key);
          },
          // 19.4.2.5 Symbol.keyFor(sym)
          keyFor: function keyFor(key) {
            if (isSymbol(key)) return keyOf(SymbolRegistry, key);
            throw TypeError(key + ' is not a symbol!');
          },
          useSetter: function () { setter = true; },
          useSimple: function () { setter = false; }
        });

        $export($export.S + $export.F * !USE_NATIVE, 'Object', {
          // 19.1.2.2 Object.create(O [, Properties])
          create: $create,
          // 19.1.2.4 Object.defineProperty(O, P, Attributes)
          defineProperty: $defineProperty,
          // 19.1.2.3 Object.defineProperties(O, Properties)
          defineProperties: $defineProperties,
          // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
          getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
          // 19.1.2.7 Object.getOwnPropertyNames(O)
          getOwnPropertyNames: $getOwnPropertyNames,
          // 19.1.2.8 Object.getOwnPropertySymbols(O)
          getOwnPropertySymbols: $getOwnPropertySymbols
        });

        // 24.3.2 JSON.stringify(value [, replacer [, space]])
        $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
          var S = $Symbol();
          // MS Edge converts symbol values to JSON as {}
          // WebKit converts symbol values to JSON as null
          // V8 throws on boxed symbols
          return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
        })), 'JSON', {
          stringify: function stringify(it) {
            if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
            var args = [it],
              i = 1,
              replacer, $replacer;
            while (arguments.length > i) args.push(arguments[i++]);
            replacer = args[1];
            if (typeof replacer == 'function') $replacer = replacer;
            if ($replacer || !isArray(replacer)) replacer = function (key, value) {
              if ($replacer) value = $replacer.call(this, key, value);
              if (!isSymbol(value)) return value;
            };
            args[1] = replacer;
            return _stringify.apply($JSON, args);
          }
        });

        // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
        $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(113)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
        // 19.4.3.5 Symbol.prototype[@@toStringTag]
        setToStringTag($Symbol, 'Symbol');
        // 20.2.1.9 Math[@@toStringTag]
        setToStringTag(Math, 'Math', true);
        // 24.3.3 JSON[@@toStringTag]
        setToStringTag(global.JSON, 'JSON', true);

        /***/
      }),
      /* 182 */
      /***/
      (function (module, exports, __webpack_require__) {

        var META = __webpack_require__(148)('meta'),
          isObject = __webpack_require__(116),
          has = __webpack_require__(133),
          setDesc = __webpack_require__(114).f,
          id = 0;
        var isExtensible = Object.isExtensible || function () {
          return true;
        };
        var FREEZE = !__webpack_require__(119)(function () {
          return isExtensible(Object.preventExtensions({}));
        });
        var setMeta = function (it) {
          setDesc(it, META, {
            value: {
              i: 'O' + ++id, // object ID
              w: {} // weak collections IDs
            }
          });
        };
        var fastKey = function (it, create) {
          // return primitive with prefix
          if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
          if (!has(it, META)) {
            // can't set metadata to uncaught frozen object
            if (!isExtensible(it)) return 'F';
            // not necessary to add metadata
            if (!create) return 'E';
            // add missing metadata
            setMeta(it);
            // return object ID
          }
          return it[META].i;
        };
        var getWeak = function (it, create) {
          if (!has(it, META)) {
            // can't set metadata to uncaught frozen object
            if (!isExtensible(it)) return true;
            // not necessary to add metadata
            if (!create) return false;
            // add missing metadata
            setMeta(it);
            // return hash weak collections IDs
          }
          return it[META].w;
        };
        // add metadata on freeze-family methods calling
        var onFreeze = function (it) {
          if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
          return it;
        };
        var meta = module.exports = {
          KEY: META,
          NEED: false,
          fastKey: fastKey,
          getWeak: getWeak,
          onFreeze: onFreeze
        };

        /***/
      }),
      /* 183 */
      /***/
      (function (module, exports, __webpack_require__) {

        var global = __webpack_require__(109),
          core = __webpack_require__(110),
          LIBRARY = __webpack_require__(131),
          wksExt = __webpack_require__(178),
          defineProperty = __webpack_require__(114).f;
        module.exports = function (name) {
          var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
          if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
        };

        /***/
      }),
      /* 184 */
      /***/
      (function (module, exports, __webpack_require__) {

        var getKeys = __webpack_require__(138),
          toIObject = __webpack_require__(140);
        module.exports = function (object, el) {
          var O = toIObject(object),
            keys = getKeys(O),
            length = keys.length,
            index = 0,
            key;
          while (length > index)
            if (O[key = keys[index++]] === el) return key;
        };

        /***/
      }),
      /* 185 */
      /***/
      (function (module, exports, __webpack_require__) {

        // all enumerable object keys, includes symbols
        var getKeys = __webpack_require__(138),
          gOPS = __webpack_require__(167),
          pIE = __webpack_require__(168);
        module.exports = function (it) {
          var result = getKeys(it),
            getSymbols = gOPS.f;
          if (getSymbols) {
            var symbols = getSymbols(it),
              isEnum = pIE.f,
              i = 0,
              key;
            while (symbols.length > i)
              if (isEnum.call(it, key = symbols[i++])) result.push(key);
          }
          return result;
        };

        /***/
      }),
      /* 186 */
      /***/
      (function (module, exports, __webpack_require__) {

        // 7.2.2 IsArray(argument)
        var cof = __webpack_require__(142);
        module.exports = Array.isArray || function isArray(arg) {
          return cof(arg) == 'Array';
        };

        /***/
      }),
      /* 187 */
      /***/
      (function (module, exports, __webpack_require__) {

        // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
        var toIObject = __webpack_require__(140),
          gOPN = __webpack_require__(188).f,
          toString = {}.toString;

        var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ?
          Object.getOwnPropertyNames(window) : [];

        var getWindowNames = function (it) {
          try {
            return gOPN(it);
          } catch (e) {
            return windowNames.slice();
          }
        };

        module.exports.f = function getOwnPropertyNames(it) {
          return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
        };


        /***/
      }),
      /* 188 */
      /***/
      (function (module, exports, __webpack_require__) {

        // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
        var $keys = __webpack_require__(139),
          hiddenKeys = __webpack_require__(149).concat('length', 'prototype');

        exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
          return $keys(O, hiddenKeys);
        };

        /***/
      }),
      /* 189 */
      /***/
      (function (module, exports, __webpack_require__) {

        var pIE = __webpack_require__(168),
          createDesc = __webpack_require__(122),
          toIObject = __webpack_require__(140),
          toPrimitive = __webpack_require__(121),
          has = __webpack_require__(133),
          IE8_DOM_DEFINE = __webpack_require__(117),
          gOPD = Object.getOwnPropertyDescriptor;

        exports.f = __webpack_require__(118) ? gOPD : function getOwnPropertyDescriptor(O, P) {
          O = toIObject(O);
          P = toPrimitive(P, true);
          if (IE8_DOM_DEFINE) try {
            return gOPD(O, P);
          } catch (e) { /* empty */ }
          if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
        };

        /***/
      }),
      /* 190 */
      /***/
      (function (module, exports) {



        /***/
      }),
      /* 191 */
      /***/
      (function (module, exports, __webpack_require__) {

        __webpack_require__(183)('asyncIterator');

        /***/
      }),
      /* 192 */
      /***/
      (function (module, exports, __webpack_require__) {

        __webpack_require__(183)('observable');

        /***/
      }),
      /* 193 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        exports.__esModule = true;

        var _setPrototypeOf = __webpack_require__(194);

        var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

        var _create = __webpack_require__(198);

        var _create2 = _interopRequireDefault(_create);

        var _typeof2 = __webpack_require__(171);

        var _typeof3 = _interopRequireDefault(_typeof2);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        exports.default = function (subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
          }

          subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
        };

        /***/
      }),
      /* 194 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(195), __esModule: true };

        /***/
      }),
      /* 195 */
      /***/
      (function (module, exports, __webpack_require__) {

        __webpack_require__(196);
        module.exports = __webpack_require__(110).Object.setPrototypeOf;

        /***/
      }),
      /* 196 */
      /***/
      (function (module, exports, __webpack_require__) {

        // 19.1.3.19 Object.setPrototypeOf(O, proto)
        var $export = __webpack_require__(108);
        $export($export.S, 'Object', { setPrototypeOf: __webpack_require__(197).set });

        /***/
      }),
      /* 197 */
      /***/
      (function (module, exports, __webpack_require__) {

        // Works with __proto__ only. Old v8 can't work with null proto objects.
        /* eslint-disable no-proto */
        var isObject = __webpack_require__(116),
          anObject = __webpack_require__(115);
        var check = function (O, proto) {
          anObject(O);
          if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
        };
        module.exports = {
          set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
            function (test, buggy, set) {
              try {
                set = __webpack_require__(111)(Function.call, __webpack_require__(189).f(Object.prototype, '__proto__').set, 2);
                set(test, []);
                buggy = !(test instanceof Array);
              } catch (e) { buggy = true; }
              return function setPrototypeOf(O, proto) {
                check(O, proto);
                if (buggy) O.__proto__ = proto;
                else set(O, proto);
                return O;
              };
            }({}, false) : undefined),
          check: check
        };

        /***/
      }),
      /* 198 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = { "default": __webpack_require__(199), __esModule: true };

        /***/
      }),
      /* 199 */
      /***/
      (function (module, exports, __webpack_require__) {

        __webpack_require__(200);
        var $Object = __webpack_require__(110).Object;
        module.exports = function create(P, D) {
          return $Object.create(P, D);
        };

        /***/
      }),
      /* 200 */
      /***/
      (function (module, exports, __webpack_require__) {

        var $export = __webpack_require__(108)
          // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
        $export($export.S, 'Object', { create: __webpack_require__(136) });

        /***/
      }),
      /* 201 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = addEventListenerWrap;

        var _addDomEventListener = __webpack_require__(202);

        var _addDomEventListener2 = _interopRequireDefault(_addDomEventListener);

        var _reactDom = __webpack_require__(30);

        var _reactDom2 = _interopRequireDefault(_reactDom);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function addEventListenerWrap(target, eventType, cb) {
          /* eslint camelcase: 2 */
          var callback = _reactDom2["default"].unstable_batchedUpdates ? function run(e) {
            _reactDom2["default"].unstable_batchedUpdates(cb, e);
          } : cb;
          return (0, _addDomEventListener2["default"])(target, eventType, callback);
        }
        module.exports = exports['default'];

        /***/
      }),
      /* 202 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = addEventListener;

        var _EventObject = __webpack_require__(203);

        var _EventObject2 = _interopRequireDefault(_EventObject);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function addEventListener(target, eventType, callback) {
          function wrapCallback(e) {
            var ne = new _EventObject2["default"](e);
            callback.call(target, ne);
          }

          if (target.addEventListener) {
            target.addEventListener(eventType, wrapCallback, false);
            return {
              remove: function remove() {
                target.removeEventListener(eventType, wrapCallback, false);
              }
            };
          } else if (target.attachEvent) {
            target.attachEvent('on' + eventType, wrapCallback);
            return {
              remove: function remove() {
                target.detachEvent('on' + eventType, wrapCallback);
              }
            };
          }
        }
        module.exports = exports['default'];

        /***/
      }),
      /* 203 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _EventBaseObject = __webpack_require__(204);

        var _EventBaseObject2 = _interopRequireDefault(_EventBaseObject);

        var _objectAssign = __webpack_require__(205);

        var _objectAssign2 = _interopRequireDefault(_objectAssign);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        /**
         * @ignore
         * event object for dom
         * @author yiminghe@gmail.com
         */

        var TRUE = true;
        var FALSE = false;
        var commonProps = ['altKey', 'bubbles', 'cancelable', 'ctrlKey', 'currentTarget', 'eventPhase', 'metaKey', 'shiftKey', 'target', 'timeStamp', 'view', 'type'];

        function isNullOrUndefined(w) {
          return w === null || w === undefined;
        }

        var eventNormalizers = [{
          reg: /^key/,
          props: ['char', 'charCode', 'key', 'keyCode', 'which'],
          fix: function fix(event, nativeEvent) {
            if (isNullOrUndefined(event.which)) {
              event.which = !isNullOrUndefined(nativeEvent.charCode) ? nativeEvent.charCode : nativeEvent.keyCode;
            }

            // add metaKey to non-Mac browsers (use ctrl for PC 's and Meta for Macs)
            if (event.metaKey === undefined) {
              event.metaKey = event.ctrlKey;
            }
          }
        }, {
          reg: /^touch/,
          props: ['touches', 'changedTouches', 'targetTouches']
        }, {
          reg: /^hashchange$/,
          props: ['newURL', 'oldURL']
        }, {
          reg: /^gesturechange$/i,
          props: ['rotation', 'scale']
        }, {
          reg: /^(mousewheel|DOMMouseScroll)$/,
          props: [],
          fix: function fix(event, nativeEvent) {
            var deltaX = void 0;
            var deltaY = void 0;
            var delta = void 0;
            var wheelDelta = nativeEvent.wheelDelta;
            var axis = nativeEvent.axis;
            var wheelDeltaY = nativeEvent.wheelDeltaY;
            var wheelDeltaX = nativeEvent.wheelDeltaX;
            var detail = nativeEvent.detail;

            // ie/webkit
            if (wheelDelta) {
              delta = wheelDelta / 120;
            }

            // gecko
            if (detail) {
              // press control e.detail == 1 else e.detail == 3
              delta = 0 - (detail % 3 === 0 ? detail / 3 : detail);
            }

            // Gecko
            if (axis !== undefined) {
              if (axis === event.HORIZONTAL_AXIS) {
                deltaY = 0;
                deltaX = 0 - delta;
              } else if (axis === event.VERTICAL_AXIS) {
                deltaX = 0;
                deltaY = delta;
              }
            }

            // Webkit
            if (wheelDeltaY !== undefined) {
              deltaY = wheelDeltaY / 120;
            }
            if (wheelDeltaX !== undefined) {
              deltaX = -1 * wheelDeltaX / 120;
            }

            // 默认 deltaY (ie)
            if (!deltaX && !deltaY) {
              deltaY = delta;
            }

            if (deltaX !== undefined) {
              /**
               * deltaX of mousewheel event
               * @property deltaX
               * @member Event.DomEvent.Object
               */
              event.deltaX = deltaX;
            }

            if (deltaY !== undefined) {
              /**
               * deltaY of mousewheel event
               * @property deltaY
               * @member Event.DomEvent.Object
               */
              event.deltaY = deltaY;
            }

            if (delta !== undefined) {
              /**
               * delta of mousewheel event
               * @property delta
               * @member Event.DomEvent.Object
               */
              event.delta = delta;
            }
          }
        }, {
          reg: /^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,
          props: ['buttons', 'clientX', 'clientY', 'button', 'offsetX', 'relatedTarget', 'which', 'fromElement', 'toElement', 'offsetY', 'pageX', 'pageY', 'screenX', 'screenY'],
          fix: function fix(event, nativeEvent) {
            var eventDoc = void 0;
            var doc = void 0;
            var body = void 0;
            var target = event.target;
            var button = nativeEvent.button;

            // Calculate pageX/Y if missing and clientX/Y available
            if (target && isNullOrUndefined(event.pageX) && !isNullOrUndefined(nativeEvent.clientX)) {
              eventDoc = target.ownerDocument || document;
              doc = eventDoc.documentElement;
              body = eventDoc.body;
              event.pageX = nativeEvent.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
              event.pageY = nativeEvent.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
            }

            // which for click: 1 === left; 2 === middle; 3 === right
            // do not use button
            if (!event.which && button !== undefined) {
              if (button & 1) {
                event.which = 1;
              } else if (button & 2) {
                event.which = 3;
              } else if (button & 4) {
                event.which = 2;
              } else {
                event.which = 0;
              }
            }

            // add relatedTarget, if necessary
            if (!event.relatedTarget && event.fromElement) {
              event.relatedTarget = event.fromElement === target ? event.toElement : event.fromElement;
            }

            return event;
          }
        }];

        function retTrue() {
          return TRUE;
        }

        function retFalse() {
          return FALSE;
        }

        function DomEventObject(nativeEvent) {
          var type = nativeEvent.type;

          var isNative = typeof nativeEvent.stopPropagation === 'function' || typeof nativeEvent.cancelBubble === 'boolean';

          _EventBaseObject2["default"].call(this);

          this.nativeEvent = nativeEvent;

          // in case dom event has been mark as default prevented by lower dom node
          var isDefaultPrevented = retFalse;
          if ('defaultPrevented' in nativeEvent) {
            isDefaultPrevented = nativeEvent.defaultPrevented ? retTrue : retFalse;
          } else if ('getPreventDefault' in nativeEvent) {
            // https://bugzilla.mozilla.org/show_bug.cgi?id=691151
            isDefaultPrevented = nativeEvent.getPreventDefault() ? retTrue : retFalse;
          } else if ('returnValue' in nativeEvent) {
            isDefaultPrevented = nativeEvent.returnValue === FALSE ? retTrue : retFalse;
          }

          this.isDefaultPrevented = isDefaultPrevented;

          var fixFns = [];
          var fixFn = void 0;
          var l = void 0;
          var prop = void 0;
          var props = commonProps.concat();

          eventNormalizers.forEach(function (normalizer) {
            if (type.match(normalizer.reg)) {
              props = props.concat(normalizer.props);
              if (normalizer.fix) {
                fixFns.push(normalizer.fix);
              }
            }
          });

          l = props.length;

          // clone properties of the original event object
          while (l) {
            prop = props[--l];
            this[prop] = nativeEvent[prop];
          }

          // fix target property, if necessary
          if (!this.target && isNative) {
            this.target = nativeEvent.srcElement || document; // srcElement might not be defined either
          }

          // check if target is a text node (safari)
          if (this.target && this.target.nodeType === 3) {
            this.target = this.target.parentNode;
          }

          l = fixFns.length;

          while (l) {
            fixFn = fixFns[--l];
            fixFn(this, nativeEvent);
          }

          this.timeStamp = nativeEvent.timeStamp || Date.now();
        }

        var EventBaseObjectProto = _EventBaseObject2["default"].prototype;

        (0, _objectAssign2["default"])(DomEventObject.prototype, EventBaseObjectProto, {
          constructor: DomEventObject,

          preventDefault: function preventDefault() {
            var e = this.nativeEvent;

            // if preventDefault exists run it on the original event
            if (e.preventDefault) {
              e.preventDefault();
            } else {
              // otherwise set the returnValue property of the original event to FALSE (IE)
              e.returnValue = FALSE;
            }

            EventBaseObjectProto.preventDefault.call(this);
          },
          stopPropagation: function stopPropagation() {
            var e = this.nativeEvent;

            // if stopPropagation exists run it on the original event
            if (e.stopPropagation) {
              e.stopPropagation();
            } else {
              // otherwise set the cancelBubble property of the original event to TRUE (IE)
              e.cancelBubble = TRUE;
            }

            EventBaseObjectProto.stopPropagation.call(this);
          }
        });

        exports["default"] = DomEventObject;
        module.exports = exports['default'];

        /***/
      }),
      /* 204 */
      /***/
      (function (module, exports) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        /**
         * @ignore
         * base event object for custom and dom event.
         * @author yiminghe@gmail.com
         */

        function returnFalse() {
          return false;
        }

        function returnTrue() {
          return true;
        }

        function EventBaseObject() {
          this.timeStamp = Date.now();
          this.target = undefined;
          this.currentTarget = undefined;
        }

        EventBaseObject.prototype = {
          isEventObject: 1,

          constructor: EventBaseObject,

          isDefaultPrevented: returnFalse,

          isPropagationStopped: returnFalse,

          isImmediatePropagationStopped: returnFalse,

          preventDefault: function preventDefault() {
            this.isDefaultPrevented = returnTrue;
          },
          stopPropagation: function stopPropagation() {
            this.isPropagationStopped = returnTrue;
          },
          stopImmediatePropagation: function stopImmediatePropagation() {
            this.isImmediatePropagationStopped = returnTrue;
            // fixed 1.2
            // call stopPropagation implicitly
            this.stopPropagation();
          },
          halt: function halt(immediate) {
            if (immediate) {
              this.stopImmediatePropagation();
            } else {
              this.stopPropagation();
            }
            this.preventDefault();
          }
        };

        exports["default"] = EventBaseObject;
        module.exports = exports['default'];

        /***/
      }),
      /* 205 */
      /***/
      (function (module, exports) {

        /*
        object-assign
        (c) Sindre Sorhus
        @license MIT
        */

        'use strict';
        /* eslint-disable no-unused-vars */
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;

        function toObject(val) {
          if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
          }

          return Object(val);
        }

        function shouldUseNative() {
          try {
            if (!Object.assign) {
              return false;
            }

            // Detect buggy property enumeration order in older V8 versions.

            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
            test1[5] = 'de';
            if (Object.getOwnPropertyNames(test1)[0] === '5') {
              return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
              test2['_' + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
              return test2[n];
            });
            if (order2.join('') !== '0123456789') {
              return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
              test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join('') !==
              'abcdefghijklmnopqrst') {
              return false;
            }

            return true;
          } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
          }
        }

        module.exports = shouldUseNative() ? Object.assign : function (target, source) {
          var from;
          var to = toObject(target);
          var symbols;

          for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);

            for (var key in from) {
              if (hasOwnProperty.call(from, key)) {
                to[key] = from[key];
              }
            }

            if (getOwnPropertySymbols) {
              symbols = getOwnPropertySymbols(from);
              for (var i = 0; i < symbols.length; i++) {
                if (propIsEnumerable.call(from, symbols[i])) {
                  to[symbols[i]] = from[symbols[i]];
                }
              }
            }
          }

          return to;
        };


        /***/
      }),
      /* 206 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var Track = function Track(_ref) {
          var className = _ref.className,
            included = _ref.included,
            vertical = _ref.vertical,
            offset = _ref.offset,
            length = _ref.length;

          var style = {
            visibility: included ? 'visible' : 'hidden'
          };
          if (vertical) {
            style.bottom = offset + '%';
            style.height = length + '%';
          } else {
            style.left = offset + '%';
            style.width = length + '%';
          }
          return _react2["default"].createElement('div', { className: className, style: style });
        };

        exports["default"] = Track;
        module.exports = exports['default'];

        /***/
      }),
      /* 207 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _classCallCheck2 = __webpack_require__(169);

        var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

        var _possibleConstructorReturn2 = __webpack_require__(170);

        var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

        var _inherits2 = __webpack_require__(193);

        var _inherits3 = _interopRequireDefault(_inherits2);

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _rcTooltip = __webpack_require__(208);

        var _rcTooltip2 = _interopRequireDefault(_rcTooltip);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var Handle = function (_React$Component) {
          (0, _inherits3["default"])(Handle, _React$Component);

          function Handle(props) {
            (0, _classCallCheck3["default"])(this, Handle);

            var _this = (0, _possibleConstructorReturn3["default"])(this, _React$Component.call(this, props));

            _this.state = {
              isTooltipVisible: false
            };

            _this.showTooltip = _this.showTooltip.bind(_this);
            _this.hideTooltip = _this.hideTooltip.bind(_this);
            return _this;
          }

          Handle.prototype.hideTooltip = function hideTooltip() {
            this.setState({
              isTooltipVisible: false
            });
          };

          Handle.prototype.showTooltip = function showTooltip() {
            this.setState({
              isTooltipVisible: true
            });
          };

          Handle.prototype.render = function render() {
            var _props = this.props,
              prefixCls = _props.prefixCls,
              tooltipPrefixCls = _props.tooltipPrefixCls,
              className = _props.className,
              tipTransitionName = _props.tipTransitionName,
              tipFormatter = _props.tipFormatter,
              vertical = _props.vertical,
              offset = _props.offset,
              value = _props.value,
              dragging = _props.dragging,
              noTip = _props.noTip,
              index = _props.index;


            var style = vertical ? { bottom: offset + '%' } : { left: offset + '%' };
            var handle = _react2["default"].createElement('div', {
              className: className,
              style: style,
              onMouseUp: this.showTooltip,
              onMouseEnter: this.showTooltip,
              onMouseLeave: this.hideTooltip
            });

            if (noTip) {
              return handle;
            }

            var isTooltipVisible = dragging || this.state.isTooltipVisible;
            return _react2["default"].createElement(
              _rcTooltip2["default"], {
                prefixCls: tooltipPrefixCls || prefixCls + '-tooltip',
                placement: 'top',
                visible: isTooltipVisible,
                overlay: _react2["default"].createElement(
                  'span',
                  null,
                  tipFormatter(value, index)
                ),
                delay: 0,
                transitionName: tipTransitionName
              },
              handle
            );
          };

          return Handle;
        }(_react2["default"].Component);

        exports["default"] = Handle;


        Handle.propTypes = {
          prefixCls: _react2["default"].PropTypes.string,
          tooltipPrefixCls: _react2["default"].PropTypes.string,
          className: _react2["default"].PropTypes.string,
          vertical: _react2["default"].PropTypes.bool,
          offset: _react2["default"].PropTypes.number,
          tipTransitionName: _react2["default"].PropTypes.string,
          tipFormatter: _react2["default"].PropTypes.func,
          value: _react2["default"].PropTypes.number,
          dragging: _react2["default"].PropTypes.bool,
          noTip: _react2["default"].PropTypes.bool,
          index: _react2["default"].PropTypes.number
        };
        module.exports = exports['default'];

        /***/
      }),
      /* 208 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        module.exports = __webpack_require__(209);

        /***/
      }),
      /* 209 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends2 = __webpack_require__(162);

        var _extends3 = _interopRequireDefault(_extends2);

        var _objectWithoutProperties2 = __webpack_require__(210);

        var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

        var _classCallCheck2 = __webpack_require__(169);

        var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

        var _possibleConstructorReturn2 = __webpack_require__(170);

        var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

        var _inherits2 = __webpack_require__(193);

        var _inherits3 = _interopRequireDefault(_inherits2);

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _propTypes = __webpack_require__(211);

        var _propTypes2 = _interopRequireDefault(_propTypes);

        var _rcTrigger = __webpack_require__(217);

        var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

        var _placements = __webpack_require__(249);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var Tooltip = function (_Component) {
          (0, _inherits3["default"])(Tooltip, _Component);

          function Tooltip() {
            var _temp, _this, _ret;

            (0, _classCallCheck3["default"])(this, Tooltip);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3["default"])(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getPopupElement = function () {
              var _this$props = _this.props,
                arrowContent = _this$props.arrowContent,
                overlay = _this$props.overlay,
                prefixCls = _this$props.prefixCls;

              return [_react2["default"].createElement(
                'div', { className: prefixCls + '-arrow', key: 'arrow' },
                arrowContent
              ), _react2["default"].createElement(
                'div', { className: prefixCls + '-inner', key: 'content' },
                typeof overlay === 'function' ? overlay() : overlay
              )];
            }, _temp), (0, _possibleConstructorReturn3["default"])(_this, _ret);
          }

          Tooltip.prototype.getPopupDomNode = function getPopupDomNode() {
            return this.refs.trigger.getPopupDomNode();
          };

          Tooltip.prototype.render = function render() {
            var _props = this.props,
              overlayClassName = _props.overlayClassName,
              trigger = _props.trigger,
              mouseEnterDelay = _props.mouseEnterDelay,
              mouseLeaveDelay = _props.mouseLeaveDelay,
              overlayStyle = _props.overlayStyle,
              prefixCls = _props.prefixCls,
              children = _props.children,
              onVisibleChange = _props.onVisibleChange,
              transitionName = _props.transitionName,
              animation = _props.animation,
              placement = _props.placement,
              align = _props.align,
              destroyTooltipOnHide = _props.destroyTooltipOnHide,
              defaultVisible = _props.defaultVisible,
              getTooltipContainer = _props.getTooltipContainer,
              restProps = (0, _objectWithoutProperties3["default"])(_props, ['overlayClassName', 'trigger', 'mouseEnterDelay', 'mouseLeaveDelay', 'overlayStyle', 'prefixCls', 'children', 'onVisibleChange', 'transitionName', 'animation', 'placement', 'align', 'destroyTooltipOnHide', 'defaultVisible', 'getTooltipContainer']);

            var extraProps = (0, _extends3["default"])({}, restProps);
            if ('visible' in this.props) {
              extraProps.popupVisible = this.props.visible;
            }
            return _react2["default"].createElement(
              _rcTrigger2["default"],
              (0, _extends3["default"])({
                popupClassName: overlayClassName,
                ref: 'trigger',
                prefixCls: prefixCls,
                popup: this.getPopupElement,
                action: trigger,
                builtinPlacements: _placements.placements,
                popupPlacement: placement,
                popupAlign: align,
                getPopupContainer: getTooltipContainer,
                onPopupVisibleChange: onVisibleChange,
                popupTransitionName: transitionName,
                popupAnimation: animation,
                defaultPopupVisible: defaultVisible,
                destroyPopupOnHide: destroyTooltipOnHide,
                mouseLeaveDelay: mouseLeaveDelay,
                popupStyle: overlayStyle,
                mouseEnterDelay: mouseEnterDelay
              }, extraProps),
              children
            );
          };

          return Tooltip;
        }(_react.Component);

        Tooltip.propTypes = {
          trigger: _propTypes2["default"].any,
          children: _propTypes2["default"].any,
          defaultVisible: _propTypes2["default"].bool,
          visible: _propTypes2["default"].bool,
          placement: _propTypes2["default"].string,
          transitionName: _propTypes2["default"].string,
          animation: _propTypes2["default"].any,
          onVisibleChange: _propTypes2["default"].func,
          afterVisibleChange: _propTypes2["default"].func,
          overlay: _propTypes2["default"].oneOfType([_propTypes2["default"].node, _propTypes2["default"].func]).isRequired,
          overlayStyle: _propTypes2["default"].object,
          overlayClassName: _propTypes2["default"].string,
          prefixCls: _propTypes2["default"].string,
          mouseEnterDelay: _propTypes2["default"].number,
          mouseLeaveDelay: _propTypes2["default"].number,
          getTooltipContainer: _propTypes2["default"].func,
          destroyTooltipOnHide: _propTypes2["default"].bool,
          align: _propTypes2["default"].object,
          arrowContent: _propTypes2["default"].any
        };
        Tooltip.defaultProps = {
          prefixCls: 'rc-tooltip',
          mouseEnterDelay: 0,
          destroyTooltipOnHide: false,
          mouseLeaveDelay: 0.1,
          align: {},
          placement: 'right',
          trigger: ['hover'],
          arrowContent: null
        };
        exports["default"] = Tooltip;
        module.exports = exports['default'];

        /***/
      }),
      /* 210 */
      /***/
      (function (module, exports) {

        "use strict";

        exports.__esModule = true;

        exports.default = function (obj, keys) {
          var target = {};

          for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i];
          }

          return target;
        };

        /***/
      }),
      /* 211 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright 2013-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         */

        if ((undefined) !== 'production') {
          var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
              Symbol.for &&
              Symbol.for('react.element')) ||
            0xeac7;

          var isValidElement = function (object) {
            return typeof object === 'object' &&
              object !== null &&
              object.$$typeof === REACT_ELEMENT_TYPE;
          };

          // By explicitly using `prop-types` you are opting into new development behavior.
          // http://fb.me/prop-types-in-prod
          var throwOnDirectAccess = true;
          module.exports = __webpack_require__(212)(isValidElement, throwOnDirectAccess);
        } else {
          // By explicitly using `prop-types` you are opting into new production behavior.
          // http://fb.me/prop-types-in-prod
          module.exports = __webpack_require__(216)();
        }


        /***/
      }),
      /* 212 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright 2013-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         */

        'use strict';

        var emptyFunction = __webpack_require__(78);
        var invariant = __webpack_require__(77);
        var warning = __webpack_require__(213);

        var ReactPropTypesSecret = __webpack_require__(214);
        var checkPropTypes = __webpack_require__(215);

        module.exports = function (isValidElement, throwOnDirectAccess) {
          /* global Symbol */
          var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

          /**
           * Returns the iterator method function contained on the iterable object.
           *
           * Be sure to invoke the function with the iterable as context:
           *
           *     var iteratorFn = getIteratorFn(myIterable);
           *     if (iteratorFn) {
           *       var iterator = iteratorFn.call(myIterable);
           *       ...
           *     }
           *
           * @param {?object} maybeIterable
           * @return {?function}
           */
          function getIteratorFn(maybeIterable) {
            var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
            if (typeof iteratorFn === 'function') {
              return iteratorFn;
            }
          }

          /**
           * Collection of methods that allow declaration and validation of props that are
           * supplied to React components. Example usage:
           *
           *   var Props = require('ReactPropTypes');
           *   var MyArticle = React.createClass({
           *     propTypes: {
           *       // An optional string prop named "description".
           *       description: Props.string,
           *
           *       // A required enum prop named "category".
           *       category: Props.oneOf(['News','Photos']).isRequired,
           *
           *       // A prop named "dialog" that requires an instance of Dialog.
           *       dialog: Props.instanceOf(Dialog).isRequired
           *     },
           *     render: function() { ... }
           *   });
           *
           * A more formal specification of how these methods are used:
           *
           *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
           *   decl := ReactPropTypes.{type}(.isRequired)?
           *
           * Each and every declaration produces a function with the same signature. This
           * allows the creation of custom validation functions. For example:
           *
           *  var MyLink = React.createClass({
           *    propTypes: {
           *      // An optional string or URI prop named "href".
           *      href: function(props, propName, componentName) {
           *        var propValue = props[propName];
           *        if (propValue != null && typeof propValue !== 'string' &&
           *            !(propValue instanceof URI)) {
           *          return new Error(
           *            'Expected a string or an URI for ' + propName + ' in ' +
           *            componentName
           *          );
           *        }
           *      }
           *    },
           *    render: function() {...}
           *  });
           *
           * @internal
           */

          var ANONYMOUS = '<<anonymous>>';

          // Important!
          // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
          var ReactPropTypes = {
            array: createPrimitiveTypeChecker('array'),
            bool: createPrimitiveTypeChecker('boolean'),
            func: createPrimitiveTypeChecker('function'),
            number: createPrimitiveTypeChecker('number'),
            object: createPrimitiveTypeChecker('object'),
            string: createPrimitiveTypeChecker('string'),
            symbol: createPrimitiveTypeChecker('symbol'),

            any: createAnyTypeChecker(),
            arrayOf: createArrayOfTypeChecker,
            element: createElementTypeChecker(),
            instanceOf: createInstanceTypeChecker,
            node: createNodeChecker(),
            objectOf: createObjectOfTypeChecker,
            oneOf: createEnumTypeChecker,
            oneOfType: createUnionTypeChecker,
            shape: createShapeTypeChecker
          };

          /**
           * inlined Object.is polyfill to avoid requiring consumers ship their own
           * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
           */
          /*eslint-disable no-self-compare*/
          function is(x, y) {
            // SameValue algorithm
            if (x === y) {
              // Steps 1-5, 7-10
              // Steps 6.b-6.e: +0 != -0
              return x !== 0 || 1 / x === 1 / y;
            } else {
              // Step 6.a: NaN == NaN
              return x !== x && y !== y;
            }
          }
          /*eslint-enable no-self-compare*/

          /**
           * We use an Error-like object for backward compatibility as people may call
           * PropTypes directly and inspect their output. However, we don't use real
           * Errors anymore. We don't inspect their stack anyway, and creating them
           * is prohibitively expensive if they are created too often, such as what
           * happens in oneOfType() for any type before the one that matched.
           */
          function PropTypeError(message) {
            this.message = message;
            this.stack = '';
          }
          // Make `instanceof Error` still work for returned errors.
          PropTypeError.prototype = Error.prototype;

          function createChainableTypeChecker(validate) {
            if ((undefined) !== 'production') {
              var manualPropTypeCallCache = {};
              var manualPropTypeWarningCount = 0;
            }

            function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
              componentName = componentName || ANONYMOUS;
              propFullName = propFullName || propName;

              if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                  // New behavior only for users of `prop-types` package
                  invariant(
                    false,
                    'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                    'Use `PropTypes.checkPropTypes()` to call them. ' +
                    'Read more at http://fb.me/use-check-prop-types'
                  );
                } else if ((undefined) !== 'production' && typeof console !== 'undefined') {
                  // Old behavior for people using React.PropTypes
                  var cacheKey = componentName + ':' + propName;
                  if (!manualPropTypeCallCache[cacheKey] &&
                    // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3
                  ) {
                    warning(
                      false,
                      'You are manually calling a React.PropTypes validation ' +
                      'function for the `%s` prop on `%s`. This is deprecated ' +
                      'and will throw in the standalone `prop-types` package. ' +
                      'You may be seeing this warning due to a third-party PropTypes ' +
                      'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
                      propFullName,
                      componentName
                    );
                    manualPropTypeCallCache[cacheKey] = true;
                    manualPropTypeWarningCount++;
                  }
                }
              }
              if (props[propName] == null) {
                if (isRequired) {
                  if (props[propName] === null) {
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                  }
                  return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
              } else {
                return validate(props, propName, componentName, location, propFullName);
              }
            }

            var chainedCheckType = checkType.bind(null, false);
            chainedCheckType.isRequired = checkType.bind(null, true);

            return chainedCheckType;
          }

          function createPrimitiveTypeChecker(expectedType) {
            function validate(props, propName, componentName, location, propFullName, secret) {
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);

                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createAnyTypeChecker() {
            return createChainableTypeChecker(emptyFunction.thatReturnsNull);
          }

          function createArrayOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
              if (typeof typeChecker !== 'function') {
                return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
              }
              var propValue = props[propName];
              if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
              }
              for (var i = 0; i < propValue.length; i++) {
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createElementTypeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createInstanceTypeChecker(expectedClass) {
            function validate(props, propName, componentName, location, propFullName) {
              if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createEnumTypeChecker(expectedValues) {
            if (!Array.isArray(expectedValues)) {
              (undefined) !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.'): void 0;
              return emptyFunction.thatReturnsNull;
            }

            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              for (var i = 0; i < expectedValues.length; i++) {
                if (is(propValue, expectedValues[i])) {
                  return null;
                }
              }

              var valuesString = JSON.stringify(expectedValues);
              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
            }
            return createChainableTypeChecker(validate);
          }

          function createObjectOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
              if (typeof typeChecker !== 'function') {
                return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
              }
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== 'object') {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
              }
              for (var key in propValue) {
                if (propValue.hasOwnProperty(key)) {
                  var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                  if (error instanceof Error) {
                    return error;
                  }
                }
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createUnionTypeChecker(arrayOfTypeCheckers) {
            if (!Array.isArray(arrayOfTypeCheckers)) {
              (undefined) !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.'): void 0;
              return emptyFunction.thatReturnsNull;
            }

            function validate(props, propName, componentName, location, propFullName) {
              for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                var checker = arrayOfTypeCheckers[i];
                if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
                  return null;
                }
              }

              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
            }
            return createChainableTypeChecker(validate);
          }

          function createNodeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
              if (!isNode(props[propName])) {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function createShapeTypeChecker(shapeTypes) {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== 'object') {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
              }
              for (var key in shapeTypes) {
                var checker = shapeTypes[key];
                if (!checker) {
                  continue;
                }
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) {
                  return error;
                }
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }

          function isNode(propValue) {
            switch (typeof propValue) {
            case 'number':
            case 'string':
            case 'undefined':
              return true;
            case 'boolean':
              return !propValue;
            case 'object':
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }

              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  // Iterator will provide entry [k,v] tuples rather than values.
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }

              return true;
            default:
              return false;
            }
          }

          function isSymbol(propType, propValue) {
            // Native Symbol.
            if (propType === 'symbol') {
              return true;
            }

            // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
            if (propValue['@@toStringTag'] === 'Symbol') {
              return true;
            }

            // Fallback for non-spec compliant Symbols which are polyfilled.
            if (typeof Symbol === 'function' && propValue instanceof Symbol) {
              return true;
            }

            return false;
          }

          // Equivalent of `typeof` but with special handling for array and regexp.
          function getPropType(propValue) {
            var propType = typeof propValue;
            if (Array.isArray(propValue)) {
              return 'array';
            }
            if (propValue instanceof RegExp) {
              // Old webkits (at least until Android 4.0) return 'function' rather than
              // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
              // passes PropTypes.object.
              return 'object';
            }
            if (isSymbol(propType, propValue)) {
              return 'symbol';
            }
            return propType;
          }

          // This handles more types than `getPropType`. Only used for error messages.
          // See `createPrimitiveTypeChecker`.
          function getPreciseType(propValue) {
            var propType = getPropType(propValue);
            if (propType === 'object') {
              if (propValue instanceof Date) {
                return 'date';
              } else if (propValue instanceof RegExp) {
                return 'regexp';
              }
            }
            return propType;
          }

          // Returns class name of the object, if any.
          function getClassName(propValue) {
            if (!propValue.constructor || !propValue.constructor.name) {
              return ANONYMOUS;
            }
            return propValue.constructor.name;
          }

          ReactPropTypes.checkPropTypes = checkPropTypes;
          ReactPropTypes.PropTypes = ReactPropTypes;

          return ReactPropTypes;
        };


        /***/
      }),
      /* 213 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright 2014-2015, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         *
         */

        'use strict';

        var emptyFunction = __webpack_require__(78);

        /**
         * Similar to invariant but only logs a warning if the condition is not met.
         * This can be used to log issues in development environments in critical
         * paths. Removing the logging code for production environments will keep the
         * same logic and follow the same code paths.
         */

        var warning = emptyFunction;

        if ((undefined) !== 'production') {
          (function () {
            var printWarning = function printWarning(format) {
              for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }

              var argIndex = 0;
              var message = 'Warning: ' + format.replace(/%s/g, function () {
                return args[argIndex++];
              });
              if (typeof console !== 'undefined') {
                console.error(message);
              }
              try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
              } catch (x) {}
            };

            warning = function warning(condition, format) {
              if (format === undefined) {
                throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
              }

              if (format.indexOf('Failed Composite propType: ') === 0) {
                return; // Ignore CompositeComponent proptype check.
              }

              if (!condition) {
                for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                  args[_key2 - 2] = arguments[_key2];
                }

                printWarning.apply(undefined, [format].concat(args));
              }
            };
          })();
        }

        module.exports = warning;

        /***/
      }),
      /* 214 */
      /***/
      (function (module, exports) {

        /**
         * Copyright 2013-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         */

        'use strict';

        var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

        module.exports = ReactPropTypesSecret;


        /***/
      }),
      /* 215 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright 2013-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         */

        'use strict';

        if ((undefined) !== 'production') {
          var invariant = __webpack_require__(77);
          var warning = __webpack_require__(213);
          var ReactPropTypesSecret = __webpack_require__(214);
          var loggedTypeFailures = {};
        }

        /**
         * Assert that the values match with the type specs.
         * Error messages are memorized and will only be shown once.
         *
         * @param {object} typeSpecs Map of name to a ReactPropType
         * @param {object} values Runtime values that need to be type-checked
         * @param {string} location e.g. "prop", "context", "child context"
         * @param {string} componentName Name of the component for error messages.
         * @param {?Function} getStack Returns the component stack.
         * @private
         */
        function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
          if ((undefined) !== 'production') {
            for (var typeSpecName in typeSpecs) {
              if (typeSpecs.hasOwnProperty(typeSpecName)) {
                var error;
                // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.
                try {
                  // This is intentionally an invariant that gets caught. It's the same
                  // behavior as without this statement except with a better message.
                  invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
                  error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                } catch (ex) {
                  error = ex;
                }
                warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
                if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                  // Only monitor this failure once because there tends to be a lot of the
                  // same error.
                  loggedTypeFailures[error.message] = true;

                  var stack = getStack ? getStack() : '';

                  warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
                }
              }
            }
          }
        }

        module.exports = checkPropTypes;


        /***/
      }),
      /* 216 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright 2013-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         */

        'use strict';

        var emptyFunction = __webpack_require__(78);
        var invariant = __webpack_require__(77);

        module.exports = function () {
          // Important!
          // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
          function shim() {
            invariant(
              false,
              'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
              'Use PropTypes.checkPropTypes() to call them. ' +
              'Read more at http://fb.me/use-check-prop-types'
            );
          };
          shim.isRequired = shim;

          function getShim() {
            return shim;
          };
          var ReactPropTypes = {
            array: shim,
            bool: shim,
            func: shim,
            number: shim,
            object: shim,
            string: shim,
            symbol: shim,

            any: shim,
            arrayOf: getShim,
            element: shim,
            instanceOf: getShim,
            node: shim,
            objectOf: getShim,
            oneOf: getShim,
            oneOfType: getShim,
            shape: getShim
          };

          ReactPropTypes.checkPropTypes = emptyFunction;
          ReactPropTypes.PropTypes = ReactPropTypes;

          return ReactPropTypes;
        };


        /***/
      }),
      /* 217 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        module.exports = __webpack_require__(218);

        /***/
      }),
      /* 218 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends2 = __webpack_require__(162);

        var _extends3 = _interopRequireDefault(_extends2);

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _propTypes = __webpack_require__(211);

        var _propTypes2 = _interopRequireDefault(_propTypes);

        var _reactDom = __webpack_require__(30);

        var _createReactClass = __webpack_require__(219);

        var _createReactClass2 = _interopRequireDefault(_createReactClass);

        var _contains = __webpack_require__(222);

        var _contains2 = _interopRequireDefault(_contains);

        var _addEventListener = __webpack_require__(201);

        var _addEventListener2 = _interopRequireDefault(_addEventListener);

        var _Popup = __webpack_require__(223);

        var _Popup2 = _interopRequireDefault(_Popup);

        var _utils = __webpack_require__(247);

        var _getContainerRenderMixin = __webpack_require__(248);

        var _getContainerRenderMixin2 = _interopRequireDefault(_getContainerRenderMixin);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function noop() {}

        function returnEmptyString() {
          return '';
        }

        function returnDocument() {
          return window.document;
        }

        // use fastclick for mobile touch
        var ALL_HANDLERS = ['onClick', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur'];

        var Trigger = (0, _createReactClass2["default"])({
          propTypes: {
            children: _propTypes2["default"].any,
            action: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].arrayOf(_propTypes2["default"].string)]),
            showAction: _propTypes2["default"].any,
            hideAction: _propTypes2["default"].any,
            getPopupClassNameFromAlign: _propTypes2["default"].any,
            onPopupVisibleChange: _propTypes2["default"].func,
            afterPopupVisibleChange: _propTypes2["default"].func,
            popup: _propTypes2["default"].oneOfType([_propTypes2["default"].node, _propTypes2["default"].func]).isRequired,
            popupStyle: _propTypes2["default"].object,
            prefixCls: _propTypes2["default"].string,
            popupClassName: _propTypes2["default"].string,
            popupPlacement: _propTypes2["default"].string,
            builtinPlacements: _propTypes2["default"].object,
            popupTransitionName: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),
            popupAnimation: _propTypes2["default"].any,
            mouseEnterDelay: _propTypes2["default"].number,
            mouseLeaveDelay: _propTypes2["default"].number,
            zIndex: _propTypes2["default"].number,
            focusDelay: _propTypes2["default"].number,
            blurDelay: _propTypes2["default"].number,
            getPopupContainer: _propTypes2["default"].func,
            getDocument: _propTypes2["default"].func,
            destroyPopupOnHide: _propTypes2["default"].bool,
            mask: _propTypes2["default"].bool,
            maskClosable: _propTypes2["default"].bool,
            onPopupAlign: _propTypes2["default"].func,
            popupAlign: _propTypes2["default"].object,
            popupVisible: _propTypes2["default"].bool,
            maskTransitionName: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),
            maskAnimation: _propTypes2["default"].string
          },

          mixins: [(0, _getContainerRenderMixin2["default"])({
            autoMount: false,

            isVisible: function isVisible(instance) {
              return instance.state.popupVisible;
            },
            getContainer: function getContainer(instance) {
              var props = instance.props;

              var popupContainer = document.createElement('div');
              // Make sure default popup container will never cause scrollbar appearing
              // https://github.com/react-component/trigger/issues/41
              popupContainer.style.position = 'absolute';
              popupContainer.style.top = '0';
              popupContainer.style.left = '0';
              popupContainer.style.width = '100%';
              var mountNode = props.getPopupContainer ? props.getPopupContainer((0, _reactDom.findDOMNode)(instance)) : props.getDocument().body;
              mountNode.appendChild(popupContainer);
              return popupContainer;
            }
          })],

          getDefaultProps: function getDefaultProps() {
            return {
              prefixCls: 'rc-trigger-popup',
              getPopupClassNameFromAlign: returnEmptyString,
              getDocument: returnDocument,
              onPopupVisibleChange: noop,
              afterPopupVisibleChange: noop,
              onPopupAlign: noop,
              popupClassName: '',
              mouseEnterDelay: 0,
              mouseLeaveDelay: 0.1,
              focusDelay: 0,
              blurDelay: 0.15,
              popupStyle: {},
              destroyPopupOnHide: false,
              popupAlign: {},
              defaultPopupVisible: false,
              mask: false,
              maskClosable: true,
              action: [],
              showAction: [],
              hideAction: []
            };
          },
          getInitialState: function getInitialState() {
            var props = this.props;
            var popupVisible = void 0;
            if ('popupVisible' in props) {
              popupVisible = !!props.popupVisible;
            } else {
              popupVisible = !!props.defaultPopupVisible;
            }
            return {
              popupVisible: popupVisible
            };
          },
          componentWillMount: function componentWillMount() {
            var _this = this;

            ALL_HANDLERS.forEach(function (h) {
              _this['fire' + h] = function (e) {
                _this.fireEvents(h, e);
              };
            });
          },
          componentDidMount: function componentDidMount() {
            this.componentDidUpdate({}, {
              popupVisible: this.state.popupVisible
            });
          },
          componentWillReceiveProps: function componentWillReceiveProps(_ref) {
            var popupVisible = _ref.popupVisible;

            if (popupVisible !== undefined) {
              this.setState({
                popupVisible: popupVisible
              });
            }
          },
          componentDidUpdate: function componentDidUpdate(_, prevState) {
            var props = this.props;
            var state = this.state;
            this.renderComponent(null, function () {
              if (prevState.popupVisible !== state.popupVisible) {
                props.afterPopupVisibleChange(state.popupVisible);
              }
            });

            if (state.popupVisible) {
              var currentDocument = void 0;
              if (!this.clickOutsideHandler && this.isClickToHide()) {
                currentDocument = props.getDocument();
                this.clickOutsideHandler = (0, _addEventListener2["default"])(currentDocument, 'click', this.onDocumentClick);
              }
              return;
            }

            this.clearOutsideHandler();
          },
          componentWillUnmount: function componentWillUnmount() {
            this.clearDelayTimer();
            this.clearOutsideHandler();
          },
          onMouseEnter: function onMouseEnter(e) {
            this.fireEvents('onMouseEnter', e);
            this.delaySetPopupVisible(true, this.props.mouseEnterDelay);
          },
          onMouseLeave: function onMouseLeave(e) {
            this.fireEvents('onMouseLeave', e);
            this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);
          },
          onPopupMouseEnter: function onPopupMouseEnter() {
            this.clearDelayTimer();
          },
          onPopupMouseLeave: function onPopupMouseLeave(e) {
            // https://github.com/react-component/trigger/pull/13
            // react bug?
            if (e.relatedTarget && !e.relatedTarget.setTimeout && this._component && (0, _contains2["default"])(this._component.getPopupDomNode(), e.relatedTarget)) {
              return;
            }
            this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);
          },
          onFocus: function onFocus(e) {
            this.fireEvents('onFocus', e);
            // incase focusin and focusout
            this.clearDelayTimer();
            if (this.isFocusToShow()) {
              this.focusTime = Date.now();
              this.delaySetPopupVisible(true, this.props.focusDelay);
            }
          },
          onMouseDown: function onMouseDown(e) {
            this.fireEvents('onMouseDown', e);
            this.preClickTime = Date.now();
          },
          onBlur: function onBlur(e) {
            this.fireEvents('onBlur', e);
            this.clearDelayTimer();
            if (this.isBlurToHide()) {
              this.delaySetPopupVisible(false, this.props.blurDelay);
            }
          },
          onClick: function onClick(event) {
            this.fireEvents('onClick', event);
            // focus will trigger click
            if (this.focusTime) {
              var preTime = void 0;
              if (this.preClickTime) {
                preTime = this.preClickTime;
              }
              if (Math.abs(preTime - this.focusTime) < 20) {
                return;
              }
              this.focusTime = 0;
            }
            this.preClickTime = 0;
            event.preventDefault();
            var nextVisible = !this.state.popupVisible;
            if (this.isClickToHide() && !nextVisible || nextVisible && this.isClickToShow()) {
              this.setPopupVisible(!this.state.popupVisible);
            }
          },
          onDocumentClick: function onDocumentClick(event) {
            if (this.props.mask && !this.props.maskClosable) {
              return;
            }
            var target = event.target;
            var root = (0, _reactDom.findDOMNode)(this);
            var popupNode = this.getPopupDomNode();
            if (!(0, _contains2["default"])(root, target) && !(0, _contains2["default"])(popupNode, target)) {
              this.close();
            }
          },
          getPopupDomNode: function getPopupDomNode() {
            // for test
            if (this._component && this._component.getPopupDomNode) {
              return this._component.getPopupDomNode();
            }
            return null;
          },
          getRootDomNode: function getRootDomNode() {
            return (0, _reactDom.findDOMNode)(this);
          },
          getPopupClassNameFromAlign: function getPopupClassNameFromAlign(align) {
            var className = [];
            var props = this.props;
            var popupPlacement = props.popupPlacement,
              builtinPlacements = props.builtinPlacements,
              prefixCls = props.prefixCls;

            if (popupPlacement && builtinPlacements) {
              className.push((0, _utils.getPopupClassNameFromAlign)(builtinPlacements, prefixCls, align));
            }
            if (props.getPopupClassNameFromAlign) {
              className.push(props.getPopupClassNameFromAlign(align));
            }
            return className.join(' ');
          },
          getPopupAlign: function getPopupAlign() {
            var props = this.props;
            var popupPlacement = props.popupPlacement,
              popupAlign = props.popupAlign,
              builtinPlacements = props.builtinPlacements;

            if (popupPlacement && builtinPlacements) {
              return (0, _utils.getAlignFromPlacement)(builtinPlacements, popupPlacement, popupAlign);
            }
            return popupAlign;
          },
          getComponent: function getComponent() {
            var props = this.props,
              state = this.state;

            var mouseProps = {};
            if (this.isMouseEnterToShow()) {
              mouseProps.onMouseEnter = this.onPopupMouseEnter;
            }
            if (this.isMouseLeaveToHide()) {
              mouseProps.onMouseLeave = this.onPopupMouseLeave;
            }
            return _react2["default"].createElement(
              _Popup2["default"],
              (0, _extends3["default"])({
                prefixCls: props.prefixCls,
                destroyPopupOnHide: props.destroyPopupOnHide,
                visible: state.popupVisible,
                className: props.popupClassName,
                action: props.action,
                align: this.getPopupAlign(),
                onAlign: props.onPopupAlign,
                animation: props.popupAnimation,
                getClassNameFromAlign: this.getPopupClassNameFromAlign
              }, mouseProps, {
                getRootDomNode: this.getRootDomNode,
                style: props.popupStyle,
                mask: props.mask,
                zIndex: props.zIndex,
                transitionName: props.popupTransitionName,
                maskAnimation: props.maskAnimation,
                maskTransitionName: props.maskTransitionName
              }),
              typeof props.popup === 'function' ? props.popup() : props.popup
            );
          },
          setPopupVisible: function setPopupVisible(popupVisible) {
            this.clearDelayTimer();
            if (this.state.popupVisible !== popupVisible) {
              if (!('popupVisible' in this.props)) {
                this.setState({
                  popupVisible: popupVisible
                });
              }
              this.props.onPopupVisibleChange(popupVisible);
            }
          },
          delaySetPopupVisible: function delaySetPopupVisible(visible, delayS) {
            var _this2 = this;

            var delay = delayS * 1000;
            this.clearDelayTimer();
            if (delay) {
              this.delayTimer = setTimeout(function () {
                _this2.setPopupVisible(visible);
                _this2.clearDelayTimer();
              }, delay);
            } else {
              this.setPopupVisible(visible);
            }
          },
          clearDelayTimer: function clearDelayTimer() {
            if (this.delayTimer) {
              clearTimeout(this.delayTimer);
              this.delayTimer = null;
            }
          },
          clearOutsideHandler: function clearOutsideHandler() {
            if (this.clickOutsideHandler) {
              this.clickOutsideHandler.remove();
              this.clickOutsideHandler = null;
            }
          },
          createTwoChains: function createTwoChains(event) {
            var childPros = this.props.children.props;
            var props = this.props;
            if (childPros[event] && props[event]) {
              return this['fire' + event];
            }
            return childPros[event] || props[event];
          },
          isClickToShow: function isClickToShow() {
            var _props = this.props,
              action = _props.action,
              showAction = _props.showAction;

            return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
          },
          isClickToHide: function isClickToHide() {
            var _props2 = this.props,
              action = _props2.action,
              hideAction = _props2.hideAction;

            return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
          },
          isMouseEnterToShow: function isMouseEnterToShow() {
            var _props3 = this.props,
              action = _props3.action,
              showAction = _props3.showAction;

            return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;
          },
          isMouseLeaveToHide: function isMouseLeaveToHide() {
            var _props4 = this.props,
              action = _props4.action,
              hideAction = _props4.hideAction;

            return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;
          },
          isFocusToShow: function isFocusToShow() {
            var _props5 = this.props,
              action = _props5.action,
              showAction = _props5.showAction;

            return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
          },
          isBlurToHide: function isBlurToHide() {
            var _props6 = this.props,
              action = _props6.action,
              hideAction = _props6.hideAction;

            return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
          },
          forcePopupAlign: function forcePopupAlign() {
            if (this.state.popupVisible && this.popupInstance && this.popupInstance.alignInstance) {
              this.popupInstance.alignInstance.forceAlign();
            }
          },
          fireEvents: function fireEvents(type, e) {
            var childCallback = this.props.children.props[type];
            if (childCallback) {
              childCallback(e);
            }
            var callback = this.props[type];
            if (callback) {
              callback(e);
            }
          },
          close: function close() {
            this.setPopupVisible(false);
          },
          render: function render() {
            var props = this.props;
            var children = props.children;
            var child = _react2["default"].Children.only(children);
            var newChildProps = {};
            if (this.isClickToHide() || this.isClickToShow()) {
              newChildProps.onClick = this.onClick;
              newChildProps.onMouseDown = this.onMouseDown;
            } else {
              newChildProps.onClick = this.createTwoChains('onClick');
              newChildProps.onMouseDown = this.createTwoChains('onMouseDown');
            }
            if (this.isMouseEnterToShow()) {
              newChildProps.onMouseEnter = this.onMouseEnter;
            } else {
              newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');
            }
            if (this.isMouseLeaveToHide()) {
              newChildProps.onMouseLeave = this.onMouseLeave;
            } else {
              newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');
            }
            if (this.isFocusToShow() || this.isBlurToHide()) {
              newChildProps.onFocus = this.onFocus;
              newChildProps.onBlur = this.onBlur;
            } else {
              newChildProps.onFocus = this.createTwoChains('onFocus');
              newChildProps.onBlur = this.createTwoChains('onBlur');
            }

            return _react2["default"].cloneElement(child, newChildProps);
          }
        });

        exports["default"] = Trigger;
        module.exports = exports['default'];

        /***/
      }),
      /* 219 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright 2013-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         *
         */

        'use strict';

        var React = __webpack_require__(3);
        var factory = __webpack_require__(220);

        // Hack to grab NoopUpdateQueue from isomorphic React
        var ReactNoopUpdateQueue = new React.Component().updater;

        module.exports = factory(
          React.Component,
          React.isValidElement,
          ReactNoopUpdateQueue
        );


        /***/
      }),
      /* 220 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright 2013-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         *
         */

        'use strict';

        var _assign = __webpack_require__(205);

        var emptyObject = __webpack_require__(221);
        var _invariant = __webpack_require__(77);

        if ((undefined) !== 'production') {
          var warning = __webpack_require__(213);
        }

        var MIXINS_KEY = 'mixins';

        // Helper function to allow the creation of anonymous functions which do not
        // have .name set to the name of the variable being assigned to.
        function identity(fn) {
          return fn;
        }

        var ReactPropTypeLocationNames;
        if ((undefined) !== 'production') {
          ReactPropTypeLocationNames = {
            prop: 'prop',
            context: 'context',
            childContext: 'child context',
          };
        } else {
          ReactPropTypeLocationNames = {};
        }

        function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
          /**
           * Policies that describe methods in `ReactClassInterface`.
           */


          var injectedMixins = [];

          /**
           * Composite components are higher-level components that compose other composite
           * or host components.
           *
           * To create a new type of `ReactClass`, pass a specification of
           * your new class to `React.createClass`. The only requirement of your class
           * specification is that you implement a `render` method.
           *
           *   var MyComponent = React.createClass({
           *     render: function() {
           *       return <div>Hello World</div>;
           *     }
           *   });
           *
           * The class specification supports a specific protocol of methods that have
           * special meaning (e.g. `render`). See `ReactClassInterface` for
           * more the comprehensive protocol. Any other properties and methods in the
           * class specification will be available on the prototype.
           *
           * @interface ReactClassInterface
           * @internal
           */
          var ReactClassInterface = {

            /**
             * An array of Mixin objects to include when defining your component.
             *
             * @type {array}
             * @optional
             */
            mixins: 'DEFINE_MANY',

            /**
             * An object containing properties and methods that should be defined on
             * the component's constructor instead of its prototype (static methods).
             *
             * @type {object}
             * @optional
             */
            statics: 'DEFINE_MANY',

            /**
             * Definition of prop types for this component.
             *
             * @type {object}
             * @optional
             */
            propTypes: 'DEFINE_MANY',

            /**
             * Definition of context types for this component.
             *
             * @type {object}
             * @optional
             */
            contextTypes: 'DEFINE_MANY',

            /**
             * Definition of context types this component sets for its children.
             *
             * @type {object}
             * @optional
             */
            childContextTypes: 'DEFINE_MANY',

            // ==== Definition methods ====

            /**
             * Invoked when the component is mounted. Values in the mapping will be set on
             * `this.props` if that prop is not specified (i.e. using an `in` check).
             *
             * This method is invoked before `getInitialState` and therefore cannot rely
             * on `this.state` or use `this.setState`.
             *
             * @return {object}
             * @optional
             */
            getDefaultProps: 'DEFINE_MANY_MERGED',

            /**
             * Invoked once before the component is mounted. The return value will be used
             * as the initial value of `this.state`.
             *
             *   getInitialState: function() {
             *     return {
             *       isOn: false,
             *       fooBaz: new BazFoo()
             *     }
             *   }
             *
             * @return {object}
             * @optional
             */
            getInitialState: 'DEFINE_MANY_MERGED',

            /**
             * @return {object}
             * @optional
             */
            getChildContext: 'DEFINE_MANY_MERGED',

            /**
             * Uses props from `this.props` and state from `this.state` to render the
             * structure of the component.
             *
             * No guarantees are made about when or how often this method is invoked, so
             * it must not have side effects.
             *
             *   render: function() {
             *     var name = this.props.name;
             *     return <div>Hello, {name}!</div>;
             *   }
             *
             * @return {ReactComponent}
             * @nosideeffects
             * @required
             */
            render: 'DEFINE_ONCE',

            // ==== Delegate methods ====

            /**
             * Invoked when the component is initially created and about to be mounted.
             * This may have side effects, but any external subscriptions or data created
             * by this method must be cleaned up in `componentWillUnmount`.
             *
             * @optional
             */
            componentWillMount: 'DEFINE_MANY',

            /**
             * Invoked when the component has been mounted and has a DOM representation.
             * However, there is no guarantee that the DOM node is in the document.
             *
             * Use this as an opportunity to operate on the DOM when the component has
             * been mounted (initialized and rendered) for the first time.
             *
             * @param {DOMElement} rootNode DOM element representing the component.
             * @optional
             */
            componentDidMount: 'DEFINE_MANY',

            /**
             * Invoked before the component receives new props.
             *
             * Use this as an opportunity to react to a prop transition by updating the
             * state using `this.setState`. Current props are accessed via `this.props`.
             *
             *   componentWillReceiveProps: function(nextProps, nextContext) {
             *     this.setState({
             *       likesIncreasing: nextProps.likeCount > this.props.likeCount
             *     });
             *   }
             *
             * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
             * transition may cause a state change, but the opposite is not true. If you
             * need it, you are probably looking for `componentWillUpdate`.
             *
             * @param {object} nextProps
             * @optional
             */
            componentWillReceiveProps: 'DEFINE_MANY',

            /**
             * Invoked while deciding if the component should be updated as a result of
             * receiving new props, state and/or context.
             *
             * Use this as an opportunity to `return false` when you're certain that the
             * transition to the new props/state/context will not require a component
             * update.
             *
             *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
             *     return !equal(nextProps, this.props) ||
             *       !equal(nextState, this.state) ||
             *       !equal(nextContext, this.context);
             *   }
             *
             * @param {object} nextProps
             * @param {?object} nextState
             * @param {?object} nextContext
             * @return {boolean} True if the component should update.
             * @optional
             */
            shouldComponentUpdate: 'DEFINE_ONCE',

            /**
             * Invoked when the component is about to update due to a transition from
             * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
             * and `nextContext`.
             *
             * Use this as an opportunity to perform preparation before an update occurs.
             *
             * NOTE: You **cannot** use `this.setState()` in this method.
             *
             * @param {object} nextProps
             * @param {?object} nextState
             * @param {?object} nextContext
             * @param {ReactReconcileTransaction} transaction
             * @optional
             */
            componentWillUpdate: 'DEFINE_MANY',

            /**
             * Invoked when the component's DOM representation has been updated.
             *
             * Use this as an opportunity to operate on the DOM when the component has
             * been updated.
             *
             * @param {object} prevProps
             * @param {?object} prevState
             * @param {?object} prevContext
             * @param {DOMElement} rootNode DOM element representing the component.
             * @optional
             */
            componentDidUpdate: 'DEFINE_MANY',

            /**
             * Invoked when the component is about to be removed from its parent and have
             * its DOM representation destroyed.
             *
             * Use this as an opportunity to deallocate any external resources.
             *
             * NOTE: There is no `componentDidUnmount` since your component will have been
             * destroyed by that point.
             *
             * @optional
             */
            componentWillUnmount: 'DEFINE_MANY',

            // ==== Advanced methods ====

            /**
             * Updates the component's currently mounted DOM representation.
             *
             * By default, this implements React's rendering and reconciliation algorithm.
             * Sophisticated clients may wish to override this.
             *
             * @param {ReactReconcileTransaction} transaction
             * @internal
             * @overridable
             */
            updateComponent: 'OVERRIDE_BASE'

          };

          /**
           * Mapping from class specification keys to special processing functions.
           *
           * Although these are declared like instance properties in the specification
           * when defining classes using `React.createClass`, they are actually static
           * and are accessible on the constructor instead of the prototype. Despite
           * being static, they must be defined outside of the "statics" key under
           * which all other static methods are defined.
           */
          var RESERVED_SPEC_KEYS = {
            displayName: function (Constructor, displayName) {
              Constructor.displayName = displayName;
            },
            mixins: function (Constructor, mixins) {
              if (mixins) {
                for (var i = 0; i < mixins.length; i++) {
                  mixSpecIntoComponent(Constructor, mixins[i]);
                }
              }
            },
            childContextTypes: function (Constructor, childContextTypes) {
              if ((undefined) !== 'production') {
                validateTypeDef(Constructor, childContextTypes, 'childContext');
              }
              Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
            },
            contextTypes: function (Constructor, contextTypes) {
              if ((undefined) !== 'production') {
                validateTypeDef(Constructor, contextTypes, 'context');
              }
              Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
            },
            /**
             * Special case getDefaultProps which should move into statics but requires
             * automatic merging.
             */
            getDefaultProps: function (Constructor, getDefaultProps) {
              if (Constructor.getDefaultProps) {
                Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
              } else {
                Constructor.getDefaultProps = getDefaultProps;
              }
            },
            propTypes: function (Constructor, propTypes) {
              if ((undefined) !== 'production') {
                validateTypeDef(Constructor, propTypes, 'prop');
              }
              Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
            },
            statics: function (Constructor, statics) {
              mixStaticSpecIntoComponent(Constructor, statics);
            },
            autobind: function () {}
          };

          function validateTypeDef(Constructor, typeDef, location) {
            for (var propName in typeDef) {
              if (typeDef.hasOwnProperty(propName)) {
                // use a warning instead of an _invariant so components
                // don't show up in prod but only in __DEV__
                (undefined) !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName): void 0;
              }
            }
          }

          function validateMethodOverride(isAlreadyDefined, name) {
            var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

            // Disallow overriding of base class methods unless explicitly allowed.
            if (ReactClassMixin.hasOwnProperty(name)) {
              _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);
            }

            // Disallow defining methods more than once unless explicitly allowed.
            if (isAlreadyDefined) {
              _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);
            }
          }

          /**
           * Mixin helper which handles policy validation and reserved
           * specification keys when building React classes.
           */
          function mixSpecIntoComponent(Constructor, spec) {
            if (!spec) {
              if ((undefined) !== 'production') {
                var typeofSpec = typeof spec;
                var isMixinValid = typeofSpec === 'object' && spec !== null;

                (undefined) !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec): void 0;
              }

              return;
            }

            _invariant(typeof spec !== 'function', 'ReactClass: You\'re attempting to ' + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');
            _invariant(!isValidElement(spec), 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.');

            var proto = Constructor.prototype;
            var autoBindPairs = proto.__reactAutoBindPairs;

            // By handling mixins before any other properties, we ensure the same
            // chaining order is applied to methods with DEFINE_MANY policy, whether
            // mixins are listed before or after these methods in the spec.
            if (spec.hasOwnProperty(MIXINS_KEY)) {
              RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
            }

            for (var name in spec) {
              if (!spec.hasOwnProperty(name)) {
                continue;
              }

              if (name === MIXINS_KEY) {
                // We have already handled mixins in a special case above.
                continue;
              }

              var property = spec[name];
              var isAlreadyDefined = proto.hasOwnProperty(name);
              validateMethodOverride(isAlreadyDefined, name);

              if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
                RESERVED_SPEC_KEYS[name](Constructor, property);
              } else {
                // Setup methods on prototype:
                // The following member methods should not be automatically bound:
                // 1. Expected ReactClass methods (in the "interface").
                // 2. Overridden methods (that were mixed in).
                var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
                var isFunction = typeof property === 'function';
                var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

                if (shouldAutoBind) {
                  autoBindPairs.push(name, property);
                  proto[name] = property;
                } else {
                  if (isAlreadyDefined) {
                    var specPolicy = ReactClassInterface[name];

                    // These cases should already be caught by validateMethodOverride.
                    _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);

                    // For methods which are defined more than once, call the existing
                    // methods before calling the new property, merging if appropriate.
                    if (specPolicy === 'DEFINE_MANY_MERGED') {
                      proto[name] = createMergedResultFunction(proto[name], property);
                    } else if (specPolicy === 'DEFINE_MANY') {
                      proto[name] = createChainedFunction(proto[name], property);
                    }
                  } else {
                    proto[name] = property;
                    if ((undefined) !== 'production') {
                      // Add verbose displayName to the function, which helps when looking
                      // at profiling tools.
                      if (typeof property === 'function' && spec.displayName) {
                        proto[name].displayName = spec.displayName + '_' + name;
                      }
                    }
                  }
                }
              }
            }
          }

          function mixStaticSpecIntoComponent(Constructor, statics) {
            if (!statics) {
              return;
            }
            for (var name in statics) {
              var property = statics[name];
              if (!statics.hasOwnProperty(name)) {
                continue;
              }

              var isReserved = name in RESERVED_SPEC_KEYS;
              _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);

              var isInherited = name in Constructor;
              _invariant(!isInherited, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);
              Constructor[name] = property;
            }
          }

          /**
           * Merge two objects, but throw if both contain the same key.
           *
           * @param {object} one The first object, which is mutated.
           * @param {object} two The second object
           * @return {object} one after it has been mutated to contain everything in two.
           */
          function mergeIntoWithNoDuplicateKeys(one, two) {
            _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

            for (var key in two) {
              if (two.hasOwnProperty(key)) {
                _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);
                one[key] = two[key];
              }
            }
            return one;
          }

          /**
           * Creates a function that invokes two functions and merges their return values.
           *
           * @param {function} one Function to invoke first.
           * @param {function} two Function to invoke second.
           * @return {function} Function that invokes the two argument functions.
           * @private
           */
          function createMergedResultFunction(one, two) {
            return function mergedResult() {
              var a = one.apply(this, arguments);
              var b = two.apply(this, arguments);
              if (a == null) {
                return b;
              } else if (b == null) {
                return a;
              }
              var c = {};
              mergeIntoWithNoDuplicateKeys(c, a);
              mergeIntoWithNoDuplicateKeys(c, b);
              return c;
            };
          }

          /**
           * Creates a function that invokes two functions and ignores their return vales.
           *
           * @param {function} one Function to invoke first.
           * @param {function} two Function to invoke second.
           * @return {function} Function that invokes the two argument functions.
           * @private
           */
          function createChainedFunction(one, two) {
            return function chainedFunction() {
              one.apply(this, arguments);
              two.apply(this, arguments);
            };
          }

          /**
           * Binds a method to the component.
           *
           * @param {object} component Component whose method is going to be bound.
           * @param {function} method Method to be bound.
           * @return {function} The bound method.
           */
          function bindAutoBindMethod(component, method) {
            var boundMethod = method.bind(component);
            if ((undefined) !== 'production') {
              boundMethod.__reactBoundContext = component;
              boundMethod.__reactBoundMethod = method;
              boundMethod.__reactBoundArguments = null;
              var componentName = component.constructor.displayName;
              var _bind = boundMethod.bind;
              boundMethod.bind = function (newThis) {
                for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }

                // User is trying to bind() an autobound method; we effectively will
                // ignore the value of "this" that the user is trying to use, so
                // let's warn.
                if (newThis !== component && newThis !== null) {
                  (undefined) !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName): void 0;
                } else if (!args.length) {
                  (undefined) !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName): void 0;
                  return boundMethod;
                }
                var reboundMethod = _bind.apply(boundMethod, arguments);
                reboundMethod.__reactBoundContext = component;
                reboundMethod.__reactBoundMethod = method;
                reboundMethod.__reactBoundArguments = args;
                return reboundMethod;
              };
            }
            return boundMethod;
          }

          /**
           * Binds all auto-bound methods in a component.
           *
           * @param {object} component Component whose method is going to be bound.
           */
          function bindAutoBindMethods(component) {
            var pairs = component.__reactAutoBindPairs;
            for (var i = 0; i < pairs.length; i += 2) {
              var autoBindKey = pairs[i];
              var method = pairs[i + 1];
              component[autoBindKey] = bindAutoBindMethod(component, method);
            }
          }

          var IsMountedMixin = {
            componentDidMount: function () {
              this.__isMounted = true;
            },
            componentWillUnmount: function () {
              this.__isMounted = false;
            }
          };

          /**
           * Add more to the ReactClass base class. These are all legacy features and
           * therefore not already part of the modern ReactComponent.
           */
          var ReactClassMixin = {

            /**
             * TODO: This will be deprecated because state should always keep a consistent
             * type signature and the only use case for this, is to avoid that.
             */
            replaceState: function (newState, callback) {
              this.updater.enqueueReplaceState(this, newState, callback);
            },

            /**
             * Checks whether or not this composite component is mounted.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function () {
              if ((undefined) !== 'production') {
                (undefined) !== 'production' ? warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component'): void 0;
                this.__didWarnIsMounted = true;
              }
              return !!this.__isMounted;
            }
          };

          var ReactClassComponent = function () {};
          _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

          /**
           * Creates a composite component class given a class specification.
           * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
           *
           * @param {object} spec Class specification (which must define `render`).
           * @return {function} Component constructor function.
           * @public
           */
          function createClass(spec) {
            // To keep our warnings more understandable, we'll use a little hack here to
            // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
            // unnecessarily identify a class without displayName as 'Constructor'.
            var Constructor = identity(function (props, context, updater) {
              // This constructor gets overridden by mocks. The argument is used
              // by mocks to assert on what gets mounted.

              if ((undefined) !== 'production') {
                (undefined) !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory'): void 0;
              }

              // Wire up auto-binding
              if (this.__reactAutoBindPairs.length) {
                bindAutoBindMethods(this);
              }

              this.props = props;
              this.context = context;
              this.refs = emptyObject;
              this.updater = updater || ReactNoopUpdateQueue;

              this.state = null;

              // ReactClasses doesn't have constructors. Instead, they use the
              // getInitialState and componentWillMount methods for initialization.

              var initialState = this.getInitialState ? this.getInitialState() : null;
              if ((undefined) !== 'production') {
                // We allow auto-mocks to proceed as if they're returning null.
                if (initialState === undefined && this.getInitialState._isMockFunction) {
                  // This is probably bad practice. Consider warning here and
                  // deprecating this convenience.
                  initialState = null;
                }
              }
              _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

              this.state = initialState;
            });
            Constructor.prototype = new ReactClassComponent();
            Constructor.prototype.constructor = Constructor;
            Constructor.prototype.__reactAutoBindPairs = [];

            injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

            mixSpecIntoComponent(Constructor, IsMountedMixin);
            mixSpecIntoComponent(Constructor, spec);

            // Initialize the defaultProps property after all mixins have been merged.
            if (Constructor.getDefaultProps) {
              Constructor.defaultProps = Constructor.getDefaultProps();
            }

            if ((undefined) !== 'production') {
              // This is a tag to indicate that the use of these method names is ok,
              // since it's used with createClass. If it's not, then it's likely a
              // mistake so we'll warn you to use the static property, property
              // initializer or constructor respectively.
              if (Constructor.getDefaultProps) {
                Constructor.getDefaultProps.isReactClassApproved = {};
              }
              if (Constructor.prototype.getInitialState) {
                Constructor.prototype.getInitialState.isReactClassApproved = {};
              }
            }

            _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

            if ((undefined) !== 'production') {
              (undefined) !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component'): void 0;
              (undefined) !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component'): void 0;
            }

            // Reduce time spent doing lookups by setting these on the prototype.
            for (var methodName in ReactClassInterface) {
              if (!Constructor.prototype[methodName]) {
                Constructor.prototype[methodName] = null;
              }
            }

            return Constructor;
          }

          return createClass;
        }

        module.exports = factory;


        /***/
      }),
      /* 221 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         *
         */

        'use strict';

        var emptyObject = {};

        if ((undefined) !== 'production') {
          Object.freeze(emptyObject);
        }

        module.exports = emptyObject;

        /***/
      }),
      /* 222 */
      /***/
      (function (module, exports) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = contains;

        function contains(root, n) {
          var node = n;
          while (node) {
            if (node === root) {
              return true;
            }
            node = node.parentNode;
          }

          return false;
        }
        module.exports = exports['default'];

        /***/
      }),
      /* 223 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends2 = __webpack_require__(162);

        var _extends3 = _interopRequireDefault(_extends2);

        var _classCallCheck2 = __webpack_require__(169);

        var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

        var _possibleConstructorReturn2 = __webpack_require__(170);

        var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

        var _inherits2 = __webpack_require__(193);

        var _inherits3 = _interopRequireDefault(_inherits2);

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _propTypes = __webpack_require__(211);

        var _propTypes2 = _interopRequireDefault(_propTypes);

        var _reactDom = __webpack_require__(30);

        var _reactDom2 = _interopRequireDefault(_reactDom);

        var _rcAlign = __webpack_require__(224);

        var _rcAlign2 = _interopRequireDefault(_rcAlign);

        var _rcAnimate = __webpack_require__(236);

        var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

        var _PopupInner = __webpack_require__(245);

        var _PopupInner2 = _interopRequireDefault(_PopupInner);

        var _LazyRenderBox = __webpack_require__(246);

        var _LazyRenderBox2 = _interopRequireDefault(_LazyRenderBox);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var Popup = function (_Component) {
          (0, _inherits3["default"])(Popup, _Component);

          function Popup() {
            var _temp, _this, _ret;

            (0, _classCallCheck3["default"])(this, Popup);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3["default"])(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.onAlign = function (popupDomNode, align) {
              var props = _this.props;
              var alignClassName = props.getClassNameFromAlign(props.align);
              var currentAlignClassName = props.getClassNameFromAlign(align);
              if (alignClassName !== currentAlignClassName) {
                _this.currentAlignClassName = currentAlignClassName;
                popupDomNode.className = _this.getClassName(currentAlignClassName);
              }
              props.onAlign(popupDomNode, align);
            }, _this.getTarget = function () {
              return _this.props.getRootDomNode();
            }, _this.saveAlign = function (align) {
              _this.alignInstance = align;
            }, _temp), (0, _possibleConstructorReturn3["default"])(_this, _ret);
          }

          Popup.prototype.componentDidMount = function componentDidMount() {
            this.rootNode = this.getPopupDomNode();
          };

          Popup.prototype.getPopupDomNode = function getPopupDomNode() {
            return _reactDom2["default"].findDOMNode(this.refs.popup);
          };

          Popup.prototype.getMaskTransitionName = function getMaskTransitionName() {
            var props = this.props;
            var transitionName = props.maskTransitionName;
            var animation = props.maskAnimation;
            if (!transitionName && animation) {
              transitionName = props.prefixCls + '-' + animation;
            }
            return transitionName;
          };

          Popup.prototype.getTransitionName = function getTransitionName() {
            var props = this.props;
            var transitionName = props.transitionName;
            if (!transitionName && props.animation) {
              transitionName = props.prefixCls + '-' + props.animation;
            }
            return transitionName;
          };

          Popup.prototype.getClassName = function getClassName(currentAlignClassName) {
            return this.props.prefixCls + ' ' + this.props.className + ' ' + currentAlignClassName;
          };

          Popup.prototype.getPopupElement = function getPopupElement() {
            var props = this.props;
            var align = props.align,
              style = props.style,
              visible = props.visible,
              prefixCls = props.prefixCls,
              destroyPopupOnHide = props.destroyPopupOnHide;

            var className = this.getClassName(this.currentAlignClassName || props.getClassNameFromAlign(align));
            var hiddenClassName = prefixCls + '-hidden';
            if (!visible) {
              this.currentAlignClassName = null;
            }
            var newStyle = (0, _extends3["default"])({}, style, this.getZIndexStyle());
            var popupInnerProps = {
              className: className,
              prefixCls: prefixCls,
              ref: 'popup',
              onMouseEnter: props.onMouseEnter,
              onMouseLeave: props.onMouseLeave,
              style: newStyle
            };
            if (destroyPopupOnHide) {
              return _react2["default"].createElement(
                _rcAnimate2["default"], {
                  component: '',
                  exclusive: true,
                  transitionAppear: true,
                  transitionName: this.getTransitionName()
                },
                visible ? _react2["default"].createElement(
                  _rcAlign2["default"], {
                    target: this.getTarget,
                    key: 'popup',
                    ref: this.saveAlign,
                    monitorWindowResize: true,
                    align: align,
                    onAlign: this.onAlign
                  },
                  _react2["default"].createElement(
                    _PopupInner2["default"],
                    (0, _extends3["default"])({
                      visible: true
                    }, popupInnerProps),
                    props.children
                  )
                ) : null
              );
            }
            return _react2["default"].createElement(
              _rcAnimate2["default"], {
                component: '',
                exclusive: true,
                transitionAppear: true,
                transitionName: this.getTransitionName(),
                showProp: 'xVisible'
              },
              _react2["default"].createElement(
                _rcAlign2["default"], {
                  target: this.getTarget,
                  key: 'popup',
                  ref: this.saveAlign,
                  monitorWindowResize: true,
                  xVisible: visible,
                  childrenProps: { visible: 'xVisible' },
                  disabled: !visible,
                  align: align,
                  onAlign: this.onAlign
                },
                _react2["default"].createElement(
                  _PopupInner2["default"],
                  (0, _extends3["default"])({
                    hiddenClassName: hiddenClassName
                  }, popupInnerProps),
                  props.children
                )
              )
            );
          };

          Popup.prototype.getZIndexStyle = function getZIndexStyle() {
            var style = {};
            var props = this.props;
            if (props.zIndex !== undefined) {
              style.zIndex = props.zIndex;
            }
            return style;
          };

          Popup.prototype.getMaskElement = function getMaskElement() {
            var props = this.props;
            var maskElement = void 0;
            if (props.mask) {
              var maskTransition = this.getMaskTransitionName();
              maskElement = _react2["default"].createElement(_LazyRenderBox2["default"], {
                style: this.getZIndexStyle(),
                key: 'mask',
                className: props.prefixCls + '-mask',
                hiddenClassName: props.prefixCls + '-mask-hidden',
                visible: props.visible
              });
              if (maskTransition) {
                maskElement = _react2["default"].createElement(
                  _rcAnimate2["default"], {
                    key: 'mask',
                    showProp: 'visible',
                    transitionAppear: true,
                    component: '',
                    transitionName: maskTransition
                  },
                  maskElement
                );
              }
            }
            return maskElement;
          };

          Popup.prototype.render = function render() {
            return _react2["default"].createElement(
              'div',
              null,
              this.getMaskElement(),
              this.getPopupElement()
            );
          };

          return Popup;
        }(_react.Component);

        Popup.propTypes = {
          visible: _propTypes2["default"].bool,
          style: _propTypes2["default"].object,
          getClassNameFromAlign: _propTypes2["default"].func,
          onAlign: _propTypes2["default"].func,
          getRootDomNode: _propTypes2["default"].func,
          onMouseEnter: _propTypes2["default"].func,
          align: _propTypes2["default"].any,
          destroyPopupOnHide: _propTypes2["default"].bool,
          className: _propTypes2["default"].string,
          prefixCls: _propTypes2["default"].string,
          onMouseLeave: _propTypes2["default"].func
        };
        exports["default"] = Popup;
        module.exports = exports['default'];

        /***/
      }),
      /* 224 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _Align = __webpack_require__(225);

        var _Align2 = _interopRequireDefault(_Align);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        exports["default"] = _Align2["default"]; // export this package's api

        module.exports = exports['default'];

        /***/
      }),
      /* 225 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _propTypes = __webpack_require__(211);

        var _propTypes2 = _interopRequireDefault(_propTypes);

        var _reactDom = __webpack_require__(30);

        var _reactDom2 = _interopRequireDefault(_reactDom);

        var _domAlign = __webpack_require__(226);

        var _domAlign2 = _interopRequireDefault(_domAlign);

        var _addEventListener = __webpack_require__(201);

        var _addEventListener2 = _interopRequireDefault(_addEventListener);

        var _isWindow = __webpack_require__(235);

        var _isWindow2 = _interopRequireDefault(_isWindow);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

        function buffer(fn, ms) {
          var timer = void 0;

          function clear() {
            if (timer) {
              clearTimeout(timer);
              timer = null;
            }
          }

          function bufferFn() {
            clear();
            timer = setTimeout(fn, ms);
          }

          bufferFn.clear = clear;

          return bufferFn;
        }

        var Align = function (_Component) {
          _inherits(Align, _Component);

          function Align() {
            var _temp, _this, _ret;

            _classCallCheck(this, Align);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.forceAlign = function () {
              var props = _this.props;
              if (!props.disabled) {
                var source = _reactDom2["default"].findDOMNode(_this);
                props.onAlign(source, (0, _domAlign2["default"])(source, props.target(), props.align));
              }
            }, _temp), _possibleConstructorReturn(_this, _ret);
          }

          Align.prototype.componentDidMount = function componentDidMount() {
            var props = this.props;
            // if parent ref not attached .... use document.getElementById
            this.forceAlign();
            if (!props.disabled && props.monitorWindowResize) {
              this.startMonitorWindowResize();
            }
          };

          Align.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
            var reAlign = false;
            var props = this.props;

            if (!props.disabled) {
              if (prevProps.disabled || prevProps.align !== props.align) {
                reAlign = true;
              } else {
                var lastTarget = prevProps.target();
                var currentTarget = props.target();
                if ((0, _isWindow2["default"])(lastTarget) && (0, _isWindow2["default"])(currentTarget)) {
                  reAlign = false;
                } else if (lastTarget !== currentTarget) {
                  reAlign = true;
                }
              }
            }

            if (reAlign) {
              this.forceAlign();
            }

            if (props.monitorWindowResize && !props.disabled) {
              this.startMonitorWindowResize();
            } else {
              this.stopMonitorWindowResize();
            }
          };

          Align.prototype.componentWillUnmount = function componentWillUnmount() {
            this.stopMonitorWindowResize();
          };

          Align.prototype.startMonitorWindowResize = function startMonitorWindowResize() {
            if (!this.resizeHandler) {
              this.bufferMonitor = buffer(this.forceAlign, this.props.monitorBufferTime);
              this.resizeHandler = (0, _addEventListener2["default"])(window, 'resize', this.bufferMonitor);
            }
          };

          Align.prototype.stopMonitorWindowResize = function stopMonitorWindowResize() {
            if (this.resizeHandler) {
              this.bufferMonitor.clear();
              this.resizeHandler.remove();
              this.resizeHandler = null;
            }
          };

          Align.prototype.render = function render() {
            var _props = this.props,
              childrenProps = _props.childrenProps,
              children = _props.children;

            var child = _react2["default"].Children.only(children);
            if (childrenProps) {
              var newProps = {};
              for (var prop in childrenProps) {
                if (childrenProps.hasOwnProperty(prop)) {
                  newProps[prop] = this.props[childrenProps[prop]];
                }
              }
              return _react2["default"].cloneElement(child, newProps);
            }
            return child;
          };

          return Align;
        }(_react.Component);

        Align.propTypes = {
          childrenProps: _propTypes2["default"].object,
          align: _propTypes2["default"].object.isRequired,
          target: _propTypes2["default"].func,
          onAlign: _propTypes2["default"].func,
          monitorBufferTime: _propTypes2["default"].number,
          monitorWindowResize: _propTypes2["default"].bool,
          disabled: _propTypes2["default"].bool,
          children: _propTypes2["default"].any
        };
        Align.defaultProps = {
          target: function target() {
            return window;
          },
          onAlign: function onAlign() {},
          monitorBufferTime: 50,
          monitorWindowResize: false,
          disabled: false
        };
        exports["default"] = Align;
        module.exports = exports['default'];

        /***/
      }),
      /* 226 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _utils = __webpack_require__(227);

        var _utils2 = _interopRequireDefault(_utils);

        var _getOffsetParent = __webpack_require__(229);

        var _getOffsetParent2 = _interopRequireDefault(_getOffsetParent);

        var _getVisibleRectForElement = __webpack_require__(230);

        var _getVisibleRectForElement2 = _interopRequireDefault(_getVisibleRectForElement);

        var _adjustForViewport = __webpack_require__(231);

        var _adjustForViewport2 = _interopRequireDefault(_adjustForViewport);

        var _getRegion = __webpack_require__(232);

        var _getRegion2 = _interopRequireDefault(_getRegion);

        var _getElFuturePos = __webpack_require__(233);

        var _getElFuturePos2 = _interopRequireDefault(_getElFuturePos);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        // http://yiminghe.iteye.com/blog/1124720

        /**
         * align dom node flexibly
         * @author yiminghe@gmail.com
         */

        function isFailX(elFuturePos, elRegion, visibleRect) {
          return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
        }

        function isFailY(elFuturePos, elRegion, visibleRect) {
          return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
        }

        function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
          return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
        }

        function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
          return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
        }

        function flip(points, reg, map) {
          var ret = [];
          _utils2["default"].each(points, function (p) {
            ret.push(p.replace(reg, function (m) {
              return map[m];
            }));
          });
          return ret;
        }

        function flipOffset(offset, index) {
          offset[index] = -offset[index];
          return offset;
        }

        function convertOffset(str, offsetLen) {
          var n = void 0;
          if (/%$/.test(str)) {
            n = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
          } else {
            n = parseInt(str, 10);
          }
          return n || 0;
        }

        function normalizeOffset(offset, el) {
          offset[0] = convertOffset(offset[0], el.width);
          offset[1] = convertOffset(offset[1], el.height);
        }

        function domAlign(el, refNode, align) {
          var points = align.points;
          var offset = align.offset || [0, 0];
          var targetOffset = align.targetOffset || [0, 0];
          var overflow = align.overflow;
          var target = align.target || refNode;
          var source = align.source || el;
          offset = [].concat(offset);
          targetOffset = [].concat(targetOffset);
          overflow = overflow || {};
          var newOverflowCfg = {};

          var fail = 0;
          // 当前节点可以被放置的显示区域
          var visibleRect = (0, _getVisibleRectForElement2["default"])(source);
          // 当前节点所占的区域, left/top/width/height
          var elRegion = (0, _getRegion2["default"])(source);
          // 参照节点所占的区域, left/top/width/height
          var refNodeRegion = (0, _getRegion2["default"])(target);
          // 将 offset 转换成数值，支持百分比
          normalizeOffset(offset, elRegion);
          normalizeOffset(targetOffset, refNodeRegion);
          // 当前节点将要被放置的位置
          var elFuturePos = (0, _getElFuturePos2["default"])(elRegion, refNodeRegion, points, offset, targetOffset);
          // 当前节点将要所处的区域
          var newElRegion = _utils2["default"].merge(elRegion, elFuturePos);

          // 如果可视区域不能完全放置当前节点时允许调整
          if (visibleRect && (overflow.adjustX || overflow.adjustY)) {
            if (overflow.adjustX) {
              // 如果横向不能放下
              if (isFailX(elFuturePos, elRegion, visibleRect)) {
                // 对齐位置反下
                var newPoints = flip(points, /[lr]/ig, {
                  l: 'r',
                  r: 'l'
                });
                // 偏移量也反下
                var newOffset = flipOffset(offset, 0);
                var newTargetOffset = flipOffset(targetOffset, 0);
                var newElFuturePos = (0, _getElFuturePos2["default"])(elRegion, refNodeRegion, newPoints, newOffset, newTargetOffset);
                if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
                  fail = 1;
                  points = newPoints;
                  offset = newOffset;
                  targetOffset = newTargetOffset;
                }
              }
            }

            if (overflow.adjustY) {
              // 如果纵向不能放下
              if (isFailY(elFuturePos, elRegion, visibleRect)) {
                // 对齐位置反下
                var _newPoints = flip(points, /[tb]/ig, {
                  t: 'b',
                  b: 't'
                });
                // 偏移量也反下
                var _newOffset = flipOffset(offset, 1);
                var _newTargetOffset = flipOffset(targetOffset, 1);
                var _newElFuturePos = (0, _getElFuturePos2["default"])(elRegion, refNodeRegion, _newPoints, _newOffset, _newTargetOffset);
                if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
                  fail = 1;
                  points = _newPoints;
                  offset = _newOffset;
                  targetOffset = _newTargetOffset;
                }
              }
            }

            // 如果失败，重新计算当前节点将要被放置的位置
            if (fail) {
              elFuturePos = (0, _getElFuturePos2["default"])(elRegion, refNodeRegion, points, offset, targetOffset);
              _utils2["default"].mix(newElRegion, elFuturePos);
            }

            // 检查反下后的位置是否可以放下了
            // 如果仍然放不下只有指定了可以调整当前方向才调整
            newOverflowCfg.adjustX = overflow.adjustX && isFailX(elFuturePos, elRegion, visibleRect);

            newOverflowCfg.adjustY = overflow.adjustY && isFailY(elFuturePos, elRegion, visibleRect);

            // 确实要调整，甚至可能会调整高度宽度
            if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
              newElRegion = (0, _adjustForViewport2["default"])(elFuturePos, elRegion, visibleRect, newOverflowCfg);
            }
          }

          // need judge to in case set fixed with in css on height auto element
          if (newElRegion.width !== elRegion.width) {
            _utils2["default"].css(source, 'width', _utils2["default"].width(source) + newElRegion.width - elRegion.width);
          }

          if (newElRegion.height !== elRegion.height) {
            _utils2["default"].css(source, 'height', _utils2["default"].height(source) + newElRegion.height - elRegion.height);
          }

          // https://github.com/kissyteam/kissy/issues/190
          // 相对于屏幕位置没变，而 left/top 变了
          // 例如 <div 'relative'><el absolute></div>
          _utils2["default"].offset(source, {
            left: newElRegion.left,
            top: newElRegion.top
          }, {
            useCssRight: align.useCssRight,
            useCssBottom: align.useCssBottom,
            useCssTransform: align.useCssTransform
          });

          return {
            points: points,
            offset: offset,
            targetOffset: targetOffset,
            overflow: newOverflowCfg
          };
        }

        domAlign.__getOffsetParent = _getOffsetParent2["default"];

        domAlign.__getVisibleRectForElement = _getVisibleRectForElement2["default"];

        exports["default"] = domAlign;
        /**
         *  2012-04-26 yiminghe@gmail.com
         *   - 优化智能对齐算法
         *   - 慎用 resizeXX
         *
         *  2011-07-13 yiminghe@gmail.com note:
         *   - 增加智能对齐，以及大小调整选项
         **/

        module.exports = exports['default'];

        /***/
      }),
      /* 227 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

        var _propertyUtils = __webpack_require__(228);

        var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;

        var getComputedStyleX = void 0;

        function force(x, y) {
          return x + y;
        }

        function css(el, name, v) {
          var value = v;
          if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
            for (var i in name) {
              if (name.hasOwnProperty(i)) {
                css(el, i, name[i]);
              }
            }
            return undefined;
          }
          if (typeof value !== 'undefined') {
            if (typeof value === 'number') {
              value = value + 'px';
            }
            el.style[name] = value;
            return undefined;
          }
          return getComputedStyleX(el, name);
        }

        function getClientPosition(elem) {
          var box = void 0;
          var x = void 0;
          var y = void 0;
          var doc = elem.ownerDocument;
          var body = doc.body;
          var docElem = doc && doc.documentElement;
          // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
          box = elem.getBoundingClientRect();

          // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
          // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
          // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

          x = box.left;
          y = box.top;

          // In IE, most of the time, 2 extra pixels are added to the top and left
          // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
          // IE6 standards mode, this border can be overridden by setting the
          // document element's border to zero -- thus, we cannot rely on the
          // offset always being 2 pixels.

          // In quirks mode, the offset can be determined by querying the body's
          // clientLeft/clientTop, but in standards mode, it is found by querying
          // the document element's clientLeft/clientTop.  Since we already called
          // getClientBoundingRect we have already forced a reflow, so it is not
          // too expensive just to query them all.

          // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
          // 窗口边框标准是设 documentElement ,quirks 时设置 body
          // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
          // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
          // 标准 ie 下 docElem.clientTop 就是 border-top
          // ie7 html 即窗口边框改变不了。永远为 2
          // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

          x -= docElem.clientLeft || body.clientLeft || 0;
          y -= docElem.clientTop || body.clientTop || 0;

          return {
            left: x,
            top: y
          };
        }

        function getScroll(w, top) {
          var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
          var method = 'scroll' + (top ? 'Top' : 'Left');
          if (typeof ret !== 'number') {
            var d = w.document;
            // ie6,7,8 standard mode
            ret = d.documentElement[method];
            if (typeof ret !== 'number') {
              // quirks mode
              ret = d.body[method];
            }
          }
          return ret;
        }

        function getScrollLeft(w) {
          return getScroll(w);
        }

        function getScrollTop(w) {
          return getScroll(w, true);
        }

        function getOffset(el) {
          var pos = getClientPosition(el);
          var doc = el.ownerDocument;
          var w = doc.defaultView || doc.parentWindow;
          pos.left += getScrollLeft(w);
          pos.top += getScrollTop(w);
          return pos;
        }

        function _getComputedStyle(elem, name, cs) {
          var computedStyle = cs;
          var val = '';
          var d = elem.ownerDocument;
          computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null);

          // https://github.com/kissyteam/kissy/issues/61
          if (computedStyle) {
            val = computedStyle.getPropertyValue(name) || computedStyle[name];
          }

          return val;
        }

        var _RE_NUM_NO_PX = new RegExp('^(' + RE_NUM + ')(?!px)[a-z%]+$', 'i');
        var RE_POS = /^(top|right|bottom|left)$/;
        var CURRENT_STYLE = 'currentStyle';
        var RUNTIME_STYLE = 'runtimeStyle';
        var LEFT = 'left';
        var PX = 'px';

        function _getComputedStyleIE(elem, name) {
          // currentStyle maybe null
          // http://msdn.microsoft.com/en-us/library/ms535231.aspx
          var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];

          // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
          // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
          // 在 ie 下不对，需要直接用 offset 方式
          // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了

          // From the awesome hack by Dean Edwards
          // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
          // If we're not dealing with a regular pixel number
          // but a number that has a weird ending, we need to convert it to pixels
          // exclude left right for relativity
          if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
            // Remember the original values
            var style = elem.style;
            var left = style[LEFT];
            var rsLeft = elem[RUNTIME_STYLE][LEFT];

            // prevent flashing of content
            elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];

            // Put in the new values to get a computed value out
            style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
            ret = style.pixelLeft + PX;

            // Revert the changed values
            style[LEFT] = left;

            elem[RUNTIME_STYLE][LEFT] = rsLeft;
          }
          return ret === '' ? 'auto' : ret;
        }

        if (typeof window !== 'undefined') {
          getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
        }

        function getOffsetDirection(dir, option) {
          if (dir === 'left') {
            return option.useCssRight ? 'right' : dir;
          }
          return option.useCssBottom ? 'bottom' : dir;
        }

        function oppositeOffsetDirection(dir) {
          if (dir === 'left') {
            return 'right';
          } else if (dir === 'right') {
            return 'left';
          } else if (dir === 'top') {
            return 'bottom';
          } else if (dir === 'bottom') {
            return 'top';
          }
        }

        // 设置 elem 相对 elem.ownerDocument 的坐标
        function setLeftTop(elem, offset, option) {
          // set position first, in-case top/left are set even on static elem
          if (css(elem, 'position') === 'static') {
            elem.style.position = 'relative';
          }
          var presetH = -999;
          var presetV = -999;
          var horizontalProperty = getOffsetDirection('left', option);
          var verticalProperty = getOffsetDirection('top', option);
          var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
          var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);

          if (horizontalProperty !== 'left') {
            presetH = 999;
          }

          if (verticalProperty !== 'top') {
            presetV = 999;
          }
          var originalTransition = '';
          var originalOffset = getOffset(elem);
          if ('left' in offset || 'top' in offset) {
            originalTransition = (0, _propertyUtils.getTransitionProperty)(elem) || '';
            (0, _propertyUtils.setTransitionProperty)(elem, 'none');
          }
          if ('left' in offset) {
            elem.style[oppositeHorizontalProperty] = '';
            elem.style[horizontalProperty] = presetH + 'px';
          }
          if ('top' in offset) {
            elem.style[oppositeVerticalProperty] = '';
            elem.style[verticalProperty] = presetV + 'px';
          }
          var old = getOffset(elem);
          var originalStyle = {};
          for (var key in offset) {
            if (offset.hasOwnProperty(key)) {
              var dir = getOffsetDirection(key, option);
              var preset = key === 'left' ? presetH : presetV;
              var off = originalOffset[key] - old[key];
              if (dir === key) {
                originalStyle[dir] = preset + off;
              } else {
                originalStyle[dir] = preset - off;
              }
            }
          }
          css(elem, originalStyle);
          // force relayout
          force(elem.offsetTop, elem.offsetLeft);
          if ('left' in offset || 'top' in offset) {
            (0, _propertyUtils.setTransitionProperty)(elem, originalTransition);
          }
          var ret = {};
          for (var _key in offset) {
            if (offset.hasOwnProperty(_key)) {
              var _dir = getOffsetDirection(_key, option);
              var _off = offset[_key] - originalOffset[_key];
              if (_key === _dir) {
                ret[_dir] = originalStyle[_dir] + _off;
              } else {
                ret[_dir] = originalStyle[_dir] - _off;
              }
            }
          }
          css(elem, ret);
        }

        function setTransform(elem, offset) {
          var originalOffset = getOffset(elem);
          var originalXY = (0, _propertyUtils.getTransformXY)(elem);
          var resultXY = { x: originalXY.x, y: originalXY.y };
          if ('left' in offset) {
            resultXY.x = originalXY.x + offset.left - originalOffset.left;
          }
          if ('top' in offset) {
            resultXY.y = originalXY.y + offset.top - originalOffset.top;
          }
          (0, _propertyUtils.setTransformXY)(elem, resultXY);
        }

        function setOffset(elem, offset, option) {
          if (option.useCssRight || option.useCssBottom) {
            setLeftTop(elem, offset, option);
          } else if (option.useCssTransform && (0, _propertyUtils.getTransformName)() in document.body.style) {
            setTransform(elem, offset, option);
          } else {
            setLeftTop(elem, offset, option);
          }
        }

        function each(arr, fn) {
          for (var i = 0; i < arr.length; i++) {
            fn(arr[i]);
          }
        }

        function isBorderBoxFn(elem) {
          return getComputedStyleX(elem, 'boxSizing') === 'border-box';
        }

        var BOX_MODELS = ['margin', 'border', 'padding'];
        var CONTENT_INDEX = -1;
        var PADDING_INDEX = 2;
        var BORDER_INDEX = 1;
        var MARGIN_INDEX = 0;

        function swap(elem, options, callback) {
          var old = {};
          var style = elem.style;
          var name = void 0;

          // Remember the old values, and insert the new ones
          for (name in options) {
            if (options.hasOwnProperty(name)) {
              old[name] = style[name];
              style[name] = options[name];
            }
          }

          callback.call(elem);

          // Revert the old values
          for (name in options) {
            if (options.hasOwnProperty(name)) {
              style[name] = old[name];
            }
          }
        }

        function getPBMWidth(elem, props, which) {
          var value = 0;
          var prop = void 0;
          var j = void 0;
          var i = void 0;
          for (j = 0; j < props.length; j++) {
            prop = props[j];
            if (prop) {
              for (i = 0; i < which.length; i++) {
                var cssProp = void 0;
                if (prop === 'border') {
                  cssProp = '' + prop + which[i] + 'Width';
                } else {
                  cssProp = prop + which[i];
                }
                value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
              }
            }
          }
          return value;
        }

        /**
         * A crude way of determining if an object is a window
         * @member util
         */
        function isWindow(obj) {
          // must use == for ie8
          /* eslint eqeqeq:0 */
          return obj !== null && obj !== undefined && obj == obj.window;
        }

        var domUtils = {};

        each(['Width', 'Height'], function (name) {
          domUtils['doc' + name] = function (refWin) {
            var d = refWin.document;
            return Math.max(
              // firefox chrome documentElement.scrollHeight< body.scrollHeight
              // ie standard mode : documentElement.scrollHeight> body.scrollHeight
              d.documentElement['scroll' + name],
              // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
              d.body['scroll' + name], domUtils['viewport' + name](d));
          };

          domUtils['viewport' + name] = function (win) {
            // pc browser includes scrollbar in window.innerWidth
            var prop = 'client' + name;
            var doc = win.document;
            var body = doc.body;
            var documentElement = doc.documentElement;
            var documentElementProp = documentElement[prop];
            // 标准模式取 documentElement
            // backcompat 取 body
            return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
          };
        });

        /*
         得到元素的大小信息
         @param elem
         @param name
         @param {String} [extra]  'padding' : (css width) + padding
         'border' : (css width) + padding + border
         'margin' : (css width) + padding + border + margin
         */
        function getWH(elem, name, ex) {
          var extra = ex;
          if (isWindow(elem)) {
            return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
          } else if (elem.nodeType === 9) {
            return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
          }
          var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
          var borderBoxValue = name === 'width' ? elem.offsetWidth : elem.offsetHeight;
          var computedStyle = getComputedStyleX(elem);
          var isBorderBox = isBorderBoxFn(elem, computedStyle);
          var cssBoxValue = 0;
          if (borderBoxValue === null || borderBoxValue === undefined || borderBoxValue <= 0) {
            borderBoxValue = undefined;
            // Fall back to computed then un computed css if necessary
            cssBoxValue = getComputedStyleX(elem, name);
            if (cssBoxValue === null || cssBoxValue === undefined || Number(cssBoxValue) < 0) {
              cssBoxValue = elem.style[name] || 0;
            }
            // Normalize '', auto, and prepare for extra
            cssBoxValue = parseFloat(cssBoxValue) || 0;
          }
          if (extra === undefined) {
            extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
          }
          var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
          var val = borderBoxValue || cssBoxValue;
          if (extra === CONTENT_INDEX) {
            if (borderBoxValueOrIsBorderBox) {
              return val - getPBMWidth(elem, ['border', 'padding'], which, computedStyle);
            }
            return cssBoxValue;
          } else if (borderBoxValueOrIsBorderBox) {
            if (extra === BORDER_INDEX) {
              return val;
            }
            return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which, computedStyle) : getPBMWidth(elem, ['margin'], which, computedStyle));
          }
          return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which, computedStyle);
        }

        var cssShow = {
          position: 'absolute',
          visibility: 'hidden',
          display: 'block'
        };

        // fix #119 : https://github.com/kissyteam/kissy/issues/119
        function getWHIgnoreDisplay() {
          for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            args[_key2] = arguments[_key2];
          }

          var val = void 0;
          var elem = args[0];
          // in case elem is window
          // elem.offsetWidth === undefined
          if (elem.offsetWidth !== 0) {
            val = getWH.apply(undefined, args);
          } else {
            swap(elem, cssShow, function () {
              val = getWH.apply(undefined, args);
            });
          }
          return val;
        }

        each(['width', 'height'], function (name) {
          var first = name.charAt(0).toUpperCase() + name.slice(1);
          domUtils['outer' + first] = function (el, includeMargin) {
            return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
          };
          var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

          domUtils[name] = function (elem, v) {
            var val = v;
            if (val !== undefined) {
              if (elem) {
                var computedStyle = getComputedStyleX(elem);
                var isBorderBox = isBorderBoxFn(elem);
                if (isBorderBox) {
                  val += getPBMWidth(elem, ['padding', 'border'], which, computedStyle);
                }
                return css(elem, name, val);
              }
              return undefined;
            }
            return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
          };
        });

        function mix(to, from) {
          for (var i in from) {
            if (from.hasOwnProperty(i)) {
              to[i] = from[i];
            }
          }
          return to;
        }

        var utils = {
          getWindow: function getWindow(node) {
            if (node && node.document && node.setTimeout) {
              return node;
            }
            var doc = node.ownerDocument || node;
            return doc.defaultView || doc.parentWindow;
          },
          offset: function offset(el, value, option) {
            if (typeof value !== 'undefined') {
              setOffset(el, value, option || {});
            } else {
              return getOffset(el);
            }
          },

          isWindow: isWindow,
          each: each,
          css: css,
          clone: function clone(obj) {
            var i = void 0;
            var ret = {};
            for (i in obj) {
              if (obj.hasOwnProperty(i)) {
                ret[i] = obj[i];
              }
            }
            var overflow = obj.overflow;
            if (overflow) {
              for (i in obj) {
                if (obj.hasOwnProperty(i)) {
                  ret.overflow[i] = obj.overflow[i];
                }
              }
            }
            return ret;
          },

          mix: mix,
          getWindowScrollLeft: function getWindowScrollLeft(w) {
            return getScrollLeft(w);
          },
          getWindowScrollTop: function getWindowScrollTop(w) {
            return getScrollTop(w);
          },
          merge: function merge() {
            var ret = {};

            for (var _len2 = arguments.length, args = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
              args[_key3] = arguments[_key3];
            }

            for (var i = 0; i < args.length; i++) {
              utils.mix(ret, args[i]);
            }
            return ret;
          },

          viewportWidth: 0,
          viewportHeight: 0
        };

        mix(utils, domUtils);

        exports["default"] = utils;
        module.exports = exports['default'];

        /***/
      }),
      /* 228 */
      /***/
      (function (module, exports) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getTransformName = getTransformName;
        exports.setTransitionProperty = setTransitionProperty;
        exports.getTransitionProperty = getTransitionProperty;
        exports.getTransformXY = getTransformXY;
        exports.setTransformXY = setTransformXY;
        var vendorPrefix = void 0;

        var jsCssMap = {
          Webkit: '-webkit-',
          Moz: '-moz-',
          // IE did it wrong again ...
          ms: '-ms-',
          O: '-o-'
        };

        function getVendorPrefix() {
          if (vendorPrefix !== undefined) {
            return vendorPrefix;
          }
          vendorPrefix = '';
          var style = document.createElement('p').style;
          var testProp = 'Transform';
          for (var key in jsCssMap) {
            if (key + testProp in style) {
              vendorPrefix = key;
            }
          }
          return vendorPrefix;
        }

        function getTransitionName() {
          return getVendorPrefix() ? getVendorPrefix() + 'TransitionProperty' : 'transitionProperty';
        }

        function getTransformName() {
          return getVendorPrefix() ? getVendorPrefix() + 'Transform' : 'transform';
        }

        function setTransitionProperty(node, value) {
          var name = getTransitionName();
          if (name) {
            node.style[name] = value;
            if (name !== 'transitionProperty') {
              node.style.transitionProperty = value;
            }
          }
        }

        function setTransform(node, value) {
          var name = getTransformName();
          if (name) {
            node.style[name] = value;
            if (name !== 'transform') {
              node.style.transform = value;
            }
          }
        }

        function getTransitionProperty(node) {
          return node.style.transitionProperty || node.style[getTransitionName()];
        }

        function getTransformXY(node) {
          var style = window.getComputedStyle(node, null);
          var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());
          if (transform && transform !== 'none') {
            var matrix = transform.replace(/[^0-9\-.,]/g, '').split(',');
            return { x: parseFloat(matrix[12] || matrix[4], 0), y: parseFloat(matrix[13] || matrix[5], 0) };
          }
          return {
            x: 0,
            y: 0
          };
        }

        var matrix2d = /matrix\((.*)\)/;
        var matrix3d = /matrix3d\((.*)\)/;

        function setTransformXY(node, xy) {
          var style = window.getComputedStyle(node, null);
          var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());
          if (transform && transform !== 'none') {
            var arr = void 0;
            var match2d = transform.match(matrix2d);
            if (match2d) {
              match2d = match2d[1];
              arr = match2d.split(',').map(function (item) {
                return parseFloat(item, 10);
              });
              arr[4] = xy.x;
              arr[5] = xy.y;
              setTransform(node, 'matrix(' + arr.join(',') + ')');
            } else {
              var match3d = transform.match(matrix3d)[1];
              arr = match3d.split(',').map(function (item) {
                return parseFloat(item, 10);
              });
              arr[12] = xy.x;
              arr[13] = xy.y;
              setTransform(node, 'matrix3d(' + arr.join(',') + ')');
            }
          } else {
            setTransform(node, 'translateX(' + xy.x + 'px) translateY(' + xy.y + 'px) translateZ(0)');
          }
        }

        /***/
      }),
      /* 229 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _utils = __webpack_require__(227);

        var _utils2 = _interopRequireDefault(_utils);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        /**
         * 得到会导致元素显示不全的祖先元素
         */

        function getOffsetParent(element) {
          // ie 这个也不是完全可行
          /*
           <div style="width: 50px;height: 100px;overflow: hidden">
           <div style="width: 50px;height: 100px;position: relative;" id="d6">
           元素 6 高 100px 宽 50px<br/>
           </div>
           </div>
           */
          // element.offsetParent does the right thing in ie7 and below. Return parent with layout!
          //  In other browsers it only includes elements with position absolute, relative or
          // fixed, not elements with overflow set to auto or scroll.
          //        if (UA.ie && ieMode < 8) {
          //            return element.offsetParent;
          //        }
          // 统一的 offsetParent 方法
          var doc = element.ownerDocument;
          var body = doc.body;
          var parent = void 0;
          var positionStyle = _utils2["default"].css(element, 'position');
          var skipStatic = positionStyle === 'fixed' || positionStyle === 'absolute';

          if (!skipStatic) {
            return element.nodeName.toLowerCase() === 'html' ? null : element.parentNode;
          }

          for (parent = element.parentNode; parent && parent !== body; parent = parent.parentNode) {
            positionStyle = _utils2["default"].css(parent, 'position');
            if (positionStyle !== 'static') {
              return parent;
            }
          }
          return null;
        }

        exports["default"] = getOffsetParent;
        module.exports = exports['default'];

        /***/
      }),
      /* 230 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _utils = __webpack_require__(227);

        var _utils2 = _interopRequireDefault(_utils);

        var _getOffsetParent = __webpack_require__(229);

        var _getOffsetParent2 = _interopRequireDefault(_getOffsetParent);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        /**
         * 获得元素的显示部分的区域
         */
        function getVisibleRectForElement(element) {
          var visibleRect = {
            left: 0,
            right: Infinity,
            top: 0,
            bottom: Infinity
          };
          var el = (0, _getOffsetParent2["default"])(element);
          var scrollX = void 0;
          var scrollY = void 0;
          var winSize = void 0;
          var doc = element.ownerDocument;
          var win = doc.defaultView || doc.parentWindow;
          var body = doc.body;
          var documentElement = doc.documentElement;

          // Determine the size of the visible rect by climbing the dom accounting for
          // all scrollable containers.
          while (el) {
            // clientWidth is zero for inline block elements in ie.
            if ((navigator.userAgent.indexOf('MSIE') === -1 || el.clientWidth !== 0) &&
              // body may have overflow set on it, yet we still get the entire
              // viewport. In some browsers, el.offsetParent may be
              // document.documentElement, so check for that too.
              el !== body && el !== documentElement && _utils2["default"].css(el, 'overflow') !== 'visible') {
              var pos = _utils2["default"].offset(el);
              // add border
              pos.left += el.clientLeft;
              pos.top += el.clientTop;
              visibleRect.top = Math.max(visibleRect.top, pos.top);
              visibleRect.right = Math.min(visibleRect.right,
                // consider area without scrollBar
                pos.left + el.clientWidth);
              visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
              visibleRect.left = Math.max(visibleRect.left, pos.left);
            } else if (el === body || el === documentElement) {
              break;
            }
            el = (0, _getOffsetParent2["default"])(el);
          }

          // Clip by window's viewport.
          scrollX = _utils2["default"].getWindowScrollLeft(win);
          scrollY = _utils2["default"].getWindowScrollTop(win);
          visibleRect.left = Math.max(visibleRect.left, scrollX);
          visibleRect.top = Math.max(visibleRect.top, scrollY);
          winSize = {
            width: _utils2["default"].viewportWidth(win),
            height: _utils2["default"].viewportHeight(win)
          };
          visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
          visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
          return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
        }

        exports["default"] = getVisibleRectForElement;
        module.exports = exports['default'];

        /***/
      }),
      /* 231 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _utils = __webpack_require__(227);

        var _utils2 = _interopRequireDefault(_utils);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
          var pos = _utils2["default"].clone(elFuturePos);
          var size = {
            width: elRegion.width,
            height: elRegion.height
          };

          if (overflow.adjustX && pos.left < visibleRect.left) {
            pos.left = visibleRect.left;
          }

          // Left edge inside and right edge outside viewport, try to resize it.
          if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {
            size.width -= pos.left + size.width - visibleRect.right;
          }

          // Right edge outside viewport, try to move it.
          if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
            // 保证左边界和可视区域左边界对齐
            pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
          }

          // Top edge outside viewport, try to move it.
          if (overflow.adjustY && pos.top < visibleRect.top) {
            pos.top = visibleRect.top;
          }

          // Top edge inside and bottom edge outside viewport, try to resize it.
          if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {
            size.height -= pos.top + size.height - visibleRect.bottom;
          }

          // Bottom edge outside viewport, try to move it.
          if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
            // 保证上边界和可视区域上边界对齐
            pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
          }

          return _utils2["default"].mix(pos, size);
        }

        exports["default"] = adjustForViewport;
        module.exports = exports['default'];

        /***/
      }),
      /* 232 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _utils = __webpack_require__(227);

        var _utils2 = _interopRequireDefault(_utils);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function getRegion(node) {
          var offset = void 0;
          var w = void 0;
          var h = void 0;
          if (!_utils2["default"].isWindow(node) && node.nodeType !== 9) {
            offset = _utils2["default"].offset(node);
            w = _utils2["default"].outerWidth(node);
            h = _utils2["default"].outerHeight(node);
          } else {
            var win = _utils2["default"].getWindow(node);
            offset = {
              left: _utils2["default"].getWindowScrollLeft(win),
              top: _utils2["default"].getWindowScrollTop(win)
            };
            w = _utils2["default"].viewportWidth(win);
            h = _utils2["default"].viewportHeight(win);
          }
          offset.width = w;
          offset.height = h;
          return offset;
        }

        exports["default"] = getRegion;
        module.exports = exports['default'];

        /***/
      }),
      /* 233 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _getAlignOffset = __webpack_require__(234);

        var _getAlignOffset2 = _interopRequireDefault(_getAlignOffset);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset) {
          var xy = void 0;
          var diff = void 0;
          var p1 = void 0;
          var p2 = void 0;

          xy = {
            left: elRegion.left,
            top: elRegion.top
          };

          p1 = (0, _getAlignOffset2["default"])(refNodeRegion, points[1]);
          p2 = (0, _getAlignOffset2["default"])(elRegion, points[0]);

          diff = [p2.left - p1.left, p2.top - p1.top];

          return {
            left: xy.left - diff[0] + offset[0] - targetOffset[0],
            top: xy.top - diff[1] + offset[1] - targetOffset[1]
          };
        }

        exports["default"] = getElFuturePos;
        module.exports = exports['default'];

        /***/
      }),
      /* 234 */
      /***/
      (function (module, exports) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        /**
         * 获取 node 上的 align 对齐点 相对于页面的坐标
         */

        function getAlignOffset(region, align) {
          var V = align.charAt(0);
          var H = align.charAt(1);
          var w = region.width;
          var h = region.height;
          var x = void 0;
          var y = void 0;

          x = region.left;
          y = region.top;

          if (V === 'c') {
            y += h / 2;
          } else if (V === 'b') {
            y += h;
          }

          if (H === 'c') {
            x += w / 2;
          } else if (H === 'r') {
            x += w;
          }

          return {
            left: x,
            top: y
          };
        }

        exports["default"] = getAlignOffset;
        module.exports = exports['default'];

        /***/
      }),
      /* 235 */
      /***/
      (function (module, exports) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = isWindow;

        function isWindow(obj) {
          /* eslint no-eq-null: 0 */
          /* eslint eqeqeq: 0 */
          return obj != null && obj == obj.window;
        }
        module.exports = exports['default'];

        /***/
      }),
      /* 236 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        // export this package's api
        module.exports = __webpack_require__(237);

        /***/
      }),
      /* 237 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _propTypes = __webpack_require__(211);

        var _propTypes2 = _interopRequireDefault(_propTypes);

        var _ChildrenUtils = __webpack_require__(238);

        var _AnimateChild = __webpack_require__(239);

        var _AnimateChild2 = _interopRequireDefault(_AnimateChild);

        var _util = __webpack_require__(244);

        var _util2 = _interopRequireDefault(_util);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

        var defaultKey = 'rc_animate_' + Date.now();


        function getChildrenFromProps(props) {
          var children = props.children;
          if (_react2["default"].isValidElement(children)) {
            if (!children.key) {
              return _react2["default"].cloneElement(children, {
                key: defaultKey
              });
            }
          }
          return children;
        }

        function noop() {}

        var Animate = function (_React$Component) {
          _inherits(Animate, _React$Component);

          function Animate(props) {
            _classCallCheck(this, Animate);

            var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

            _initialiseProps.call(_this);

            _this.currentlyAnimatingKeys = {};
            _this.keysToEnter = [];
            _this.keysToLeave = [];

            _this.state = {
              children: (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(_this.props))
            };
            return _this;
          }

          Animate.prototype.componentDidMount = function componentDidMount() {
            var _this2 = this;

            var showProp = this.props.showProp;
            var children = this.state.children;
            if (showProp) {
              children = children.filter(function (child) {
                return !!child.props[showProp];
              });
            }
            children.forEach(function (child) {
              if (child) {
                _this2.performAppear(child.key);
              }
            });
          };

          Animate.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            var _this3 = this;

            this.nextProps = nextProps;
            var nextChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(nextProps));
            var props = this.props;
            // exclusive needs immediate response
            if (props.exclusive) {
              Object.keys(this.currentlyAnimatingKeys).forEach(function (key) {
                _this3.stop(key);
              });
            }
            var showProp = props.showProp;
            var currentlyAnimatingKeys = this.currentlyAnimatingKeys;
            // last props children if exclusive
            var currentChildren = props.exclusive ? (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props)) : this.state.children;
            // in case destroy in showProp mode
            var newChildren = [];
            if (showProp) {
              currentChildren.forEach(function (currentChild) {
                var nextChild = currentChild && (0, _ChildrenUtils.findChildInChildrenByKey)(nextChildren, currentChild.key);
                var newChild = void 0;
                if ((!nextChild || !nextChild.props[showProp]) && currentChild.props[showProp]) {
                  newChild = _react2["default"].cloneElement(nextChild || currentChild, _defineProperty({}, showProp, true));
                } else {
                  newChild = nextChild;
                }
                if (newChild) {
                  newChildren.push(newChild);
                }
              });
              nextChildren.forEach(function (nextChild) {
                if (!nextChild || !(0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, nextChild.key)) {
                  newChildren.push(nextChild);
                }
              });
            } else {
              newChildren = (0, _ChildrenUtils.mergeChildren)(currentChildren, nextChildren);
            }

            // need render to avoid update
            this.setState({
              children: newChildren
            });

            nextChildren.forEach(function (child) {
              var key = child && child.key;
              if (child && currentlyAnimatingKeys[key]) {
                return;
              }
              var hasPrev = child && (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);
              if (showProp) {
                var showInNext = child.props[showProp];
                if (hasPrev) {
                  var showInNow = (0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);
                  if (!showInNow && showInNext) {
                    _this3.keysToEnter.push(key);
                  }
                } else if (showInNext) {
                  _this3.keysToEnter.push(key);
                }
              } else if (!hasPrev) {
                _this3.keysToEnter.push(key);
              }
            });

            currentChildren.forEach(function (child) {
              var key = child && child.key;
              if (child && currentlyAnimatingKeys[key]) {
                return;
              }
              var hasNext = child && (0, _ChildrenUtils.findChildInChildrenByKey)(nextChildren, key);
              if (showProp) {
                var showInNow = child.props[showProp];
                if (hasNext) {
                  var showInNext = (0, _ChildrenUtils.findShownChildInChildrenByKey)(nextChildren, key, showProp);
                  if (!showInNext && showInNow) {
                    _this3.keysToLeave.push(key);
                  }
                } else if (showInNow) {
                  _this3.keysToLeave.push(key);
                }
              } else if (!hasNext) {
                _this3.keysToLeave.push(key);
              }
            });
          };

          Animate.prototype.componentDidUpdate = function componentDidUpdate() {
            var keysToEnter = this.keysToEnter;
            this.keysToEnter = [];
            keysToEnter.forEach(this.performEnter);
            var keysToLeave = this.keysToLeave;
            this.keysToLeave = [];
            keysToLeave.forEach(this.performLeave);
          };

          Animate.prototype.isValidChildByKey = function isValidChildByKey(currentChildren, key) {
            var showProp = this.props.showProp;
            if (showProp) {
              return (0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);
            }
            return (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);
          };

          Animate.prototype.stop = function stop(key) {
            delete this.currentlyAnimatingKeys[key];
            var component = this.refs[key];
            if (component) {
              component.stop();
            }
          };

          Animate.prototype.render = function render() {
            var props = this.props;
            this.nextProps = props;
            var stateChildren = this.state.children;
            var children = null;
            if (stateChildren) {
              children = stateChildren.map(function (child) {
                if (child === null || child === undefined) {
                  return child;
                }
                if (!child.key) {
                  throw new Error('must set key for <rc-animate> children');
                }
                return _react2["default"].createElement(
                  _AnimateChild2["default"], {
                    key: child.key,
                    ref: child.key,
                    animation: props.animation,
                    transitionName: props.transitionName,
                    transitionEnter: props.transitionEnter,
                    transitionAppear: props.transitionAppear,
                    transitionLeave: props.transitionLeave
                  },
                  child
                );
              });
            }
            var Component = props.component;
            if (Component) {
              var passedProps = props;
              if (typeof Component === 'string') {
                passedProps = _extends({
                  className: props.className,
                  style: props.style
                }, props.componentProps);
              }
              return _react2["default"].createElement(
                Component,
                passedProps,
                children
              );
            }
            return children[0] || null;
          };

          return Animate;
        }(_react2["default"].Component);

        Animate.propTypes = {
          component: _propTypes2["default"].any,
          componentProps: _propTypes2["default"].object,
          animation: _propTypes2["default"].object,
          transitionName: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),
          transitionEnter: _propTypes2["default"].bool,
          transitionAppear: _propTypes2["default"].bool,
          exclusive: _propTypes2["default"].bool,
          transitionLeave: _propTypes2["default"].bool,
          onEnd: _propTypes2["default"].func,
          onEnter: _propTypes2["default"].func,
          onLeave: _propTypes2["default"].func,
          onAppear: _propTypes2["default"].func,
          showProp: _propTypes2["default"].string
        };
        Animate.defaultProps = {
          animation: {},
          component: 'span',
          componentProps: {},
          transitionEnter: true,
          transitionLeave: true,
          transitionAppear: false,
          onEnd: noop,
          onEnter: noop,
          onLeave: noop,
          onAppear: noop
        };

        var _initialiseProps = function _initialiseProps() {
          var _this4 = this;

          this.performEnter = function (key) {
            // may already remove by exclusive
            if (_this4.refs[key]) {
              _this4.currentlyAnimatingKeys[key] = true;
              _this4.refs[key].componentWillEnter(_this4.handleDoneAdding.bind(_this4, key, 'enter'));
            }
          };

          this.performAppear = function (key) {
            if (_this4.refs[key]) {
              _this4.currentlyAnimatingKeys[key] = true;
              _this4.refs[key].componentWillAppear(_this4.handleDoneAdding.bind(_this4, key, 'appear'));
            }
          };

          this.handleDoneAdding = function (key, type) {
            var props = _this4.props;
            delete _this4.currentlyAnimatingKeys[key];
            // if update on exclusive mode, skip check
            if (props.exclusive && props !== _this4.nextProps) {
              return;
            }
            var currentChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));
            if (!_this4.isValidChildByKey(currentChildren, key)) {
              // exclusive will not need this
              _this4.performLeave(key);
            } else {
              if (type === 'appear') {
                if (_util2["default"].allowAppearCallback(props)) {
                  props.onAppear(key);
                  props.onEnd(key, true);
                }
              } else {
                if (_util2["default"].allowEnterCallback(props)) {
                  props.onEnter(key);
                  props.onEnd(key, true);
                }
              }
            }
          };

          this.performLeave = function (key) {
            // may already remove by exclusive
            if (_this4.refs[key]) {
              _this4.currentlyAnimatingKeys[key] = true;
              _this4.refs[key].componentWillLeave(_this4.handleDoneLeaving.bind(_this4, key));
            }
          };

          this.handleDoneLeaving = function (key) {
            var props = _this4.props;
            delete _this4.currentlyAnimatingKeys[key];
            // if update on exclusive mode, skip check
            if (props.exclusive && props !== _this4.nextProps) {
              return;
            }
            var currentChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));
            // in case state change is too fast
            if (_this4.isValidChildByKey(currentChildren, key)) {
              _this4.performEnter(key);
            } else {
              var end = function end() {
                if (_util2["default"].allowLeaveCallback(props)) {
                  props.onLeave(key);
                  props.onEnd(key, false);
                }
              };
              if (!(0, _ChildrenUtils.isSameChildren)(_this4.state.children, currentChildren, props.showProp)) {
                _this4.setState({
                  children: currentChildren
                }, end);
              } else {
                end();
              }
            }
          };
        };

        exports["default"] = Animate;
        module.exports = exports['default'];

        /***/
      }),
      /* 238 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.toArrayChildren = toArrayChildren;
        exports.findChildInChildrenByKey = findChildInChildrenByKey;
        exports.findShownChildInChildrenByKey = findShownChildInChildrenByKey;
        exports.findHiddenChildInChildrenByKey = findHiddenChildInChildrenByKey;
        exports.isSameChildren = isSameChildren;
        exports.mergeChildren = mergeChildren;

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function toArrayChildren(children) {
          var ret = [];
          _react2["default"].Children.forEach(children, function (child) {
            ret.push(child);
          });
          return ret;
        }

        function findChildInChildrenByKey(children, key) {
          var ret = null;
          if (children) {
            children.forEach(function (child) {
              if (ret) {
                return;
              }
              if (child && child.key === key) {
                ret = child;
              }
            });
          }
          return ret;
        }

        function findShownChildInChildrenByKey(children, key, showProp) {
          var ret = null;
          if (children) {
            children.forEach(function (child) {
              if (child && child.key === key && child.props[showProp]) {
                if (ret) {
                  throw new Error('two child with same key for <rc-animate> children');
                }
                ret = child;
              }
            });
          }
          return ret;
        }

        function findHiddenChildInChildrenByKey(children, key, showProp) {
          var found = 0;
          if (children) {
            children.forEach(function (child) {
              if (found) {
                return;
              }
              found = child && child.key === key && !child.props[showProp];
            });
          }
          return found;
        }

        function isSameChildren(c1, c2, showProp) {
          var same = c1.length === c2.length;
          if (same) {
            c1.forEach(function (child, index) {
              var child2 = c2[index];
              if (child && child2) {
                if (child && !child2 || !child && child2) {
                  same = false;
                } else if (child.key !== child2.key) {
                  same = false;
                } else if (showProp && child.props[showProp] !== child2.props[showProp]) {
                  same = false;
                }
              }
            });
          }
          return same;
        }

        function mergeChildren(prev, next) {
          var ret = [];

          // For each key of `next`, the list of keys to insert before that key in
          // the combined list
          var nextChildrenPending = {};
          var pendingChildren = [];
          prev.forEach(function (child) {
            if (child && findChildInChildrenByKey(next, child.key)) {
              if (pendingChildren.length) {
                nextChildrenPending[child.key] = pendingChildren;
                pendingChildren = [];
              }
            } else {
              pendingChildren.push(child);
            }
          });

          next.forEach(function (child) {
            if (child && nextChildrenPending.hasOwnProperty(child.key)) {
              ret = ret.concat(nextChildrenPending[child.key]);
            }
            ret.push(child);
          });

          ret = ret.concat(pendingChildren);

          return ret;
        }

        /***/
      }),
      /* 239 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactDom = __webpack_require__(30);

        var _reactDom2 = _interopRequireDefault(_reactDom);

        var _propTypes = __webpack_require__(211);

        var _propTypes2 = _interopRequireDefault(_propTypes);

        var _cssAnimation = __webpack_require__(240);

        var _cssAnimation2 = _interopRequireDefault(_cssAnimation);

        var _util = __webpack_require__(244);

        var _util2 = _interopRequireDefault(_util);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

        var transitionMap = {
          enter: 'transitionEnter',
          appear: 'transitionAppear',
          leave: 'transitionLeave'
        };

        var AnimateChild = function (_React$Component) {
          _inherits(AnimateChild, _React$Component);

          function AnimateChild() {
            _classCallCheck(this, AnimateChild);

            return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
          }

          AnimateChild.prototype.componentWillUnmount = function componentWillUnmount() {
            this.stop();
          };

          AnimateChild.prototype.componentWillEnter = function componentWillEnter(done) {
            if (_util2["default"].isEnterSupported(this.props)) {
              this.transition('enter', done);
            } else {
              done();
            }
          };

          AnimateChild.prototype.componentWillAppear = function componentWillAppear(done) {
            if (_util2["default"].isAppearSupported(this.props)) {
              this.transition('appear', done);
            } else {
              done();
            }
          };

          AnimateChild.prototype.componentWillLeave = function componentWillLeave(done) {
            if (_util2["default"].isLeaveSupported(this.props)) {
              this.transition('leave', done);
            } else {
              // always sync, do not interupt with react component life cycle
              // update hidden -> animate hidden ->
              // didUpdate -> animate leave -> unmount (if animate is none)
              done();
            }
          };

          AnimateChild.prototype.transition = function transition(animationType, finishCallback) {
            var _this2 = this;

            var node = _reactDom2["default"].findDOMNode(this);
            var props = this.props;
            var transitionName = props.transitionName;
            var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';
            this.stop();
            var end = function end() {
              _this2.stopper = null;
              finishCallback();
            };
            if ((_cssAnimation.isCssAnimationSupported || !props.animation[animationType]) && transitionName && props[transitionMap[animationType]]) {
              var name = nameIsObj ? transitionName[animationType] : transitionName + '-' + animationType;
              var activeName = name + '-active';
              if (nameIsObj && transitionName[animationType + 'Active']) {
                activeName = transitionName[animationType + 'Active'];
              }
              this.stopper = (0, _cssAnimation2["default"])(node, {
                name: name,
                active: activeName
              }, end);
            } else {
              this.stopper = props.animation[animationType](node, end);
            }
          };

          AnimateChild.prototype.stop = function stop() {
            var stopper = this.stopper;
            if (stopper) {
              this.stopper = null;
              stopper.stop();
            }
          };

          AnimateChild.prototype.render = function render() {
            return this.props.children;
          };

          return AnimateChild;
        }(_react2["default"].Component);

        AnimateChild.propTypes = {
          children: _propTypes2["default"].any
        };
        exports["default"] = AnimateChild;
        module.exports = exports['default'];

        /***/
      }),
      /* 240 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

        var _Event = __webpack_require__(241);

        var _Event2 = _interopRequireDefault(_Event);

        var _componentClasses = __webpack_require__(242);

        var _componentClasses2 = _interopRequireDefault(_componentClasses);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var isCssAnimationSupported = _Event2["default"].endEvents.length !== 0;


        var capitalPrefixes = ['Webkit', 'Moz', 'O',
          // ms is special .... !
          'ms'
        ];
        var prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];

        function getStyleProperty(node, name) {
          // old ff need null, https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle
          var style = window.getComputedStyle(node, null);
          var ret = '';
          for (var i = 0; i < prefixes.length; i++) {
            ret = style.getPropertyValue(prefixes[i] + name);
            if (ret) {
              break;
            }
          }
          return ret;
        }

        function fixBrowserByTimeout(node) {
          if (isCssAnimationSupported) {
            var transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;
            var transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;
            var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;
            var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;
            var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);
            // sometimes, browser bug
            node.rcEndAnimTimeout = setTimeout(function () {
              node.rcEndAnimTimeout = null;
              if (node.rcEndListener) {
                node.rcEndListener();
              }
            }, time * 1000 + 200);
          }
        }

        function clearBrowserBugTimeout(node) {
          if (node.rcEndAnimTimeout) {
            clearTimeout(node.rcEndAnimTimeout);
            node.rcEndAnimTimeout = null;
          }
        }

        var cssAnimation = function cssAnimation(node, transitionName, endCallback) {
          var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';
          var className = nameIsObj ? transitionName.name : transitionName;
          var activeClassName = nameIsObj ? transitionName.active : transitionName + '-active';
          var end = endCallback;
          var start = void 0;
          var active = void 0;
          var nodeClasses = (0, _componentClasses2["default"])(node);

          if (endCallback && Object.prototype.toString.call(endCallback) === '[object Object]') {
            end = endCallback.end;
            start = endCallback.start;
            active = endCallback.active;
          }

          if (node.rcEndListener) {
            node.rcEndListener();
          }

          node.rcEndListener = function (e) {
            if (e && e.target !== node) {
              return;
            }

            if (node.rcAnimTimeout) {
              clearTimeout(node.rcAnimTimeout);
              node.rcAnimTimeout = null;
            }

            clearBrowserBugTimeout(node);

            nodeClasses.remove(className);
            nodeClasses.remove(activeClassName);

            _Event2["default"].removeEndEventListener(node, node.rcEndListener);
            node.rcEndListener = null;

            // Usually this optional end is used for informing an owner of
            // a leave animation and telling it to remove the child.
            if (end) {
              end();
            }
          };

          _Event2["default"].addEndEventListener(node, node.rcEndListener);

          if (start) {
            start();
          }
          nodeClasses.add(className);

          node.rcAnimTimeout = setTimeout(function () {
            node.rcAnimTimeout = null;
            nodeClasses.add(activeClassName);
            if (active) {
              setTimeout(active, 0);
            }
            fixBrowserByTimeout(node);
            // 30ms for firefox
          }, 30);

          return {
            stop: function stop() {
              if (node.rcEndListener) {
                node.rcEndListener();
              }
            }
          };
        };

        cssAnimation.style = function (node, style, callback) {
          if (node.rcEndListener) {
            node.rcEndListener();
          }

          node.rcEndListener = function (e) {
            if (e && e.target !== node) {
              return;
            }

            if (node.rcAnimTimeout) {
              clearTimeout(node.rcAnimTimeout);
              node.rcAnimTimeout = null;
            }

            clearBrowserBugTimeout(node);

            _Event2["default"].removeEndEventListener(node, node.rcEndListener);
            node.rcEndListener = null;

            // Usually this optional callback is used for informing an owner of
            // a leave animation and telling it to remove the child.
            if (callback) {
              callback();
            }
          };

          _Event2["default"].addEndEventListener(node, node.rcEndListener);

          node.rcAnimTimeout = setTimeout(function () {
            for (var s in style) {
              if (style.hasOwnProperty(s)) {
                node.style[s] = style[s];
              }
            }
            node.rcAnimTimeout = null;
            fixBrowserByTimeout(node);
          }, 0);
        };

        cssAnimation.setTransition = function (node, p, value) {
          var property = p;
          var v = value;
          if (value === undefined) {
            v = property;
            property = '';
          }
          property = property || '';
          capitalPrefixes.forEach(function (prefix) {
            node.style[prefix + 'Transition' + property] = v;
          });
        };

        cssAnimation.isCssAnimationSupported = isCssAnimationSupported;

        exports["default"] = cssAnimation;
        module.exports = exports['default'];

        /***/
      }),
      /* 241 */
      /***/
      (function (module, exports) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var EVENT_NAME_MAP = {
          transitionend: {
            transition: 'transitionend',
            WebkitTransition: 'webkitTransitionEnd',
            MozTransition: 'mozTransitionEnd',
            OTransition: 'oTransitionEnd',
            msTransition: 'MSTransitionEnd'
          },

          animationend: {
            animation: 'animationend',
            WebkitAnimation: 'webkitAnimationEnd',
            MozAnimation: 'mozAnimationEnd',
            OAnimation: 'oAnimationEnd',
            msAnimation: 'MSAnimationEnd'
          }
        };

        var endEvents = [];

        function detectEvents() {
          var testEl = document.createElement('div');
          var style = testEl.style;

          if (!('AnimationEvent' in window)) {
            delete EVENT_NAME_MAP.animationend.animation;
          }

          if (!('TransitionEvent' in window)) {
            delete EVENT_NAME_MAP.transitionend.transition;
          }

          for (var baseEventName in EVENT_NAME_MAP) {
            if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
              var baseEvents = EVENT_NAME_MAP[baseEventName];
              for (var styleName in baseEvents) {
                if (styleName in style) {
                  endEvents.push(baseEvents[styleName]);
                  break;
                }
              }
            }
          }
        }

        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
          detectEvents();
        }

        function addEventListener(node, eventName, eventListener) {
          node.addEventListener(eventName, eventListener, false);
        }

        function removeEventListener(node, eventName, eventListener) {
          node.removeEventListener(eventName, eventListener, false);
        }

        var TransitionEvents = {
          addEndEventListener: function addEndEventListener(node, eventListener) {
            if (endEvents.length === 0) {
              window.setTimeout(eventListener, 0);
              return;
            }
            endEvents.forEach(function (endEvent) {
              addEventListener(node, endEvent, eventListener);
            });
          },


          endEvents: endEvents,

          removeEndEventListener: function removeEndEventListener(node, eventListener) {
            if (endEvents.length === 0) {
              return;
            }
            endEvents.forEach(function (endEvent) {
              removeEventListener(node, endEvent, eventListener);
            });
          }
        };

        exports["default"] = TransitionEvents;
        module.exports = exports['default'];

        /***/
      }),
      /* 242 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Module dependencies.
         */

        try {
          var index = __webpack_require__(243);
        } catch (err) {
          var index = __webpack_require__(243);
        }

        /**
         * Whitespace regexp.
         */

        var re = /\s+/;

        /**
         * toString reference.
         */

        var toString = Object.prototype.toString;

        /**
         * Wrap `el` in a `ClassList`.
         *
         * @param {Element} el
         * @return {ClassList}
         * @api public
         */

        module.exports = function (el) {
          return new ClassList(el);
        };

        /**
         * Initialize a new ClassList for `el`.
         *
         * @param {Element} el
         * @api private
         */

        function ClassList(el) {
          if (!el || !el.nodeType) {
            throw new Error('A DOM element reference is required');
          }
          this.el = el;
          this.list = el.classList;
        }

        /**
         * Add class `name` if not already present.
         *
         * @param {String} name
         * @return {ClassList}
         * @api public
         */

        ClassList.prototype.add = function (name) {
          // classList
          if (this.list) {
            this.list.add(name);
            return this;
          }

          // fallback
          var arr = this.array();
          var i = index(arr, name);
          if (!~i) arr.push(name);
          this.el.className = arr.join(' ');
          return this;
        };

        /**
         * Remove class `name` when present, or
         * pass a regular expression to remove
         * any which match.
         *
         * @param {String|RegExp} name
         * @return {ClassList}
         * @api public
         */

        ClassList.prototype.remove = function (name) {
          if ('[object RegExp]' == toString.call(name)) {
            return this.removeMatching(name);
          }

          // classList
          if (this.list) {
            this.list.remove(name);
            return this;
          }

          // fallback
          var arr = this.array();
          var i = index(arr, name);
          if (~i) arr.splice(i, 1);
          this.el.className = arr.join(' ');
          return this;
        };

        /**
         * Remove all classes matching `re`.
         *
         * @param {RegExp} re
         * @return {ClassList}
         * @api private
         */

        ClassList.prototype.removeMatching = function (re) {
          var arr = this.array();
          for (var i = 0; i < arr.length; i++) {
            if (re.test(arr[i])) {
              this.remove(arr[i]);
            }
          }
          return this;
        };

        /**
         * Toggle class `name`, can force state via `force`.
         *
         * For browsers that support classList, but do not support `force` yet,
         * the mistake will be detected and corrected.
         *
         * @param {String} name
         * @param {Boolean} force
         * @return {ClassList}
         * @api public
         */

        ClassList.prototype.toggle = function (name, force) {
          // classList
          if (this.list) {
            if ("undefined" !== typeof force) {
              if (force !== this.list.toggle(name, force)) {
                this.list.toggle(name); // toggle again to correct
              }
            } else {
              this.list.toggle(name);
            }
            return this;
          }

          // fallback
          if ("undefined" !== typeof force) {
            if (!force) {
              this.remove(name);
            } else {
              this.add(name);
            }
          } else {
            if (this.has(name)) {
              this.remove(name);
            } else {
              this.add(name);
            }
          }

          return this;
        };

        /**
         * Return an array of classes.
         *
         * @return {Array}
         * @api public
         */

        ClassList.prototype.array = function () {
          var className = this.el.getAttribute('class') || '';
          var str = className.replace(/^\s+|\s+$/g, '');
          var arr = str.split(re);
          if ('' === arr[0]) arr.shift();
          return arr;
        };

        /**
         * Check if class `name` is present.
         *
         * @param {String} name
         * @return {ClassList}
         * @api public
         */

        ClassList.prototype.has =
          ClassList.prototype.contains = function (name) {
            return this.list ?
              this.list.contains(name) :
              !!~index(this.array(), name);
          };


        /***/
      }),
      /* 243 */
      /***/
      (function (module, exports) {

        module.exports = function (arr, obj) {
          if (arr.indexOf) return arr.indexOf(obj);
          for (var i = 0; i < arr.length; ++i) {
            if (arr[i] === obj) return i;
          }
          return -1;
        };

        /***/
      }),
      /* 244 */
      /***/
      (function (module, exports) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var util = {
          isAppearSupported: function isAppearSupported(props) {
            return props.transitionName && props.transitionAppear || props.animation.appear;
          },
          isEnterSupported: function isEnterSupported(props) {
            return props.transitionName && props.transitionEnter || props.animation.enter;
          },
          isLeaveSupported: function isLeaveSupported(props) {
            return props.transitionName && props.transitionLeave || props.animation.leave;
          },
          allowAppearCallback: function allowAppearCallback(props) {
            return props.transitionAppear || props.animation.appear;
          },
          allowEnterCallback: function allowEnterCallback(props) {
            return props.transitionEnter || props.animation.enter;
          },
          allowLeaveCallback: function allowLeaveCallback(props) {
            return props.transitionLeave || props.animation.leave;
          }
        };
        exports["default"] = util;
        module.exports = exports['default'];

        /***/
      }),
      /* 245 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _classCallCheck2 = __webpack_require__(169);

        var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

        var _possibleConstructorReturn2 = __webpack_require__(170);

        var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

        var _inherits2 = __webpack_require__(193);

        var _inherits3 = _interopRequireDefault(_inherits2);

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _propTypes = __webpack_require__(211);

        var _propTypes2 = _interopRequireDefault(_propTypes);

        var _LazyRenderBox = __webpack_require__(246);

        var _LazyRenderBox2 = _interopRequireDefault(_LazyRenderBox);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var PopupInner = function (_Component) {
          (0, _inherits3["default"])(PopupInner, _Component);

          function PopupInner() {
            (0, _classCallCheck3["default"])(this, PopupInner);
            return (0, _possibleConstructorReturn3["default"])(this, _Component.apply(this, arguments));
          }

          PopupInner.prototype.render = function render() {
            var props = this.props;
            var className = props.className;
            if (!props.visible) {
              className += ' ' + props.hiddenClassName;
            }
            return _react2["default"].createElement(
              'div', {
                className: className,
                onMouseEnter: props.onMouseEnter,
                onMouseLeave: props.onMouseLeave,
                style: props.style
              },
              _react2["default"].createElement(
                _LazyRenderBox2["default"], { className: props.prefixCls + '-content', visible: props.visible },
                props.children
              )
            );
          };

          return PopupInner;
        }(_react.Component);

        PopupInner.propTypes = {
          hiddenClassName: _propTypes2["default"].string,
          className: _propTypes2["default"].string,
          prefixCls: _propTypes2["default"].string,
          onMouseEnter: _propTypes2["default"].func,
          onMouseLeave: _propTypes2["default"].func,
          children: _propTypes2["default"].any
        };
        exports["default"] = PopupInner;
        module.exports = exports['default'];

        /***/
      }),
      /* 246 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _objectWithoutProperties2 = __webpack_require__(210);

        var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

        var _classCallCheck2 = __webpack_require__(169);

        var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

        var _possibleConstructorReturn2 = __webpack_require__(170);

        var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

        var _inherits2 = __webpack_require__(193);

        var _inherits3 = _interopRequireDefault(_inherits2);

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _propTypes = __webpack_require__(211);

        var _propTypes2 = _interopRequireDefault(_propTypes);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var LazyRenderBox = function (_Component) {
          (0, _inherits3["default"])(LazyRenderBox, _Component);

          function LazyRenderBox() {
            (0, _classCallCheck3["default"])(this, LazyRenderBox);
            return (0, _possibleConstructorReturn3["default"])(this, _Component.apply(this, arguments));
          }

          LazyRenderBox.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
            return nextProps.hiddenClassName || nextProps.visible;
          };

          LazyRenderBox.prototype.render = function render() {
            var _props = this.props,
              hiddenClassName = _props.hiddenClassName,
              visible = _props.visible,
              props = (0, _objectWithoutProperties3["default"])(_props, ['hiddenClassName', 'visible']);


            if (hiddenClassName || _react2["default"].Children.count(props.children) > 1) {
              if (!visible && hiddenClassName) {
                props.className += ' ' + hiddenClassName;
              }
              return _react2["default"].createElement('div', props);
            }

            return _react2["default"].Children.only(props.children);
          };

          return LazyRenderBox;
        }(_react.Component);

        LazyRenderBox.propTypes = {
          children: _propTypes2["default"].any,
          className: _propTypes2["default"].string,
          visible: _propTypes2["default"].bool,
          hiddenClassName: _propTypes2["default"].string
        };
        exports["default"] = LazyRenderBox;
        module.exports = exports['default'];

        /***/
      }),
      /* 247 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends2 = __webpack_require__(162);

        var _extends3 = _interopRequireDefault(_extends2);

        exports.getAlignFromPlacement = getAlignFromPlacement;
        exports.getPopupClassNameFromAlign = getPopupClassNameFromAlign;

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function isPointsEq(a1, a2) {
          return a1[0] === a2[0] && a1[1] === a2[1];
        }

        function getAlignFromPlacement(builtinPlacements, placementStr, align) {
          var baseAlign = builtinPlacements[placementStr] || {};
          return (0, _extends3["default"])({}, baseAlign, align);
        }

        function getPopupClassNameFromAlign(builtinPlacements, prefixCls, align) {
          var points = align.points;
          for (var placement in builtinPlacements) {
            if (builtinPlacements.hasOwnProperty(placement)) {
              if (isPointsEq(builtinPlacements[placement].points, points)) {
                return prefixCls + '-placement-' + placement;
              }
            }
          }
          return '';
        }

        /***/
      }),
      /* 248 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        exports["default"] = getContainerRenderMixin;

        var _reactDom = __webpack_require__(30);

        var _reactDom2 = _interopRequireDefault(_reactDom);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        function defaultGetContainer() {
          var container = document.createElement('div');
          document.body.appendChild(container);
          return container;
        }

        function getContainerRenderMixin(config) {
          var _config$autoMount = config.autoMount,
            autoMount = _config$autoMount === undefined ? true : _config$autoMount,
            _config$autoDestroy = config.autoDestroy,
            autoDestroy = _config$autoDestroy === undefined ? true : _config$autoDestroy,
            isVisible = config.isVisible,
            getComponent = config.getComponent,
            _config$getContainer = config.getContainer,
            getContainer = _config$getContainer === undefined ? defaultGetContainer : _config$getContainer;


          var mixin = void 0;

          function _renderComponent(instance, componentArg, ready) {
            if (!isVisible || instance._component || isVisible(instance)) {
              if (!instance._container) {
                instance._container = getContainer(instance);
              }
              var component = void 0;
              if (instance.getComponent) {
                component = instance.getComponent(componentArg);
              } else {
                component = getComponent(instance, componentArg);
              }
              _reactDom2["default"].unstable_renderSubtreeIntoContainer(instance, component, instance._container, function callback() {
                instance._component = this;
                if (ready) {
                  ready.call(this);
                }
              });
            }
          }

          if (autoMount) {
            mixin = _extends({}, mixin, {
              componentDidMount: function componentDidMount() {
                _renderComponent(this);
              },
              componentDidUpdate: function componentDidUpdate() {
                _renderComponent(this);
              }
            });
          }

          if (!autoMount || !autoDestroy) {
            mixin = _extends({}, mixin, {
              renderComponent: function renderComponent(componentArg, ready) {
                _renderComponent(this, componentArg, ready);
              }
            });
          }

          function _removeContainer(instance) {
            if (instance._container) {
              var container = instance._container;
              _reactDom2["default"].unmountComponentAtNode(container);
              container.parentNode.removeChild(container);
              instance._container = null;
            }
          }

          if (autoDestroy) {
            mixin = _extends({}, mixin, {
              componentWillUnmount: function componentWillUnmount() {
                _removeContainer(this);
              }
            });
          } else {
            mixin = _extends({}, mixin, {
              removeContainer: function removeContainer() {
                _removeContainer(this);
              }
            });
          }

          return mixin;
        }
        module.exports = exports['default'];

        /***/
      }),
      /* 249 */
      /***/
      (function (module, exports) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var autoAdjustOverflow = {
          adjustX: 1,
          adjustY: 1
        };

        var targetOffset = [0, 0];

        var placements = exports.placements = {
          left: {
            points: ['cr', 'cl'],
            overflow: autoAdjustOverflow,
            offset: [-4, 0],
            targetOffset: targetOffset
          },
          right: {
            points: ['cl', 'cr'],
            overflow: autoAdjustOverflow,
            offset: [4, 0],
            targetOffset: targetOffset
          },
          top: {
            points: ['bc', 'tc'],
            overflow: autoAdjustOverflow,
            offset: [0, -4],
            targetOffset: targetOffset
          },
          bottom: {
            points: ['tc', 'bc'],
            overflow: autoAdjustOverflow,
            offset: [0, 4],
            targetOffset: targetOffset
          },
          topLeft: {
            points: ['bl', 'tl'],
            overflow: autoAdjustOverflow,
            offset: [0, -4],
            targetOffset: targetOffset
          },
          leftTop: {
            points: ['tr', 'tl'],
            overflow: autoAdjustOverflow,
            offset: [-4, 0],
            targetOffset: targetOffset
          },
          topRight: {
            points: ['br', 'tr'],
            overflow: autoAdjustOverflow,
            offset: [0, -4],
            targetOffset: targetOffset
          },
          rightTop: {
            points: ['tl', 'tr'],
            overflow: autoAdjustOverflow,
            offset: [4, 0],
            targetOffset: targetOffset
          },
          bottomRight: {
            points: ['tr', 'br'],
            overflow: autoAdjustOverflow,
            offset: [0, 4],
            targetOffset: targetOffset
          },
          rightBottom: {
            points: ['bl', 'br'],
            overflow: autoAdjustOverflow,
            offset: [4, 0],
            targetOffset: targetOffset
          },
          bottomLeft: {
            points: ['tl', 'bl'],
            overflow: autoAdjustOverflow,
            offset: [0, 4],
            targetOffset: targetOffset
          },
          leftBottom: {
            points: ['br', 'bl'],
            overflow: autoAdjustOverflow,
            offset: [-4, 0],
            targetOffset: targetOffset
          }
        };

        exports["default"] = placements;

        /***/
      }),
      /* 250 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _defineProperty2 = __webpack_require__(104);

        var _defineProperty3 = _interopRequireDefault(_defineProperty2);

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _warning = __webpack_require__(251);

        var _warning2 = _interopRequireDefault(_warning);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var calcPoints = function calcPoints(vertical, marks, dots, step, min, max) {
          (0, _warning2["default"])(dots ? step > 0 : true, '`Slider[step]` should be a positive number in order to make Slider[dots] work.');
          var points = Object.keys(marks).map(parseFloat);
          if (dots) {
            for (var i = min; i <= max; i = i + step) {
              if (points.indexOf(i) >= 0) continue;
              points.push(i);
            }
          }
          return points;
        };

        var Steps = function Steps(_ref) {
          var prefixCls = _ref.prefixCls,
            vertical = _ref.vertical,
            marks = _ref.marks,
            dots = _ref.dots,
            step = _ref.step,
            included = _ref.included,
            lowerBound = _ref.lowerBound,
            upperBound = _ref.upperBound,
            max = _ref.max,
            min = _ref.min;

          var range = max - min;
          var elements = calcPoints(vertical, marks, dots, step, min, max).map(function (point) {
            var _classNames;

            var offset = Math.abs(point - min) / range * 100 + '%';
            var style = vertical ? { bottom: offset } : { left: offset };

            var isActived = !included && point === upperBound || included && point <= upperBound && point >= lowerBound;
            var pointClassName = (0, _classnames2["default"])((_classNames = {}, (0, _defineProperty3["default"])(_classNames, prefixCls + '-dot', true), (0, _defineProperty3["default"])(_classNames, prefixCls + '-dot-active', isActived), _classNames));

            return _react2["default"].createElement('span', { className: pointClassName, style: style, key: point });
          });

          return _react2["default"].createElement(
            'div', { className: prefixCls + '-step' },
            elements
          );
        };

        exports["default"] = Steps;
        module.exports = exports['default'];

        /***/
      }),
      /* 251 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright 2014-2015, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         */

        'use strict';

        /**
         * Similar to invariant but only logs a warning if the condition is not met.
         * This can be used to log issues in development environments in critical
         * paths. Removing the logging code for production environments will keep the
         * same logic and follow the same code paths.
         */

        var warning = function () {};

        if ((undefined) !== 'production') {
          warning = function (condition, format, args) {
            var len = arguments.length;
            args = new Array(len > 2 ? len - 2 : 0);
            for (var key = 2; key < len; key++) {
              args[key - 2] = arguments[key];
            }
            if (format === undefined) {
              throw new Error(
                '`warning(condition, format, ...args)` requires a warning ' +
                'message argument'
              );
            }

            if (format.length < 10 || (/^[s\W]*$/).test(format)) {
              throw new Error(
                'The warning format should be able to uniquely identify this ' +
                'warning. Please, use a more descriptive format than: ' + format
              );
            }

            if (!condition) {
              var argIndex = 0;
              var message = 'Warning: ' +
                format.replace(/%s/g, function () {
                  return args[argIndex++];
                });
              if (typeof console !== 'undefined') {
                console.error(message);
              }
              try {
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
              } catch (x) {}
            }
          };
        }

        module.exports = warning;


        /***/
      }),
      /* 252 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends2 = __webpack_require__(162);

        var _extends3 = _interopRequireDefault(_extends2);

        var _typeof2 = __webpack_require__(171);

        var _typeof3 = _interopRequireDefault(_typeof2);

        var _defineProperty2 = __webpack_require__(104);

        var _defineProperty3 = _interopRequireDefault(_defineProperty2);

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

        var Marks = function Marks(_ref) {
          var className = _ref.className,
            vertical = _ref.vertical,
            marks = _ref.marks,
            included = _ref.included,
            upperBound = _ref.upperBound,
            lowerBound = _ref.lowerBound,
            max = _ref.max,
            min = _ref.min;

          var marksKeys = Object.keys(marks);
          var marksCount = marksKeys.length;
          var unit = 100 / (marksCount - 1);
          var markWidth = unit * 0.9;

          var range = max - min;
          var elements = marksKeys.map(parseFloat).sort(function (a, b) {
            return a - b;
          }).map(function (point) {
            var _classNames;

            var isActive = !included && point === upperBound || included && point <= upperBound && point >= lowerBound;
            var markClassName = (0, _classnames2["default"])((_classNames = {}, (0, _defineProperty3["default"])(_classNames, className + '-text', true), (0, _defineProperty3["default"])(_classNames, className + '-text-active', isActive), _classNames));

            var bottomStyle = {
              // height: markWidth + '%',
              marginBottom: '-50%',
              bottom: (point - min) / range * 100 + '%'
            };

            var leftStyle = {
              width: markWidth + '%',
              marginLeft: -markWidth / 2 + '%',
              left: (point - min) / range * 100 + '%'
            };

            var style = vertical ? bottomStyle : leftStyle;

            var markPoint = marks[point];
            var markPointIsObject = (typeof markPoint === 'undefined' ? 'undefined' : (0, _typeof3["default"])(markPoint)) === 'object' && !_react2["default"].isValidElement(markPoint);
            var markLabel = markPointIsObject ? markPoint.label : markPoint;
            var markStyle = markPointIsObject ? (0, _extends3["default"])({}, style, markPoint.style) : style;
            return _react2["default"].createElement(
              'span', { className: markClassName, style: markStyle, key: point },
              markLabel
            );
          });

          return _react2["default"].createElement(
            'div', { className: className },
            elements
          );
        };

        exports["default"] = Marks;
        module.exports = exports['default'];

        /***/
      }),
      /* 253 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Bar = exports.HistoGramComponent = undefined;

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var HistoGramComponent = exports.HistoGramComponent = function (_Component) {
          _inherits(HistoGramComponent, _Component);

          function HistoGramComponent(props) {
            _classCallCheck(this, HistoGramComponent);

            var _this = _possibleConstructorReturn(this, (HistoGramComponent.__proto__ || Object.getPrototypeOf(HistoGramComponent)).call(this, props));

            _this.style = {
              barContainer: {
                position: "relative",
                height: "50px",
                width: "100%"
              }
            };
            return _this;
          }

          _createClass(HistoGramComponent, [{
            key: "createBars",
            value: function createBars() {
              var max = _lodash2.default.max(this.props.data);
              var dataLength = this.props.data.length;
              var bars = null;
              var data = this.props.data.map(function (val) {
                var res = {
                  height: 0,
                  count: 0,
                  width: 100 / dataLength
                };
                try {
                  res.height = 100 * val / max;
                  res.count = val;
                  res.width = 100 / dataLength;
                } catch (e) {
                  console.log(e);
                }
                return res;
              });
              if (dataLength) {
                bars = data.map(function (val, index) {
                  return _react2.default.createElement(Bar, { key: index, element: val });
                });
              }
              return bars;
            }
          }, {
            key: "render",
            value: function render() {
              var bars = this.createBars();
              return _react2.default.createElement(
                "div", { className: "rbc-bar-container col s12 col-xs-12", style: this.style.barContainer },
                bars
              );
            }
          }]);

          return HistoGramComponent;
        }(_react.Component);

        var Bar = exports.Bar = function (_Component2) {
          _inherits(Bar, _Component2);

          function Bar(props) {
            _classCallCheck(this, Bar);

            var _this2 = _possibleConstructorReturn(this, (Bar.__proto__ || Object.getPrototypeOf(Bar)).call(this, props));

            _this2.style = {
              bar: {
                display: "block",
                width: "100%",
                height: "100%"
              }
            };
            return _this2;
          }

          _createClass(Bar, [{
            key: "render",
            value: function render() {
              var element = this.props.element;
              var barStyle = {
                height: element.height + "%",
                width: element.width + "%",
                display: "inline-block",
                background: "#efefef",
                position: "relative"
              };
              return _react2.default.createElement(
                "span", { className: "rbc-bar-item", style: barStyle },
                _react2.default.createElement("span", {
                  className: "bar",
                  style: this.style.bar,
                  title: element.count
                })
              );
            }
          }]);

          return Bar;
        }(_react.Component);

        /***/
      }),
      /* 254 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var TextField = function (_Component) {
          _inherits(TextField, _Component);

          function TextField(props, context) {
            _classCallCheck(this, TextField);

            var _this = _possibleConstructorReturn(this, (TextField.__proto__ || Object.getPrototypeOf(TextField)).call(this, props));

            _this.state = {
              currentValue: ""
            };
            _this.type = "match";
            _this.urlParams = helper.URLParams.get(_this.props.componentId);
            _this.handleChange = _this.handleChange.bind(_this);
            _this.customQuery = _this.customQuery.bind(_this);
            return _this;
          }

          // Set query information


          _createClass(TextField, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setQueryInfo();
              this.checkDefault(this.props);
              this.listenFilter();
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              this.checkDefault(nextProps);
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this2 = this;

              this.filterListener = helper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this2.props.componentId) {
                  _this2.valueChange(null);
                }
              });
            }
          }, {
            key: "checkDefault",
            value: function checkDefault(props) {
              this.urlParams = helper.URLParams.get(this.props.componentId);
              var defaultValue = this.urlParams !== null ? this.urlParams : props.defaultSelected;
              this.valueChange(defaultValue);
            }
          }, {
            key: "valueChange",
            value: function valueChange(defaultValue) {
              if (this.defaultSelected != defaultValue) {
                this.defaultSelected = defaultValue;
                this.setValue(this.defaultSelected);
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: "TextField"
                }
              };
              helper.selectedSensor.setSensorInfo(obj);
            }

            // build query for this sensor only

          }, {
            key: "customQuery",
            value: function customQuery(value) {
              return _defineProperty({}, this.type, _defineProperty({}, this.props.appbaseField, value));
            }

            // handle the input change and pass the value inside sensor info

          }, {
            key: "handleChange",
            value: function handleChange(event) {
              var inputVal = event.target.value;
              this.setValue(inputVal);
            }
          }, {
            key: "setValue",
            value: function setValue(inputVal) {
              this.setState({
                currentValue: inputVal
              });
              var obj = {
                key: this.props.componentId,
                value: inputVal
              };
              this.defaultSelected = inputVal;
              // pass the selected sensor value with componentId as key,
              var isExecuteQuery = true;
              if (this.props.onValueChange) {
                this.props.onValueChange(obj.value);
              }
              helper.URLParams.update(this.props.componentId, inputVal, this.props.URLParams);
              helper.selectedSensor.set(obj, isExecuteQuery);
            }

            // render

          }, {
            key: "render",
            value: function render() {
              var title = null;
              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-placeholder-active": this.props.placeholder,
                "rbc-placeholder-inactive": !this.props.placeholder
              });

              return _react2.default.createElement(
                "div", { className: "rbc rbc-textfield col s12 col-xs-12 card thumbnail " + cx, style: this.props.componentStyle },
                title,
                _react2.default.createElement(
                  "div", { className: "rbc-input-container col s12 col-xs-12" },
                  _react2.default.createElement("input", { className: "rbc-input", type: "text", onChange: this.handleChange, placeholder: this.props.placeholder, value: this.state.currentValue ? this.state.currentValue : "" })
                )
              );
            }
          }]);

          return TextField;
        }(_react.Component);

        exports.default = TextField;


        TextField.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          defaultSelected: _react2.default.PropTypes.string,
          placeholder: _react2.default.PropTypes.string,
          customQuery: _react2.default.PropTypes.func,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        TextField.defaultProps = {
          componentStyle: {},
          URLParams: false,
          allowFilter: true
        };

        // context type
        TextField.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        TextField.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.STRING,
          title: TYPES.STRING,
          defaultSelected: TYPES.STRING,
          placeholder: TYPES.STRING,
          customQuery: TYPES.FUNCTION,
          componentStyle: TYPES.OBJECT,
          URLParams: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 255 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactAutosuggest = __webpack_require__(256);

        var _reactAutosuggest2 = _interopRequireDefault(_reactAutosuggest);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _ChannelManager = __webpack_require__(63);

        var _ChannelManager2 = _interopRequireDefault(_ChannelManager);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var DataSearch = function (_Component) {
          _inherits(DataSearch, _Component);

          function DataSearch(props) {
            _classCallCheck(this, DataSearch);

            var _this = _possibleConstructorReturn(this, (DataSearch.__proto__ || Object.getPrototypeOf(DataSearch)).call(this, props));

            _this.state = {
              items: [],
              currentValue: null,
              isLoading: false,
              options: [],
              rawData: {
                hits: {
                  hits: []
                }
              }
            };
            _this.type = "match_phrase";
            _this.searchInputId = "internal-" + _this.props.componentId;
            _this.channelId = null;
            _this.channelListener = null;
            _this.fieldType = _typeof(_this.props.appbaseField);
            _this.handleSearch = _this.handleSearch.bind(_this);
            _this.handleInputChange = _this.handleInputChange.bind(_this);
            _this.setValue = _this.setValue.bind(_this);
            _this.onInputChange = _this.onInputChange.bind(_this);
            _this.onSuggestionSelected = _this.onSuggestionSelected.bind(_this);
            _this.clearSuggestions = _this.clearSuggestions.bind(_this);
            _this.handleBlur = _this.handleBlur.bind(_this);
            _this.handleKeyPress = _this.handleKeyPress.bind(_this);
            _this.defaultSearchQuery = _this.defaultSearchQuery.bind(_this);
            _this.previousSelectedSensor = {};
            _this.urlParams = helper.URLParams.get(_this.props.componentId);
            return _this;
          }

          // Get the items from Appbase when component is mounted


          _createClass(DataSearch, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setQueryInfo();
              this.createChannel();
              this.checkDefault();
              this.listenFilter();
            }

            // stop streaming request and remove listener when component will unmount

          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.channelId) {
                _ChannelManager2.default.stopStream(this.channelId);
              }
              if (this.channelListener) {
                this.channelListener.remove();
              }
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this2 = this;

              this.filterListener = helper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this2.props.componentId) {
                  _this2.defaultValue = "";
                  _this2.changeValue(_this2.defaultValue);
                }
              });
            }
          }, {
            key: "highlightQuery",
            value: function highlightQuery() {
              var fields = {};
              var highlightFields = this.props.highlightFields ? this.props.highlightFields : this.props.appbaseField;
              if (typeof highlightFields === "string") {
                fields[highlightFields] = {};
              } else if (_lodash2.default.isArray(highlightFields)) {
                highlightFields.forEach(function (item) {
                  fields[item] = {};
                });
              }
              return {
                highlight: {
                  pre_tags: ["<span class=\"rbc-highlight\">"],
                  post_tags: ["</span>"],
                  fields: fields
                }
              };
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.defaultSearchQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: "DataSearch"
                }
              };
              if (this.props.highlight) {
                obj.value.externalQuery = this.highlightQuery();
              }
              helper.selectedSensor.setSensorInfo(obj);
              var searchObj = {
                key: this.searchInputId,
                value: {
                  queryType: "multi_match",
                  inputData: this.props.appbaseField,
                  customQuery: this.defaultSearchQuery
                }
              };
              helper.selectedSensor.setSensorInfo(searchObj);
            }

            // set value to search

          }, {
            key: "setValue",
            value: function setValue(value) {
              var obj = {
                key: this.searchInputId,
                value: value
              };
              this.defaultSelected = value;
              helper.URLParams.update(this.props.componentId, value, this.props.URLParams);
              helper.selectedSensor.set(obj, true);
              if (value && value.trim() !== "") {
                this.setState({
                  options: [{
                    label: value,
                    value: value
                  }],
                  isLoadingOptions: true,
                  currentValue: value
                });
              } else {
                this.setState({
                  options: [],
                  isLoadingOptions: false,
                  currentValue: value
                });
              }
            }
          }, {
            key: "getValue",
            value: function getValue(field, hit) {
              var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

              var val = void 0;
              if (_lodash2.default.has(hit, field)) {
                val = hit[field];
              } else if (field.indexOf(".") > -1) {
                var prefix = "";
                var fieldSplit = field.split(".");
                fieldSplit.forEach(function (item, index) {
                  prefix += item;
                  if (_lodash2.default.isArray(_lodash2.default.get(hit, prefix))) {
                    prefix += "[" + index + "]";
                  }
                  if (fieldSplit.length - 1 !== index) {
                    prefix += ".";
                  } else {
                    val = _lodash2.default.get(hit, prefix);
                  }
                });
              }
              return val;
            }

            // Search results often contain duplicate results, so display only unique values

          }, {
            key: "removeDuplicates",
            value: function removeDuplicates(myArr, prop) {
              return myArr.filter(function (obj, pos, arr) {
                return arr.map(function (mapObj) {
                  return mapObj[prop];
                }).indexOf(obj[prop]) === pos;
              });
            }

            // set data after get the result

          }, {
            key: "setData",
            value: function setData(data) {
              var _this3 = this;

              var options = [];
              var appbaseField = _lodash2.default.isArray(this.props.appbaseField) ? this.props.appbaseField : [this.props.appbaseField];
              data.hits.hits.map(function (hit) {
                if (_this3.fieldType === "string") {
                  var tempField = _this3.getValue(_this3.props.appbaseField.trim(), hit._source);
                  options.push({ value: tempField, label: tempField });
                } else if (_this3.fieldType === "object") {
                  _this3.props.appbaseField.map(function (field) {
                    var tempField = _this3.getValue(field, hit._source);
                    if (tempField) {
                      options.push({ value: tempField, label: tempField });
                    }
                  });
                }
              });
              if (this.state.currentValue && this.state.currentValue.trim() !== "") {
                options.unshift({
                  label: this.state.currentValue,
                  value: this.state.currentValue
                });
              }
              options = this.removeDuplicates(options, "label");
              this.setState({
                options: options,
                isLoadingOptions: false
              });
            }

            // default query

          }, {
            key: "defaultSearchQuery",
            value: function defaultSearchQuery(value) {
              var finalQuery = null,
                fields = void 0;
              if (value) {
                if (this.fieldType === "string") {
                  fields = [this.props.appbaseField];
                } else {
                  fields = this.props.appbaseField;
                }
                finalQuery = {
                  bool: {
                    should: this.shouldQuery(value, fields),
                    minimum_should_match: "1"
                  }
                };
              }

              if (value === "") {
                finalQuery = {
                  "match_all": {}
                };
              }

              return finalQuery;
            }
          }, {
            key: "shouldQuery",
            value: function shouldQuery(value, fields) {
              var _this4 = this;

              var queries = [];
              fields.forEach(function (field, index) {
                var query = [{
                  match: _defineProperty({}, field, {
                    query: value
                  })
                }, {
                  match_phrase_prefix: _defineProperty({}, field, {
                    query: value
                  })
                }];
                if (_lodash2.default.isArray(_this4.props.weights) && _this4.props.weights[index]) {
                  query[0].match[field].boost = _this4.props.weights[index];
                  query[1].match_phrase_prefix[field].boost = _this4.props.weights[index];
                }
                queries = queries.concat(query);
              });
              return queries;
            }

            // Create a channel which passes the react and receive results whenever react changes

          }, {
            key: "createChannel",
            value: function createChannel() {
              var _this5 = this;

              var react = this.props.react ? this.props.react : {};
              var reactAnd = [this.searchInputId];
              react = helper.setupReact(react, reactAnd);
              var channelObj = _ChannelManager2.default.create(this.context.appbaseRef, this.context.type, react, 100, 0, false, this.props.componentId);
              this.channelId = channelObj.channelId;
              this.channelListener = channelObj.emitter.addListener(channelObj.channelId, function (res) {
                var data = res.data;
                var rawData = void 0;
                if (res.mode === "streaming") {
                  rawData = _this5.state.rawData;
                  rawData.hits.hits.push(res.data);
                } else if (res.mode === "historic") {
                  rawData = data;
                }
                _this5.setState({
                  rawData: rawData
                });
                if (_this5.props.autoSuggest) {
                  _this5.setData(rawData);
                }
              });
            }
          }, {
            key: "checkDefault",
            value: function checkDefault() {
              this.defaultValue = this.urlParams !== null ? this.urlParams : this.props.defaultSelected;
              this.changeValue(this.defaultValue);
            }
          }, {
            key: "changeValue",
            value: function changeValue(defaultValue) {
              if (this.defaultSelected != defaultValue) {
                this.defaultSelected = defaultValue;
                setTimeout(this.setValue.bind(this, this.defaultSelected), 100);
                this.handleSearch({
                  value: this.defaultSelected
                });
              }
            }

            // When user has selected a search value

          }, {
            key: "handleSearch",
            value: function handleSearch(currentValue) {
              var value = currentValue ? currentValue.value : null;
              value = value === "null" ? null : value;
              var obj = {
                key: this.props.componentId,
                value: value
              };
              helper.URLParams.update(this.props.componentId, value, this.props.URLParams);
              helper.selectedSensor.set(obj, true);
              this.setState({
                currentValue: value
              });
            }
          }, {
            key: "handleInputChange",
            value: function handleInputChange(event) {
              var inputVal = event.target.value;
              this.setState({
                currentValue: inputVal
              });
              var obj = {
                key: this.props.componentId,
                value: inputVal
              };
              if (this.props.onValueChange) {
                this.props.onValueChange(obj.value);
              }
              // pass the selected sensor value with componentId as key,
              var isExecuteQuery = true;
              helper.URLParams.update(this.props.componentId, inputVal, this.props.URLParams);
              helper.selectedSensor.set(obj, isExecuteQuery);
            }
          }, {
            key: "handleBlur",
            value: function handleBlur(event, _ref) {
              var highlightedSuggestion = _ref.highlightedSuggestion;

              if (!highlightedSuggestion || !highlightedSuggestion.label) {
                this.handleSearch({
                  value: this.state.currentValue
                });
              }
            }
          }, {
            key: "handleKeyPress",
            value: function handleKeyPress(event) {
              if (event.key === "Enter") {
                event.target.blur();
              }
            }
          }, {
            key: "onInputChange",
            value: function onInputChange(event, _ref2) {
              var method = _ref2.method,
                newValue = _ref2.newValue;

              if (method === "type") {
                this.setValue(newValue);
              }
            }
          }, {
            key: "onSuggestionSelected",
            value: function onSuggestionSelected(event, _ref3) {
              var suggestion = _ref3.suggestion;

              this.handleSearch(suggestion);
            }
          }, {
            key: "clearSuggestions",
            value: function clearSuggestions() {
              this.setState({
                options: []
              });
            }
          }, {
            key: "getSuggestionValue",
            value: function getSuggestionValue(suggestion) {
              return suggestion.label;
            }
          }, {
            key: "renderSuggestion",
            value: function renderSuggestion(suggestion) {
              return suggestion.label;
            }
          }, {
            key: "render",
            value: function render() {
              var title = null;
              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }
              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-placeholder-active": this.props.placeholder,
                "rbc-placeholder-inactive": !this.props.placeholder,
                "rbc-autoSuggest-active": this.props.autoSuggest,
                "rbc-autoSuggest-inactive": !this.props.autoSuggest
              });

              return _react2.default.createElement(
                "div", { className: "rbc rbc-datasearch col s12 col-xs-12 card thumbnail " + cx + " " + (this.state.isLoadingOptions ? "is-loading" : ""), style: this.props.componentStyle },
                title,
                this.props.autoSuggest ? _react2.default.createElement(_reactAutosuggest2.default, {
                  suggestions: this.state.options,
                  onSuggestionsFetchRequested: function onSuggestionsFetchRequested() {},
                  onSuggestionsClearRequested: this.clearSuggestions,
                  onSuggestionSelected: this.onSuggestionSelected,
                  getSuggestionValue: this.getSuggestionValue,
                  renderSuggestion: this.renderSuggestion,
                  focusInputOnSuggestionClick: false,
                  inputProps: {
                    placeholder: this.props.placeholder,
                    value: this.state.currentValue === null ? "" : this.state.currentValue,
                    onChange: this.onInputChange,
                    onBlur: this.handleBlur,
                    onKeyPress: this.handleKeyPress
                  }
                }) : _react2.default.createElement(
                  "div", { className: "rbc-search-container col s12 col-xs-12" },
                  _react2.default.createElement("input", {
                    type: "text",
                    className: "rbc-input",
                    placeholder: this.props.placeholder,
                    value: this.state.currentValue ? this.state.currentValue : "",
                    onChange: this.handleInputChange
                  }),
                  _react2.default.createElement("span", { className: "rbc-search-icon" })
                )
              );
            }
          }]);

          return DataSearch;
        }(_react.Component);

        exports.default = DataSearch;


        DataSearch.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.string)]),
          weights: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.number),
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          placeholder: _react2.default.PropTypes.string,
          autoSuggest: _react2.default.PropTypes.bool,
          defaultSelected: _react2.default.PropTypes.string,
          customQuery: _react2.default.PropTypes.func,
          onValueChange: _react2.default.PropTypes.func,
          react: _react2.default.PropTypes.object,
          componentStyle: _react2.default.PropTypes.object,
          highlight: _react2.default.PropTypes.bool,
          highlightFields: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.string)]),
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        DataSearch.defaultProps = {
          placeholder: "Search",
          autoSuggest: true,
          componentStyle: {},
          highlight: false,
          URLParams: false,
          allowFilter: true
        };

        // context type
        DataSearch.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        DataSearch.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.STRING,
          react: TYPES.OBJECT,
          title: TYPES.STRING,
          placeholder: TYPES.STRING,
          autoSuggest: TYPES.BOOLEAN,
          defaultSelected: TYPES.STRING,
          customQuery: TYPES.FUNCTION,
          componentStyle: TYPES.OBJECT,
          highlight: TYPES.BOOLEAN,
          URLParams: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN,
          weights: TYPES.OBJECT
        };

        /***/
      }),
      /* 256 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        module.exports = __webpack_require__(257).default;

        /***/
      }),
      /* 257 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _propTypes = __webpack_require__(211);

        var _propTypes2 = _interopRequireDefault(_propTypes);

        var _arrays = __webpack_require__(258);

        var _arrays2 = _interopRequireDefault(_arrays);

        var _reactAutowhatever = __webpack_require__(259);

        var _reactAutowhatever2 = _interopRequireDefault(_reactAutowhatever);

        var _theme = __webpack_require__(268);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var alwaysTrue = function alwaysTrue() {
          return true;
        };
        var defaultShouldRenderSuggestions = function defaultShouldRenderSuggestions(value) {
          return value.trim().length > 0;
        };
        var defaultRenderSuggestionsContainer = function defaultRenderSuggestionsContainer(_ref) {
          var containerProps = _ref.containerProps,
            children = _ref.children;
          return _react2.default.createElement(
            'div',
            containerProps,
            children
          );
        };

        var Autosuggest = function (_Component) {
          _inherits(Autosuggest, _Component);

          function Autosuggest(_ref2) {
            var alwaysRenderSuggestions = _ref2.alwaysRenderSuggestions;

            _classCallCheck(this, Autosuggest);

            var _this = _possibleConstructorReturn(this, (Autosuggest.__proto__ || Object.getPrototypeOf(Autosuggest)).call(this));

            _initialiseProps.call(_this);

            _this.state = {
              isFocused: false,
              isCollapsed: !alwaysRenderSuggestions,
              highlightedSectionIndex: null,
              highlightedSuggestionIndex: null,
              valueBeforeUpDown: null
            };

            _this.justPressedUpDown = false;
            return _this;
          }

          _createClass(Autosuggest, [{
            key: 'componentDidMount',
            value: function componentDidMount() {
              document.addEventListener('mousedown', this.onDocumentMouseDown);

              this.input = this.autowhatever.input;
              this.suggestionsContainer = this.autowhatever.itemsContainer;
            }
          }, {
            key: 'componentWillReceiveProps',
            value: function componentWillReceiveProps(nextProps) {
              if ((0, _arrays2.default)(nextProps.suggestions, this.props.suggestions)) {
                if (nextProps.highlightFirstSuggestion && nextProps.suggestions.length > 0 && this.justPressedUpDown === false) {
                  this.highlightFirstSuggestion();
                }
              } else {
                if (this.willRenderSuggestions(nextProps)) {
                  if (nextProps.highlightFirstSuggestion) {
                    this.highlightFirstSuggestion();
                  }

                  if (this.state.isCollapsed && !this.justSelectedSuggestion) {
                    this.revealSuggestions();
                  }
                } else {
                  this.resetHighlightedSuggestion();
                }
              }
            }
          }, {
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
              document.removeEventListener('mousedown', this.onDocumentMouseDown);
            }
          }, {
            key: 'updateHighlightedSuggestion',
            value: function updateHighlightedSuggestion(sectionIndex, suggestionIndex, prevValue) {
              this.setState(function (state) {
                var valueBeforeUpDown = state.valueBeforeUpDown;


                if (suggestionIndex === null) {
                  valueBeforeUpDown = null;
                } else if (valueBeforeUpDown === null && typeof prevValue !== 'undefined') {
                  valueBeforeUpDown = prevValue;
                }

                return {
                  highlightedSectionIndex: sectionIndex,
                  highlightedSuggestionIndex: suggestionIndex,
                  valueBeforeUpDown: valueBeforeUpDown
                };
              });
            }
          }, {
            key: 'resetHighlightedSuggestion',
            value: function resetHighlightedSuggestion() {
              var shouldResetValueBeforeUpDown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

              this.setState(function (state) {
                var valueBeforeUpDown = state.valueBeforeUpDown;


                return {
                  highlightedSectionIndex: null,
                  highlightedSuggestionIndex: null,
                  valueBeforeUpDown: shouldResetValueBeforeUpDown ? null : valueBeforeUpDown
                };
              });
            }
          }, {
            key: 'revealSuggestions',
            value: function revealSuggestions() {
              this.setState({
                isCollapsed: false
              });
            }
          }, {
            key: 'closeSuggestions',
            value: function closeSuggestions() {
              this.setState({
                highlightedSectionIndex: null,
                highlightedSuggestionIndex: null,
                valueBeforeUpDown: null,
                isCollapsed: true
              });
            }
          }, {
            key: 'getSuggestion',
            value: function getSuggestion(sectionIndex, suggestionIndex) {
              var _props = this.props,
                suggestions = _props.suggestions,
                multiSection = _props.multiSection,
                getSectionSuggestions = _props.getSectionSuggestions;


              if (multiSection) {
                return getSectionSuggestions(suggestions[sectionIndex])[suggestionIndex];
              }

              return suggestions[suggestionIndex];
            }
          }, {
            key: 'getHighlightedSuggestion',
            value: function getHighlightedSuggestion() {
              var _state = this.state,
                highlightedSectionIndex = _state.highlightedSectionIndex,
                highlightedSuggestionIndex = _state.highlightedSuggestionIndex;


              if (highlightedSuggestionIndex === null) {
                return null;
              }

              return this.getSuggestion(highlightedSectionIndex, highlightedSuggestionIndex);
            }
          }, {
            key: 'getSuggestionValueByIndex',
            value: function getSuggestionValueByIndex(sectionIndex, suggestionIndex) {
              var getSuggestionValue = this.props.getSuggestionValue;


              return getSuggestionValue(this.getSuggestion(sectionIndex, suggestionIndex));
            }
          }, {
            key: 'getSuggestionIndices',
            value: function getSuggestionIndices(suggestionElement) {
              var sectionIndex = suggestionElement.getAttribute('data-section-index');
              var suggestionIndex = suggestionElement.getAttribute('data-suggestion-index');

              return {
                sectionIndex: typeof sectionIndex === 'string' ? parseInt(sectionIndex, 10) : null,
                suggestionIndex: parseInt(suggestionIndex, 10)
              };
            }
          }, {
            key: 'findSuggestionElement',
            value: function findSuggestionElement(startNode) {
              var node = startNode;

              do {
                if (node.getAttribute('data-suggestion-index') !== null) {
                  return node;
                }

                node = node.parentNode;
              } while (node !== null);

              console.error('Clicked element:', startNode); // eslint-disable-line no-console
              throw new Error('Couldn\'t find suggestion element');
            }
          }, {
            key: 'maybeCallOnChange',
            value: function maybeCallOnChange(event, newValue, method) {
              var _props$inputProps = this.props.inputProps,
                value = _props$inputProps.value,
                onChange = _props$inputProps.onChange;


              if (newValue !== value) {
                onChange(event, { newValue: newValue, method: method });
              }
            }
          }, {
            key: 'willRenderSuggestions',
            value: function willRenderSuggestions(props) {
              var suggestions = props.suggestions,
                inputProps = props.inputProps,
                shouldRenderSuggestions = props.shouldRenderSuggestions;
              var value = inputProps.value;


              return suggestions.length > 0 && shouldRenderSuggestions(value);
            }
          }, {
            key: 'getQuery',
            value: function getQuery() {
              var inputProps = this.props.inputProps;
              var value = inputProps.value;
              var valueBeforeUpDown = this.state.valueBeforeUpDown;


              return (valueBeforeUpDown || value).trim();
            }
          }, {
            key: 'render',
            value: function render() {
              var _this2 = this;

              var _props2 = this.props,
                suggestions = _props2.suggestions,
                renderInputComponent = _props2.renderInputComponent,
                onSuggestionsFetchRequested = _props2.onSuggestionsFetchRequested,
                renderSuggestion = _props2.renderSuggestion,
                inputProps = _props2.inputProps,
                multiSection = _props2.multiSection,
                renderSectionTitle = _props2.renderSectionTitle,
                id = _props2.id,
                getSectionSuggestions = _props2.getSectionSuggestions,
                theme = _props2.theme,
                getSuggestionValue = _props2.getSuggestionValue,
                alwaysRenderSuggestions = _props2.alwaysRenderSuggestions;
              var _state2 = this.state,
                isFocused = _state2.isFocused,
                isCollapsed = _state2.isCollapsed,
                highlightedSectionIndex = _state2.highlightedSectionIndex,
                highlightedSuggestionIndex = _state2.highlightedSuggestionIndex,
                valueBeforeUpDown = _state2.valueBeforeUpDown;

              var shouldRenderSuggestions = alwaysRenderSuggestions ? alwaysTrue : this.props.shouldRenderSuggestions;
              var value = inputProps.value,
                _onFocus = inputProps.onFocus,
                _onKeyDown = inputProps.onKeyDown;

              var willRenderSuggestions = this.willRenderSuggestions(this.props);
              var isOpen = alwaysRenderSuggestions || isFocused && !isCollapsed && willRenderSuggestions;
              var items = isOpen ? suggestions : [];
              var autowhateverInputProps = _extends({}, inputProps, {
                onFocus: function onFocus(event) {
                  if (!_this2.justSelectedSuggestion && !_this2.justClickedOnSuggestionsContainer) {
                    var shouldRender = shouldRenderSuggestions(value);

                    _this2.setState({
                      isFocused: true,
                      isCollapsed: !shouldRender
                    });

                    _onFocus && _onFocus(event);

                    if (shouldRender) {
                      onSuggestionsFetchRequested({ value: value });
                    }
                  }
                },
                onBlur: function onBlur(event) {
                  if (_this2.justClickedOnSuggestionsContainer) {
                    _this2.input.focus();
                    return;
                  }

                  _this2.blurEvent = event;

                  if (!_this2.justSelectedSuggestion) {
                    _this2.onBlur();
                    _this2.onSuggestionsClearRequested();
                  }
                },
                onChange: function onChange(event) {
                  var value = event.target.value;

                  var shouldRender = shouldRenderSuggestions(value);

                  _this2.maybeCallOnChange(event, value, 'type');

                  _this2.setState({
                    highlightedSectionIndex: null,
                    highlightedSuggestionIndex: null,
                    valueBeforeUpDown: null,
                    isCollapsed: !shouldRender
                  });

                  if (shouldRender) {
                    onSuggestionsFetchRequested({ value: value });
                  } else {
                    _this2.onSuggestionsClearRequested();
                  }
                },
                onKeyDown: function onKeyDown(event, data) {
                  switch (event.key) {
                  case 'ArrowDown':
                  case 'ArrowUp':
                    if (isCollapsed) {
                      if (shouldRenderSuggestions(value)) {
                        onSuggestionsFetchRequested({ value: value });
                        _this2.revealSuggestions();
                      }
                    } else if (suggestions.length > 0) {
                      var newHighlightedSectionIndex = data.newHighlightedSectionIndex,
                        newHighlightedItemIndex = data.newHighlightedItemIndex;


                      var newValue = void 0;

                      if (newHighlightedItemIndex === null) {
                        // valueBeforeUpDown can be null if, for example, user
                        // hovers on the first suggestion and then pressed Up.
                        // If that happens, use the original input value.
                        newValue = valueBeforeUpDown === null ? value : valueBeforeUpDown;
                      } else {
                        newValue = _this2.getSuggestionValueByIndex(newHighlightedSectionIndex, newHighlightedItemIndex);
                      }

                      _this2.updateHighlightedSuggestion(newHighlightedSectionIndex, newHighlightedItemIndex, value);
                      _this2.maybeCallOnChange(event, newValue, event.key === 'ArrowDown' ? 'down' : 'up');
                    }

                    event.preventDefault(); // Prevents the cursor from moving

                    _this2.justPressedUpDown = true;

                    setTimeout(function () {
                      _this2.justPressedUpDown = false;
                    });

                    break;

                  case 'Enter':
                    {
                      var highlightedSuggestion = _this2.getHighlightedSuggestion();

                      if (isOpen && !alwaysRenderSuggestions) {
                        _this2.closeSuggestions();
                      }

                      if (highlightedSuggestion !== null) {
                        var _newValue = getSuggestionValue(highlightedSuggestion);

                        _this2.maybeCallOnChange(event, _newValue, 'enter');

                        _this2.onSuggestionSelected(event, {
                          suggestion: highlightedSuggestion,
                          suggestionValue: _newValue,
                          suggestionIndex: highlightedSuggestionIndex,
                          sectionIndex: highlightedSectionIndex,
                          method: 'enter'
                        });

                        _this2.justSelectedSuggestion = true;

                        setTimeout(function () {
                          _this2.justSelectedSuggestion = false;
                        });
                      }

                      break;
                    }

                  case 'Escape':
                    {
                      if (isOpen) {
                        // If input.type === 'search', the browser clears the input
                        // when Escape is pressed. We want to disable this default
                        // behaviour so that, when suggestions are shown, we just hide
                        // them, without clearing the input.
                        event.preventDefault();
                      }

                      var willCloseSuggestions = isOpen && !alwaysRenderSuggestions;

                      if (valueBeforeUpDown === null) {
                        // Didn't interact with Up/Down
                        if (!willCloseSuggestions) {
                          var _newValue2 = '';

                          _this2.maybeCallOnChange(event, _newValue2, 'escape');

                          if (shouldRenderSuggestions(_newValue2)) {
                            onSuggestionsFetchRequested({ value: _newValue2 });
                          } else {
                            _this2.onSuggestionsClearRequested();
                          }
                        }
                      } else {
                        // Interacted with Up/Down
                        _this2.maybeCallOnChange(event, valueBeforeUpDown, 'escape');
                      }

                      if (willCloseSuggestions) {
                        _this2.onSuggestionsClearRequested();
                        _this2.closeSuggestions();
                      } else {
                        _this2.resetHighlightedSuggestion();
                      }

                      break;
                    }
                  }

                  _onKeyDown && _onKeyDown(event);
                }
              });
              var renderSuggestionData = {
                query: this.getQuery()
              };

              return _react2.default.createElement(_reactAutowhatever2.default, {
                multiSection: multiSection,
                items: items,
                renderInputComponent: renderInputComponent,
                renderItemsContainer: this.renderSuggestionsContainer,
                renderItem: renderSuggestion,
                renderItemData: renderSuggestionData,
                renderSectionTitle: renderSectionTitle,
                getSectionItems: getSectionSuggestions,
                highlightedSectionIndex: highlightedSectionIndex,
                highlightedItemIndex: highlightedSuggestionIndex,
                inputProps: autowhateverInputProps,
                itemProps: this.itemProps,
                theme: (0, _theme.mapToAutowhateverTheme)(theme),
                id: id,
                ref: this.storeAutowhateverRef
              });
            }
          }]);

          return Autosuggest;
        }(_react.Component);

        Autosuggest.propTypes = {
          suggestions: _propTypes2.default.array.isRequired,
          onSuggestionsFetchRequested: function onSuggestionsFetchRequested(props, propName) {
            var onSuggestionsFetchRequested = props[propName];

            if (typeof onSuggestionsFetchRequested !== 'function') {
              throw new Error('\'onSuggestionsFetchRequested\' must be implemented. See: https://github.com/moroshko/react-autosuggest#onSuggestionsFetchRequestedProp');
            }
          },
          onSuggestionsClearRequested: function onSuggestionsClearRequested(props, propName) {
            var onSuggestionsClearRequested = props[propName];

            if (props.alwaysRenderSuggestions === false && typeof onSuggestionsClearRequested !== 'function') {
              throw new Error('\'onSuggestionsClearRequested\' must be implemented. See: https://github.com/moroshko/react-autosuggest#onSuggestionsClearRequestedProp');
            }
          },
          onSuggestionSelected: _propTypes2.default.func,
          renderInputComponent: _propTypes2.default.func,
          renderSuggestionsContainer: _propTypes2.default.func,
          getSuggestionValue: _propTypes2.default.func.isRequired,
          renderSuggestion: _propTypes2.default.func.isRequired,
          inputProps: function inputProps(props, propName) {
            var inputProps = props[propName];

            if (!inputProps.hasOwnProperty('value')) {
              throw new Error('\'inputProps\' must have \'value\'.');
            }

            if (!inputProps.hasOwnProperty('onChange')) {
              throw new Error('\'inputProps\' must have \'onChange\'.');
            }
          },
          shouldRenderSuggestions: _propTypes2.default.func,
          alwaysRenderSuggestions: _propTypes2.default.bool,
          multiSection: _propTypes2.default.bool,
          renderSectionTitle: function renderSectionTitle(props, propName) {
            var renderSectionTitle = props[propName];

            if (props.multiSection === true && typeof renderSectionTitle !== 'function') {
              throw new Error('\'renderSectionTitle\' must be implemented. See: https://github.com/moroshko/react-autosuggest#renderSectionTitleProp');
            }
          },
          getSectionSuggestions: function getSectionSuggestions(props, propName) {
            var getSectionSuggestions = props[propName];

            if (props.multiSection === true && typeof getSectionSuggestions !== 'function') {
              throw new Error('\'getSectionSuggestions\' must be implemented. See: https://github.com/moroshko/react-autosuggest#getSectionSuggestionsProp');
            }
          },
          focusInputOnSuggestionClick: _propTypes2.default.bool,
          highlightFirstSuggestion: _propTypes2.default.bool,
          theme: _propTypes2.default.object,
          id: _propTypes2.default.string
        };
        Autosuggest.defaultProps = {
          renderSuggestionsContainer: defaultRenderSuggestionsContainer,
          shouldRenderSuggestions: defaultShouldRenderSuggestions,
          alwaysRenderSuggestions: false,
          multiSection: false,
          focusInputOnSuggestionClick: true,
          highlightFirstSuggestion: false,
          theme: _theme.defaultTheme,
          id: '1'
        };

        var _initialiseProps = function _initialiseProps() {
          var _this3 = this;

          this.onDocumentMouseDown = function (event) {
            _this3.justClickedOnSuggestionsContainer = false;

            var node = event.detail && event.detail.target || // This is for testing only. Please show me a better way to emulate this.
              event.target;

            while (node !== null && node !== document) {
              if (node.getAttribute('data-suggestion-index') !== null) {
                // Suggestion was clicked
                return;
              }

              if (node === _this3.suggestionsContainer) {
                // Something else inside suggestions container was clicked
                _this3.justClickedOnSuggestionsContainer = true;
                return;
              }

              node = node.parentNode;
            }
          };

          this.storeAutowhateverRef = function (autowhatever) {
            if (autowhatever !== null) {
              _this3.autowhatever = autowhatever;
            }
          };

          this.onSuggestionMouseEnter = function (event, _ref3) {
            var sectionIndex = _ref3.sectionIndex,
              itemIndex = _ref3.itemIndex;

            _this3.updateHighlightedSuggestion(sectionIndex, itemIndex);
          };

          this.highlightFirstSuggestion = function () {
            _this3.updateHighlightedSuggestion(_this3.props.multiSection ? 0 : null, 0);
          };

          this.onSuggestionMouseDown = function () {
            _this3.justSelectedSuggestion = true;
          };

          this.onSuggestionsClearRequested = function () {
            var onSuggestionsClearRequested = _this3.props.onSuggestionsClearRequested;


            onSuggestionsClearRequested && onSuggestionsClearRequested();
          };

          this.onSuggestionSelected = function (event, data) {
            var _props3 = _this3.props,
              alwaysRenderSuggestions = _props3.alwaysRenderSuggestions,
              onSuggestionSelected = _props3.onSuggestionSelected,
              onSuggestionsFetchRequested = _props3.onSuggestionsFetchRequested;


            onSuggestionSelected && onSuggestionSelected(event, data);

            if (alwaysRenderSuggestions) {
              onSuggestionsFetchRequested({ value: data.suggestionValue });
            } else {
              _this3.onSuggestionsClearRequested();
            }

            _this3.resetHighlightedSuggestion();
          };

          this.onSuggestionClick = function (event) {
            var _props4 = _this3.props,
              alwaysRenderSuggestions = _props4.alwaysRenderSuggestions,
              focusInputOnSuggestionClick = _props4.focusInputOnSuggestionClick;

            var _getSuggestionIndices = _this3.getSuggestionIndices(_this3.findSuggestionElement(event.target)),
              sectionIndex = _getSuggestionIndices.sectionIndex,
              suggestionIndex = _getSuggestionIndices.suggestionIndex;

            var clickedSuggestion = _this3.getSuggestion(sectionIndex, suggestionIndex);
            var clickedSuggestionValue = _this3.props.getSuggestionValue(clickedSuggestion);

            _this3.maybeCallOnChange(event, clickedSuggestionValue, 'click');
            _this3.onSuggestionSelected(event, {
              suggestion: clickedSuggestion,
              suggestionValue: clickedSuggestionValue,
              suggestionIndex: suggestionIndex,
              sectionIndex: sectionIndex,
              method: 'click'
            });

            if (!alwaysRenderSuggestions) {
              _this3.closeSuggestions();
            }

            if (focusInputOnSuggestionClick === true) {
              _this3.input.focus();
            } else {
              _this3.onBlur();
            }

            setTimeout(function () {
              _this3.justSelectedSuggestion = false;
            });
          };

          this.onBlur = function () {
            var _props5 = _this3.props,
              inputProps = _props5.inputProps,
              shouldRenderSuggestions = _props5.shouldRenderSuggestions;
            var value = inputProps.value,
              onBlur = inputProps.onBlur;

            var highlightedSuggestion = _this3.getHighlightedSuggestion();
            var shouldRender = shouldRenderSuggestions(value);

            _this3.setState({
              isFocused: false,
              highlightedSectionIndex: null,
              highlightedSuggestionIndex: null,
              valueBeforeUpDown: null,
              isCollapsed: !shouldRender
            });

            onBlur && onBlur(_this3.blurEvent, { highlightedSuggestion: highlightedSuggestion });
          };

          this.resetHighlightedSuggestionOnMouseLeave = function () {
            _this3.resetHighlightedSuggestion(false); // shouldResetValueBeforeUpDown
          };

          this.itemProps = function (_ref4) {
            var sectionIndex = _ref4.sectionIndex,
              itemIndex = _ref4.itemIndex;

            return {
              'data-section-index': sectionIndex,
              'data-suggestion-index': itemIndex,
              onMouseEnter: _this3.onSuggestionMouseEnter,
              onMouseLeave: _this3.resetHighlightedSuggestionOnMouseLeave,
              onMouseDown: _this3.onSuggestionMouseDown,
              onTouchStart: _this3.onSuggestionMouseDown, // Because on iOS `onMouseDown` is not triggered
              onClick: _this3.onSuggestionClick
            };
          };

          this.renderSuggestionsContainer = function (_ref5) {
            var containerProps = _ref5.containerProps,
              children = _ref5.children;
            var renderSuggestionsContainer = _this3.props.renderSuggestionsContainer;


            return renderSuggestionsContainer({ containerProps: containerProps, children: children, query: _this3.getQuery() });
          };
        };

        exports.default = Autosuggest;

        /***/
      }),
      /* 258 */
      /***/
      (function (module, exports) {

        module.exports = function shallowEqualArrays(arrA, arrB) {
          if (arrA === arrB) {
            return true;
          }

          var len = arrA.length;

          if (arrB.length !== len) {
            return false;
          }

          for (var i = 0; i < len; i++) {
            if (arrA[i] !== arrB[i]) {
              return false;
            }
          }

          return true;
        };


        /***/
      }),
      /* 259 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        module.exports = __webpack_require__(260).default;

        /***/
      }),
      /* 260 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _slicedToArray = function () {
          function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true;
              _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _propTypes = __webpack_require__(211);

        var _propTypes2 = _interopRequireDefault(_propTypes);

        var _sectionIterator = __webpack_require__(261);

        var _sectionIterator2 = _interopRequireDefault(_sectionIterator);

        var _reactThemeable = __webpack_require__(262);

        var _reactThemeable2 = _interopRequireDefault(_reactThemeable);

        var _SectionTitle = __webpack_require__(264);

        var _SectionTitle2 = _interopRequireDefault(_SectionTitle);

        var _ItemsList = __webpack_require__(266);

        var _ItemsList2 = _interopRequireDefault(_ItemsList);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var emptyObject = {};
        var defaultRenderInputComponent = function defaultRenderInputComponent(props) {
          return _react2.default.createElement('input', props);
        };
        var defaultRenderItemsContainer = function defaultRenderItemsContainer(_ref) {
          var containerProps = _ref.containerProps,
            children = _ref.children;
          return _react2.default.createElement(
            'div',
            containerProps,
            children
          );
        };
        var defaultTheme = {
          container: 'react-autowhatever__container',
          containerOpen: 'react-autowhatever__container--open',
          input: 'react-autowhatever__input',
          inputOpen: 'react-autowhatever__input--open',
          inputFocused: 'react-autowhatever__input--focused',
          itemsContainer: 'react-autowhatever__items-container',
          itemsContainerOpen: 'react-autowhatever__items-container--open',
          itemsList: 'react-autowhatever__items-list',
          item: 'react-autowhatever__item',
          itemFirst: 'react-autowhatever__item--first',
          itemHighlighted: 'react-autowhatever__item--highlighted',
          sectionContainer: 'react-autowhatever__section-container',
          sectionContainerFirst: 'react-autowhatever__section-container--first',
          sectionTitle: 'react-autowhatever__section-title'
        };

        var Autowhatever = function (_Component) {
          _inherits(Autowhatever, _Component);

          function Autowhatever(props) {
            _classCallCheck(this, Autowhatever);

            var _this = _possibleConstructorReturn(this, (Autowhatever.__proto__ || Object.getPrototypeOf(Autowhatever)).call(this, props));

            _this.storeInputReference = function (input) {
              if (input !== null) {
                _this.input = input;
              }
            };

            _this.storeItemsContainerReference = function (itemsContainer) {
              if (itemsContainer !== null) {
                _this.itemsContainer = itemsContainer;
              }
            };

            _this.onHighlightedItemChange = function (highlightedItem) {
              _this.highlightedItem = highlightedItem;
            };

            _this.getItemId = function (sectionIndex, itemIndex) {
              if (itemIndex === null) {
                return null;
              }

              var id = _this.props.id;

              var section = sectionIndex === null ? '' : 'section-' + sectionIndex;

              return 'react-autowhatever-' + id + '-' + section + '-item-' + itemIndex;
            };

            _this.onFocus = function (event) {
              var inputProps = _this.props.inputProps;


              _this.setState({
                isInputFocused: true
              });

              inputProps.onFocus && inputProps.onFocus(event);
            };

            _this.onBlur = function (event) {
              var inputProps = _this.props.inputProps;


              _this.setState({
                isInputFocused: false
              });

              inputProps.onBlur && inputProps.onBlur(event);
            };

            _this.onKeyDown = function (event) {
              var _this$props = _this.props,
                inputProps = _this$props.inputProps,
                highlightedSectionIndex = _this$props.highlightedSectionIndex,
                highlightedItemIndex = _this$props.highlightedItemIndex;


              switch (event.key) {
              case 'ArrowDown':
              case 'ArrowUp':
                {
                  var nextPrev = event.key === 'ArrowDown' ? 'next' : 'prev';

                  var _this$sectionIterator = _this.sectionIterator[nextPrev]([highlightedSectionIndex, highlightedItemIndex]),
                    _this$sectionIterator2 = _slicedToArray(_this$sectionIterator, 2),
                    newHighlightedSectionIndex = _this$sectionIterator2[0],
                    newHighlightedItemIndex = _this$sectionIterator2[1];

                  inputProps.onKeyDown(event, { newHighlightedSectionIndex: newHighlightedSectionIndex, newHighlightedItemIndex: newHighlightedItemIndex });
                  break;
                }

              default:
                inputProps.onKeyDown(event, { highlightedSectionIndex: highlightedSectionIndex, highlightedItemIndex: highlightedItemIndex });
              }
            };

            _this.highlightedItem = null;

            _this.state = {
              isInputFocused: false
            };

            _this.setSectionsItems(props);
            _this.setSectionIterator(props);
            _this.setTheme(props);
            return _this;
          }

          _createClass(Autowhatever, [{
            key: 'componentDidMount',
            value: function componentDidMount() {
              this.ensureHighlightedItemIsVisible();
            }
          }, {
            key: 'componentWillReceiveProps',
            value: function componentWillReceiveProps(nextProps) {
              if (nextProps.items !== this.props.items) {
                this.setSectionsItems(nextProps);
              }

              if (nextProps.items !== this.props.items || nextProps.multiSection !== this.props.multiSection) {
                this.setSectionIterator(nextProps);
              }

              if (nextProps.theme !== this.props.theme) {
                this.setTheme(nextProps);
              }
            }
          }, {
            key: 'componentDidUpdate',
            value: function componentDidUpdate() {
              this.ensureHighlightedItemIsVisible();
            }
          }, {
            key: 'setSectionsItems',
            value: function setSectionsItems(props) {
              if (props.multiSection) {
                this.sectionsItems = props.items.map(function (section) {
                  return props.getSectionItems(section);
                });
                this.sectionsLengths = this.sectionsItems.map(function (items) {
                  return items.length;
                });
                this.allSectionsAreEmpty = this.sectionsLengths.every(function (itemsCount) {
                  return itemsCount === 0;
                });
              }
            }
          }, {
            key: 'setSectionIterator',
            value: function setSectionIterator(props) {
              this.sectionIterator = (0, _sectionIterator2.default)({
                multiSection: props.multiSection,
                data: props.multiSection ? this.sectionsLengths : props.items.length
              });
            }
          }, {
            key: 'setTheme',
            value: function setTheme(props) {
              this.theme = (0, _reactThemeable2.default)(props.theme);
            }
          }, {
            key: 'renderSections',
            value: function renderSections() {
              var _this2 = this;

              if (this.allSectionsAreEmpty) {
                return null;
              }

              var theme = this.theme;
              var _props = this.props,
                id = _props.id,
                items = _props.items,
                renderItem = _props.renderItem,
                renderItemData = _props.renderItemData,
                renderSectionTitle = _props.renderSectionTitle,
                highlightedSectionIndex = _props.highlightedSectionIndex,
                highlightedItemIndex = _props.highlightedItemIndex,
                itemProps = _props.itemProps;


              return items.map(function (section, sectionIndex) {
                var keyPrefix = 'react-autowhatever-' + id + '-';
                var sectionKeyPrefix = keyPrefix + 'section-' + sectionIndex + '-';
                var isFirstSection = sectionIndex === 0;

                // `key` is provided by theme()
                /* eslint-disable react/jsx-key */
                return _react2.default.createElement(
                  'div',
                  theme(sectionKeyPrefix + 'container', 'sectionContainer', isFirstSection && 'sectionContainerFirst'),
                  _react2.default.createElement(_SectionTitle2.default, {
                    section: section,
                    renderSectionTitle: renderSectionTitle,
                    theme: theme,
                    sectionKeyPrefix: sectionKeyPrefix
                  }),
                  _react2.default.createElement(_ItemsList2.default, {
                    items: _this2.sectionsItems[sectionIndex],
                    itemProps: itemProps,
                    renderItem: renderItem,
                    renderItemData: renderItemData,
                    sectionIndex: sectionIndex,
                    highlightedItemIndex: highlightedSectionIndex === sectionIndex ? highlightedItemIndex : null,
                    onHighlightedItemChange: _this2.onHighlightedItemChange,
                    getItemId: _this2.getItemId,
                    theme: theme,
                    keyPrefix: keyPrefix,
                    ref: _this2.storeItemsListReference
                  })
                );
                /* eslint-enable react/jsx-key */
              });
            }
          }, {
            key: 'renderItems',
            value: function renderItems() {
              var items = this.props.items;


              if (items.length === 0) {
                return null;
              }

              var theme = this.theme;
              var _props2 = this.props,
                id = _props2.id,
                renderItem = _props2.renderItem,
                renderItemData = _props2.renderItemData,
                highlightedSectionIndex = _props2.highlightedSectionIndex,
                highlightedItemIndex = _props2.highlightedItemIndex,
                itemProps = _props2.itemProps;


              return _react2.default.createElement(_ItemsList2.default, {
                items: items,
                itemProps: itemProps,
                renderItem: renderItem,
                renderItemData: renderItemData,
                highlightedItemIndex: highlightedSectionIndex === null ? highlightedItemIndex : null,
                onHighlightedItemChange: this.onHighlightedItemChange,
                getItemId: this.getItemId,
                theme: theme,
                keyPrefix: 'react-autowhatever-' + id + '-'
              });
            }
          }, {
            key: 'ensureHighlightedItemIsVisible',
            value: function ensureHighlightedItemIsVisible() {
              var highlightedItem = this.highlightedItem;


              if (!highlightedItem) {
                return;
              }

              var itemsContainer = this.itemsContainer;

              var itemOffsetRelativeToContainer = highlightedItem.offsetParent === itemsContainer ? highlightedItem.offsetTop : highlightedItem.offsetTop - itemsContainer.offsetTop;

              var scrollTop = itemsContainer.scrollTop; // Top of the visible area

              if (itemOffsetRelativeToContainer < scrollTop) {
                // Item is off the top of the visible area
                scrollTop = itemOffsetRelativeToContainer;
              } else if (itemOffsetRelativeToContainer + highlightedItem.offsetHeight > scrollTop + itemsContainer.offsetHeight) {
                // Item is off the bottom of the visible area
                scrollTop = itemOffsetRelativeToContainer + highlightedItem.offsetHeight - itemsContainer.offsetHeight;
              }

              if (scrollTop !== itemsContainer.scrollTop) {
                itemsContainer.scrollTop = scrollTop;
              }
            }
          }, {
            key: 'render',
            value: function render() {
              var theme = this.theme;
              var _props3 = this.props,
                id = _props3.id,
                multiSection = _props3.multiSection,
                renderInputComponent = _props3.renderInputComponent,
                renderItemsContainer = _props3.renderItemsContainer,
                highlightedSectionIndex = _props3.highlightedSectionIndex,
                highlightedItemIndex = _props3.highlightedItemIndex;
              var isInputFocused = this.state.isInputFocused;

              var renderedItems = multiSection ? this.renderSections() : this.renderItems();
              var isOpen = renderedItems !== null;
              var ariaActivedescendant = this.getItemId(highlightedSectionIndex, highlightedItemIndex);
              var containerProps = theme('react-autowhatever-' + id + '-container', 'container', isOpen && 'containerOpen');
              var itemsContainerId = 'react-autowhatever-' + id;
              var inputComponent = renderInputComponent(_extends({
                type: 'text',
                value: '',
                autoComplete: 'off',
                role: 'combobox',
                'aria-autocomplete': 'list',
                'aria-owns': itemsContainerId,
                'aria-expanded': isOpen,
                'aria-haspopup': isOpen,
                'aria-activedescendant': ariaActivedescendant
              }, theme('react-autowhatever-' + id + '-input', 'input', isOpen && 'inputOpen', isInputFocused && 'inputFocused'), this.props.inputProps, {
                onFocus: this.onFocus,
                onBlur: this.onBlur,
                onKeyDown: this.props.inputProps.onKeyDown && this.onKeyDown,
                ref: this.storeInputReference
              }));
              var itemsContainer = renderItemsContainer({
                containerProps: _extends({
                  id: itemsContainerId
                }, theme('react-autowhatever-' + id + '-items-container', 'itemsContainer', isOpen && 'itemsContainerOpen'), {
                  ref: this.storeItemsContainerReference
                }),
                children: renderedItems
              });

              return _react2.default.createElement(
                'div',
                containerProps,
                inputComponent,
                itemsContainer
              );
            }
          }]);

          return Autowhatever;
        }(_react.Component);

        Autowhatever.propTypes = {
          id: _propTypes2.default.string, // Used in aria-* attributes. If multiple Autowhatever's are rendered on a page, they must have unique ids.
          multiSection: _propTypes2.default.bool, // Indicates whether a multi section layout should be rendered.
          renderInputComponent: _propTypes2.default.func, // When specified, it is used to render the input element.
          renderItemsContainer: _propTypes2.default.func, // Renders the items container.
          items: _propTypes2.default.array.isRequired, // Array of items or sections to render.
          renderItem: _propTypes2.default.func, // This function renders a single item.
          renderItemData: _propTypes2.default.object, // Arbitrary data that will be passed to renderItem()
          renderSectionTitle: _propTypes2.default.func, // This function gets a section and renders its title.
          getSectionItems: _propTypes2.default.func, // This function gets a section and returns its items, which will be passed into `renderItem` for rendering.
          inputProps: _propTypes2.default.object, // Arbitrary input props
          itemProps: _propTypes2.default.oneOfType([ // Arbitrary item props
            _propTypes2.default.object, _propTypes2.default.func
          ]),
          highlightedSectionIndex: _propTypes2.default.number, // Section index of the highlighted item
          highlightedItemIndex: _propTypes2.default.number, // Highlighted item index (within a section)
          theme: _propTypes2.default.oneOfType([ // Styles. See: https://github.com/markdalgleish/react-themeable
            _propTypes2.default.object, _propTypes2.default.array
          ])
        };
        Autowhatever.defaultProps = {
          id: '1',
          multiSection: false,
          renderInputComponent: defaultRenderInputComponent,
          renderItemsContainer: defaultRenderItemsContainer,
          renderItem: function renderItem() {
            throw new Error('`renderItem` must be provided');
          },
          renderItemData: emptyObject,
          renderSectionTitle: function renderSectionTitle() {
            throw new Error('`renderSectionTitle` must be provided');
          },
          getSectionItems: function getSectionItems() {
            throw new Error('`getSectionItems` must be provided');
          },
          inputProps: emptyObject,
          itemProps: emptyObject,
          highlightedSectionIndex: null,
          highlightedItemIndex: null,
          theme: defaultTheme
        };
        exports.default = Autowhatever;

        /***/
      }),
      /* 261 */
      /***/
      (function (module, exports) {

        "use strict";

        var _slicedToArray = function () {
          function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true;
              _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

        module.exports = function (_ref) {
          var data = _ref.data;
          var multiSection = _ref.multiSection;

          function nextNonEmptySectionIndex(sectionIndex) {
            if (sectionIndex === null) {
              sectionIndex = 0;
            } else {
              sectionIndex++;
            }

            while (sectionIndex < data.length && data[sectionIndex] === 0) {
              sectionIndex++;
            }

            return sectionIndex === data.length ? null : sectionIndex;
          }

          function prevNonEmptySectionIndex(sectionIndex) {
            if (sectionIndex === null) {
              sectionIndex = data.length - 1;
            } else {
              sectionIndex--;
            }

            while (sectionIndex >= 0 && data[sectionIndex] === 0) {
              sectionIndex--;
            }

            return sectionIndex === -1 ? null : sectionIndex;
          }

          function next(position) {
            var _position = _slicedToArray(position, 2);

            var sectionIndex = _position[0];
            var itemIndex = _position[1];


            if (multiSection) {
              if (itemIndex === null || itemIndex === data[sectionIndex] - 1) {
                sectionIndex = nextNonEmptySectionIndex(sectionIndex);

                if (sectionIndex === null) {
                  return [null, null];
                }

                return [sectionIndex, 0];
              }

              return [sectionIndex, itemIndex + 1];
            }

            if (data === 0 || itemIndex === data - 1) {
              return [null, null];
            }

            if (itemIndex === null) {
              return [null, 0];
            }

            return [null, itemIndex + 1];
          }

          function prev(position) {
            var _position2 = _slicedToArray(position, 2);

            var sectionIndex = _position2[0];
            var itemIndex = _position2[1];


            if (multiSection) {
              if (itemIndex === null || itemIndex === 0) {
                sectionIndex = prevNonEmptySectionIndex(sectionIndex);

                if (sectionIndex === null) {
                  return [null, null];
                }

                return [sectionIndex, data[sectionIndex] - 1];
              }

              return [sectionIndex, itemIndex - 1];
            }

            if (data === 0 || itemIndex === 0) {
              return [null, null];
            }

            if (itemIndex === null) {
              return [null, data - 1];
            }

            return [null, itemIndex - 1];
          }

          function isLast(position) {
            return next(position)[1] === null;
          }

          return {
            next: next,
            prev: prev,
            isLast: isLast
          };
        };


        /***/
      }),
      /* 262 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true
        });

        var _slicedToArray = (function () {
          function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true;
              _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

        var _objectAssign = __webpack_require__(263);

        var _objectAssign2 = _interopRequireDefault(_objectAssign);

        var truthy = function truthy(x) {
          return x;
        };

        exports['default'] = function (input) {
          var _ref = Array.isArray(input) && input.length === 2 ? input : [input, null];

          var _ref2 = _slicedToArray(_ref, 2);

          var theme = _ref2[0];
          var classNameDecorator = _ref2[1];

          return function (key) {
            for (var _len = arguments.length, names = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              names[_key - 1] = arguments[_key];
            }

            var styles = names.map(function (name) {
              return theme[name];
            }).filter(truthy);

            return typeof styles[0] === 'string' || typeof classNameDecorator === 'function' ? { key: key, className: classNameDecorator ? classNameDecorator.apply(undefined, _toConsumableArray(styles)) : styles.join(' ') } : { key: key, style: _objectAssign2['default'].apply(undefined, [{}].concat(_toConsumableArray(styles))) };
          };
        };

        module.exports = exports['default'];

        /***/
      }),
      /* 263 */
      /***/
      (function (module, exports) {

        'use strict';
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;

        function ToObject(val) {
          if (val == null) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
          }

          return Object(val);
        }

        function ownEnumerableKeys(obj) {
          var keys = Object.getOwnPropertyNames(obj);

          if (Object.getOwnPropertySymbols) {
            keys = keys.concat(Object.getOwnPropertySymbols(obj));
          }

          return keys.filter(function (key) {
            return propIsEnumerable.call(obj, key);
          });
        }

        module.exports = Object.assign || function (target, source) {
          var from;
          var keys;
          var to = ToObject(target);

          for (var s = 1; s < arguments.length; s++) {
            from = arguments[s];
            keys = ownEnumerableKeys(Object(from));

            for (var i = 0; i < keys.length; i++) {
              to[keys[i]] = from[keys[i]];
            }
          }

          return to;
        };


        /***/
      }),
      /* 264 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _propTypes = __webpack_require__(211);

        var _propTypes2 = _interopRequireDefault(_propTypes);

        var _compareObjects = __webpack_require__(265);

        var _compareObjects2 = _interopRequireDefault(_compareObjects);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var SectionTitle = function (_Component) {
          _inherits(SectionTitle, _Component);

          function SectionTitle() {
            _classCallCheck(this, SectionTitle);

            return _possibleConstructorReturn(this, (SectionTitle.__proto__ || Object.getPrototypeOf(SectionTitle)).apply(this, arguments));
          }

          _createClass(SectionTitle, [{
            key: 'shouldComponentUpdate',
            value: function shouldComponentUpdate(nextProps) {
              return (0, _compareObjects2.default)(nextProps, this.props);
            }
          }, {
            key: 'render',
            value: function render() {
              var _props = this.props,
                section = _props.section,
                renderSectionTitle = _props.renderSectionTitle,
                theme = _props.theme,
                sectionKeyPrefix = _props.sectionKeyPrefix;

              var sectionTitle = renderSectionTitle(section);

              if (!sectionTitle) {
                return null;
              }

              return _react2.default.createElement(
                'div',
                theme(sectionKeyPrefix + 'title', 'sectionTitle'),
                sectionTitle
              );
            }
          }]);

          return SectionTitle;
        }(_react.Component);

        SectionTitle.propTypes = {
          section: _propTypes2.default.any.isRequired,
          renderSectionTitle: _propTypes2.default.func.isRequired,
          theme: _propTypes2.default.func.isRequired,
          sectionKeyPrefix: _propTypes2.default.string.isRequired
        };
        exports.default = SectionTitle;

        /***/
      }),
      /* 265 */
      /***/
      (function (module, exports) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

        exports.default = compareObjects;

        function compareObjects(objA, objB) {
          var keys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

          if (objA === objB) {
            return false;
          }

          var aKeys = Object.keys(objA);
          var bKeys = Object.keys(objB);

          if (aKeys.length !== bKeys.length) {
            return true;
          }

          var keysMap = {};
          var i = void 0,
            len = void 0;

          for (i = 0, len = keys.length; i < len; i++) {
            keysMap[keys[i]] = true;
          }

          for (i = 0, len = aKeys.length; i < len; i++) {
            var key = aKeys[i];
            var aValue = objA[key];
            var bValue = objB[key];

            if (aValue === bValue) {
              continue;
            }

            if (!keysMap[key] || aValue === null || bValue === null || (typeof aValue === 'undefined' ? 'undefined' : _typeof(aValue)) !== 'object' || (typeof bValue === 'undefined' ? 'undefined' : _typeof(bValue)) !== 'object') {
              return true;
            }

            var aValueKeys = Object.keys(aValue);
            var bValueKeys = Object.keys(bValue);

            if (aValueKeys.length !== bValueKeys.length) {
              return true;
            }

            for (var n = 0, length = aValueKeys.length; n < length; n++) {
              var aValueKey = aValueKeys[n];

              if (aValue[aValueKey] !== bValue[aValueKey]) {
                return true;
              }
            }
          }

          return false;
        }

        /***/
      }),
      /* 266 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _propTypes = __webpack_require__(211);

        var _propTypes2 = _interopRequireDefault(_propTypes);

        var _Item = __webpack_require__(267);

        var _Item2 = _interopRequireDefault(_Item);

        var _compareObjects = __webpack_require__(265);

        var _compareObjects2 = _interopRequireDefault(_compareObjects);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var ItemsList = function (_Component) {
          _inherits(ItemsList, _Component);

          function ItemsList() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, ItemsList);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ItemsList.__proto__ || Object.getPrototypeOf(ItemsList)).call.apply(_ref, [this].concat(args))), _this), _this.storeHighlightedItemReference = function (highlightedItem) {
              _this.props.onHighlightedItemChange(highlightedItem === null ? null : highlightedItem.item);
            }, _temp), _possibleConstructorReturn(_this, _ret);
          }

          _createClass(ItemsList, [{
            key: 'shouldComponentUpdate',
            value: function shouldComponentUpdate(nextProps) {
              return (0, _compareObjects2.default)(nextProps, this.props, ['itemProps']);
            }
          }, {
            key: 'render',
            value: function render() {
              var _this2 = this;

              var _props = this.props,
                items = _props.items,
                itemProps = _props.itemProps,
                renderItem = _props.renderItem,
                renderItemData = _props.renderItemData,
                sectionIndex = _props.sectionIndex,
                highlightedItemIndex = _props.highlightedItemIndex,
                getItemId = _props.getItemId,
                theme = _props.theme,
                keyPrefix = _props.keyPrefix;

              var sectionPrefix = sectionIndex === null ? keyPrefix : keyPrefix + 'section-' + sectionIndex + '-';
              var isItemPropsFunction = typeof itemProps === 'function';

              return _react2.default.createElement(
                'ul',
                _extends({ role: 'listbox' }, theme(sectionPrefix + 'items-list', 'itemsList')),
                items.map(function (item, itemIndex) {
                  var isFirst = itemIndex === 0;
                  var isHighlighted = itemIndex === highlightedItemIndex;
                  var itemKey = sectionPrefix + 'item-' + itemIndex;
                  var itemPropsObj = isItemPropsFunction ? itemProps({ sectionIndex: sectionIndex, itemIndex: itemIndex }) : itemProps;
                  var allItemProps = _extends({
                    id: getItemId(sectionIndex, itemIndex)
                  }, theme(itemKey, 'item', isFirst && 'itemFirst', isHighlighted && 'itemHighlighted'), itemPropsObj);

                  if (isHighlighted) {
                    allItemProps.ref = _this2.storeHighlightedItemReference;
                  }

                  // `key` is provided by theme()
                  /* eslint-disable react/jsx-key */
                  return _react2.default.createElement(_Item2.default, _extends({}, allItemProps, {
                    sectionIndex: sectionIndex,
                    itemIndex: itemIndex,
                    item: item,
                    renderItem: renderItem,
                    renderItemData: renderItemData
                  }));
                  /* eslint-enable react/jsx-key */
                })
              );
            }
          }]);

          return ItemsList;
        }(_react.Component);

        ItemsList.propTypes = {
          items: _propTypes2.default.array.isRequired,
          itemProps: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
          renderItem: _propTypes2.default.func.isRequired,
          renderItemData: _propTypes2.default.object.isRequired,
          sectionIndex: _propTypes2.default.number,
          highlightedItemIndex: _propTypes2.default.number,
          onHighlightedItemChange: _propTypes2.default.func.isRequired,
          getItemId: _propTypes2.default.func.isRequired,
          theme: _propTypes2.default.func.isRequired,
          keyPrefix: _propTypes2.default.string.isRequired
        };
        ItemsList.defaultProps = {
          sectionIndex: null
        };
        exports.default = ItemsList;

        /***/
      }),
      /* 267 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _propTypes = __webpack_require__(211);

        var _propTypes2 = _interopRequireDefault(_propTypes);

        var _compareObjects = __webpack_require__(265);

        var _compareObjects2 = _interopRequireDefault(_compareObjects);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i]; } return target; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var Item = function (_Component) {
          _inherits(Item, _Component);

          function Item() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, Item);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Item.__proto__ || Object.getPrototypeOf(Item)).call.apply(_ref, [this].concat(args))), _this), _this.storeItemReference = function (item) {
              if (item !== null) {
                _this.item = item;
              }
            }, _this.onMouseEnter = function (event) {
              var _this$props = _this.props,
                sectionIndex = _this$props.sectionIndex,
                itemIndex = _this$props.itemIndex;


              _this.props.onMouseEnter(event, { sectionIndex: sectionIndex, itemIndex: itemIndex });
            }, _this.onMouseLeave = function (event) {
              var _this$props2 = _this.props,
                sectionIndex = _this$props2.sectionIndex,
                itemIndex = _this$props2.itemIndex;


              _this.props.onMouseLeave(event, { sectionIndex: sectionIndex, itemIndex: itemIndex });
            }, _this.onMouseDown = function (event) {
              var _this$props3 = _this.props,
                sectionIndex = _this$props3.sectionIndex,
                itemIndex = _this$props3.itemIndex;


              _this.props.onMouseDown(event, { sectionIndex: sectionIndex, itemIndex: itemIndex });
            }, _this.onClick = function (event) {
              var _this$props4 = _this.props,
                sectionIndex = _this$props4.sectionIndex,
                itemIndex = _this$props4.itemIndex;


              _this.props.onClick(event, { sectionIndex: sectionIndex, itemIndex: itemIndex });
            }, _temp), _possibleConstructorReturn(_this, _ret);
          }

          _createClass(Item, [{
            key: 'shouldComponentUpdate',
            value: function shouldComponentUpdate(nextProps) {
              return (0, _compareObjects2.default)(nextProps, this.props, ['renderItemData']);
            }
          }, {
            key: 'render',
            value: function render() {
              var _props = this.props,
                item = _props.item,
                renderItem = _props.renderItem,
                renderItemData = _props.renderItemData,
                restProps = _objectWithoutProperties(_props, ['item', 'renderItem', 'renderItemData']);

              delete restProps.sectionIndex;
              delete restProps.itemIndex;

              if (typeof restProps.onMouseEnter === 'function') {
                restProps.onMouseEnter = this.onMouseEnter;
              }

              if (typeof restProps.onMouseLeave === 'function') {
                restProps.onMouseLeave = this.onMouseLeave;
              }

              if (typeof restProps.onMouseDown === 'function') {
                restProps.onMouseDown = this.onMouseDown;
              }

              if (typeof restProps.onClick === 'function') {
                restProps.onClick = this.onClick;
              }

              return _react2.default.createElement(
                'li',
                _extends({ role: 'option' }, restProps, { ref: this.storeItemReference }),
                renderItem(item, renderItemData)
              );
            }
          }]);

          return Item;
        }(_react.Component);

        Item.propTypes = {
          sectionIndex: _propTypes2.default.number,
          itemIndex: _propTypes2.default.number.isRequired,
          item: _propTypes2.default.any.isRequired,
          renderItem: _propTypes2.default.func.isRequired,
          renderItemData: _propTypes2.default.object.isRequired,
          onMouseEnter: _propTypes2.default.func,
          onMouseLeave: _propTypes2.default.func,
          onMouseDown: _propTypes2.default.func,
          onClick: _propTypes2.default.func
        };
        exports.default = Item;

        /***/
      }),
      /* 268 */
      /***/
      (function (module, exports) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var defaultTheme = exports.defaultTheme = {
          container: 'react-autosuggest__container',
          containerOpen: 'react-autosuggest__container--open',
          input: 'react-autosuggest__input',
          inputOpen: 'react-autosuggest__input--open',
          inputFocused: 'react-autosuggest__input--focused',
          suggestionsContainer: 'react-autosuggest__suggestions-container',
          suggestionsContainerOpen: 'react-autosuggest__suggestions-container--open',
          suggestionsList: 'react-autosuggest__suggestions-list',
          suggestion: 'react-autosuggest__suggestion',
          suggestionFirst: 'react-autosuggest__suggestion--first',
          suggestionHighlighted: 'react-autosuggest__suggestion--highlighted',
          sectionContainer: 'react-autosuggest__section-container',
          sectionContainerFirst: 'react-autosuggest__section-container--first',
          sectionTitle: 'react-autosuggest__section-title'
        };

        var mapToAutowhateverTheme = exports.mapToAutowhateverTheme = function mapToAutowhateverTheme(theme) {
          var result = {};

          for (var key in theme) {
            switch (key) {
            case 'suggestionsContainer':
              result['itemsContainer'] = theme[key];
              break;

            case 'suggestionsContainerOpen':
              result['itemsContainerOpen'] = theme[key];
              break;

            case 'suggestion':
              result['item'] = theme[key];
              break;

            case 'suggestionFirst':
              result['itemFirst'] = theme[key];
              break;

            case 'suggestionHighlighted':
              result['itemHighlighted'] = theme[key];
              break;

            case 'suggestionsList':
              result['itemsList'] = theme[key];
              break;

            default:
              result[key] = theme[key];
            }
          }

          return result;
        };

        /***/
      }),
      /* 269 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var SingleRange = function (_Component) {
          _inherits(SingleRange, _Component);

          function SingleRange(props, context) {
            _classCallCheck(this, SingleRange);

            var _this = _possibleConstructorReturn(this, (SingleRange.__proto__ || Object.getPrototypeOf(SingleRange)).call(this, props));

            _this.state = {
              selected: null
            };
            _this.type = "range";
            _this.urlParams = helper.URLParams.get(_this.props.componentId);
            _this.handleChange = _this.handleChange.bind(_this);
            _this.customQuery = _this.customQuery.bind(_this);
            return _this;
          }

          // Set query information


          _createClass(SingleRange, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setQueryInfo();
              this.checkDefault(this.props);
              this.listenFilter();
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              this.checkDefault(nextProps);
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this2 = this;

              this.filterListener = helper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this2.props.componentId) {
                  _this2.changeValue(null);
                }
              });
            }
          }, {
            key: "checkDefault",
            value: function checkDefault(props) {
              this.urlParams = helper.URLParams.get(props.componentId);
              var defaultValue = this.urlParams !== null ? this.urlParams : props.defaultSelected;
              this.changeValue(defaultValue);
            }
          }, {
            key: "changeValue",
            value: function changeValue(defaultValue) {
              var _this3 = this;

              if (!_lodash2.default.isEqual(this.defaultSelected, defaultValue)) {
                this.defaultSelected = defaultValue;
                if (this.defaultSelected) {
                  var records = this.props.data.filter(function (record) {
                    return record.label === _this3.defaultSelected;
                  });
                  if (records && records.length) {
                    setTimeout(this.handleChange.bind(this, records[0]), 1000);
                  }
                } else {
                  this.handleChange(null);
                }
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: "SingleRange"
                }
              };
              helper.selectedSensor.setSensorInfo(obj);
            }

            // build query for this sensor only

          }, {
            key: "customQuery",
            value: function customQuery(record) {
              if (record) {
                return {
                  range: _defineProperty({}, this.props.appbaseField, {
                    gte: record.start,
                    lte: record.end,
                    boost: 2.0
                  })
                };
              }
            }

            // handle the input change and pass the value inside sensor info

          }, {
            key: "handleChange",
            value: function handleChange(record) {
              this.setState({
                selected: record
              });
              var obj = {
                key: this.props.componentId,
                value: record
              };
              this.defaultSelected = record;
              // pass the selected sensor value with componentId as key,
              var isExecuteQuery = true;
              if (this.props.onValueChange) {
                this.props.onValueChange(obj.value);
              }
              helper.URLParams.update(this.props.componentId, record ? record.label : null, this.props.URLParams);
              helper.selectedSensor.set(obj, isExecuteQuery);
            }
          }, {
            key: "renderButtons",
            value: function renderButtons() {
              var _this4 = this;

              var buttons = void 0;
              var selectedText = this.state.selected && this.state.selected.label ? this.state.selected.label : "";
              if (this.props.data) {
                buttons = this.props.data.map(function (record, i) {
                  return _react2.default.createElement(
                    "div", {
                      className: "rbc-list-item row",
                      key: i,
                      onClick: function onClick() {
                        return _this4.handleChange(record);
                      }
                    },
                    _react2.default.createElement("input", {
                      type: "radio",
                      className: "rbc-radio-item",
                      checked: selectedText === record.label,
                      value: record.label
                    }),
                    _react2.default.createElement(
                      "label", { className: "rbc-label" },
                      record.label
                    )
                  );
                });
              }
              return buttons;
            }

            // render

          }, {
            key: "render",
            value: function render() {
              var title = null;
              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title
              });

              return _react2.default.createElement(
                "div", { className: "rbc rbc-singlerange col s12 col-xs-12 card thumbnail " + cx, style: this.props.componentStyle },
                _react2.default.createElement(
                  "div", { className: "row" },
                  title,
                  _react2.default.createElement(
                    "div", { className: "col s12 col-xs-12 rbc-list-container" },
                    this.renderButtons()
                  )
                )
              );
            }
          }]);

          return SingleRange;
        }(_react.Component);

        exports.default = SingleRange;


        SingleRange.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          data: _react2.default.PropTypes.any.isRequired,
          defaultSelected: _react2.default.PropTypes.string,
          customQuery: _react2.default.PropTypes.func,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        SingleRange.defaultProps = {
          title: null,
          componentStyle: {},
          allowFilter: true
        };

        // context type
        SingleRange.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        SingleRange.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.NUMBER,
          title: TYPES.STRING,
          data: TYPES.OBJECT,
          defaultSelected: TYPES.STRING,
          customQuery: TYPES.FUNCTION,
          componentStyle: TYPES.OBJECT,
          allowFilter: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 270 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var MultiRange = function (_Component) {
          _inherits(MultiRange, _Component);

          function MultiRange(props) {
            _classCallCheck(this, MultiRange);

            var _this = _possibleConstructorReturn(this, (MultiRange.__proto__ || Object.getPrototypeOf(MultiRange)).call(this, props));

            _this.state = {
              selected: []
            };
            _this.type = "range";
            _this.urlParams = helper.URLParams.get(_this.props.componentId, true);
            _this.handleChange = _this.handleChange.bind(_this);
            _this.resetState = _this.resetState.bind(_this);
            _this.handleTagClick = _this.handleTagClick.bind(_this);
            _this.customQuery = _this.customQuery.bind(_this);
            return _this;
          }

          // Set query information


          _createClass(MultiRange, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setQueryInfo();
              this.checkDefault(this.props);
              this.listenFilter();
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              this.checkDefault(nextProps);
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this2 = this;

              this.filterListener = helper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this2.props.componentId) {
                  _this2.changeValue(null);
                }
              });
            }
          }, {
            key: "checkDefault",
            value: function checkDefault(props) {
              this.urlParams = helper.URLParams.get(props.componentId, true);
              var defaultValue = this.urlParams !== null ? this.urlParams : props.defaultSelected;
              this.changeValue(defaultValue);
            }
          }, {
            key: "changeValue",
            value: function changeValue(defaultValue) {
              if (!_lodash2.default.isEqual(this.defaultSelected, defaultValue)) {
                this.defaultSelected = defaultValue;
                if (defaultValue) {
                  this.resetState();
                  var records = this.props.data.filter(function (record) {
                    return defaultValue.indexOf(record.label) > -1;
                  });
                  if (records && records.length) {
                    setTimeout(this.handleChange.bind(this, records), 1000);
                  }
                } else {
                  this.handleChange(null);
                }
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: "MultiRange"
                }
              };
              helper.selectedSensor.setSensorInfo(obj);
            }

            // build query for this sensor only

          }, {
            key: "customQuery",
            value: function customQuery(record) {
              function generateRangeQuery(appbaseField) {
                if (record.length > 0) {
                  return record.map(function (singleRecord) {
                    return {
                      range: _defineProperty({}, appbaseField, {
                        gte: singleRecord.start,
                        lte: singleRecord.end,
                        boost: 2.0
                      })
                    };
                  });
                }
                return null;
              }

              if (record) {
                var query = {
                  bool: {
                    should: generateRangeQuery(this.props.appbaseField),
                    minimum_should_match: 1,
                    boost: 1.0
                  }
                };
                return query;
              }
              return null;
            }

            // handle the input change and pass the value inside sensor info

          }, {
            key: "handleChange",
            value: function handleChange(record) {
              var selected = this.state.selected;
              var selectedIndex = null;
              var records = record;

              function setRecord(selectedRecord, index, item) {
                if (item.label === selectedRecord.label) {
                  selectedIndex = index;
                  selected.splice(index, 1);
                }
              }

              if (record) {
                if (selected === null) {
                  selected = [];
                }
                if (!_lodash2.default.isArray(record)) {
                  records = [record];
                }
                records.forEach(function (item) {
                  selected.forEach(function (selectedRecord, index) {
                    setRecord(selectedRecord, index, item);
                  });
                });

                if (selectedIndex === null) {
                  records.forEach(function (item) {
                    selected.push(item);
                  });
                }
              } else {
                selected = null;
              }
              selected = selected === "" ? null : selected;
              selected = selected && selected.length ? selected : null;
              this.defaultSelected = selected;

              this.setState({
                selected: selected
              });

              var obj = {
                key: this.props.componentId,
                value: selected
              };

              // pass the selected sensor value with componentId as key,
              var isExecuteQuery = true;
              if (this.props.onValueChange) {
                this.props.onValueChange(obj.value);
              }
              helper.URLParams.update(this.props.componentId, this.getSelectedLabels(selected), this.props.URLParams);
              helper.selectedSensor.set(obj, isExecuteQuery);
            }
          }, {
            key: "getSelectedLabels",
            value: function getSelectedLabels(selected) {
              return selected ? selected.map(function (item) {
                return item.label;
              }) : null;
            }
          }, {
            key: "resetState",
            value: function resetState() {
              this.setState({
                selected: []
              });
              var obj = {
                key: this.props.componentId,
                value: []
              };
              // pass the selected sensor value with componentId as key,
              var isExecuteQuery = true;
              helper.URLParams.update(this.props.componentId, null, this.props.URLParams);
              helper.selectedSensor.set(obj, isExecuteQuery);
            }
          }, {
            key: "handleTagClick",
            value: function handleTagClick(label) {
              var target = this.state.selected.filter(function (record) {
                return record.label === label;
              });
              this.handleChange(target[0]);
            }
          }, {
            key: "renderButtons",
            value: function renderButtons() {
              var _this3 = this;

              var buttons = void 0;
              var selectedText = this.state.selected ? this.state.selected.map(function (record) {
                return record.label;
              }) : "";
              if (this.props.data) {
                buttons = this.props.data.map(function (record) {
                  return _react2.default.createElement(
                    "div", {
                      className: "rbc-list-item row",
                      key: record.label,
                      onClick: function onClick() {
                        return _this3.handleChange(record);
                      }
                    },
                    _react2.default.createElement("input", {
                      type: "checkbox",
                      className: "rbc-checkbox-item",
                      checked: selectedText.indexOf(record.label) > -1,
                      value: record.label
                    }),
                    _react2.default.createElement(
                      "label", { className: "rbc-label" },
                      record.label
                    )
                  );
                });
              }
              return buttons;
            }

            // render

          }, {
            key: "render",
            value: function render() {
              var _this4 = this;

              var title = null;
              var TagItemsArray = [];

              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }

              if (this.state.selected && this.props.showTags) {
                this.state.selected.forEach(function (item) {
                  TagItemsArray.push(_react2.default.createElement(Tag, {
                    key: item.label,
                    value: item.label,
                    onClick: _this4.handleTagClick
                  }));
                });
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title
              });

              return _react2.default.createElement(
                "div", { className: "rbc rbc-multirange col s12 col-xs-12 card thumbnail " + cx, style: this.props.componentStyle },
                _react2.default.createElement(
                  "div", { className: "row" },
                  title,
                  _react2.default.createElement(
                    "div", { className: "col s12 col-xs-12 rbc-list-container" },
                    TagItemsArray.length ? _react2.default.createElement(
                      "div", { className: "row", style: { marginTop: "0" } },
                      TagItemsArray
                    ) : null,
                    this.renderButtons()
                  )
                )
              );
            }
          }]);

          return MultiRange;
        }(_react.Component);

        exports.default = MultiRange;


        var Tag = function Tag(props) {
          return _react2.default.createElement(
            "span", {
              onClick: function onClick() {
                return props.onClick(props.value);
              },
              className: "rbc-tag-item col"
            },
            _react2.default.createElement(
              "a", { className: "close" },
              "\xD7"
            ),
            _react2.default.createElement(
              "span",
              null,
              props.value
            )
          );
        };

        Tag.propTypes = {
          onClick: _react2.default.PropTypes.func.isRequired,
          value: _react2.default.PropTypes.string.isRequired
        };

        MultiRange.propTypes = {
          appbaseField: _react2.default.PropTypes.string.isRequired,
          componentId: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          data: _react2.default.PropTypes.any.isRequired,
          defaultSelected: _react2.default.PropTypes.array,
          customQuery: _react2.default.PropTypes.func,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool,
          showTags: _react2.default.PropTypes.bool
        };

        // Default props value
        MultiRange.defaultProps = {
          URLParams: false,
          allowFilter: true,
          showTags: true
        };

        // context type
        MultiRange.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        MultiRange.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.NUMBER,
          title: TYPES.STRING,
          data: TYPES.OBJECT,
          defaultSelected: TYPES.ARRAY,
          customQuery: TYPES.FUNCTION,
          componentStyle: TYPES.OBJECT,
          URLParams: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN,
          showTags: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 271 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _reactSelect = __webpack_require__(88);

        var _reactSelect2 = _interopRequireDefault(_reactSelect);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var SingleDropdownRange = function (_Component) {
          _inherits(SingleDropdownRange, _Component);

          function SingleDropdownRange(props) {
            _classCallCheck(this, SingleDropdownRange);

            var _this = _possibleConstructorReturn(this, (SingleDropdownRange.__proto__ || Object.getPrototypeOf(SingleDropdownRange)).call(this, props));

            _this.state = {
              selected: null
            };
            _this.type = "range";
            _this.urlParams = helper.URLParams.get(_this.props.componentId);
            _this.handleChange = _this.handleChange.bind(_this);
            _this.customQuery = _this.customQuery.bind(_this);
            return _this;
          }

          // Set query information


          _createClass(SingleDropdownRange, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setQueryInfo();
              this.checkDefault(this.props);
              this.listenFilter();
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              this.checkDefault(nextProps);
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this2 = this;

              this.filterListener = helper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this2.props.componentId) {
                  _this2.changeValue(null);
                }
              });
            }
          }, {
            key: "checkDefault",
            value: function checkDefault(props) {
              this.urlParams = helper.URLParams.get(props.componentId);
              var defaultValue = this.urlParams !== null ? this.urlParams : props.defaultSelected;
              this.changeValue(defaultValue);
            }
          }, {
            key: "changeValue",
            value: function changeValue(defaultValue) {
              var _this3 = this;

              if (!_.isEqual(this.defaultSelected, defaultValue)) {
                this.defaultSelected = defaultValue;
                if (this.defaultSelected) {
                  var records = this.props.data.filter(function (record) {
                    return record.label === _this3.defaultSelected;
                  });
                  if (records && records.length) {
                    setTimeout(this.handleChange.bind(this, records[0]), 1000);
                  }
                } else {
                  this.handleChange(null);
                }
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: "SingleDropdownRange"
                }
              };
              helper.selectedSensor.setSensorInfo(obj);
            }

            // build query for this sensor only

          }, {
            key: "customQuery",
            value: function customQuery(record) {
              if (record) {
                return {
                  range: _defineProperty({}, this.props.appbaseField, {
                    gte: record.start,
                    lte: record.end,
                    boost: 2.0
                  })
                };
              }
            }

            // handle the input change and pass the value inside sensor info

          }, {
            key: "handleChange",
            value: function handleChange(record) {
              this.setState({
                selected: record
              });
              var obj = {
                key: this.props.componentId,
                value: record
              };
              // pass the selected sensor value with componentId as key,
              var isExecuteQuery = true;
              if (this.props.onValueChange) {
                this.props.onValueChange(obj.value);
              }
              this.defaultSelected = record;
              helper.URLParams.update(this.props.componentId, record ? record.label : null, this.props.URLParams);
              helper.selectedSensor.set(obj, isExecuteQuery);
            }

            // render

          }, {
            key: "render",
            value: function render() {
              var title = null;
              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-placeholder-active": this.props.placeholder,
                "rbc-placeholder-inactive": !this.props.placeholder
              });

              return _react2.default.createElement(
                "div", { className: "rbc rbc-singledropdownrange col s12 col-xs-12 card thumbnail " + cx, style: this.props.componentStyle },
                _react2.default.createElement(
                  "div", { className: "row" },
                  title,
                  _react2.default.createElement(
                    "div", { className: "col s12 col-xs-12" },
                    _react2.default.createElement(_reactSelect2.default, {
                      options: this.props.data,
                      clearable: false,
                      value: this.state.selected,
                      onChange: this.handleChange,
                      placeholder: this.props.placeholder,
                      searchable: true
                    })
                  )
                )
              );
            }
          }]);

          return SingleDropdownRange;
        }(_react.Component);

        exports.default = SingleDropdownRange;


        SingleDropdownRange.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          placeholder: _react2.default.PropTypes.string,
          data: _react2.default.PropTypes.any.isRequired,
          defaultSelected: _react2.default.PropTypes.string,
          customQuery: _react2.default.PropTypes.func,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          URLParams: _react2.default.PropTypes.bool
        };

        // Default props value
        SingleDropdownRange.defaultProps = {
          componentStyle: {},
          URLParams: false
        };

        // context type
        SingleDropdownRange.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        SingleDropdownRange.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.NUMBER,
          data: TYPES.OBJECT,
          defaultSelected: TYPES.STRING,
          title: TYPES.STRING,
          placeholder: TYPES.STRING,
          customQuery: TYPES.FUNCTION,
          componentStyle: TYPES.OBJECT,
          URLParams: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 272 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactSelect = __webpack_require__(88);

        var _reactSelect2 = _interopRequireDefault(_reactSelect);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var MultiDropdownRange = function (_Component) {
          _inherits(MultiDropdownRange, _Component);

          function MultiDropdownRange(props) {
            _classCallCheck(this, MultiDropdownRange);

            var _this = _possibleConstructorReturn(this, (MultiDropdownRange.__proto__ || Object.getPrototypeOf(MultiDropdownRange)).call(this, props));

            _this.state = {
              selected: ""
            };
            _this.type = "range";
            _this.state.data = _this.props.data.map(function (item) {
              item.value = item.label;
              return item;
            });
            _this.urlParams = helper.URLParams.get(_this.props.componentId, true);
            _this.defaultSelected = _this.urlParams !== null ? _this.urlParams : _this.props.defaultSelected;
            _this.handleChange = _this.handleChange.bind(_this);
            _this.customQuery = _this.customQuery.bind(_this);
            return _this;
          }

          // Set query information


          _createClass(MultiDropdownRange, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              var _this2 = this;

              this.setQueryInfo();
              if (this.defaultSelected) {
                var records = this.state.data.filter(function (record) {
                  return _this2.defaultSelected.indexOf(record.label) > -1;
                });
                if (records && records.length) {
                  setTimeout(this.handleChange.bind(this, records), 1000);
                }
              }
              this.listenFilter();
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps() {
              this.urlParams = helper.URLParams.get(nextProps.componentId, true);
              var defaultValue = this.urlParams !== null ? this.urlParams : nextProps.defaultSelected;
              this.valueChange(defaultValue);
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this3 = this;

              this.filterListener = helper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this3.props.componentId) {
                  _this3.defaultSelected = null;
                  _this3.handleChange(null);
                }
              });
            }
          }, {
            key: "valueChange",
            value: function valueChange(defaultValue) {
              var _this4 = this;

              if (!_lodash2.default.isEqual(this.defaultSelected, defaultValue)) {
                this.defaultSelected = defaultValue;
                var records = this.state.data.filter(function (record) {
                  return _this4.defaultSelected.indexOf(record.label) > -1;
                });
                if (records && records.length) {
                  if (this.urlParams !== null) {
                    this.handleChange(records);
                  } else {
                    setTimeout(this.handleChange.bind(this, records), 1000);
                  }
                }
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery
                }
              };
              helper.selectedSensor.setSensorInfo(obj);
            }

            // build query for this sensor only

          }, {
            key: "customQuery",
            value: function customQuery(record) {
              function generateRangeQuery(appbaseField) {
                if (record.length > 0) {
                  return record.map(function (singleRecord) {
                    return {
                      range: _defineProperty({}, appbaseField, {
                        gte: singleRecord.start,
                        lte: singleRecord.end,
                        boost: 2.0
                      })
                    };
                  });
                }
              }

              if (record) {
                var query = {
                  bool: {
                    should: generateRangeQuery(this.props.appbaseField),
                    minimum_should_match: 1,
                    boost: 1.0
                  }
                };
                return query;
              }
            }

            // handle the input change and pass the value inside sensor info

          }, {
            key: "handleChange",
            value: function handleChange(record) {
              var selected = record ? [] : null;
              if (record) {
                selected = record.map(function (item) {
                  return item.label;
                });
                selected = selected.join();
              }
              selected = selected === "" ? null : selected;
              record = record === "" ? null : record;
              record = record && record.length ? record : null;
              this.setState({
                selected: selected
              });
              var obj = {
                key: this.props.componentId,
                value: record
              };
              // pass the selected sensor value with componentId as key,
              var isExecuteQuery = true;
              if (this.props.onValueChange) {
                this.props.onValueChange(obj.value);
              }
              helper.URLParams.update(this.props.componentId, selected, this.props.URLParams);
              helper.selectedSensor.set(obj, isExecuteQuery);
            }

            // render

          }, {
            key: "render",
            value: function render() {
              var title = null;
              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-placeholder-active": this.props.placeholder,
                "rbc-placeholder-inactive": !this.props.placeholder
              });

              return _react2.default.createElement(
                "div", { className: "rbc rbc-multidropdownrange col s12 col-xs-12 card thumbnail " + cx, style: this.props.componentStyle },
                _react2.default.createElement(
                  "div", { className: "row" },
                  title,
                  _react2.default.createElement(
                    "div", { className: "col s12 col-xs-12" },
                    _react2.default.createElement(_reactSelect2.default, {
                      options: this.state.data,
                      value: this.state.selected,
                      onChange: this.handleChange,
                      clearable: false,
                      multi: true,
                      placeholder: this.props.placeholder,
                      searchable: true
                    })
                  )
                )
              );
            }
          }]);

          return MultiDropdownRange;
        }(_react.Component);

        exports.default = MultiDropdownRange;


        MultiDropdownRange.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          placeholder: _react2.default.PropTypes.string,
          data: _react2.default.PropTypes.any.isRequired,
          defaultSelected: _react2.default.PropTypes.array,
          customQuery: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        MultiDropdownRange.defaultProps = {
          URLParams: false,
          allowFilter: true
        };

        // context type
        MultiDropdownRange.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired
        };

        MultiDropdownRange.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.NUMBER,
          data: TYPES.OBJECT,
          defaultSelected: TYPES.ARRAY,
          title: TYPES.STRING,
          placeholder: TYPES.STRING,
          customQuery: TYPES.FUNCTION,
          componentStyle: TYPES.OBJECT,
          URLParams: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 273 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var ToggleButton = function (_Component) {
          _inherits(ToggleButton, _Component);

          function ToggleButton(props, context) {
            _classCallCheck(this, ToggleButton);

            var _this = _possibleConstructorReturn(this, (ToggleButton.__proto__ || Object.getPrototypeOf(ToggleButton)).call(this, props));

            _this.state = {
              selected: []
            };
            _this.type = "term";
            _this.urlParams = helper.URLParams.get(_this.props.componentId, true);
            _this.handleChange = _this.handleChange.bind(_this);
            _this.customQuery = _this.customQuery.bind(_this);
            return _this;
          }

          // Set query information


          _createClass(ToggleButton, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setQueryInfo();
              this.checkDefault(this.props);
              this.listenFilter();
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              this.checkDefault(nextProps);
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this2 = this;

              this.filterListener = helper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this2.props.componentId) {
                  _this2.defaultSelected = null;
                  _this2.handleChange(null);
                }
              });
            }
          }, {
            key: "checkDefault",
            value: function checkDefault(props) {
              this.urlParams = helper.URLParams.get(props.componentId, true);
              var defaultValue = this.urlParams !== null ? this.urlParams : props.defaultSelected;
              this.valueChange(defaultValue);
            }
          }, {
            key: "valueChange",
            value: function valueChange(defaultValue) {
              var _this3 = this;

              if (!_lodash2.default.isEqual(this.defaultSelected, defaultValue)) {
                this.defaultSelected = defaultValue;
                if (this.defaultSelected) {
                  this.defaultSelected = _lodash2.default.isArray(this.defaultSelected) ? this.defaultSelected : [this.defaultSelected];
                  var records = this.props.data.filter(function (record) {
                    return _this3.defaultSelected.indexOf(record.label) > -1;
                  });
                  if (records && records.length) {
                    records.forEach(function (singleRecord) {
                      setTimeout(_this3.handleChange.bind(_this3, singleRecord), 1000);
                    });
                  }
                } else {
                  this.handleChange(null);
                }
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: "ToggleButton"
                }
              };
              helper.selectedSensor.setSensorInfo(obj);
            }

            // build query for this sensor only

          }, {
            key: "customQuery",
            value: function customQuery(record) {
              var query = null;
              if (record && record.length) {
                query = {
                  bool: {
                    should: generateTermQuery(this.props.appbaseField),
                    minimum_should_match: 1,
                    boost: 1.0
                  }
                };
                return query;
              }
              return query;

              function generateTermQuery(appbaseField) {
                return record.map(function (singleRecord, index) {
                  return {
                    term: _defineProperty({}, appbaseField, singleRecord.value)
                  };
                });
              }
            }

            // handle the input change and pass the value inside sensor info

          }, {
            key: "handleChange",
            value: function handleChange(record) {
              var selected = this.state.selected;
              var newSelection = null;
              var selectedIndex = null;
              if (record) {
                newSelection = [];
                selected = selected ? selected : [];
                selected.forEach(function (selectedRecord, index) {
                  if (record.label === selectedRecord.label) {
                    selectedIndex = index;
                    selected.splice(index, 1);
                  }
                });
                if (selectedIndex === null) {
                  if (this.props.multiSelect) {
                    selected.push(record);
                    newSelection = selected;
                  } else {
                    newSelection.push(record);
                  }
                } else {
                  newSelection = selected;
                }
                newSelection = newSelection.length ? newSelection : null;
              } else {
                newSelection = null;
              }
              this.setState({
                selected: newSelection
              });
              var obj = {
                key: this.props.componentId,
                value: newSelection
              };
              // pass the selected sensor value with componentId as key,
              var isExecuteQuery = true;
              if (this.props.onValueChange) {
                this.props.onValueChange(obj.value);
              }
              helper.URLParams.update(this.props.componentId, this.setURLValue(newSelection), this.props.URLParams);
              helper.selectedSensor.set(obj, isExecuteQuery);
            }
          }, {
            key: "setURLValue",
            value: function setURLValue(records) {
              return records ? records.map(function (item) {
                return item.label;
              }) : null;
            }
          }, {
            key: "renderButtons",
            value: function renderButtons() {
              var _this4 = this;

              var buttons = void 0;
              var selectedText = this.state.selected ? this.state.selected.map(function (record) {
                return record.label;
              }) : "";
              if (this.props.data) {
                buttons = this.props.data.map(function (record, i) {
                  return _react2.default.createElement(
                    "button", {
                      key: i,
                      className: "btn rbc-btn " + (selectedText.indexOf(record.label) > -1 ? "rbc-btn-active" : "rbc-btn-inactive"),
                      onClick: function onClick() {
                        return _this4.handleChange(record);
                      },
                      title: record.title ? record.title : record.label
                    },
                    record.label
                  );
                });
              }
              return buttons;
            }

            // render

          }, {
            key: "render",
            value: function render() {
              var title = null;
              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-multiselect-active": this.props.multiSelect,
                "rbc-multiselect-inactive": !this.props.multiSelect
              });
              return _react2.default.createElement(
                "div", { className: "rbc rbc-togglebutton col s12 col-xs-12 card thumbnail " + cx, style: this.props.componentStyle },
                _react2.default.createElement(
                  "div", { className: "row" },
                  title,
                  _react2.default.createElement(
                    "div", { className: "rbc-buttongroup col s12 col-xs-12" },
                    this.renderButtons()
                  )
                )
              );
            }
          }]);

          return ToggleButton;
        }(_react.Component);

        exports.default = ToggleButton;


        ToggleButton.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          data: _react2.default.PropTypes.any.isRequired,
          defaultSelected: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.array, _react2.default.PropTypes.string]),
          multiSelect: _react2.default.PropTypes.bool,
          customQuery: _react2.default.PropTypes.func,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        ToggleButton.defaultProps = {
          multiSelect: true,
          componentStyle: {},
          URLParams: false,
          allowFilter: true
        };

        // context type
        ToggleButton.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        ToggleButton.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.KEYWORD,
          title: TYPES.STRING,
          data: TYPES.OBJECT,
          defaultSelected: TYPES.ARRAY,
          multiSelect: TYPES.BOOLEAN,
          customQuery: TYPES.FUNCTION,
          componentStyle: TYPES.OBJECT,
          URLParams: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 274 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactDates = __webpack_require__(275);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        var _moment = __webpack_require__(277);

        var _moment2 = _interopRequireDefault(_moment);

        var _reactMomentProptypes = __webpack_require__(401);

        var _reactMomentProptypes2 = _interopRequireDefault(_reactMomentProptypes);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var DatePicker = function (_Component) {
          _inherits(DatePicker, _Component);

          function DatePicker(props) {
            _classCallCheck(this, DatePicker);

            var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

            _this.state = {
              currentValue: _this.props.defaultSelected,
              focused: _this.props.focused
            };
            _this.type = "range";
            _this.urlParams = helper.URLParams.get(_this.props.componentId);
            _this.handleChange = _this.handleChange.bind(_this);
            _this.customQuery = _this.customQuery.bind(_this);
            return _this;
          }

          // Set query information


          _createClass(DatePicker, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setQueryInfo();
              if (this.urlParams !== null) {
                this.handleChange((0, _moment2.default)(this.urlParams), true);
              }
              this.checkDefault();
              this.listenFilter();
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps() {
              this.checkDefault();
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this2 = this;

              this.filterListener = helper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this2.props.componentId) {
                  _this2.defaultDate = null;
                  _this2.handleChange(_this2.defaultDate);
                }
              });
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: "DatePicker"
                }
              };
              helper.selectedSensor.setSensorInfo(obj);
            }
          }, {
            key: "checkDefault",
            value: function checkDefault() {
              if (this.urlParams !== null && this.props.queryFormat && helper.dateFormat[this.props.queryFormat] && (0, _moment2.default)(this.defaultDate).format(helper.dateFormat[this.props.queryFormat]) !== (0, _moment2.default)(this.urlParams).format(helper.dateFormat[this.props.queryFormat])) {
                this.defaultDate = (0, _moment2.default)(this.urlParams);
                setTimeout(this.handleChange.bind(this, this.defaultDate), 1000);
              } else if (this.props.defaultSelected && this.props.queryFormat && helper.dateFormat[this.props.queryFormat] && (0, _moment2.default)(this.defaultDate).format(helper.dateFormat[this.props.queryFormat]) !== (0, _moment2.default)(this.props.defaultSelected).format(helper.dateFormat[this.props.queryFormat])) {
                this.defaultDate = this.props.defaultSelected;
                setTimeout(this.handleChange.bind(this, this.defaultDate), 1000);
              }
            }

            // build query for this sensor only

          }, {
            key: "customQuery",
            value: function customQuery(value) {
              var query = null;
              if (value && this.props.queryFormat && helper.dateFormat[this.props.queryFormat]) {
                query = {
                  range: _defineProperty({}, this.props.appbaseField, {
                    gte: (0, _moment2.default)(value).subtract(24, "hours").format(helper.dateFormat[this.props.queryFormat]),
                    lte: (0, _moment2.default)(value).format(helper.dateFormat[this.props.queryFormat])
                  })
                };
              }
              return query;
            }

            // handle the input change and pass the value inside sensor info

          }, {
            key: "handleChange",
            value: function handleChange(inputVal) {
              this.setState({
                currentValue: inputVal
              });
              var obj = {
                key: this.props.componentId,
                value: inputVal
              };
              // pass the selected sensor value with componentId as key,
              var isExecuteQuery = true;
              if (this.props.onValueChange) {
                this.props.onValueChange(obj.value);
              }
              helper.URLParams.update(this.props.componentId, inputVal, this.props.URLParams);
              helper.selectedSensor.set(obj, isExecuteQuery);
            }

            // handle focus

          }, {
            key: "handleFocus",
            value: function handleFocus(focus) {
              this.setState({
                focused: focus
              });
            }

            // allow all dates

          }, {
            key: "allowAllDates",
            value: function allowAllDates() {
              var outsideObj = void 0;
              if (this.props.allowAllDates) {
                outsideObj = {
                  isOutsideRange: function isOutsideRange() {
                    return false;
                  }
                };
              }

              return outsideObj;
            }

            // render

          }, {
            key: "render",
            value: function render() {
              var _this3 = this;

              var title = null;
              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title
              });
              return _react2.default.createElement(
                "div", { className: "rbc rbc-datepicker col s12 col-xs-12 card thumbnail " + cx, style: this.props.componentStyle },
                title,
                _react2.default.createElement(
                  "div", { className: "col s12 col-xs-12" },
                  _react2.default.createElement(_reactDates.SingleDatePicker, _extends({
                    id: this.props.componentId,
                    date: this.state.currentValue,
                    placeholder: this.props.placeholder,
                    focused: this.state.focused,
                    numberOfMonths: this.props.numberOfMonths
                  }, this.props.extra, this.allowAllDates(), {
                    onDateChange: function onDateChange(date) {
                      _this3.handleChange(date);
                    },
                    onFocusChange: function onFocusChange(_ref) {
                      var focused = _ref.focused;
                      _this3.handleFocus(focused);
                    }
                  }))
                )
              );
            }
          }]);

          return DatePicker;
        }(_react.Component);

        exports.default = DatePicker;


        DatePicker.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          placeholder: _react2.default.PropTypes.string,
          defaultSelected: _reactMomentProptypes2.default.momentObj,
          focused: _react2.default.PropTypes.bool,
          numberOfMonths: _react2.default.PropTypes.number,
          allowAllDates: _react2.default.PropTypes.bool,
          extra: _react2.default.PropTypes.any,
          customQuery: _react2.default.PropTypes.func,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          queryFormat: _react2.default.PropTypes.oneOf(Object.keys(helper.dateFormat)),
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        DatePicker.defaultProps = {
          placeholder: "Select Date",
          numberOfMonths: 1,
          focused: true,
          allowAllDates: true,
          defaultSelected: null,
          componentStyle: {},
          queryFormat: "epoch_millis",
          URLParams: false,
          allowFilter: true
        };

        // context type
        DatePicker.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        DatePicker.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.DATE,
          title: TYPES.STRING,
          placeholder: TYPES.STRING,
          defaultSelected: TYPES.OBJECT,
          focused: TYPES.BOOLEAN,
          numberOfMonths: TYPES.NUMBER,
          allowAllDates: TYPES.BOOLEAN,
          extra: TYPES.OBJECT,
          customQuery: TYPES.FUNCTION,
          componentStyle: TYPES.OBJECT,
          queryFormat: TYPES.STRING,
          URLParams: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 275 */
      /***/
      (function (module, exports, __webpack_require__) {

        var DateRangePicker = __webpack_require__(276).default;
        var DateRangePickerInput = __webpack_require__(403).default;
        var DateRangePickerInputController = __webpack_require__(400).default;
        var SingleDatePicker = __webpack_require__(451).default;
        var SingleDatePickerInput = __webpack_require__(452).default;
        var DayPicker = __webpack_require__(438).default;
        var DayPickerRangeController = __webpack_require__(408).default;
        var CalendarMonthGrid = __webpack_require__(443).default;
        var CalendarMonth = __webpack_require__(444).default;
        var CalendarDay = __webpack_require__(445).default;

        var DateRangePickerShape = __webpack_require__(449).default;
        var SingleDatePickerShape = __webpack_require__(453).default;

        var isInclusivelyAfterDay = __webpack_require__(398).default;
        var isInclusivelyBeforeDay = __webpack_require__(407).default;
        var isNextDay = __webpack_require__(436).default;
        var isSameDay = __webpack_require__(399).default;

        var toISODateString = __webpack_require__(454).default;
        var toLocalizedDateString = __webpack_require__(406).default;
        var toMomentObject = __webpack_require__(405).default;


        module.exports = {
          DateRangePicker: DateRangePicker,
          SingleDatePicker: SingleDatePicker,

          DateRangePickerInputController: DateRangePickerInputController,
          DateRangePickerInput: DateRangePickerInput,
          SingleDatePickerInput: SingleDatePickerInput,
          DayPicker: DayPicker,
          DayPickerRangeController: DayPickerRangeController,
          CalendarMonthGrid: CalendarMonthGrid,
          CalendarMonth: CalendarMonth,
          CalendarDay: CalendarDay,

          DateRangePickerShape: DateRangePickerShape,
          SingleDatePickerShape: SingleDatePickerShape,

          isInclusivelyAfterDay: isInclusivelyAfterDay,
          isInclusivelyBeforeDay: isInclusivelyBeforeDay,
          isNextDay: isNextDay,
          isSameDay: isSameDay,

          toISODateString: toISODateString,
          toLocalizedDateString: toLocalizedDateString,
          toMomentObject: toMomentObject,
        };


        /***/
      }),
      /* 276 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports =
          /******/
          (function (modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

              /******/ // Check if module is in cache
              /******/
              if (installedModules[moduleId])
              /******/
                return installedModules[moduleId].exports;

              /******/ // Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                  /******/
              };

              /******/ // Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

              /******/ // Flag the module as loaded
              /******/
              module.loaded = true;

              /******/ // Return the exports of the module
              /******/
              return module.exports;
              /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
          })
          /************************************************************************/
          /******/
          ([
            /* 0 */
            /***/
            function (module, exports, __webpack_require__) {

              var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _createClass = function () {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function (Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps);
                  if (staticProps) defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              var _reactDom = __webpack_require__(10);

              var _reactDom2 = _interopRequireDefault(_reactDom);

              var _moment = __webpack_require__(4);

              var _moment2 = _interopRequireDefault(_moment);

              var _classnames = __webpack_require__(5);

              var _classnames2 = _interopRequireDefault(_classnames);

              var _reactPortal = __webpack_require__(15);

              var _reactPortal2 = _interopRequireDefault(_reactPortal);

              var _isTouchDevice = __webpack_require__(14);

              var _isTouchDevice2 = _interopRequireDefault(_isTouchDevice);

              var _getResponsiveContainerStyles = __webpack_require__(16);

              var _getResponsiveContainerStyles2 = _interopRequireDefault(_getResponsiveContainerStyles);

              var _isInclusivelyAfterDay = __webpack_require__(17);

              var _isInclusivelyAfterDay2 = _interopRequireDefault(_isInclusivelyAfterDay);

              var _DateRangePickerInputController = __webpack_require__(18);

              var _DateRangePickerInputController2 = _interopRequireDefault(_DateRangePickerInputController);

              var _DayPickerRangeController = __webpack_require__(19);

              var _DayPickerRangeController2 = _interopRequireDefault(_DayPickerRangeController);

              var _close = __webpack_require__(20);

              var _close2 = _interopRequireDefault(_close);

              var _DateRangePickerShape = __webpack_require__(21);

              var _DateRangePickerShape2 = _interopRequireDefault(_DateRangePickerShape);

              var _constants = __webpack_require__(9);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _possibleConstructorReturn(self, call) {
                if (!self) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              }

              var propTypes = _DateRangePickerShape2['default'];

              var defaultProps = {
                startDateId: _constants.START_DATE,
                endDateId: _constants.END_DATE,
                focusedInput: null,
                minimumNights: 1,
                isDayBlocked: function () {
                  function isDayBlocked() {
                    return false;
                  }

                  return isDayBlocked;
                }(),
                isDayHighlighted: function () {
                  function isDayHighlighted() {
                    return false;
                  }

                  return isDayHighlighted;
                }(),
                isOutsideRange: function () {
                  function isOutsideRange(day) {
                    return !(0, _isInclusivelyAfterDay2['default'])(day, (0, _moment2['default'])());
                  }

                  return isOutsideRange;
                }(),
                enableOutsideDays: false,
                numberOfMonths: 2,
                showClearDates: false,
                disabled: false,
                required: false,
                reopenPickerOnClearDates: false,
                keepOpenOnDateSelect: false,
                initialVisibleMonth: function () {
                  function initialVisibleMonth() {
                    return (0, _moment2['default'])();
                  }

                  return initialVisibleMonth;
                }(),
                navPrev: null,
                navNext: null,

                orientation: _constants.HORIZONTAL_ORIENTATION,
                anchorDirection: _constants.ANCHOR_LEFT,
                horizontalMargin: 0,
                withPortal: false,
                withFullScreenPortal: false,

                onDatesChange: function () {
                  function onDatesChange() {}

                  return onDatesChange;
                }(),
                onFocusChange: function () {
                  function onFocusChange() {}

                  return onFocusChange;
                }(),
                onPrevMonthClick: function () {
                  function onPrevMonthClick() {}

                  return onPrevMonthClick;
                }(),
                onNextMonthClick: function () {
                  function onNextMonthClick() {}

                  return onNextMonthClick;
                }(),

                // i18n
                displayFormat: function () {
                  function displayFormat() {
                    return _moment2['default'].localeData().longDateFormat('L');
                  }

                  return displayFormat;
                }(),
                monthFormat: 'MMMM YYYY',
                phrases: {
                  closeDatePicker: 'Close',
                  clearDates: 'Clear Dates'
                }
              };

              var DateRangePicker = function (_React$Component) {
                _inherits(DateRangePicker, _React$Component);

                function DateRangePicker(props) {
                  _classCallCheck(this, DateRangePicker);

                  var _this = _possibleConstructorReturn(this, (DateRangePicker.__proto__ || Object.getPrototypeOf(DateRangePicker)).call(this, props));

                  _this.state = {
                    dayPickerContainerStyles: {}
                  };

                  _this.isTouchDevice = (0, _isTouchDevice2['default'])();

                  _this.onOutsideClick = _this.onOutsideClick.bind(_this);

                  _this.responsivizePickerPosition = _this.responsivizePickerPosition.bind(_this);
                  return _this;
                }

                _createClass(DateRangePicker, [{
                  key: 'componentDidMount',
                  value: function () {
                    function componentDidMount() {
                      window.addEventListener('resize', this.responsivizePickerPosition);
                      this.responsivizePickerPosition();
                    }

                    return componentDidMount;
                  }()
                }, {
                  key: 'componentWillUnmount',
                  value: function () {
                    function componentWillUnmount() {
                      window.removeEventListener('resize', this.responsivizePickerPosition);
                    }

                    return componentWillUnmount;
                  }()
                }, {
                  key: 'onOutsideClick',
                  value: function () {
                    function onOutsideClick() {
                      var _props = this.props;
                      var focusedInput = _props.focusedInput;
                      var onFocusChange = _props.onFocusChange;

                      if (!focusedInput) return;

                      onFocusChange(null);
                    }

                    return onOutsideClick;
                  }()
                }, {
                  key: 'getDayPickerContainerClasses',
                  value: function () {
                    function getDayPickerContainerClasses() {
                      var _props2 = this.props;
                      var focusedInput = _props2.focusedInput;
                      var orientation = _props2.orientation;
                      var withPortal = _props2.withPortal;
                      var withFullScreenPortal = _props2.withFullScreenPortal;
                      var anchorDirection = _props2.anchorDirection;

                      var showDatepicker = focusedInput === _constants.START_DATE || focusedInput === _constants.END_DATE;

                      var dayPickerClassName = (0, _classnames2['default'])('DateRangePicker__picker', {
                        'DateRangePicker__picker--show': showDatepicker,
                        'DateRangePicker__picker--invisible': !showDatepicker,
                        'DateRangePicker__picker--direction-left': anchorDirection === _constants.ANCHOR_LEFT,
                        'DateRangePicker__picker--direction-right': anchorDirection === _constants.ANCHOR_RIGHT,
                        'DateRangePicker__picker--horizontal': orientation === _constants.HORIZONTAL_ORIENTATION,
                        'DateRangePicker__picker--vertical': orientation === _constants.VERTICAL_ORIENTATION,
                        'DateRangePicker__picker--portal': withPortal || withFullScreenPortal,
                        'DateRangePicker__picker--full-screen-portal': withFullScreenPortal
                      });

                      return dayPickerClassName;
                    }

                    return getDayPickerContainerClasses;
                  }()
                }, {
                  key: 'getDayPickerDOMNode',
                  value: function () {
                    function getDayPickerDOMNode() {
                      return _reactDom2['default'].findDOMNode(this.dayPicker);
                    }

                    return getDayPickerDOMNode;
                  }()
                }, {
                  key: 'responsivizePickerPosition',
                  value: function () {
                    function responsivizePickerPosition() {
                      var _props3 = this.props;
                      var anchorDirection = _props3.anchorDirection;
                      var horizontalMargin = _props3.horizontalMargin;
                      var withPortal = _props3.withPortal;
                      var withFullScreenPortal = _props3.withFullScreenPortal;
                      var dayPickerContainerStyles = this.state.dayPickerContainerStyles;

                      var isAnchoredLeft = anchorDirection === _constants.ANCHOR_LEFT;
                      if (!withPortal && !withFullScreenPortal) {
                        var containerRect = this.dayPickerContainer.getBoundingClientRect();
                        var currentOffset = dayPickerContainerStyles[anchorDirection] || 0;
                        var containerEdge = isAnchoredLeft ? containerRect[_constants.ANCHOR_RIGHT] : containerRect[_constants.ANCHOR_LEFT];

                        this.setState({
                          dayPickerContainerStyles: (0, _getResponsiveContainerStyles2['default'])(anchorDirection, currentOffset, containerEdge, horizontalMargin)
                        });
                      }
                    }

                    return responsivizePickerPosition;
                  }()
                }, {
                  key: 'maybeRenderDayPickerWithPortal',
                  value: function () {
                    function maybeRenderDayPickerWithPortal() {
                      var _props4 = this.props;
                      var focusedInput = _props4.focusedInput;
                      var withPortal = _props4.withPortal;
                      var withFullScreenPortal = _props4.withFullScreenPortal;

                      if (withPortal || withFullScreenPortal) {
                        return _react2['default'].createElement(_reactPortal2['default'], { isOpened: focusedInput !== null }, this.renderDayPicker());
                      }

                      return this.renderDayPicker();
                    }

                    return maybeRenderDayPickerWithPortal;
                  }()
                }, {
                  key: 'renderDayPicker',
                  value: function () {
                    function renderDayPicker() {
                      var _this2 = this;

                      var _props5 = this.props;
                      var isDayBlocked = _props5.isDayBlocked;
                      var isDayHighlighted = _props5.isDayHighlighted;
                      var isOutsideRange = _props5.isOutsideRange;
                      var numberOfMonths = _props5.numberOfMonths;
                      var orientation = _props5.orientation;
                      var monthFormat = _props5.monthFormat;
                      var navPrev = _props5.navPrev;
                      var navNext = _props5.navNext;
                      var onPrevMonthClick = _props5.onPrevMonthClick;
                      var onNextMonthClick = _props5.onNextMonthClick;
                      var onDatesChange = _props5.onDatesChange;
                      var onFocusChange = _props5.onFocusChange;
                      var withPortal = _props5.withPortal;
                      var withFullScreenPortal = _props5.withFullScreenPortal;
                      var enableOutsideDays = _props5.enableOutsideDays;
                      var initialVisibleMonth = _props5.initialVisibleMonth;
                      var focusedInput = _props5.focusedInput;
                      var startDate = _props5.startDate;
                      var endDate = _props5.endDate;
                      var minimumNights = _props5.minimumNights;
                      var keepOpenOnDateSelect = _props5.keepOpenOnDateSelect;
                      var dayPickerContainerStyles = this.state.dayPickerContainerStyles;

                      var onOutsideClick = !withFullScreenPortal ? this.onOutsideClick : undefined;

                      return _react2['default'].createElement('div', {
                        ref: function () {
                          function ref(_ref2) {
                            _this2.dayPickerContainer = _ref2;
                          }

                          return ref;
                        }(),
                        className: this.getDayPickerContainerClasses(),
                        style: dayPickerContainerStyles
                      }, _react2['default'].createElement(_DayPickerRangeController2['default'], {
                        ref: function () {
                          function ref(_ref) {
                            _this2.dayPicker = _ref;
                          }

                          return ref;
                        }(),
                        orientation: orientation,
                        enableOutsideDays: enableOutsideDays,
                        numberOfMonths: numberOfMonths,
                        onDayMouseEnter: this.onDayMouseEnter,
                        onDayMouseLeave: this.onDayMouseLeave,
                        onDayMouseDown: this.onDayClick,
                        onDayTouchTap: this.onDayClick,
                        onPrevMonthClick: onPrevMonthClick,
                        onNextMonthClick: onNextMonthClick,
                        onDatesChange: onDatesChange,
                        onFocusChange: onFocusChange,
                        focusedInput: focusedInput,
                        startDate: startDate,
                        endDate: endDate,
                        monthFormat: monthFormat,
                        withPortal: withPortal || withFullScreenPortal,
                        hidden: !focusedInput,
                        initialVisibleMonth: initialVisibleMonth,
                        onOutsideClick: onOutsideClick,
                        navPrev: navPrev,
                        navNext: navNext,
                        minimumNights: minimumNights,
                        isOutsideRange: isOutsideRange,
                        isDayHighlighted: isDayHighlighted,
                        isDayBlocked: isDayBlocked,
                        keepOpenOnDateSelect: keepOpenOnDateSelect
                      }), withFullScreenPortal && _react2['default'].createElement('button', {
                        className: 'DateRangePicker__close',
                        type: 'button',
                        onClick: this.onOutsideClick
                      }, _react2['default'].createElement('span', { className: 'screen-reader-only' }, this.props.phrases.closeDatePicker), _react2['default'].createElement(_close2['default'], null)));
                    }

                    return renderDayPicker;
                  }()
                }, {
                  key: 'render',
                  value: function () {
                    function render() {
                      var _props6 = this.props;
                      var startDate = _props6.startDate;
                      var startDateId = _props6.startDateId;
                      var startDatePlaceholderText = _props6.startDatePlaceholderText;
                      var endDate = _props6.endDate;
                      var endDateId = _props6.endDateId;
                      var endDatePlaceholderText = _props6.endDatePlaceholderText;
                      var focusedInput = _props6.focusedInput;
                      var showClearDates = _props6.showClearDates;
                      var disabled = _props6.disabled;
                      var required = _props6.required;
                      var phrases = _props6.phrases;
                      var isOutsideRange = _props6.isOutsideRange;
                      var withPortal = _props6.withPortal;
                      var withFullScreenPortal = _props6.withFullScreenPortal;
                      var displayFormat = _props6.displayFormat;
                      var reopenPickerOnClearDates = _props6.reopenPickerOnClearDates;
                      var keepOpenOnDateSelect = _props6.keepOpenOnDateSelect;
                      var onDatesChange = _props6.onDatesChange;
                      var onFocusChange = _props6.onFocusChange;

                      return _react2['default'].createElement('div', { className: 'DateRangePicker' }, _react2['default'].createElement(_DateRangePickerInputController2['default'], {
                        startDate: startDate,
                        startDateId: startDateId,
                        startDatePlaceholderText: startDatePlaceholderText,
                        isStartDateFocused: focusedInput === _constants.START_DATE,
                        endDate: endDate,
                        endDateId: endDateId,
                        endDatePlaceholderText: endDatePlaceholderText,
                        isEndDateFocused: focusedInput === _constants.END_DATE,
                        displayFormat: displayFormat,
                        showClearDates: showClearDates,
                        showCaret: !withPortal && !withFullScreenPortal,
                        disabled: disabled,
                        required: required,
                        reopenPickerOnClearDates: reopenPickerOnClearDates,
                        keepOpenOnDateSelect: keepOpenOnDateSelect,
                        isOutsideRange: isOutsideRange,
                        withFullScreenPortal: withFullScreenPortal,
                        onDatesChange: onDatesChange,
                        onFocusChange: onFocusChange,
                        phrases: phrases
                      }), this.maybeRenderDayPickerWithPortal());
                    }

                    return render;
                  }()
                }]);

                return DateRangePicker;
              }(_react2['default'].Component);

              exports['default'] = DateRangePicker;

              DateRangePicker.propTypes = propTypes;
              DateRangePicker.defaultProps = defaultProps;

              /***/
            },
            /* 1 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(3);

              /***/
            },
            /* 2 */
            ,
            /* 3 */
            ,
            /* 4 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(277);

              /***/
            },
            /* 5 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(56);

              /***/
            },
            /* 6 */
            ,
            /* 7 */
            ,
            /* 8 */
            ,
            /* 9 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(394);

              /***/
            },
            /* 10 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(30);

              /***/
            },
            /* 11 */
            ,
            /* 12 */
            ,
            /* 13 */
            ,
            /* 14 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(395);

              /***/
            },
            /* 15 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(396);

              /***/
            },
            /* 16 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(397);

              /***/
            },
            /* 17 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(398);

              /***/
            },
            /* 18 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(400);

              /***/
            },
            /* 19 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(408);

              /***/
            },
            /* 20 */
            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

              var _createClass = function () {
                function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

              function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

              function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

              function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

              var SVG = function (_React$Component) {
                _inherits(SVG, _React$Component);

                function SVG() {
                  _classCallCheck(this, SVG);

                  return _possibleConstructorReturn(this, (SVG.__proto__ || Object.getPrototypeOf(SVG)).apply(this, arguments));
                }

                _createClass(SVG, [{
                  key: "render",
                  value: function () {
                    function render() {
                      return _react2["default"].createElement(
                        "svg",
                        _extends({ viewBox: "0 0 12 12" }, this.props),
                        _react2["default"].createElement("path", { fillRule: "evenodd", d: "M11.53.47a.75.75 0 0 0-1.061 0l-4.47 4.47L1.529.47A.75.75 0 1 0 .468 1.531l4.47 4.47-4.47 4.47a.75.75 0 1 0 1.061 1.061l4.47-4.47 4.47 4.47a.75.75 0 1 0 1.061-1.061l-4.47-4.47 4.47-4.47a.75.75 0 0 0 0-1.061z" })
                      );
                    }

                    return render;
                  }()
                }]);

                return SVG;
              }(_react2["default"].Component);

              exports["default"] = SVG;

              /***/
            },
            /* 21 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(449);

              /***/
            }
            /******/
          ]);

        /***/
      }),
      /* 277 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (module) { //! moment.js
          //! version : 2.18.1
          //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
          //! license : MIT
          //! momentjs.com

          ;
          (function (global, factory) {
            true ? module.exports = factory() :
              typeof define === 'function' && define.amd ? define(factory) :
              global.moment = factory()
          }(this, (function () {
            'use strict';

            var hookCallback;

            function hooks() {
              return hookCallback.apply(null, arguments);
            }

            // This is done to register the method called with moment()
            // without creating circular dependencies.
            function setHookCallback(callback) {
              hookCallback = callback;
            }

            function isArray(input) {
              return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
            }

            function isObject(input) {
              // IE8 will treat undefined and null as object if it wasn't for
              // input != null
              return input != null && Object.prototype.toString.call(input) === '[object Object]';
            }

            function isObjectEmpty(obj) {
              var k;
              for (k in obj) {
                // even if its not own property I'd still call it non-empty
                return false;
              }
              return true;
            }

            function isUndefined(input) {
              return input === void 0;
            }

            function isNumber(input) {
              return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
            }

            function isDate(input) {
              return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
            }

            function map(arr, fn) {
              var res = [],
                i;
              for (i = 0; i < arr.length; ++i) {
                res.push(fn(arr[i], i));
              }
              return res;
            }

            function hasOwnProp(a, b) {
              return Object.prototype.hasOwnProperty.call(a, b);
            }

            function extend(a, b) {
              for (var i in b) {
                if (hasOwnProp(b, i)) {
                  a[i] = b[i];
                }
              }

              if (hasOwnProp(b, 'toString')) {
                a.toString = b.toString;
              }

              if (hasOwnProp(b, 'valueOf')) {
                a.valueOf = b.valueOf;
              }

              return a;
            }

            function createUTC(input, format, locale, strict) {
              return createLocalOrUTC(input, format, locale, strict, true).utc();
            }

            function defaultParsingFlags() {
              // We need to deep clone this object.
              return {
                empty: false,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: false,
                invalidMonth: null,
                invalidFormat: false,
                userInvalidated: false,
                iso: false,
                parsedDateParts: [],
                meridiem: null,
                rfc2822: false,
                weekdayMismatch: false
              };
            }

            function getParsingFlags(m) {
              if (m._pf == null) {
                m._pf = defaultParsingFlags();
              }
              return m._pf;
            }

            var some;
            if (Array.prototype.some) {
              some = Array.prototype.some;
            } else {
              some = function (fun) {
                var t = Object(this);
                var len = t.length >>> 0;

                for (var i = 0; i < len; i++) {
                  if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                  }
                }

                return false;
              };
            }

            var some$1 = some;

            function isValid(m) {
              if (m._isValid == null) {
                var flags = getParsingFlags(m);
                var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
                  return i != null;
                });
                var isNowValid = !isNaN(m._d.getTime()) &&
                  flags.overflow < 0 &&
                  !flags.empty &&
                  !flags.invalidMonth &&
                  !flags.invalidWeekday &&
                  !flags.nullInput &&
                  !flags.invalidFormat &&
                  !flags.userInvalidated &&
                  (!flags.meridiem || (flags.meridiem && parsedParts));

                if (m._strict) {
                  isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
                }

                if (Object.isFrozen == null || !Object.isFrozen(m)) {
                  m._isValid = isNowValid;
                } else {
                  return isNowValid;
                }
              }
              return m._isValid;
            }

            function createInvalid(flags) {
              var m = createUTC(NaN);
              if (flags != null) {
                extend(getParsingFlags(m), flags);
              } else {
                getParsingFlags(m).userInvalidated = true;
              }

              return m;
            }

            // Plugins that add properties should also add the key here (null value),
            // so we can properly clone ourselves.
            var momentProperties = hooks.momentProperties = [];

            function copyConfig(to, from) {
              var i, prop, val;

              if (!isUndefined(from._isAMomentObject)) {
                to._isAMomentObject = from._isAMomentObject;
              }
              if (!isUndefined(from._i)) {
                to._i = from._i;
              }
              if (!isUndefined(from._f)) {
                to._f = from._f;
              }
              if (!isUndefined(from._l)) {
                to._l = from._l;
              }
              if (!isUndefined(from._strict)) {
                to._strict = from._strict;
              }
              if (!isUndefined(from._tzm)) {
                to._tzm = from._tzm;
              }
              if (!isUndefined(from._isUTC)) {
                to._isUTC = from._isUTC;
              }
              if (!isUndefined(from._offset)) {
                to._offset = from._offset;
              }
              if (!isUndefined(from._pf)) {
                to._pf = getParsingFlags(from);
              }
              if (!isUndefined(from._locale)) {
                to._locale = from._locale;
              }

              if (momentProperties.length > 0) {
                for (i = 0; i < momentProperties.length; i++) {
                  prop = momentProperties[i];
                  val = from[prop];
                  if (!isUndefined(val)) {
                    to[prop] = val;
                  }
                }
              }

              return to;
            }

            var updateInProgress = false;

            // Moment prototype object
            function Moment(config) {
              copyConfig(this, config);
              this._d = new Date(config._d != null ? config._d.getTime() : NaN);
              if (!this.isValid()) {
                this._d = new Date(NaN);
              }
              // Prevent infinite loop in case updateOffset creates new moment
              // objects.
              if (updateInProgress === false) {
                updateInProgress = true;
                hooks.updateOffset(this);
                updateInProgress = false;
              }
            }

            function isMoment(obj) {
              return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
            }

            function absFloor(number) {
              if (number < 0) {
                // -0 -> 0
                return Math.ceil(number) || 0;
              } else {
                return Math.floor(number);
              }
            }

            function toInt(argumentForCoercion) {
              var coercedNumber = +argumentForCoercion,
                value = 0;

              if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                value = absFloor(coercedNumber);
              }

              return value;
            }

            // compare two arrays, return the number of differences
            function compareArrays(array1, array2, dontConvert) {
              var len = Math.min(array1.length, array2.length),
                lengthDiff = Math.abs(array1.length - array2.length),
                diffs = 0,
                i;
              for (i = 0; i < len; i++) {
                if ((dontConvert && array1[i] !== array2[i]) ||
                  (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                  diffs++;
                }
              }
              return diffs + lengthDiff;
            }

            function warn(msg) {
              if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !== 'undefined') && console.warn) {
                console.warn('Deprecation warning: ' + msg);
              }
            }

            function deprecate(msg, fn) {
              var firstTime = true;

              return extend(function () {
                if (hooks.deprecationHandler != null) {
                  hooks.deprecationHandler(null, msg);
                }
                if (firstTime) {
                  var args = [];
                  var arg;
                  for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                      arg += '\n[' + i + '] ';
                      for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                      }
                      arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                      arg = arguments[i];
                    }
                    args.push(arg);
                  }
                  warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                  firstTime = false;
                }
                return fn.apply(this, arguments);
              }, fn);
            }

            var deprecations = {};

            function deprecateSimple(name, msg) {
              if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(name, msg);
              }
              if (!deprecations[name]) {
                warn(msg);
                deprecations[name] = true;
              }
            }

            hooks.suppressDeprecationWarnings = false;
            hooks.deprecationHandler = null;

            function isFunction(input) {
              return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
            }

            function set(config) {
              var prop, i;
              for (i in config) {
                prop = config[i];
                if (isFunction(prop)) {
                  this[i] = prop;
                } else {
                  this['_' + i] = prop;
                }
              }
              this._config = config;
              // Lenient ordinal parsing accepts just a number in addition to
              // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
              // TODO: Remove "ordinalParse" fallback in next major release.
              this._dayOfMonthOrdinalParseLenient = new RegExp(
                (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
            }

            function mergeConfigs(parentConfig, childConfig) {
              var res = extend({}, parentConfig),
                prop;
              for (prop in childConfig) {
                if (hasOwnProp(childConfig, prop)) {
                  if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                  } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                  } else {
                    delete res[prop];
                  }
                }
              }
              for (prop in parentConfig) {
                if (hasOwnProp(parentConfig, prop) &&
                  !hasOwnProp(childConfig, prop) &&
                  isObject(parentConfig[prop])) {
                  // make sure changes to properties don't modify parent config
                  res[prop] = extend({}, res[prop]);
                }
              }
              return res;
            }

            function Locale(config) {
              if (config != null) {
                this.set(config);
              }
            }

            var keys;

            if (Object.keys) {
              keys = Object.keys;
            } else {
              keys = function (obj) {
                var i, res = [];
                for (i in obj) {
                  if (hasOwnProp(obj, i)) {
                    res.push(i);
                  }
                }
                return res;
              };
            }

            var keys$1 = keys;

            var defaultCalendar = {
              sameDay: '[Today at] LT',
              nextDay: '[Tomorrow at] LT',
              nextWeek: 'dddd [at] LT',
              lastDay: '[Yesterday at] LT',
              lastWeek: '[Last] dddd [at] LT',
              sameElse: 'L'
            };

            function calendar(key, mom, now) {
              var output = this._calendar[key] || this._calendar['sameElse'];
              return isFunction(output) ? output.call(mom, now) : output;
            }

            var defaultLongDateFormat = {
              LTS: 'h:mm:ss A',
              LT: 'h:mm A',
              L: 'MM/DD/YYYY',
              LL: 'MMMM D, YYYY',
              LLL: 'MMMM D, YYYY h:mm A',
              LLLL: 'dddd, MMMM D, YYYY h:mm A'
            };

            function longDateFormat(key) {
              var format = this._longDateFormat[key],
                formatUpper = this._longDateFormat[key.toUpperCase()];

              if (format || !formatUpper) {
                return format;
              }

              this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
                return val.slice(1);
              });

              return this._longDateFormat[key];
            }

            var defaultInvalidDate = 'Invalid date';

            function invalidDate() {
              return this._invalidDate;
            }

            var defaultOrdinal = '%d';
            var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

            function ordinal(number) {
              return this._ordinal.replace('%d', number);
            }

            var defaultRelativeTime = {
              future: 'in %s',
              past: '%s ago',
              s: 'a few seconds',
              ss: '%d seconds',
              m: 'a minute',
              mm: '%d minutes',
              h: 'an hour',
              hh: '%d hours',
              d: 'a day',
              dd: '%d days',
              M: 'a month',
              MM: '%d months',
              y: 'a year',
              yy: '%d years'
            };

            function relativeTime(number, withoutSuffix, string, isFuture) {
              var output = this._relativeTime[string];
              return (isFunction(output)) ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
            }

            function pastFuture(diff, output) {
              var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
              return isFunction(format) ? format(output) : format.replace(/%s/i, output);
            }

            var aliases = {};

            function addUnitAlias(unit, shorthand) {
              var lowerCase = unit.toLowerCase();
              aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
            }

            function normalizeUnits(units) {
              return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
            }

            function normalizeObjectUnits(inputObject) {
              var normalizedInput = {},
                normalizedProp,
                prop;

              for (prop in inputObject) {
                if (hasOwnProp(inputObject, prop)) {
                  normalizedProp = normalizeUnits(prop);
                  if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                  }
                }
              }

              return normalizedInput;
            }

            var priorities = {};

            function addUnitPriority(unit, priority) {
              priorities[unit] = priority;
            }

            function getPrioritizedUnits(unitsObj) {
              var units = [];
              for (var u in unitsObj) {
                units.push({ unit: u, priority: priorities[u] });
              }
              units.sort(function (a, b) {
                return a.priority - b.priority;
              });
              return units;
            }

            function makeGetSet(unit, keepTime) {
              return function (value) {
                if (value != null) {
                  set$1(this, unit, value);
                  hooks.updateOffset(this, keepTime);
                  return this;
                } else {
                  return get(this, unit);
                }
              };
            }

            function get(mom, unit) {
              return mom.isValid() ?
                mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
            }

            function set$1(mom, unit, value) {
              if (mom.isValid()) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
              }
            }

            // MOMENTS

            function stringGet(units) {
              units = normalizeUnits(units);
              if (isFunction(this[units])) {
                return this[units]();
              }
              return this;
            }


            function stringSet(units, value) {
              if (typeof units === 'object') {
                units = normalizeObjectUnits(units);
                var prioritized = getPrioritizedUnits(units);
                for (var i = 0; i < prioritized.length; i++) {
                  this[prioritized[i].unit](units[prioritized[i].unit]);
                }
              } else {
                units = normalizeUnits(units);
                if (isFunction(this[units])) {
                  return this[units](value);
                }
              }
              return this;
            }

            function zeroFill(number, targetLength, forceSign) {
              var absNumber = '' + Math.abs(number),
                zerosToFill = targetLength - absNumber.length,
                sign = number >= 0;
              return (sign ? (forceSign ? '+' : '') : '-') +
                Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
            }

            var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

            var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

            var formatFunctions = {};

            var formatTokenFunctions = {};

            // token:    'M'
            // padded:   ['MM', 2]
            // ordinal:  'Mo'
            // callback: function () { this.month() + 1 }
            function addFormatToken(token, padded, ordinal, callback) {
              var func = callback;
              if (typeof callback === 'string') {
                func = function () {
                  return this[callback]();
                };
              }
              if (token) {
                formatTokenFunctions[token] = func;
              }
              if (padded) {
                formatTokenFunctions[padded[0]] = function () {
                  return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                };
              }
              if (ordinal) {
                formatTokenFunctions[ordinal] = function () {
                  return this.localeData().ordinal(func.apply(this, arguments), token);
                };
              }
            }

            function removeFormattingTokens(input) {
              if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, '');
              }
              return input.replace(/\\/g, '');
            }

            function makeFormatFunction(format) {
              var array = format.match(formattingTokens),
                i, length;

              for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                  array[i] = formatTokenFunctions[array[i]];
                } else {
                  array[i] = removeFormattingTokens(array[i]);
                }
              }

              return function (mom) {
                var output = '',
                  i;
                for (i = 0; i < length; i++) {
                  output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
                }
                return output;
              };
            }

            // format date using native date object
            function formatMoment(m, format) {
              if (!m.isValid()) {
                return m.localeData().invalidDate();
              }

              format = expandFormat(format, m.localeData());
              formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

              return formatFunctions[format](m);
            }

            function expandFormat(format, locale) {
              var i = 5;

              function replaceLongDateFormatTokens(input) {
                return locale.longDateFormat(input) || input;
              }

              localFormattingTokens.lastIndex = 0;
              while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                localFormattingTokens.lastIndex = 0;
                i -= 1;
              }

              return format;
            }

            var match1 = /\d/; //       0 - 9
            var match2 = /\d\d/; //      00 - 99
            var match3 = /\d{3}/; //     000 - 999
            var match4 = /\d{4}/; //    0000 - 9999
            var match6 = /[+-]?\d{6}/; // -999999 - 999999
            var match1to2 = /\d\d?/; //       0 - 99
            var match3to4 = /\d\d\d\d?/; //     999 - 9999
            var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999
            var match1to3 = /\d{1,3}/; //       0 - 999
            var match1to4 = /\d{1,4}/; //       0 - 9999
            var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

            var matchUnsigned = /\d+/; //       0 - inf
            var matchSigned = /[+-]?\d+/; //    -inf - inf

            var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
            var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

            var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

            // any word (or two) characters or numbers including two/three word month in arabic.
            // includes scottish gaelic two word and hyphenated months
            var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


            var regexes = {};

            function addRegexToken(token, regex, strictRegex) {
              regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
                return (isStrict && strictRegex) ? strictRegex : regex;
              };
            }

            function getParseRegexForToken(token, config) {
              if (!hasOwnProp(regexes, token)) {
                return new RegExp(unescapeFormat(token));
              }

              return regexes[token](config._strict, config._locale);
            }

            // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
            function unescapeFormat(s) {
              return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
                return p1 || p2 || p3 || p4;
              }));
            }

            function regexEscape(s) {
              return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
            }

            var tokens = {};

            function addParseToken(token, callback) {
              var i, func = callback;
              if (typeof token === 'string') {
                token = [token];
              }
              if (isNumber(callback)) {
                func = function (input, array) {
                  array[callback] = toInt(input);
                };
              }
              for (i = 0; i < token.length; i++) {
                tokens[token[i]] = func;
              }
            }

            function addWeekParseToken(token, callback) {
              addParseToken(token, function (input, array, config, token) {
                config._w = config._w || {};
                callback(input, config._w, config, token);
              });
            }

            function addTimeToArrayFromToken(token, input, config) {
              if (input != null && hasOwnProp(tokens, token)) {
                tokens[token](input, config._a, config, token);
              }
            }

            var YEAR = 0;
            var MONTH = 1;
            var DATE = 2;
            var HOUR = 3;
            var MINUTE = 4;
            var SECOND = 5;
            var MILLISECOND = 6;
            var WEEK = 7;
            var WEEKDAY = 8;

            var indexOf;

            if (Array.prototype.indexOf) {
              indexOf = Array.prototype.indexOf;
            } else {
              indexOf = function (o) {
                // I know
                var i;
                for (i = 0; i < this.length; ++i) {
                  if (this[i] === o) {
                    return i;
                  }
                }
                return -1;
              };
            }

            var indexOf$1 = indexOf;

            function daysInMonth(year, month) {
              return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
            }

            // FORMATTING

            addFormatToken('M', ['MM', 2], 'Mo', function () {
              return this.month() + 1;
            });

            addFormatToken('MMM', 0, 0, function (format) {
              return this.localeData().monthsShort(this, format);
            });

            addFormatToken('MMMM', 0, 0, function (format) {
              return this.localeData().months(this, format);
            });

            // ALIASES

            addUnitAlias('month', 'M');

            // PRIORITY

            addUnitPriority('month', 8);

            // PARSING

            addRegexToken('M', match1to2);
            addRegexToken('MM', match1to2, match2);
            addRegexToken('MMM', function (isStrict, locale) {
              return locale.monthsShortRegex(isStrict);
            });
            addRegexToken('MMMM', function (isStrict, locale) {
              return locale.monthsRegex(isStrict);
            });

            addParseToken(['M', 'MM'], function (input, array) {
              array[MONTH] = toInt(input) - 1;
            });

            addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
              var month = config._locale.monthsParse(input, token, config._strict);
              // if we didn't find a month name, mark the date as invalid.
              if (month != null) {
                array[MONTH] = month;
              } else {
                getParsingFlags(config).invalidMonth = input;
              }
            });

            // LOCALES

            var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
            var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');

            function localeMonths(m, format) {
              if (!m) {
                return isArray(this._months) ? this._months :
                  this._months['standalone'];
              }
              return isArray(this._months) ? this._months[m.month()] :
                this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
            }

            var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');

            function localeMonthsShort(m, format) {
              if (!m) {
                return isArray(this._monthsShort) ? this._monthsShort :
                  this._monthsShort['standalone'];
              }
              return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
                this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
            }

            function handleStrictParse(monthName, format, strict) {
              var i, ii, mom, llc = monthName.toLocaleLowerCase();
              if (!this._monthsParse) {
                // this is not used
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
                for (i = 0; i < 12; ++i) {
                  mom = createUTC([2000, i]);
                  this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                  this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                }
              }

              if (strict) {
                if (format === 'MMM') {
                  ii = indexOf$1.call(this._shortMonthsParse, llc);
                  return ii !== -1 ? ii : null;
                } else {
                  ii = indexOf$1.call(this._longMonthsParse, llc);
                  return ii !== -1 ? ii : null;
                }
              } else {
                if (format === 'MMM') {
                  ii = indexOf$1.call(this._shortMonthsParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf$1.call(this._longMonthsParse, llc);
                  return ii !== -1 ? ii : null;
                } else {
                  ii = indexOf$1.call(this._longMonthsParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf$1.call(this._shortMonthsParse, llc);
                  return ii !== -1 ? ii : null;
                }
              }
            }

            function localeMonthsParse(monthName, format, strict) {
              var i, mom, regex;

              if (this._monthsParseExact) {
                return handleStrictParse.call(this, monthName, format, strict);
              }

              if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
              }

              // TODO: add sorting
              // Sorting makes sure if one month (or abbr) is a prefix of another
              // see sorting in computeMonthsParse
              for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                if (strict && !this._longMonthsParse[i]) {
                  this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                  this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
                }
                if (!strict && !this._monthsParse[i]) {
                  regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                  this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                  return i;
                } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                  return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                  return i;
                }
              }
            }

            // MOMENTS

            function setMonth(mom, value) {
              var dayOfMonth;

              if (!mom.isValid()) {
                // No op
                return mom;
              }

              if (typeof value === 'string') {
                if (/^\d+$/.test(value)) {
                  value = toInt(value);
                } else {
                  value = mom.localeData().monthsParse(value);
                  // TODO: Another silent failure?
                  if (!isNumber(value)) {
                    return mom;
                  }
                }
              }

              dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
              mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
              return mom;
            }

            function getSetMonth(value) {
              if (value != null) {
                setMonth(this, value);
                hooks.updateOffset(this, true);
                return this;
              } else {
                return get(this, 'Month');
              }
            }

            function getDaysInMonth() {
              return daysInMonth(this.year(), this.month());
            }

            var defaultMonthsShortRegex = matchWord;

            function monthsShortRegex(isStrict) {
              if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                  computeMonthsParse.call(this);
                }
                if (isStrict) {
                  return this._monthsShortStrictRegex;
                } else {
                  return this._monthsShortRegex;
                }
              } else {
                if (!hasOwnProp(this, '_monthsShortRegex')) {
                  this._monthsShortRegex = defaultMonthsShortRegex;
                }
                return this._monthsShortStrictRegex && isStrict ?
                  this._monthsShortStrictRegex : this._monthsShortRegex;
              }
            }

            var defaultMonthsRegex = matchWord;

            function monthsRegex(isStrict) {
              if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                  computeMonthsParse.call(this);
                }
                if (isStrict) {
                  return this._monthsStrictRegex;
                } else {
                  return this._monthsRegex;
                }
              } else {
                if (!hasOwnProp(this, '_monthsRegex')) {
                  this._monthsRegex = defaultMonthsRegex;
                }
                return this._monthsStrictRegex && isStrict ?
                  this._monthsStrictRegex : this._monthsRegex;
              }
            }

            function computeMonthsParse() {
              function cmpLenRev(a, b) {
                return b.length - a.length;
              }

              var shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i, mom;
              for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                shortPieces.push(this.monthsShort(mom, ''));
                longPieces.push(this.months(mom, ''));
                mixedPieces.push(this.months(mom, ''));
                mixedPieces.push(this.monthsShort(mom, ''));
              }
              // Sorting makes sure if one month (or abbr) is a prefix of another it
              // will match the longer piece.
              shortPieces.sort(cmpLenRev);
              longPieces.sort(cmpLenRev);
              mixedPieces.sort(cmpLenRev);
              for (i = 0; i < 12; i++) {
                shortPieces[i] = regexEscape(shortPieces[i]);
                longPieces[i] = regexEscape(longPieces[i]);
              }
              for (i = 0; i < 24; i++) {
                mixedPieces[i] = regexEscape(mixedPieces[i]);
              }

              this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
              this._monthsShortRegex = this._monthsRegex;
              this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
              this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
            }

            // FORMATTING

            addFormatToken('Y', 0, 0, function () {
              var y = this.year();
              return y <= 9999 ? '' + y : '+' + y;
            });

            addFormatToken(0, ['YY', 2], 0, function () {
              return this.year() % 100;
            });

            addFormatToken(0, ['YYYY', 4], 0, 'year');
            addFormatToken(0, ['YYYYY', 5], 0, 'year');
            addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

            // ALIASES

            addUnitAlias('year', 'y');

            // PRIORITIES

            addUnitPriority('year', 1);

            // PARSING

            addRegexToken('Y', matchSigned);
            addRegexToken('YY', match1to2, match2);
            addRegexToken('YYYY', match1to4, match4);
            addRegexToken('YYYYY', match1to6, match6);
            addRegexToken('YYYYYY', match1to6, match6);

            addParseToken(['YYYYY', 'YYYYYY'], YEAR);
            addParseToken('YYYY', function (input, array) {
              array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
            });
            addParseToken('YY', function (input, array) {
              array[YEAR] = hooks.parseTwoDigitYear(input);
            });
            addParseToken('Y', function (input, array) {
              array[YEAR] = parseInt(input, 10);
            });

            // HELPERS

            function daysInYear(year) {
              return isLeapYear(year) ? 366 : 365;
            }

            function isLeapYear(year) {
              return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
            }

            // HOOKS

            hooks.parseTwoDigitYear = function (input) {
              return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
            };

            // MOMENTS

            var getSetYear = makeGetSet('FullYear', true);

            function getIsLeapYear() {
              return isLeapYear(this.year());
            }

            function createDate(y, m, d, h, M, s, ms) {
              // can't just apply() to create a date:
              // https://stackoverflow.com/q/181348
              var date = new Date(y, m, d, h, M, s, ms);

              // the date constructor remaps years 0-99 to 1900-1999
              if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
                date.setFullYear(y);
              }
              return date;
            }

            function createUTCDate(y) {
              var date = new Date(Date.UTC.apply(null, arguments));

              // the Date.UTC function remaps years 0-99 to 1900-1999
              if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
              }
              return date;
            }

            // start-of-first-week - start-of-year
            function firstWeekOffset(year, dow, doy) {
              var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
                fwd = 7 + dow - doy,
                // first-week day local weekday -- which local weekday is fwd
                fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

              return -fwdlw + fwd - 1;
            }

            // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
            function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
              var localWeekday = (7 + weekday - dow) % 7,
                weekOffset = firstWeekOffset(year, dow, doy),
                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                resYear, resDayOfYear;

              if (dayOfYear <= 0) {
                resYear = year - 1;
                resDayOfYear = daysInYear(resYear) + dayOfYear;
              } else if (dayOfYear > daysInYear(year)) {
                resYear = year + 1;
                resDayOfYear = dayOfYear - daysInYear(year);
              } else {
                resYear = year;
                resDayOfYear = dayOfYear;
              }

              return {
                year: resYear,
                dayOfYear: resDayOfYear
              };
            }

            function weekOfYear(mom, dow, doy) {
              var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                resWeek, resYear;

              if (week < 1) {
                resYear = mom.year() - 1;
                resWeek = week + weeksInYear(resYear, dow, doy);
              } else if (week > weeksInYear(mom.year(), dow, doy)) {
                resWeek = week - weeksInYear(mom.year(), dow, doy);
                resYear = mom.year() + 1;
              } else {
                resYear = mom.year();
                resWeek = week;
              }

              return {
                week: resWeek,
                year: resYear
              };
            }

            function weeksInYear(year, dow, doy) {
              var weekOffset = firstWeekOffset(year, dow, doy),
                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
              return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
            }

            // FORMATTING

            addFormatToken('w', ['ww', 2], 'wo', 'week');
            addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

            // ALIASES

            addUnitAlias('week', 'w');
            addUnitAlias('isoWeek', 'W');

            // PRIORITIES

            addUnitPriority('week', 5);
            addUnitPriority('isoWeek', 5);

            // PARSING

            addRegexToken('w', match1to2);
            addRegexToken('ww', match1to2, match2);
            addRegexToken('W', match1to2);
            addRegexToken('WW', match1to2, match2);

            addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
              week[token.substr(0, 1)] = toInt(input);
            });

            // HELPERS

            // LOCALES

            function localeWeek(mom) {
              return weekOfYear(mom, this._week.dow, this._week.doy).week;
            }

            var defaultLocaleWeek = {
              dow: 0, // Sunday is the first day of the week.
              doy: 6 // The week that contains Jan 1st is the first week of the year.
            };

            function localeFirstDayOfWeek() {
              return this._week.dow;
            }

            function localeFirstDayOfYear() {
              return this._week.doy;
            }

            // MOMENTS

            function getSetWeek(input) {
              var week = this.localeData().week(this);
              return input == null ? week : this.add((input - week) * 7, 'd');
            }

            function getSetISOWeek(input) {
              var week = weekOfYear(this, 1, 4).week;
              return input == null ? week : this.add((input - week) * 7, 'd');
            }

            // FORMATTING

            addFormatToken('d', 0, 'do', 'day');

            addFormatToken('dd', 0, 0, function (format) {
              return this.localeData().weekdaysMin(this, format);
            });

            addFormatToken('ddd', 0, 0, function (format) {
              return this.localeData().weekdaysShort(this, format);
            });

            addFormatToken('dddd', 0, 0, function (format) {
              return this.localeData().weekdays(this, format);
            });

            addFormatToken('e', 0, 0, 'weekday');
            addFormatToken('E', 0, 0, 'isoWeekday');

            // ALIASES

            addUnitAlias('day', 'd');
            addUnitAlias('weekday', 'e');
            addUnitAlias('isoWeekday', 'E');

            // PRIORITY
            addUnitPriority('day', 11);
            addUnitPriority('weekday', 11);
            addUnitPriority('isoWeekday', 11);

            // PARSING

            addRegexToken('d', match1to2);
            addRegexToken('e', match1to2);
            addRegexToken('E', match1to2);
            addRegexToken('dd', function (isStrict, locale) {
              return locale.weekdaysMinRegex(isStrict);
            });
            addRegexToken('ddd', function (isStrict, locale) {
              return locale.weekdaysShortRegex(isStrict);
            });
            addRegexToken('dddd', function (isStrict, locale) {
              return locale.weekdaysRegex(isStrict);
            });

            addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
              var weekday = config._locale.weekdaysParse(input, token, config._strict);
              // if we didn't get a weekday name, mark the date as invalid
              if (weekday != null) {
                week.d = weekday;
              } else {
                getParsingFlags(config).invalidWeekday = input;
              }
            });

            addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
              week[token] = toInt(input);
            });

            // HELPERS

            function parseWeekday(input, locale) {
              if (typeof input !== 'string') {
                return input;
              }

              if (!isNaN(input)) {
                return parseInt(input, 10);
              }

              input = locale.weekdaysParse(input);
              if (typeof input === 'number') {
                return input;
              }

              return null;
            }

            function parseIsoWeekday(input, locale) {
              if (typeof input === 'string') {
                return locale.weekdaysParse(input) % 7 || 7;
              }
              return isNaN(input) ? null : input;
            }

            // LOCALES

            var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');

            function localeWeekdays(m, format) {
              if (!m) {
                return isArray(this._weekdays) ? this._weekdays :
                  this._weekdays['standalone'];
              }
              return isArray(this._weekdays) ? this._weekdays[m.day()] :
                this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
            }

            var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');

            function localeWeekdaysShort(m) {
              return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
            }

            var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');

            function localeWeekdaysMin(m) {
              return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
            }

            function handleStrictParse$1(weekdayName, format, strict) {
              var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
              if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._minWeekdaysParse = [];

                for (i = 0; i < 7; ++i) {
                  mom = createUTC([2000, 1]).day(i);
                  this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                  this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                  this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                }
              }

              if (strict) {
                if (format === 'dddd') {
                  ii = indexOf$1.call(this._weekdaysParse, llc);
                  return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                  ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
                } else {
                  ii = indexOf$1.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
                }
              } else {
                if (format === 'dddd') {
                  ii = indexOf$1.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf$1.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                  ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf$1.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf$1.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
                } else {
                  ii = indexOf$1.call(this._minWeekdaysParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf$1.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf$1.call(this._shortWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
                }
              }
            }

            function localeWeekdaysParse(weekdayName, format, strict) {
              var i, mom, regex;

              if (this._weekdaysParseExact) {
                return handleStrictParse$1.call(this, weekdayName, format, strict);
              }

              if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._minWeekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._fullWeekdaysParse = [];
              }

              for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already

                mom = createUTC([2000, 1]).day(i);
                if (strict && !this._fullWeekdaysParse[i]) {
                  this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                  this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                  this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
                }
                if (!this._weekdaysParse[i]) {
                  regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                  this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                  return i;
                } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                  return i;
                } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                  return i;
                } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                  return i;
                }
              }
            }

            // MOMENTS

            function getSetDayOfWeek(input) {
              if (!this.isValid()) {
                return input != null ? this : NaN;
              }
              var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
              if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
              } else {
                return day;
              }
            }

            function getSetLocaleDayOfWeek(input) {
              if (!this.isValid()) {
                return input != null ? this : NaN;
              }
              var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
              return input == null ? weekday : this.add(input - weekday, 'd');
            }

            function getSetISODayOfWeek(input) {
              if (!this.isValid()) {
                return input != null ? this : NaN;
              }

              // behaves the same as moment#day except
              // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
              // as a setter, sunday should belong to the previous week.

              if (input != null) {
                var weekday = parseIsoWeekday(input, this.localeData());
                return this.day(this.day() % 7 ? weekday : weekday - 7);
              } else {
                return this.day() || 7;
              }
            }

            var defaultWeekdaysRegex = matchWord;

            function weekdaysRegex(isStrict) {
              if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                  computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                  return this._weekdaysStrictRegex;
                } else {
                  return this._weekdaysRegex;
                }
              } else {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                  this._weekdaysRegex = defaultWeekdaysRegex;
                }
                return this._weekdaysStrictRegex && isStrict ?
                  this._weekdaysStrictRegex : this._weekdaysRegex;
              }
            }

            var defaultWeekdaysShortRegex = matchWord;

            function weekdaysShortRegex(isStrict) {
              if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                  computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                  return this._weekdaysShortStrictRegex;
                } else {
                  return this._weekdaysShortRegex;
                }
              } else {
                if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                  this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                }
                return this._weekdaysShortStrictRegex && isStrict ?
                  this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
              }
            }

            var defaultWeekdaysMinRegex = matchWord;

            function weekdaysMinRegex(isStrict) {
              if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                  computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                  return this._weekdaysMinStrictRegex;
                } else {
                  return this._weekdaysMinRegex;
                }
              } else {
                if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                  this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                }
                return this._weekdaysMinStrictRegex && isStrict ?
                  this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
              }
            }


            function computeWeekdaysParse() {
              function cmpLenRev(a, b) {
                return b.length - a.length;
              }

              var minPieces = [],
                shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i, mom, minp, shortp, longp;
              for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, 1]).day(i);
                minp = this.weekdaysMin(mom, '');
                shortp = this.weekdaysShort(mom, '');
                longp = this.weekdays(mom, '');
                minPieces.push(minp);
                shortPieces.push(shortp);
                longPieces.push(longp);
                mixedPieces.push(minp);
                mixedPieces.push(shortp);
                mixedPieces.push(longp);
              }
              // Sorting makes sure if one weekday (or abbr) is a prefix of another it
              // will match the longer piece.
              minPieces.sort(cmpLenRev);
              shortPieces.sort(cmpLenRev);
              longPieces.sort(cmpLenRev);
              mixedPieces.sort(cmpLenRev);
              for (i = 0; i < 7; i++) {
                shortPieces[i] = regexEscape(shortPieces[i]);
                longPieces[i] = regexEscape(longPieces[i]);
                mixedPieces[i] = regexEscape(mixedPieces[i]);
              }

              this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
              this._weekdaysShortRegex = this._weekdaysRegex;
              this._weekdaysMinRegex = this._weekdaysRegex;

              this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
              this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
              this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
            }

            // FORMATTING

            function hFormat() {
              return this.hours() % 12 || 12;
            }

            function kFormat() {
              return this.hours() || 24;
            }

            addFormatToken('H', ['HH', 2], 0, 'hour');
            addFormatToken('h', ['hh', 2], 0, hFormat);
            addFormatToken('k', ['kk', 2], 0, kFormat);

            addFormatToken('hmm', 0, 0, function () {
              return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
            });

            addFormatToken('hmmss', 0, 0, function () {
              return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2);
            });

            addFormatToken('Hmm', 0, 0, function () {
              return '' + this.hours() + zeroFill(this.minutes(), 2);
            });

            addFormatToken('Hmmss', 0, 0, function () {
              return '' + this.hours() + zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2);
            });

            function meridiem(token, lowercase) {
              addFormatToken(token, 0, 0, function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
              });
            }

            meridiem('a', true);
            meridiem('A', false);

            // ALIASES

            addUnitAlias('hour', 'h');

            // PRIORITY
            addUnitPriority('hour', 13);

            // PARSING

            function matchMeridiem(isStrict, locale) {
              return locale._meridiemParse;
            }

            addRegexToken('a', matchMeridiem);
            addRegexToken('A', matchMeridiem);
            addRegexToken('H', match1to2);
            addRegexToken('h', match1to2);
            addRegexToken('k', match1to2);
            addRegexToken('HH', match1to2, match2);
            addRegexToken('hh', match1to2, match2);
            addRegexToken('kk', match1to2, match2);

            addRegexToken('hmm', match3to4);
            addRegexToken('hmmss', match5to6);
            addRegexToken('Hmm', match3to4);
            addRegexToken('Hmmss', match5to6);

            addParseToken(['H', 'HH'], HOUR);
            addParseToken(['k', 'kk'], function (input, array, config) {
              var kInput = toInt(input);
              array[HOUR] = kInput === 24 ? 0 : kInput;
            });
            addParseToken(['a', 'A'], function (input, array, config) {
              config._isPm = config._locale.isPM(input);
              config._meridiem = input;
            });
            addParseToken(['h', 'hh'], function (input, array, config) {
              array[HOUR] = toInt(input);
              getParsingFlags(config).bigHour = true;
            });
            addParseToken('hmm', function (input, array, config) {
              var pos = input.length - 2;
              array[HOUR] = toInt(input.substr(0, pos));
              array[MINUTE] = toInt(input.substr(pos));
              getParsingFlags(config).bigHour = true;
            });
            addParseToken('hmmss', function (input, array, config) {
              var pos1 = input.length - 4;
              var pos2 = input.length - 2;
              array[HOUR] = toInt(input.substr(0, pos1));
              array[MINUTE] = toInt(input.substr(pos1, 2));
              array[SECOND] = toInt(input.substr(pos2));
              getParsingFlags(config).bigHour = true;
            });
            addParseToken('Hmm', function (input, array, config) {
              var pos = input.length - 2;
              array[HOUR] = toInt(input.substr(0, pos));
              array[MINUTE] = toInt(input.substr(pos));
            });
            addParseToken('Hmmss', function (input, array, config) {
              var pos1 = input.length - 4;
              var pos2 = input.length - 2;
              array[HOUR] = toInt(input.substr(0, pos1));
              array[MINUTE] = toInt(input.substr(pos1, 2));
              array[SECOND] = toInt(input.substr(pos2));
            });

            // LOCALES

            function localeIsPM(input) {
              // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
              // Using charAt should be more compatible.
              return ((input + '').toLowerCase().charAt(0) === 'p');
            }

            var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

            function localeMeridiem(hours, minutes, isLower) {
              if (hours > 11) {
                return isLower ? 'pm' : 'PM';
              } else {
                return isLower ? 'am' : 'AM';
              }
            }


            // MOMENTS

            // Setting the hour should keep the time, because the user explicitly
            // specified which hour he wants. So trying to maintain the same hour (in
            // a new timezone) makes sense. Adding/subtracting hours does not follow
            // this rule.
            var getSetHour = makeGetSet('Hours', true);

            // months
            // week
            // weekdays
            // meridiem
            var baseConfig = {
              calendar: defaultCalendar,
              longDateFormat: defaultLongDateFormat,
              invalidDate: defaultInvalidDate,
              ordinal: defaultOrdinal,
              dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
              relativeTime: defaultRelativeTime,

              months: defaultLocaleMonths,
              monthsShort: defaultLocaleMonthsShort,

              week: defaultLocaleWeek,

              weekdays: defaultLocaleWeekdays,
              weekdaysMin: defaultLocaleWeekdaysMin,
              weekdaysShort: defaultLocaleWeekdaysShort,

              meridiemParse: defaultLocaleMeridiemParse
            };

            // internal storage for locale config files
            var locales = {};
            var localeFamilies = {};
            var globalLocale;

            function normalizeLocale(key) {
              return key ? key.toLowerCase().replace('_', '-') : key;
            }

            // pick the locale from the array
            // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
            // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
            function chooseLocale(names) {
              var i = 0,
                j, next, locale, split;

              while (i < names.length) {
                split = normalizeLocale(names[i]).split('-');
                j = split.length;
                next = normalizeLocale(names[i + 1]);
                next = next ? next.split('-') : null;
                while (j > 0) {
                  locale = loadLocale(split.slice(0, j).join('-'));
                  if (locale) {
                    return locale;
                  }
                  if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                  }
                  j--;
                }
                i++;
              }
              return null;
            }

            function loadLocale(name) {
              var oldLocale = null;
              // TODO: Find a better way to register and load all the locales in Node
              if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
                try {
                  oldLocale = globalLocale._abbr;
                  __webpack_require__(278)("./" + name);
                  // because defineLocale currently also sets the global locale, we
                  // want to undo that for lazy loaded locales
                  getSetGlobalLocale(oldLocale);
                } catch (e) {}
              }
              return locales[name];
            }

            // This function will load locale and then set the global locale.  If
            // no arguments are passed in, it will simply return the current global
            // locale key.
            function getSetGlobalLocale(key, values) {
              var data;
              if (key) {
                if (isUndefined(values)) {
                  data = getLocale(key);
                } else {
                  data = defineLocale(key, values);
                }

                if (data) {
                  // moment.duration._locale = moment._locale = data;
                  globalLocale = data;
                }
              }

              return globalLocale._abbr;
            }

            function defineLocale(name, config) {
              if (config !== null) {
                var parentConfig = baseConfig;
                config.abbr = name;
                if (locales[name] != null) {
                  deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                  parentConfig = locales[name]._config;
                } else if (config.parentLocale != null) {
                  if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                  } else {
                    if (!localeFamilies[config.parentLocale]) {
                      localeFamilies[config.parentLocale] = [];
                    }
                    localeFamilies[config.parentLocale].push({
                      name: name,
                      config: config
                    });
                    return null;
                  }
                }
                locales[name] = new Locale(mergeConfigs(parentConfig, config));

                if (localeFamilies[name]) {
                  localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                  });
                }

                // backwards compat for now: also set the locale
                // make sure we set the locale AFTER all child locales have been
                // created, so we won't end up with the child locale set.
                getSetGlobalLocale(name);


                return locales[name];
              } else {
                // useful for testing
                delete locales[name];
                return null;
              }
            }

            function updateLocale(name, config) {
              if (config != null) {
                var locale, parentConfig = baseConfig;
                // MERGE
                if (locales[name] != null) {
                  parentConfig = locales[name]._config;
                }
                config = mergeConfigs(parentConfig, config);
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;

                // backwards compat for now: also set the locale
                getSetGlobalLocale(name);
              } else {
                // pass null for config to unupdate, useful for tests
                if (locales[name] != null) {
                  if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                  } else if (locales[name] != null) {
                    delete locales[name];
                  }
                }
              }
              return locales[name];
            }

            // returns locale data
            function getLocale(key) {
              var locale;

              if (key && key._locale && key._locale._abbr) {
                key = key._locale._abbr;
              }

              if (!key) {
                return globalLocale;
              }

              if (!isArray(key)) {
                //short-circuit everything else
                locale = loadLocale(key);
                if (locale) {
                  return locale;
                }
                key = [key];
              }

              return chooseLocale(key);
            }

            function listLocales() {
              return keys$1(locales);
            }

            function checkOverflow(m) {
              var overflow;
              var a = m._a;

              if (a && getParsingFlags(m).overflow === -2) {
                overflow =
                  a[MONTH] < 0 || a[MONTH] > 11 ? MONTH :
                  a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                  a[HOUR] < 0 || a[HOUR] > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                  a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE :
                  a[SECOND] < 0 || a[SECOND] > 59 ? SECOND :
                  a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                  -1;

                if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                  overflow = DATE;
                }
                if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                  overflow = WEEK;
                }
                if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                  overflow = WEEKDAY;
                }

                getParsingFlags(m).overflow = overflow;
              }

              return m;
            }

            // iso 8601 regex
            // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
            var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
            var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

            var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

            var isoDates = [
              ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
              ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
              ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
              ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
              ['YYYY-DDD', /\d{4}-\d{3}/],
              ['YYYY-MM', /\d{4}-\d\d/, false],
              ['YYYYYYMMDD', /[+-]\d{10}/],
              ['YYYYMMDD', /\d{8}/],
              // YYYYMM is NOT allowed by the standard
              ['GGGG[W]WWE', /\d{4}W\d{3}/],
              ['GGGG[W]WW', /\d{4}W\d{2}/, false],
              ['YYYYDDD', /\d{7}/]
            ];

            // iso time formats and regexes
            var isoTimes = [
              ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
              ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
              ['HH:mm:ss', /\d\d:\d\d:\d\d/],
              ['HH:mm', /\d\d:\d\d/],
              ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
              ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
              ['HHmmss', /\d\d\d\d\d\d/],
              ['HHmm', /\d\d\d\d/],
              ['HH', /\d\d/]
            ];

            var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

            // date from iso format
            function configFromISO(config) {
              var i, l,
                string = config._i,
                match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                allowTime, dateFormat, timeFormat, tzFormat;

              if (match) {
                getParsingFlags(config).iso = true;

                for (i = 0, l = isoDates.length; i < l; i++) {
                  if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                  }
                }
                if (dateFormat == null) {
                  config._isValid = false;
                  return;
                }
                if (match[3]) {
                  for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                      // match[2] should be 'T' or space
                      timeFormat = (match[2] || ' ') + isoTimes[i][0];
                      break;
                    }
                  }
                  if (timeFormat == null) {
                    config._isValid = false;
                    return;
                  }
                }
                if (!allowTime && timeFormat != null) {
                  config._isValid = false;
                  return;
                }
                if (match[4]) {
                  if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                  } else {
                    config._isValid = false;
                    return;
                  }
                }
                config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                configFromStringAndFormat(config);
              } else {
                config._isValid = false;
              }
            }

            // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
            var basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;

            // date and time from ref 2822 format
            function configFromRFC2822(config) {
              var string, match, dayFormat,
                dateFormat, timeFormat, tzFormat;
              var timezones = {
                ' GMT': ' +0000',
                ' EDT': ' -0400',
                ' EST': ' -0500',
                ' CDT': ' -0500',
                ' CST': ' -0600',
                ' MDT': ' -0600',
                ' MST': ' -0700',
                ' PDT': ' -0700',
                ' PST': ' -0800'
              };
              var military = 'YXWVUTSRQPONZABCDEFGHIKLM';
              var timezone, timezoneIndex;

              string = config._i
                .replace(/\([^\)]*\)|[\n\t]/g, ' ') // Remove comments and folding whitespace
                .replace(/(\s\s+)/g, ' ') // Replace multiple-spaces with a single space
                .replace(/^\s|\s$/g, ''); // Remove leading and trailing spaces
              match = basicRfcRegex.exec(string);

              if (match) {
                dayFormat = match[1] ? 'ddd' + ((match[1].length === 5) ? ', ' : ' ') : '';
                dateFormat = 'D MMM ' + ((match[2].length > 10) ? 'YYYY ' : 'YY ');
                timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');

                // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
                if (match[1]) { // day of week given
                  var momentDate = new Date(match[2]);
                  var momentDay = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][momentDate.getDay()];

                  if (match[1].substr(0, 3) !== momentDay) {
                    getParsingFlags(config).weekdayMismatch = true;
                    config._isValid = false;
                    return;
                  }
                }

                switch (match[5].length) {
                case 2: // military
                  if (timezoneIndex === 0) {
                    timezone = ' +0000';
                  } else {
                    timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;
                    timezone = ((timezoneIndex < 0) ? ' -' : ' +') +
                      (('' + timezoneIndex).replace(/^-?/, '0')).match(/..$/)[0] + '00';
                  }
                  break;
                case 4: // Zone
                  timezone = timezones[match[5]];
                  break;
                default: // UT or +/-9999
                  timezone = timezones[' GMT'];
                }
                match[5] = timezone;
                config._i = match.splice(1).join('');
                tzFormat = ' ZZ';
                config._f = dayFormat + dateFormat + timeFormat + tzFormat;
                configFromStringAndFormat(config);
                getParsingFlags(config).rfc2822 = true;
              } else {
                config._isValid = false;
              }
            }

            // date from iso format or fallback
            function configFromString(config) {
              var matched = aspNetJsonRegex.exec(config._i);

              if (matched !== null) {
                config._d = new Date(+matched[1]);
                return;
              }

              configFromISO(config);
              if (config._isValid === false) {
                delete config._isValid;
              } else {
                return;
              }

              configFromRFC2822(config);
              if (config._isValid === false) {
                delete config._isValid;
              } else {
                return;
              }

              // Final attempt, use Input Fallback
              hooks.createFromInputFallback(config);
            }

            hooks.createFromInputFallback = deprecate(
              'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
              'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
              'discouraged and will be removed in an upcoming major release. Please refer to ' +
              'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
              function (config) {
                config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
              }
            );

            // Pick the first defined of two or three arguments.
            function defaults(a, b, c) {
              if (a != null) {
                return a;
              }
              if (b != null) {
                return b;
              }
              return c;
            }

            function currentDateArray(config) {
              // hooks is actually the exported moment object
              var nowValue = new Date(hooks.now());
              if (config._useUTC) {
                return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
              }
              return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
            }

            // convert an array to a date.
            // the array should mirror the parameters below
            // note: all values past the year are optional and will default to the lowest possible value.
            // [year, month, day , hour, minute, second, millisecond]
            function configFromArray(config) {
              var i, date, input = [],
                currentDate, yearToUse;

              if (config._d) {
                return;
              }

              currentDate = currentDateArray(config);

              //compute day of the year from weeks and weekdays
              if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                dayOfYearFromWeekInfo(config);
              }

              //if the day of the year is set, figure out what it is
              if (config._dayOfYear != null) {
                yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

                if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                  getParsingFlags(config)._overflowDayOfYear = true;
                }

                date = createUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
              }

              // Default to current date.
              // * if no year, month, day of month are given, default to today
              // * if day of month is given, default month and year
              // * if month is given, default only year
              // * if year is given, don't default anything
              for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
              }

              // Zero out whatever was not defaulted, including time
              for (; i < 7; i++) {
                config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
              }

              // Check for 24:00:00.000
              if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
                config._nextDay = true;
                config._a[HOUR] = 0;
              }

              config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
              // Apply timezone offset from input. The actual utcOffset can be changed
              // with parseZone.
              if (config._tzm != null) {
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
              }

              if (config._nextDay) {
                config._a[HOUR] = 24;
              }
            }

            function dayOfYearFromWeekInfo(config) {
              var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

              w = config._w;
              if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;

                // TODO: We need to take the current isoWeekYear, but that depends on
                // how we interpret now (local, utc, fixed offset). So create
                // a now version of current config (take local/utc/offset flags, and
                // create now).
                weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
                week = defaults(w.W, 1);
                weekday = defaults(w.E, 1);
                if (weekday < 1 || weekday > 7) {
                  weekdayOverflow = true;
                }
              } else {
                dow = config._locale._week.dow;
                doy = config._locale._week.doy;

                var curWeek = weekOfYear(createLocal(), dow, doy);

                weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

                // Default to current week.
                week = defaults(w.w, curWeek.week);

                if (w.d != null) {
                  // weekday -- low day numbers are considered next week
                  weekday = w.d;
                  if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                  }
                } else if (w.e != null) {
                  // local weekday -- counting starts from begining of week
                  weekday = w.e + dow;
                  if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                  }
                } else {
                  // default to begining of week
                  weekday = dow;
                }
              }
              if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                getParsingFlags(config)._overflowWeeks = true;
              } else if (weekdayOverflow != null) {
                getParsingFlags(config)._overflowWeekday = true;
              } else {
                temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                config._a[YEAR] = temp.year;
                config._dayOfYear = temp.dayOfYear;
              }
            }

            // constant that refers to the ISO standard
            hooks.ISO_8601 = function () {};

            // constant that refers to the RFC 2822 form
            hooks.RFC_2822 = function () {};

            // date from string and format string
            function configFromStringAndFormat(config) {
              // TODO: Move this to another part of the creation flow to prevent circular deps
              if (config._f === hooks.ISO_8601) {
                configFromISO(config);
                return;
              }
              if (config._f === hooks.RFC_2822) {
                configFromRFC2822(config);
                return;
              }
              config._a = [];
              getParsingFlags(config).empty = true;

              // This array is used to make a Date, either with `new Date` or `Date.UTC`
              var string = '' + config._i,
                i, parsedInput, tokens, token, skipped,
                stringLength = string.length,
                totalParsedInputLength = 0;

              tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

              for (i = 0; i < tokens.length; i++) {
                token = tokens[i];
                parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
                // console.log('token', token, 'parsedInput', parsedInput,
                //         'regex', getParseRegexForToken(token, config));
                if (parsedInput) {
                  skipped = string.substr(0, string.indexOf(parsedInput));
                  if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                  }
                  string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                  totalParsedInputLength += parsedInput.length;
                }
                // don't parse if it's not a known token
                if (formatTokenFunctions[token]) {
                  if (parsedInput) {
                    getParsingFlags(config).empty = false;
                  } else {
                    getParsingFlags(config).unusedTokens.push(token);
                  }
                  addTimeToArrayFromToken(token, parsedInput, config);
                } else if (config._strict && !parsedInput) {
                  getParsingFlags(config).unusedTokens.push(token);
                }
              }

              // add remaining unparsed input length to the string
              getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
              if (string.length > 0) {
                getParsingFlags(config).unusedInput.push(string);
              }

              // clear _12h flag if hour is <= 12
              if (config._a[HOUR] <= 12 &&
                getParsingFlags(config).bigHour === true &&
                config._a[HOUR] > 0) {
                getParsingFlags(config).bigHour = undefined;
              }

              getParsingFlags(config).parsedDateParts = config._a.slice(0);
              getParsingFlags(config).meridiem = config._meridiem;
              // handle meridiem
              config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

              configFromArray(config);
              checkOverflow(config);
            }


            function meridiemFixWrap(locale, hour, meridiem) {
              var isPm;

              if (meridiem == null) {
                // nothing to do
                return hour;
              }
              if (locale.meridiemHour != null) {
                return locale.meridiemHour(hour, meridiem);
              } else if (locale.isPM != null) {
                // Fallback
                isPm = locale.isPM(meridiem);
                if (isPm && hour < 12) {
                  hour += 12;
                }
                if (!isPm && hour === 12) {
                  hour = 0;
                }
                return hour;
              } else {
                // this is not supposed to happen
                return hour;
              }
            }

            // date from string and array of format strings
            function configFromStringAndArray(config) {
              var tempConfig,
                bestMoment,

                scoreToBeat,
                i,
                currentScore;

              if (config._f.length === 0) {
                getParsingFlags(config).invalidFormat = true;
                config._d = new Date(NaN);
                return;
              }

              for (i = 0; i < config._f.length; i++) {
                currentScore = 0;
                tempConfig = copyConfig({}, config);
                if (config._useUTC != null) {
                  tempConfig._useUTC = config._useUTC;
                }
                tempConfig._f = config._f[i];
                configFromStringAndFormat(tempConfig);

                if (!isValid(tempConfig)) {
                  continue;
                }

                // if there is any input that was not parsed add a penalty for that format
                currentScore += getParsingFlags(tempConfig).charsLeftOver;

                //or tokens
                currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

                getParsingFlags(tempConfig).score = currentScore;

                if (scoreToBeat == null || currentScore < scoreToBeat) {
                  scoreToBeat = currentScore;
                  bestMoment = tempConfig;
                }
              }

              extend(config, bestMoment || tempConfig);
            }

            function configFromObject(config) {
              if (config._d) {
                return;
              }

              var i = normalizeObjectUnits(config._i);
              config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
                return obj && parseInt(obj, 10);
              });

              configFromArray(config);
            }

            function createFromConfig(config) {
              var res = new Moment(checkOverflow(prepareConfig(config)));
              if (res._nextDay) {
                // Adding is smart enough around DST
                res.add(1, 'd');
                res._nextDay = undefined;
              }

              return res;
            }

            function prepareConfig(config) {
              var input = config._i,
                format = config._f;

              config._locale = config._locale || getLocale(config._l);

              if (input === null || (format === undefined && input === '')) {
                return createInvalid({ nullInput: true });
              }

              if (typeof input === 'string') {
                config._i = input = config._locale.preparse(input);
              }

              if (isMoment(input)) {
                return new Moment(checkOverflow(input));
              } else if (isDate(input)) {
                config._d = input;
              } else if (isArray(format)) {
                configFromStringAndArray(config);
              } else if (format) {
                configFromStringAndFormat(config);
              } else {
                configFromInput(config);
              }

              if (!isValid(config)) {
                config._d = null;
              }

              return config;
            }

            function configFromInput(config) {
              var input = config._i;
              if (isUndefined(input)) {
                config._d = new Date(hooks.now());
              } else if (isDate(input)) {
                config._d = new Date(input.valueOf());
              } else if (typeof input === 'string') {
                configFromString(config);
              } else if (isArray(input)) {
                config._a = map(input.slice(0), function (obj) {
                  return parseInt(obj, 10);
                });
                configFromArray(config);
              } else if (isObject(input)) {
                configFromObject(config);
              } else if (isNumber(input)) {
                // from milliseconds
                config._d = new Date(input);
              } else {
                hooks.createFromInputFallback(config);
              }
            }

            function createLocalOrUTC(input, format, locale, strict, isUTC) {
              var c = {};

              if (locale === true || locale === false) {
                strict = locale;
                locale = undefined;
              }

              if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
                input = undefined;
              }
              // object construction must be done this way.
              // https://github.com/moment/moment/issues/1423
              c._isAMomentObject = true;
              c._useUTC = c._isUTC = isUTC;
              c._l = locale;
              c._i = input;
              c._f = format;
              c._strict = strict;

              return createFromConfig(c);
            }

            function createLocal(input, format, locale, strict) {
              return createLocalOrUTC(input, format, locale, strict, false);
            }

            var prototypeMin = deprecate(
              'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
              function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                  return other < this ? this : other;
                } else {
                  return createInvalid();
                }
              }
            );

            var prototypeMax = deprecate(
              'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
              function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                  return other > this ? this : other;
                } else {
                  return createInvalid();
                }
              }
            );

            // Pick a moment m from moments so that m[fn](other) is true for all
            // other. This relies on the function fn to be transitive.
            //
            // moments should either be an array of moment objects or an array, whose
            // first element is an array of moment objects.
            function pickBy(fn, moments) {
              var res, i;
              if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
              }
              if (!moments.length) {
                return createLocal();
              }
              res = moments[0];
              for (i = 1; i < moments.length; ++i) {
                if (!moments[i].isValid() || moments[i][fn](res)) {
                  res = moments[i];
                }
              }
              return res;
            }

            // TODO: Use [].sort instead?
            function min() {
              var args = [].slice.call(arguments, 0);

              return pickBy('isBefore', args);
            }

            function max() {
              var args = [].slice.call(arguments, 0);

              return pickBy('isAfter', args);
            }

            var now = function () {
              return Date.now ? Date.now() : +(new Date());
            };

            var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

            function isDurationValid(m) {
              for (var key in m) {
                if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                  return false;
                }
              }

              var unitHasDecimal = false;
              for (var i = 0; i < ordering.length; ++i) {
                if (m[ordering[i]]) {
                  if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                  }
                  if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                  }
                }
              }

              return true;
            }

            function isValid$1() {
              return this._isValid;
            }

            function createInvalid$1() {
              return createDuration(NaN);
            }

            function Duration(duration) {
              var normalizedInput = normalizeObjectUnits(duration),
                years = normalizedInput.year || 0,
                quarters = normalizedInput.quarter || 0,
                months = normalizedInput.month || 0,
                weeks = normalizedInput.week || 0,
                days = normalizedInput.day || 0,
                hours = normalizedInput.hour || 0,
                minutes = normalizedInput.minute || 0,
                seconds = normalizedInput.second || 0,
                milliseconds = normalizedInput.millisecond || 0;

              this._isValid = isDurationValid(normalizedInput);

              // representation for dateAddRemove
              this._milliseconds = +milliseconds +
                seconds * 1e3 + // 1000
                minutes * 6e4 + // 1000 * 60
                hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
              // Because of dateAddRemove treats 24 hours as different from a
              // day when working around DST, we need to store them separately
              this._days = +days +
                weeks * 7;
              // It is impossible translate months into days without knowing
              // which months you are are talking about, so we have to store
              // it separately.
              this._months = +months +
                quarters * 3 +
                years * 12;

              this._data = {};

              this._locale = getLocale();

              this._bubble();
            }

            function isDuration(obj) {
              return obj instanceof Duration;
            }

            function absRound(number) {
              if (number < 0) {
                return Math.round(-1 * number) * -1;
              } else {
                return Math.round(number);
              }
            }

            // FORMATTING

            function offset(token, separator) {
              addFormatToken(token, 0, 0, function () {
                var offset = this.utcOffset();
                var sign = '+';
                if (offset < 0) {
                  offset = -offset;
                  sign = '-';
                }
                return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
              });
            }

            offset('Z', ':');
            offset('ZZ', '');

            // PARSING

            addRegexToken('Z', matchShortOffset);
            addRegexToken('ZZ', matchShortOffset);
            addParseToken(['Z', 'ZZ'], function (input, array, config) {
              config._useUTC = true;
              config._tzm = offsetFromString(matchShortOffset, input);
            });

            // HELPERS

            // timezone chunker
            // '+10:00' > ['10',  '00']
            // '-1530'  > ['-15', '30']
            var chunkOffset = /([\+\-]|\d\d)/gi;

            function offsetFromString(matcher, string) {
              var matches = (string || '').match(matcher);

              if (matches === null) {
                return null;
              }

              var chunk = matches[matches.length - 1] || [];
              var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
              var minutes = +(parts[1] * 60) + toInt(parts[2]);

              return minutes === 0 ?
                0 :
                parts[0] === '+' ? minutes : -minutes;
            }

            // Return a moment from input, that is local/utc/zone equivalent to model.
            function cloneWithOffset(input, model) {
              var res, diff;
              if (model._isUTC) {
                res = model.clone();
                diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
                // Use low-level api, because this fn is low-level api.
                res._d.setTime(res._d.valueOf() + diff);
                hooks.updateOffset(res, false);
                return res;
              } else {
                return createLocal(input).local();
              }
            }

            function getDateOffset(m) {
              // On Firefox.24 Date#getTimezoneOffset returns a floating point.
              // https://github.com/moment/moment/pull/1871
              return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
            }

            // HOOKS

            // This function will be called whenever a moment is mutated.
            // It is intended to keep the offset in sync with the timezone.
            hooks.updateOffset = function () {};

            // MOMENTS

            // keepLocalTime = true means only change the timezone, without
            // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
            // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
            // +0200, so we adjust the time as needed, to be valid.
            //
            // Keeping the time actually adds/subtracts (one hour)
            // from the actual represented time. That is why we call updateOffset
            // a second time. In case it wants us to change the offset again
            // _changeInProgress == true case, then we have to adjust, because
            // there is no such time in the given timezone.
            function getSetOffset(input, keepLocalTime, keepMinutes) {
              var offset = this._offset || 0,
                localAdjust;
              if (!this.isValid()) {
                return input != null ? this : NaN;
              }
              if (input != null) {
                if (typeof input === 'string') {
                  input = offsetFromString(matchShortOffset, input);
                  if (input === null) {
                    return this;
                  }
                } else if (Math.abs(input) < 16 && !keepMinutes) {
                  input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                  localAdjust = getDateOffset(this);
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                  this.add(localAdjust, 'm');
                }
                if (offset !== input) {
                  if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                  } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                  }
                }
                return this;
              } else {
                return this._isUTC ? offset : getDateOffset(this);
              }
            }

            function getSetZone(input, keepLocalTime) {
              if (input != null) {
                if (typeof input !== 'string') {
                  input = -input;
                }

                this.utcOffset(input, keepLocalTime);

                return this;
              } else {
                return -this.utcOffset();
              }
            }

            function setOffsetToUTC(keepLocalTime) {
              return this.utcOffset(0, keepLocalTime);
            }

            function setOffsetToLocal(keepLocalTime) {
              if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                  this.subtract(getDateOffset(this), 'm');
                }
              }
              return this;
            }

            function setOffsetToParsedOffset() {
              if (this._tzm != null) {
                this.utcOffset(this._tzm, false, true);
              } else if (typeof this._i === 'string') {
                var tZone = offsetFromString(matchOffset, this._i);
                if (tZone != null) {
                  this.utcOffset(tZone);
                } else {
                  this.utcOffset(0, true);
                }
              }
              return this;
            }

            function hasAlignedHourOffset(input) {
              if (!this.isValid()) {
                return false;
              }
              input = input ? createLocal(input).utcOffset() : 0;

              return (this.utcOffset() - input) % 60 === 0;
            }

            function isDaylightSavingTime() {
              return (
                this.utcOffset() > this.clone().month(0).utcOffset() ||
                this.utcOffset() > this.clone().month(5).utcOffset()
              );
            }

            function isDaylightSavingTimeShifted() {
              if (!isUndefined(this._isDSTShifted)) {
                return this._isDSTShifted;
              }

              var c = {};

              copyConfig(c, this);
              c = prepareConfig(c);

              if (c._a) {
                var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                this._isDSTShifted = this.isValid() &&
                  compareArrays(c._a, other.toArray()) > 0;
              } else {
                this._isDSTShifted = false;
              }

              return this._isDSTShifted;
            }

            function isLocal() {
              return this.isValid() ? !this._isUTC : false;
            }

            function isUtcOffset() {
              return this.isValid() ? this._isUTC : false;
            }

            function isUtc() {
              return this.isValid() ? this._isUTC && this._offset === 0 : false;
            }

            // ASP.NET json date format regex
            var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

            // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
            // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
            // and further modified to allow for strings containing both week and day
            var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

            function createDuration(input, key) {
              var duration = input,
                // matching against regexp is expensive, do it on demand
                match = null,
                sign,
                ret,
                diffRes;

              if (isDuration(input)) {
                duration = {
                  ms: input._milliseconds,
                  d: input._days,
                  M: input._months
                };
              } else if (isNumber(input)) {
                duration = {};
                if (key) {
                  duration[key] = input;
                } else {
                  duration.milliseconds = input;
                }
              } else if (!!(match = aspNetRegex.exec(input))) {
                sign = (match[1] === '-') ? -1 : 1;
                duration = {
                  y: 0,
                  d: toInt(match[DATE]) * sign,
                  h: toInt(match[HOUR]) * sign,
                  m: toInt(match[MINUTE]) * sign,
                  s: toInt(match[SECOND]) * sign,
                  ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
                };
              } else if (!!(match = isoRegex.exec(input))) {
                sign = (match[1] === '-') ? -1 : 1;
                duration = {
                  y: parseIso(match[2], sign),
                  M: parseIso(match[3], sign),
                  w: parseIso(match[4], sign),
                  d: parseIso(match[5], sign),
                  h: parseIso(match[6], sign),
                  m: parseIso(match[7], sign),
                  s: parseIso(match[8], sign)
                };
              } else if (duration == null) { // checks for null or undefined
                duration = {};
              } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
                diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

                duration = {};
                duration.ms = diffRes.milliseconds;
                duration.M = diffRes.months;
              }

              ret = new Duration(duration);

              if (isDuration(input) && hasOwnProp(input, '_locale')) {
                ret._locale = input._locale;
              }

              return ret;
            }

            createDuration.fn = Duration.prototype;
            createDuration.invalid = createInvalid$1;

            function parseIso(inp, sign) {
              // We'd normally use ~~inp for this, but unfortunately it also
              // converts floats to ints.
              // inp may be undefined, so careful calling replace on it.
              var res = inp && parseFloat(inp.replace(',', '.'));
              // apply sign while we're at it
              return (isNaN(res) ? 0 : res) * sign;
            }

            function positiveMomentsDifference(base, other) {
              var res = { milliseconds: 0, months: 0 };

              res.months = other.month() - base.month() +
                (other.year() - base.year()) * 12;
              if (base.clone().add(res.months, 'M').isAfter(other)) {
                --res.months;
              }

              res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

              return res;
            }

            function momentsDifference(base, other) {
              var res;
              if (!(base.isValid() && other.isValid())) {
                return { milliseconds: 0, months: 0 };
              }

              other = cloneWithOffset(other, base);
              if (base.isBefore(other)) {
                res = positiveMomentsDifference(base, other);
              } else {
                res = positiveMomentsDifference(other, base);
                res.milliseconds = -res.milliseconds;
                res.months = -res.months;
              }

              return res;
            }

            // TODO: remove 'name' arg after deprecation is removed
            function createAdder(direction, name) {
              return function (val, period) {
                var dur, tmp;
                //invert the arguments, but complain about it
                if (period !== null && !isNaN(+period)) {
                  deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                    'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                  tmp = val;
                  val = period;
                  period = tmp;
                }

                val = typeof val === 'string' ? +val : val;
                dur = createDuration(val, period);
                addSubtract(this, dur, direction);
                return this;
              };
            }

            function addSubtract(mom, duration, isAdding, updateOffset) {
              var milliseconds = duration._milliseconds,
                days = absRound(duration._days),
                months = absRound(duration._months);

              if (!mom.isValid()) {
                // No op
                return;
              }

              updateOffset = updateOffset == null ? true : updateOffset;

              if (milliseconds) {
                mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
              }
              if (days) {
                set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
              }
              if (months) {
                setMonth(mom, get(mom, 'Month') + months * isAdding);
              }
              if (updateOffset) {
                hooks.updateOffset(mom, days || months);
              }
            }

            var add = createAdder(1, 'add');
            var subtract = createAdder(-1, 'subtract');

            function getCalendarFormat(myMoment, now) {
              var diff = myMoment.diff(now, 'days', true);
              return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
            }

            function calendar$1(time, formats) {
              // We want to compare the start of today, vs this.
              // Getting start-of-today depends on whether we're local/utc/offset or not.
              var now = time || createLocal(),
                sod = cloneWithOffset(now, this).startOf('day'),
                format = hooks.calendarFormat(this, sod) || 'sameElse';

              var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

              return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
            }

            function clone() {
              return new Moment(this);
            }

            function isAfter(input, units) {
              var localInput = isMoment(input) ? input : createLocal(input);
              if (!(this.isValid() && localInput.isValid())) {
                return false;
              }
              units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
              if (units === 'millisecond') {
                return this.valueOf() > localInput.valueOf();
              } else {
                return localInput.valueOf() < this.clone().startOf(units).valueOf();
              }
            }

            function isBefore(input, units) {
              var localInput = isMoment(input) ? input : createLocal(input);
              if (!(this.isValid() && localInput.isValid())) {
                return false;
              }
              units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
              if (units === 'millisecond') {
                return this.valueOf() < localInput.valueOf();
              } else {
                return this.clone().endOf(units).valueOf() < localInput.valueOf();
              }
            }

            function isBetween(from, to, units, inclusivity) {
              inclusivity = inclusivity || '()';
              return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
                (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
            }

            function isSame(input, units) {
              var localInput = isMoment(input) ? input : createLocal(input),
                inputMs;
              if (!(this.isValid() && localInput.isValid())) {
                return false;
              }
              units = normalizeUnits(units || 'millisecond');
              if (units === 'millisecond') {
                return this.valueOf() === localInput.valueOf();
              } else {
                inputMs = localInput.valueOf();
                return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
              }
            }

            function isSameOrAfter(input, units) {
              return this.isSame(input, units) || this.isAfter(input, units);
            }

            function isSameOrBefore(input, units) {
              return this.isSame(input, units) || this.isBefore(input, units);
            }

            function diff(input, units, asFloat) {
              var that,
                zoneDelta,
                delta, output;

              if (!this.isValid()) {
                return NaN;
              }

              that = cloneWithOffset(input, this);

              if (!that.isValid()) {
                return NaN;
              }

              zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

              units = normalizeUnits(units);

              if (units === 'year' || units === 'month' || units === 'quarter') {
                output = monthDiff(this, that);
                if (units === 'quarter') {
                  output = output / 3;
                } else if (units === 'year') {
                  output = output / 12;
                }
              } else {
                delta = this - that;
                output = units === 'second' ? delta / 1e3 : // 1000
                  units === 'minute' ? delta / 6e4 : // 1000 * 60
                  units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                  units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                  units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                  delta;
              }
              return asFloat ? output : absFloor(output);
            }

            function monthDiff(a, b) {
              // difference in months
              var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
                // b is in (anchor - 1 month, anchor + 1 month)
                anchor = a.clone().add(wholeMonthDiff, 'months'),
                anchor2, adjust;

              if (b - anchor < 0) {
                anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor - anchor2);
              } else {
                anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor2 - anchor);
              }

              //check for negative zero, return zero if negative zero
              return -(wholeMonthDiff + adjust) || 0;
            }

            hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
            hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

            function toString() {
              return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
            }

            function toISOString() {
              if (!this.isValid()) {
                return null;
              }
              var m = this.clone().utc();
              if (m.year() < 0 || m.year() > 9999) {
                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
              }
              if (isFunction(Date.prototype.toISOString)) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
              }
              return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }

            /**
             * Return a human readable representation of a moment that can
             * also be evaluated to get a new moment which is the same
             *
             * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
             */
            function inspect() {
              if (!this.isValid()) {
                return 'moment.invalid(/* ' + this._i + ' */)';
              }
              var func = 'moment';
              var zone = '';
              if (!this.isLocal()) {
                func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                zone = 'Z';
              }
              var prefix = '[' + func + '("]';
              var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
              var datetime = '-MM-DD[T]HH:mm:ss.SSS';
              var suffix = zone + '[")]';

              return this.format(prefix + year + datetime + suffix);
            }

            function format(inputString) {
              if (!inputString) {
                inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
              }
              var output = formatMoment(this, inputString);
              return this.localeData().postformat(output);
            }

            function from(time, withoutSuffix) {
              if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                  createLocal(time).isValid())) {
                return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
              } else {
                return this.localeData().invalidDate();
              }
            }

            function fromNow(withoutSuffix) {
              return this.from(createLocal(), withoutSuffix);
            }

            function to(time, withoutSuffix) {
              if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                  createLocal(time).isValid())) {
                return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
              } else {
                return this.localeData().invalidDate();
              }
            }

            function toNow(withoutSuffix) {
              return this.to(createLocal(), withoutSuffix);
            }

            // If passed a locale key, it will set the locale for this
            // instance.  Otherwise, it will return the locale configuration
            // variables for this instance.
            function locale(key) {
              var newLocaleData;

              if (key === undefined) {
                return this._locale._abbr;
              } else {
                newLocaleData = getLocale(key);
                if (newLocaleData != null) {
                  this._locale = newLocaleData;
                }
                return this;
              }
            }

            var lang = deprecate(
              'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
              function (key) {
                if (key === undefined) {
                  return this.localeData();
                } else {
                  return this.locale(key);
                }
              }
            );

            function localeData() {
              return this._locale;
            }

            function startOf(units) {
              units = normalizeUnits(units);
              // the following switch intentionally omits break keywords
              // to utilize falling through the cases.
              switch (units) {
              case 'year':
                this.month(0);
                /* falls through */
              case 'quarter':
              case 'month':
                this.date(1);
                /* falls through */
              case 'week':
              case 'isoWeek':
              case 'day':
              case 'date':
                this.hours(0);
                /* falls through */
              case 'hour':
                this.minutes(0);
                /* falls through */
              case 'minute':
                this.seconds(0);
                /* falls through */
              case 'second':
                this.milliseconds(0);
              }

              // weeks are a special case
              if (units === 'week') {
                this.weekday(0);
              }
              if (units === 'isoWeek') {
                this.isoWeekday(1);
              }

              // quarters are also special
              if (units === 'quarter') {
                this.month(Math.floor(this.month() / 3) * 3);
              }

              return this;
            }

            function endOf(units) {
              units = normalizeUnits(units);
              if (units === undefined || units === 'millisecond') {
                return this;
              }

              // 'date' is an alias for 'day', so it should be considered as such.
              if (units === 'date') {
                units = 'day';
              }

              return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
            }

            function valueOf() {
              return this._d.valueOf() - ((this._offset || 0) * 60000);
            }

            function unix() {
              return Math.floor(this.valueOf() / 1000);
            }

            function toDate() {
              return new Date(this.valueOf());
            }

            function toArray() {
              var m = this;
              return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
            }

            function toObject() {
              var m = this;
              return {
                years: m.year(),
                months: m.month(),
                date: m.date(),
                hours: m.hours(),
                minutes: m.minutes(),
                seconds: m.seconds(),
                milliseconds: m.milliseconds()
              };
            }

            function toJSON() {
              // new Date(NaN).toJSON() === null
              return this.isValid() ? this.toISOString() : null;
            }

            function isValid$2() {
              return isValid(this);
            }

            function parsingFlags() {
              return extend({}, getParsingFlags(this));
            }

            function invalidAt() {
              return getParsingFlags(this).overflow;
            }

            function creationData() {
              return {
                input: this._i,
                format: this._f,
                locale: this._locale,
                isUTC: this._isUTC,
                strict: this._strict
              };
            }

            // FORMATTING

            addFormatToken(0, ['gg', 2], 0, function () {
              return this.weekYear() % 100;
            });

            addFormatToken(0, ['GG', 2], 0, function () {
              return this.isoWeekYear() % 100;
            });

            function addWeekYearFormatToken(token, getter) {
              addFormatToken(0, [token, token.length], 0, getter);
            }

            addWeekYearFormatToken('gggg', 'weekYear');
            addWeekYearFormatToken('ggggg', 'weekYear');
            addWeekYearFormatToken('GGGG', 'isoWeekYear');
            addWeekYearFormatToken('GGGGG', 'isoWeekYear');

            // ALIASES

            addUnitAlias('weekYear', 'gg');
            addUnitAlias('isoWeekYear', 'GG');

            // PRIORITY

            addUnitPriority('weekYear', 1);
            addUnitPriority('isoWeekYear', 1);


            // PARSING

            addRegexToken('G', matchSigned);
            addRegexToken('g', matchSigned);
            addRegexToken('GG', match1to2, match2);
            addRegexToken('gg', match1to2, match2);
            addRegexToken('GGGG', match1to4, match4);
            addRegexToken('gggg', match1to4, match4);
            addRegexToken('GGGGG', match1to6, match6);
            addRegexToken('ggggg', match1to6, match6);

            addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
              week[token.substr(0, 2)] = toInt(input);
            });

            addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
              week[token] = hooks.parseTwoDigitYear(input);
            });

            // MOMENTS

            function getSetWeekYear(input) {
              return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
            }

            function getSetISOWeekYear(input) {
              return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
            }

            function getISOWeeksInYear() {
              return weeksInYear(this.year(), 1, 4);
            }

            function getWeeksInYear() {
              var weekInfo = this.localeData()._week;
              return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
            }

            function getSetWeekYearHelper(input, week, weekday, dow, doy) {
              var weeksTarget;
              if (input == null) {
                return weekOfYear(this, dow, doy).year;
              } else {
                weeksTarget = weeksInYear(input, dow, doy);
                if (week > weeksTarget) {
                  week = weeksTarget;
                }
                return setWeekAll.call(this, input, week, weekday, dow, doy);
              }
            }

            function setWeekAll(weekYear, week, weekday, dow, doy) {
              var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

              this.year(date.getUTCFullYear());
              this.month(date.getUTCMonth());
              this.date(date.getUTCDate());
              return this;
            }

            // FORMATTING

            addFormatToken('Q', 0, 'Qo', 'quarter');

            // ALIASES

            addUnitAlias('quarter', 'Q');

            // PRIORITY

            addUnitPriority('quarter', 7);

            // PARSING

            addRegexToken('Q', match1);
            addParseToken('Q', function (input, array) {
              array[MONTH] = (toInt(input) - 1) * 3;
            });

            // MOMENTS

            function getSetQuarter(input) {
              return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
            }

            // FORMATTING

            addFormatToken('D', ['DD', 2], 'Do', 'date');

            // ALIASES

            addUnitAlias('date', 'D');

            // PRIOROITY
            addUnitPriority('date', 9);

            // PARSING

            addRegexToken('D', match1to2);
            addRegexToken('DD', match1to2, match2);
            addRegexToken('Do', function (isStrict, locale) {
              // TODO: Remove "ordinalParse" fallback in next major release.
              return isStrict ?
                (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
                locale._dayOfMonthOrdinalParseLenient;
            });

            addParseToken(['D', 'DD'], DATE);
            addParseToken('Do', function (input, array) {
              array[DATE] = toInt(input.match(match1to2)[0], 10);
            });

            // MOMENTS

            var getSetDayOfMonth = makeGetSet('Date', true);

            // FORMATTING

            addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

            // ALIASES

            addUnitAlias('dayOfYear', 'DDD');

            // PRIORITY
            addUnitPriority('dayOfYear', 4);

            // PARSING

            addRegexToken('DDD', match1to3);
            addRegexToken('DDDD', match3);
            addParseToken(['DDD', 'DDDD'], function (input, array, config) {
              config._dayOfYear = toInt(input);
            });

            // HELPERS

            // MOMENTS

            function getSetDayOfYear(input) {
              var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
              return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
            }

            // FORMATTING

            addFormatToken('m', ['mm', 2], 0, 'minute');

            // ALIASES

            addUnitAlias('minute', 'm');

            // PRIORITY

            addUnitPriority('minute', 14);

            // PARSING

            addRegexToken('m', match1to2);
            addRegexToken('mm', match1to2, match2);
            addParseToken(['m', 'mm'], MINUTE);

            // MOMENTS

            var getSetMinute = makeGetSet('Minutes', false);

            // FORMATTING

            addFormatToken('s', ['ss', 2], 0, 'second');

            // ALIASES

            addUnitAlias('second', 's');

            // PRIORITY

            addUnitPriority('second', 15);

            // PARSING

            addRegexToken('s', match1to2);
            addRegexToken('ss', match1to2, match2);
            addParseToken(['s', 'ss'], SECOND);

            // MOMENTS

            var getSetSecond = makeGetSet('Seconds', false);

            // FORMATTING

            addFormatToken('S', 0, 0, function () {
              return ~~(this.millisecond() / 100);
            });

            addFormatToken(0, ['SS', 2], 0, function () {
              return ~~(this.millisecond() / 10);
            });

            addFormatToken(0, ['SSS', 3], 0, 'millisecond');
            addFormatToken(0, ['SSSS', 4], 0, function () {
              return this.millisecond() * 10;
            });
            addFormatToken(0, ['SSSSS', 5], 0, function () {
              return this.millisecond() * 100;
            });
            addFormatToken(0, ['SSSSSS', 6], 0, function () {
              return this.millisecond() * 1000;
            });
            addFormatToken(0, ['SSSSSSS', 7], 0, function () {
              return this.millisecond() * 10000;
            });
            addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
              return this.millisecond() * 100000;
            });
            addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
              return this.millisecond() * 1000000;
            });


            // ALIASES

            addUnitAlias('millisecond', 'ms');

            // PRIORITY

            addUnitPriority('millisecond', 16);

            // PARSING

            addRegexToken('S', match1to3, match1);
            addRegexToken('SS', match1to3, match2);
            addRegexToken('SSS', match1to3, match3);

            var token;
            for (token = 'SSSS'; token.length <= 9; token += 'S') {
              addRegexToken(token, matchUnsigned);
            }

            function parseMs(input, array) {
              array[MILLISECOND] = toInt(('0.' + input) * 1000);
            }

            for (token = 'S'; token.length <= 9; token += 'S') {
              addParseToken(token, parseMs);
            }
            // MOMENTS

            var getSetMillisecond = makeGetSet('Milliseconds', false);

            // FORMATTING

            addFormatToken('z', 0, 0, 'zoneAbbr');
            addFormatToken('zz', 0, 0, 'zoneName');

            // MOMENTS

            function getZoneAbbr() {
              return this._isUTC ? 'UTC' : '';
            }

            function getZoneName() {
              return this._isUTC ? 'Coordinated Universal Time' : '';
            }

            var proto = Moment.prototype;

            proto.add = add;
            proto.calendar = calendar$1;
            proto.clone = clone;
            proto.diff = diff;
            proto.endOf = endOf;
            proto.format = format;
            proto.from = from;
            proto.fromNow = fromNow;
            proto.to = to;
            proto.toNow = toNow;
            proto.get = stringGet;
            proto.invalidAt = invalidAt;
            proto.isAfter = isAfter;
            proto.isBefore = isBefore;
            proto.isBetween = isBetween;
            proto.isSame = isSame;
            proto.isSameOrAfter = isSameOrAfter;
            proto.isSameOrBefore = isSameOrBefore;
            proto.isValid = isValid$2;
            proto.lang = lang;
            proto.locale = locale;
            proto.localeData = localeData;
            proto.max = prototypeMax;
            proto.min = prototypeMin;
            proto.parsingFlags = parsingFlags;
            proto.set = stringSet;
            proto.startOf = startOf;
            proto.subtract = subtract;
            proto.toArray = toArray;
            proto.toObject = toObject;
            proto.toDate = toDate;
            proto.toISOString = toISOString;
            proto.inspect = inspect;
            proto.toJSON = toJSON;
            proto.toString = toString;
            proto.unix = unix;
            proto.valueOf = valueOf;
            proto.creationData = creationData;

            // Year
            proto.year = getSetYear;
            proto.isLeapYear = getIsLeapYear;

            // Week Year
            proto.weekYear = getSetWeekYear;
            proto.isoWeekYear = getSetISOWeekYear;

            // Quarter
            proto.quarter = proto.quarters = getSetQuarter;

            // Month
            proto.month = getSetMonth;
            proto.daysInMonth = getDaysInMonth;

            // Week
            proto.week = proto.weeks = getSetWeek;
            proto.isoWeek = proto.isoWeeks = getSetISOWeek;
            proto.weeksInYear = getWeeksInYear;
            proto.isoWeeksInYear = getISOWeeksInYear;

            // Day
            proto.date = getSetDayOfMonth;
            proto.day = proto.days = getSetDayOfWeek;
            proto.weekday = getSetLocaleDayOfWeek;
            proto.isoWeekday = getSetISODayOfWeek;
            proto.dayOfYear = getSetDayOfYear;

            // Hour
            proto.hour = proto.hours = getSetHour;

            // Minute
            proto.minute = proto.minutes = getSetMinute;

            // Second
            proto.second = proto.seconds = getSetSecond;

            // Millisecond
            proto.millisecond = proto.milliseconds = getSetMillisecond;

            // Offset
            proto.utcOffset = getSetOffset;
            proto.utc = setOffsetToUTC;
            proto.local = setOffsetToLocal;
            proto.parseZone = setOffsetToParsedOffset;
            proto.hasAlignedHourOffset = hasAlignedHourOffset;
            proto.isDST = isDaylightSavingTime;
            proto.isLocal = isLocal;
            proto.isUtcOffset = isUtcOffset;
            proto.isUtc = isUtc;
            proto.isUTC = isUtc;

            // Timezone
            proto.zoneAbbr = getZoneAbbr;
            proto.zoneName = getZoneName;

            // Deprecations
            proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
            proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
            proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
            proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
            proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

            function createUnix(input) {
              return createLocal(input * 1000);
            }

            function createInZone() {
              return createLocal.apply(null, arguments).parseZone();
            }

            function preParsePostFormat(string) {
              return string;
            }

            var proto$1 = Locale.prototype;

            proto$1.calendar = calendar;
            proto$1.longDateFormat = longDateFormat;
            proto$1.invalidDate = invalidDate;
            proto$1.ordinal = ordinal;
            proto$1.preparse = preParsePostFormat;
            proto$1.postformat = preParsePostFormat;
            proto$1.relativeTime = relativeTime;
            proto$1.pastFuture = pastFuture;
            proto$1.set = set;

            // Month
            proto$1.months = localeMonths;
            proto$1.monthsShort = localeMonthsShort;
            proto$1.monthsParse = localeMonthsParse;
            proto$1.monthsRegex = monthsRegex;
            proto$1.monthsShortRegex = monthsShortRegex;

            // Week
            proto$1.week = localeWeek;
            proto$1.firstDayOfYear = localeFirstDayOfYear;
            proto$1.firstDayOfWeek = localeFirstDayOfWeek;

            // Day of Week
            proto$1.weekdays = localeWeekdays;
            proto$1.weekdaysMin = localeWeekdaysMin;
            proto$1.weekdaysShort = localeWeekdaysShort;
            proto$1.weekdaysParse = localeWeekdaysParse;

            proto$1.weekdaysRegex = weekdaysRegex;
            proto$1.weekdaysShortRegex = weekdaysShortRegex;
            proto$1.weekdaysMinRegex = weekdaysMinRegex;

            // Hours
            proto$1.isPM = localeIsPM;
            proto$1.meridiem = localeMeridiem;

            function get$1(format, index, field, setter) {
              var locale = getLocale();
              var utc = createUTC().set(setter, index);
              return locale[field](utc, format);
            }

            function listMonthsImpl(format, index, field) {
              if (isNumber(format)) {
                index = format;
                format = undefined;
              }

              format = format || '';

              if (index != null) {
                return get$1(format, index, field, 'month');
              }

              var i;
              var out = [];
              for (i = 0; i < 12; i++) {
                out[i] = get$1(format, i, field, 'month');
              }
              return out;
            }

            // ()
            // (5)
            // (fmt, 5)
            // (fmt)
            // (true)
            // (true, 5)
            // (true, fmt, 5)
            // (true, fmt)
            function listWeekdaysImpl(localeSorted, format, index, field) {
              if (typeof localeSorted === 'boolean') {
                if (isNumber(format)) {
                  index = format;
                  format = undefined;
                }

                format = format || '';
              } else {
                format = localeSorted;
                index = format;
                localeSorted = false;

                if (isNumber(format)) {
                  index = format;
                  format = undefined;
                }

                format = format || '';
              }

              var locale = getLocale(),
                shift = localeSorted ? locale._week.dow : 0;

              if (index != null) {
                return get$1(format, (index + shift) % 7, field, 'day');
              }

              var i;
              var out = [];
              for (i = 0; i < 7; i++) {
                out[i] = get$1(format, (i + shift) % 7, field, 'day');
              }
              return out;
            }

            function listMonths(format, index) {
              return listMonthsImpl(format, index, 'months');
            }

            function listMonthsShort(format, index) {
              return listMonthsImpl(format, index, 'monthsShort');
            }

            function listWeekdays(localeSorted, format, index) {
              return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
            }

            function listWeekdaysShort(localeSorted, format, index) {
              return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
            }

            function listWeekdaysMin(localeSorted, format, index) {
              return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
            }

            getSetGlobalLocale('en', {
              dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
              ordinal: function (number) {
                var b = number % 10,
                  output = (toInt(number % 100 / 10) === 1) ? 'th' :
                  (b === 1) ? 'st' :
                  (b === 2) ? 'nd' :
                  (b === 3) ? 'rd' : 'th';
                return number + output;
              }
            });

            // Side effect imports
            hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
            hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

            var mathAbs = Math.abs;

            function abs() {
              var data = this._data;

              this._milliseconds = mathAbs(this._milliseconds);
              this._days = mathAbs(this._days);
              this._months = mathAbs(this._months);

              data.milliseconds = mathAbs(data.milliseconds);
              data.seconds = mathAbs(data.seconds);
              data.minutes = mathAbs(data.minutes);
              data.hours = mathAbs(data.hours);
              data.months = mathAbs(data.months);
              data.years = mathAbs(data.years);

              return this;
            }

            function addSubtract$1(duration, input, value, direction) {
              var other = createDuration(input, value);

              duration._milliseconds += direction * other._milliseconds;
              duration._days += direction * other._days;
              duration._months += direction * other._months;

              return duration._bubble();
            }

            // supports only 2.0-style add(1, 's') or add(duration)
            function add$1(input, value) {
              return addSubtract$1(this, input, value, 1);
            }

            // supports only 2.0-style subtract(1, 's') or subtract(duration)
            function subtract$1(input, value) {
              return addSubtract$1(this, input, value, -1);
            }

            function absCeil(number) {
              if (number < 0) {
                return Math.floor(number);
              } else {
                return Math.ceil(number);
              }
            }

            function bubble() {
              var milliseconds = this._milliseconds;
              var days = this._days;
              var months = this._months;
              var data = this._data;
              var seconds, minutes, hours, years, monthsFromDays;

              // if we have a mix of positive and negative values, bubble down first
              // check: https://github.com/moment/moment/issues/2166
              if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                  (milliseconds <= 0 && days <= 0 && months <= 0))) {
                milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                days = 0;
                months = 0;
              }

              // The following code bubbles up values, see the tests for
              // examples of what that means.
              data.milliseconds = milliseconds % 1000;

              seconds = absFloor(milliseconds / 1000);
              data.seconds = seconds % 60;

              minutes = absFloor(seconds / 60);
              data.minutes = minutes % 60;

              hours = absFloor(minutes / 60);
              data.hours = hours % 24;

              days += absFloor(hours / 24);

              // convert days to months
              monthsFromDays = absFloor(daysToMonths(days));
              months += monthsFromDays;
              days -= absCeil(monthsToDays(monthsFromDays));

              // 12 months -> 1 year
              years = absFloor(months / 12);
              months %= 12;

              data.days = days;
              data.months = months;
              data.years = years;

              return this;
            }

            function daysToMonths(days) {
              // 400 years have 146097 days (taking into account leap year rules)
              // 400 years have 12 months === 4800
              return days * 4800 / 146097;
            }

            function monthsToDays(months) {
              // the reverse of daysToMonths
              return months * 146097 / 4800;
            }

            function as(units) {
              if (!this.isValid()) {
                return NaN;
              }
              var days;
              var months;
              var milliseconds = this._milliseconds;

              units = normalizeUnits(units);

              if (units === 'month' || units === 'year') {
                days = this._days + milliseconds / 864e5;
                months = this._months + daysToMonths(days);
                return units === 'month' ? months : months / 12;
              } else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + Math.round(monthsToDays(this._months));
                switch (units) {
                case 'week':
                  return days / 7 + milliseconds / 6048e5;
                case 'day':
                  return days + milliseconds / 864e5;
                case 'hour':
                  return days * 24 + milliseconds / 36e5;
                case 'minute':
                  return days * 1440 + milliseconds / 6e4;
                case 'second':
                  return days * 86400 + milliseconds / 1000;
                  // Math.floor prevents floating point math errors here
                case 'millisecond':
                  return Math.floor(days * 864e5) + milliseconds;
                default:
                  throw new Error('Unknown unit ' + units);
                }
              }
            }

            // TODO: Use this.as('ms')?
            function valueOf$1() {
              if (!this.isValid()) {
                return NaN;
              }
              return (
                this._milliseconds +
                this._days * 864e5 +
                (this._months % 12) * 2592e6 +
                toInt(this._months / 12) * 31536e6
              );
            }

            function makeAs(alias) {
              return function () {
                return this.as(alias);
              };
            }

            var asMilliseconds = makeAs('ms');
            var asSeconds = makeAs('s');
            var asMinutes = makeAs('m');
            var asHours = makeAs('h');
            var asDays = makeAs('d');
            var asWeeks = makeAs('w');
            var asMonths = makeAs('M');
            var asYears = makeAs('y');

            function get$2(units) {
              units = normalizeUnits(units);
              return this.isValid() ? this[units + 's']() : NaN;
            }

            function makeGetter(name) {
              return function () {
                return this.isValid() ? this._data[name] : NaN;
              };
            }

            var milliseconds = makeGetter('milliseconds');
            var seconds = makeGetter('seconds');
            var minutes = makeGetter('minutes');
            var hours = makeGetter('hours');
            var days = makeGetter('days');
            var months = makeGetter('months');
            var years = makeGetter('years');

            function weeks() {
              return absFloor(this.days() / 7);
            }

            var round = Math.round;
            var thresholds = {
              ss: 44, // a few seconds to seconds
              s: 45, // seconds to minute
              m: 45, // minutes to hour
              h: 22, // hours to day
              d: 26, // days to month
              M: 11 // months to year
            };

            // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
            function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
              return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
            }

            function relativeTime$1(posNegDuration, withoutSuffix, locale) {
              var duration = createDuration(posNegDuration).abs();
              var seconds = round(duration.as('s'));
              var minutes = round(duration.as('m'));
              var hours = round(duration.as('h'));
              var days = round(duration.as('d'));
              var months = round(duration.as('M'));
              var years = round(duration.as('y'));

              var a = seconds <= thresholds.ss && ['s', seconds] ||
                seconds < thresholds.s && ['ss', seconds] ||
                minutes <= 1 && ['m'] ||
                minutes < thresholds.m && ['mm', minutes] ||
                hours <= 1 && ['h'] ||
                hours < thresholds.h && ['hh', hours] ||
                days <= 1 && ['d'] ||
                days < thresholds.d && ['dd', days] ||
                months <= 1 && ['M'] ||
                months < thresholds.M && ['MM', months] ||
                years <= 1 && ['y'] || ['yy', years];

              a[2] = withoutSuffix;
              a[3] = +posNegDuration > 0;
              a[4] = locale;
              return substituteTimeAgo.apply(null, a);
            }

            // This function allows you to set the rounding function for relative time strings
            function getSetRelativeTimeRounding(roundingFunction) {
              if (roundingFunction === undefined) {
                return round;
              }
              if (typeof (roundingFunction) === 'function') {
                round = roundingFunction;
                return true;
              }
              return false;
            }

            // This function allows you to set a threshold for relative time strings
            function getSetRelativeTimeThreshold(threshold, limit) {
              if (thresholds[threshold] === undefined) {
                return false;
              }
              if (limit === undefined) {
                return thresholds[threshold];
              }
              thresholds[threshold] = limit;
              if (threshold === 's') {
                thresholds.ss = limit - 1;
              }
              return true;
            }

            function humanize(withSuffix) {
              if (!this.isValid()) {
                return this.localeData().invalidDate();
              }

              var locale = this.localeData();
              var output = relativeTime$1(this, !withSuffix, locale);

              if (withSuffix) {
                output = locale.pastFuture(+this, output);
              }

              return locale.postformat(output);
            }

            var abs$1 = Math.abs;

            function toISOString$1() {
              // for ISO strings we do not use the normal bubbling rules:
              //  * milliseconds bubble up until they become hours
              //  * days do not bubble at all
              //  * months bubble up until they become years
              // This is because there is no context-free conversion between hours and days
              // (think of clock changes)
              // and also not between days and months (28-31 days per month)
              if (!this.isValid()) {
                return this.localeData().invalidDate();
              }

              var seconds = abs$1(this._milliseconds) / 1000;
              var days = abs$1(this._days);
              var months = abs$1(this._months);
              var minutes, hours, years;

              // 3600 seconds -> 60 minutes -> 1 hour
              minutes = absFloor(seconds / 60);
              hours = absFloor(minutes / 60);
              seconds %= 60;
              minutes %= 60;

              // 12 months -> 1 year
              years = absFloor(months / 12);
              months %= 12;


              // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
              var Y = years;
              var M = months;
              var D = days;
              var h = hours;
              var m = minutes;
              var s = seconds;
              var total = this.asSeconds();

              if (!total) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
              }

              return (total < 0 ? '-' : '') +
                'P' +
                (Y ? Y + 'Y' : '') +
                (M ? M + 'M' : '') +
                (D ? D + 'D' : '') +
                ((h || m || s) ? 'T' : '') +
                (h ? h + 'H' : '') +
                (m ? m + 'M' : '') +
                (s ? s + 'S' : '');
            }

            var proto$2 = Duration.prototype;

            proto$2.isValid = isValid$1;
            proto$2.abs = abs;
            proto$2.add = add$1;
            proto$2.subtract = subtract$1;
            proto$2.as = as;
            proto$2.asMilliseconds = asMilliseconds;
            proto$2.asSeconds = asSeconds;
            proto$2.asMinutes = asMinutes;
            proto$2.asHours = asHours;
            proto$2.asDays = asDays;
            proto$2.asWeeks = asWeeks;
            proto$2.asMonths = asMonths;
            proto$2.asYears = asYears;
            proto$2.valueOf = valueOf$1;
            proto$2._bubble = bubble;
            proto$2.get = get$2;
            proto$2.milliseconds = milliseconds;
            proto$2.seconds = seconds;
            proto$2.minutes = minutes;
            proto$2.hours = hours;
            proto$2.days = days;
            proto$2.weeks = weeks;
            proto$2.months = months;
            proto$2.years = years;
            proto$2.humanize = humanize;
            proto$2.toISOString = toISOString$1;
            proto$2.toString = toISOString$1;
            proto$2.toJSON = toISOString$1;
            proto$2.locale = locale;
            proto$2.localeData = localeData;

            // Deprecations
            proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
            proto$2.lang = lang;

            // Side effect imports

            // FORMATTING

            addFormatToken('X', 0, 0, 'unix');
            addFormatToken('x', 0, 0, 'valueOf');

            // PARSING

            addRegexToken('x', matchSigned);
            addRegexToken('X', matchTimestamp);
            addParseToken('X', function (input, array, config) {
              config._d = new Date(parseFloat(input, 10) * 1000);
            });
            addParseToken('x', function (input, array, config) {
              config._d = new Date(toInt(input));
            });

            // Side effect imports


            hooks.version = '2.18.1';

            setHookCallback(createLocal);

            hooks.fn = proto;
            hooks.min = min;
            hooks.max = max;
            hooks.now = now;
            hooks.utc = createUTC;
            hooks.unix = createUnix;
            hooks.months = listMonths;
            hooks.isDate = isDate;
            hooks.locale = getSetGlobalLocale;
            hooks.invalid = createInvalid;
            hooks.duration = createDuration;
            hooks.isMoment = isMoment;
            hooks.weekdays = listWeekdays;
            hooks.parseZone = createInZone;
            hooks.localeData = getLocale;
            hooks.isDuration = isDuration;
            hooks.monthsShort = listMonthsShort;
            hooks.weekdaysMin = listWeekdaysMin;
            hooks.defineLocale = defineLocale;
            hooks.updateLocale = updateLocale;
            hooks.locales = listLocales;
            hooks.weekdaysShort = listWeekdaysShort;
            hooks.normalizeUnits = normalizeUnits;
            hooks.relativeTimeRounding = getSetRelativeTimeRounding;
            hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
            hooks.calendarFormat = getCalendarFormat;
            hooks.prototype = proto;

            return hooks;

          })));

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(70)(module)))

        /***/
      }),
      /* 278 */
      /***/
      (function (module, exports, __webpack_require__) {

        var map = {
          "./af": 279,
          "./af.js": 279,
          "./ar": 280,
          "./ar-dz": 281,
          "./ar-dz.js": 281,
          "./ar-kw": 282,
          "./ar-kw.js": 282,
          "./ar-ly": 283,
          "./ar-ly.js": 283,
          "./ar-ma": 284,
          "./ar-ma.js": 284,
          "./ar-sa": 285,
          "./ar-sa.js": 285,
          "./ar-tn": 286,
          "./ar-tn.js": 286,
          "./ar.js": 280,
          "./az": 287,
          "./az.js": 287,
          "./be": 288,
          "./be.js": 288,
          "./bg": 289,
          "./bg.js": 289,
          "./bn": 290,
          "./bn.js": 290,
          "./bo": 291,
          "./bo.js": 291,
          "./br": 292,
          "./br.js": 292,
          "./bs": 293,
          "./bs.js": 293,
          "./ca": 294,
          "./ca.js": 294,
          "./cs": 295,
          "./cs.js": 295,
          "./cv": 296,
          "./cv.js": 296,
          "./cy": 297,
          "./cy.js": 297,
          "./da": 298,
          "./da.js": 298,
          "./de": 299,
          "./de-at": 300,
          "./de-at.js": 300,
          "./de-ch": 301,
          "./de-ch.js": 301,
          "./de.js": 299,
          "./dv": 302,
          "./dv.js": 302,
          "./el": 303,
          "./el.js": 303,
          "./en-au": 304,
          "./en-au.js": 304,
          "./en-ca": 305,
          "./en-ca.js": 305,
          "./en-gb": 306,
          "./en-gb.js": 306,
          "./en-ie": 307,
          "./en-ie.js": 307,
          "./en-nz": 308,
          "./en-nz.js": 308,
          "./eo": 309,
          "./eo.js": 309,
          "./es": 310,
          "./es-do": 311,
          "./es-do.js": 311,
          "./es.js": 310,
          "./et": 312,
          "./et.js": 312,
          "./eu": 313,
          "./eu.js": 313,
          "./fa": 314,
          "./fa.js": 314,
          "./fi": 315,
          "./fi.js": 315,
          "./fo": 316,
          "./fo.js": 316,
          "./fr": 317,
          "./fr-ca": 318,
          "./fr-ca.js": 318,
          "./fr-ch": 319,
          "./fr-ch.js": 319,
          "./fr.js": 317,
          "./fy": 320,
          "./fy.js": 320,
          "./gd": 321,
          "./gd.js": 321,
          "./gl": 322,
          "./gl.js": 322,
          "./gom-latn": 323,
          "./gom-latn.js": 323,
          "./he": 324,
          "./he.js": 324,
          "./hi": 325,
          "./hi.js": 325,
          "./hr": 326,
          "./hr.js": 326,
          "./hu": 327,
          "./hu.js": 327,
          "./hy-am": 328,
          "./hy-am.js": 328,
          "./id": 329,
          "./id.js": 329,
          "./is": 330,
          "./is.js": 330,
          "./it": 331,
          "./it.js": 331,
          "./ja": 332,
          "./ja.js": 332,
          "./jv": 333,
          "./jv.js": 333,
          "./ka": 334,
          "./ka.js": 334,
          "./kk": 335,
          "./kk.js": 335,
          "./km": 336,
          "./km.js": 336,
          "./kn": 337,
          "./kn.js": 337,
          "./ko": 338,
          "./ko.js": 338,
          "./ky": 339,
          "./ky.js": 339,
          "./lb": 340,
          "./lb.js": 340,
          "./lo": 341,
          "./lo.js": 341,
          "./lt": 342,
          "./lt.js": 342,
          "./lv": 343,
          "./lv.js": 343,
          "./me": 344,
          "./me.js": 344,
          "./mi": 345,
          "./mi.js": 345,
          "./mk": 346,
          "./mk.js": 346,
          "./ml": 347,
          "./ml.js": 347,
          "./mr": 348,
          "./mr.js": 348,
          "./ms": 349,
          "./ms-my": 350,
          "./ms-my.js": 350,
          "./ms.js": 349,
          "./my": 351,
          "./my.js": 351,
          "./nb": 352,
          "./nb.js": 352,
          "./ne": 353,
          "./ne.js": 353,
          "./nl": 354,
          "./nl-be": 355,
          "./nl-be.js": 355,
          "./nl.js": 354,
          "./nn": 356,
          "./nn.js": 356,
          "./pa-in": 357,
          "./pa-in.js": 357,
          "./pl": 358,
          "./pl.js": 358,
          "./pt": 359,
          "./pt-br": 360,
          "./pt-br.js": 360,
          "./pt.js": 359,
          "./ro": 361,
          "./ro.js": 361,
          "./ru": 362,
          "./ru.js": 362,
          "./sd": 363,
          "./sd.js": 363,
          "./se": 364,
          "./se.js": 364,
          "./si": 365,
          "./si.js": 365,
          "./sk": 366,
          "./sk.js": 366,
          "./sl": 367,
          "./sl.js": 367,
          "./sq": 368,
          "./sq.js": 368,
          "./sr": 369,
          "./sr-cyrl": 370,
          "./sr-cyrl.js": 370,
          "./sr.js": 369,
          "./ss": 371,
          "./ss.js": 371,
          "./sv": 372,
          "./sv.js": 372,
          "./sw": 373,
          "./sw.js": 373,
          "./ta": 374,
          "./ta.js": 374,
          "./te": 375,
          "./te.js": 375,
          "./tet": 376,
          "./tet.js": 376,
          "./th": 377,
          "./th.js": 377,
          "./tl-ph": 378,
          "./tl-ph.js": 378,
          "./tlh": 379,
          "./tlh.js": 379,
          "./tr": 380,
          "./tr.js": 380,
          "./tzl": 381,
          "./tzl.js": 381,
          "./tzm": 382,
          "./tzm-latn": 383,
          "./tzm-latn.js": 383,
          "./tzm.js": 382,
          "./uk": 384,
          "./uk.js": 384,
          "./ur": 385,
          "./ur.js": 385,
          "./uz": 386,
          "./uz-latn": 387,
          "./uz-latn.js": 387,
          "./uz.js": 386,
          "./vi": 388,
          "./vi.js": 388,
          "./x-pseudo": 389,
          "./x-pseudo.js": 389,
          "./yo": 390,
          "./yo.js": 390,
          "./zh-cn": 391,
          "./zh-cn.js": 391,
          "./zh-hk": 392,
          "./zh-hk.js": 392,
          "./zh-tw": 393,
          "./zh-tw.js": 393
        };

        function webpackContext(req) {
          return __webpack_require__(webpackContextResolve(req));
        };

        function webpackContextResolve(req) {
          return map[req] || (function () { throw new Error("Cannot find module '" + req + "'.") }());
        };
        webpackContext.keys = function webpackContextKeys() {
          return Object.keys(map);
        };
        webpackContext.resolve = webpackContextResolve;
        module.exports = webpackContext;
        webpackContext.id = 278;


        /***/
      }),
      /* 279 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Afrikaans [af]
        //! author : Werner Mollentze : https://github.com/wernerm

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var af = moment.defineLocale('af', {
            months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
            monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
            weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
            weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
            weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
            meridiemParse: /vm|nm/i,
            isPM: function (input) {
              return /^nm$/i.test(input);
            },
            meridiem: function (hours, minutes, isLower) {
              if (hours < 12) {
                return isLower ? 'vm' : 'VM';
              } else {
                return isLower ? 'nm' : 'NM';
              }
            },
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Vandag om] LT',
              nextDay: '[Môre om] LT',
              nextWeek: 'dddd [om] LT',
              lastDay: '[Gister om] LT',
              lastWeek: '[Laas] dddd [om] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'oor %s',
              past: '%s gelede',
              s: '\'n paar sekondes',
              m: '\'n minuut',
              mm: '%d minute',
              h: '\'n uur',
              hh: '%d ure',
              d: '\'n dag',
              dd: '%d dae',
              M: '\'n maand',
              MM: '%d maande',
              y: '\'n jaar',
              yy: '%d jaar'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
            ordinal: function (number) {
              return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
            },
            week: {
              dow: 1, // Maandag is die eerste dag van die week.
              doy: 4 // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
            }
          });

          return af;

        })));


        /***/
      }),
      /* 280 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Arabic [ar]
        //! author : Abdel Said: https://github.com/abdelsaid
        //! author : Ahmed Elkhatib
        //! author : forabi https://github.com/forabi

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var symbolMap = {
            '1': '١',
            '2': '٢',
            '3': '٣',
            '4': '٤',
            '5': '٥',
            '6': '٦',
            '7': '٧',
            '8': '٨',
            '9': '٩',
            '0': '٠'
          };
          var numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0'
          };
          var pluralForm = function (n) {
            return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
          };
          var plurals = {
            s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
            m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
            h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
            d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
            M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
            y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
          };
          var pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
              var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];
              if (f === 2) {
                str = str[withoutSuffix ? 0 : 1];
              }
              return str.replace(/%d/i, number);
            };
          };
          var months = [
            'كانون الثاني يناير',
            'شباط فبراير',
            'آذار مارس',
            'نيسان أبريل',
            'أيار مايو',
            'حزيران يونيو',
            'تموز يوليو',
            'آب أغسطس',
            'أيلول سبتمبر',
            'تشرين الأول أكتوبر',
            'تشرين الثاني نوفمبر',
            'كانون الأول ديسمبر'
          ];

          var ar = moment.defineLocale('ar', {
            months: months,
            monthsShort: months,
            weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
            weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
            weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'D/\u200FM/\u200FYYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            meridiemParse: /ص|م/,
            isPM: function (input) {
              return 'م' === input;
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 12) {
                return 'ص';
              } else {
                return 'م';
              }
            },
            calendar: {
              sameDay: '[اليوم عند الساعة] LT',
              nextDay: '[غدًا عند الساعة] LT',
              nextWeek: 'dddd [عند الساعة] LT',
              lastDay: '[أمس عند الساعة] LT',
              lastWeek: 'dddd [عند الساعة] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'بعد %s',
              past: 'منذ %s',
              s: pluralize('s'),
              m: pluralize('m'),
              mm: pluralize('m'),
              h: pluralize('h'),
              hh: pluralize('h'),
              d: pluralize('d'),
              dd: pluralize('d'),
              M: pluralize('M'),
              MM: pluralize('M'),
              y: pluralize('y'),
              yy: pluralize('y')
            },
            preparse: function (string) {
              return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return numberMap[match];
              }).replace(/،/g, ',');
            },
            postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                return symbolMap[match];
              }).replace(/,/g, '،');
            },
            week: {
              dow: 6, // Saturday is the first day of the week.
              doy: 12 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return ar;

        })));


        /***/
      }),
      /* 281 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Arabic (Algeria) [ar-dz]
        //! author : Noureddine LOUAHEDJ : https://github.com/noureddineme

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var arDz = moment.defineLocale('ar-dz', {
            months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
            monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
            weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
            weekdaysShort: 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
            weekdaysMin: 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[اليوم على الساعة] LT',
              nextDay: '[غدا على الساعة] LT',
              nextWeek: 'dddd [على الساعة] LT',
              lastDay: '[أمس على الساعة] LT',
              lastWeek: 'dddd [على الساعة] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'في %s',
              past: 'منذ %s',
              s: 'ثوان',
              m: 'دقيقة',
              mm: '%d دقائق',
              h: 'ساعة',
              hh: '%d ساعات',
              d: 'يوم',
              dd: '%d أيام',
              M: 'شهر',
              MM: '%d أشهر',
              y: 'سنة',
              yy: '%d سنوات'
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 4 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return arDz;

        })));


        /***/
      }),
      /* 282 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Arabic (Kuwait) [ar-kw]
        //! author : Nusret Parlak: https://github.com/nusretparlak

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var arKw = moment.defineLocale('ar-kw', {
            months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
            monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
            weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
            weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
            weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[اليوم على الساعة] LT',
              nextDay: '[غدا على الساعة] LT',
              nextWeek: 'dddd [على الساعة] LT',
              lastDay: '[أمس على الساعة] LT',
              lastWeek: 'dddd [على الساعة] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'في %s',
              past: 'منذ %s',
              s: 'ثوان',
              m: 'دقيقة',
              mm: '%d دقائق',
              h: 'ساعة',
              hh: '%d ساعات',
              d: 'يوم',
              dd: '%d أيام',
              M: 'شهر',
              MM: '%d أشهر',
              y: 'سنة',
              yy: '%d سنوات'
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 12 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return arKw;

        })));


        /***/
      }),
      /* 283 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Arabic (Lybia) [ar-ly]
        //! author : Ali Hmer: https://github.com/kikoanis

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var symbolMap = {
            '1': '1',
            '2': '2',
            '3': '3',
            '4': '4',
            '5': '5',
            '6': '6',
            '7': '7',
            '8': '8',
            '9': '9',
            '0': '0'
          };
          var pluralForm = function (n) {
            return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
          };
          var plurals = {
            s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
            m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
            h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
            d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
            M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
            y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
          };
          var pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
              var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];
              if (f === 2) {
                str = str[withoutSuffix ? 0 : 1];
              }
              return str.replace(/%d/i, number);
            };
          };
          var months = [
            'يناير',
            'فبراير',
            'مارس',
            'أبريل',
            'مايو',
            'يونيو',
            'يوليو',
            'أغسطس',
            'سبتمبر',
            'أكتوبر',
            'نوفمبر',
            'ديسمبر'
          ];

          var arLy = moment.defineLocale('ar-ly', {
            months: months,
            monthsShort: months,
            weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
            weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
            weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'D/\u200FM/\u200FYYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            meridiemParse: /ص|م/,
            isPM: function (input) {
              return 'م' === input;
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 12) {
                return 'ص';
              } else {
                return 'م';
              }
            },
            calendar: {
              sameDay: '[اليوم عند الساعة] LT',
              nextDay: '[غدًا عند الساعة] LT',
              nextWeek: 'dddd [عند الساعة] LT',
              lastDay: '[أمس عند الساعة] LT',
              lastWeek: 'dddd [عند الساعة] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'بعد %s',
              past: 'منذ %s',
              s: pluralize('s'),
              m: pluralize('m'),
              mm: pluralize('m'),
              h: pluralize('h'),
              hh: pluralize('h'),
              d: pluralize('d'),
              dd: pluralize('d'),
              M: pluralize('M'),
              MM: pluralize('M'),
              y: pluralize('y'),
              yy: pluralize('y')
            },
            preparse: function (string) {
              return string.replace(/\u200f/g, '').replace(/،/g, ',');
            },
            postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                return symbolMap[match];
              }).replace(/,/g, '،');
            },
            week: {
              dow: 6, // Saturday is the first day of the week.
              doy: 12 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return arLy;

        })));


        /***/
      }),
      /* 284 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Arabic (Morocco) [ar-ma]
        //! author : ElFadili Yassine : https://github.com/ElFadiliY
        //! author : Abdel Said : https://github.com/abdelsaid

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var arMa = moment.defineLocale('ar-ma', {
            months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
            monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
            weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
            weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
            weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[اليوم على الساعة] LT',
              nextDay: '[غدا على الساعة] LT',
              nextWeek: 'dddd [على الساعة] LT',
              lastDay: '[أمس على الساعة] LT',
              lastWeek: 'dddd [على الساعة] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'في %s',
              past: 'منذ %s',
              s: 'ثوان',
              m: 'دقيقة',
              mm: '%d دقائق',
              h: 'ساعة',
              hh: '%d ساعات',
              d: 'يوم',
              dd: '%d أيام',
              M: 'شهر',
              MM: '%d أشهر',
              y: 'سنة',
              yy: '%d سنوات'
            },
            week: {
              dow: 6, // Saturday is the first day of the week.
              doy: 12 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return arMa;

        })));


        /***/
      }),
      /* 285 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Arabic (Saudi Arabia) [ar-sa]
        //! author : Suhail Alkowaileet : https://github.com/xsoh

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var symbolMap = {
            '1': '١',
            '2': '٢',
            '3': '٣',
            '4': '٤',
            '5': '٥',
            '6': '٦',
            '7': '٧',
            '8': '٨',
            '9': '٩',
            '0': '٠'
          };
          var numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0'
          };

          var arSa = moment.defineLocale('ar-sa', {
            months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
            monthsShort: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
            weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
            weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
            weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            meridiemParse: /ص|م/,
            isPM: function (input) {
              return 'م' === input;
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 12) {
                return 'ص';
              } else {
                return 'م';
              }
            },
            calendar: {
              sameDay: '[اليوم على الساعة] LT',
              nextDay: '[غدا على الساعة] LT',
              nextWeek: 'dddd [على الساعة] LT',
              lastDay: '[أمس على الساعة] LT',
              lastWeek: 'dddd [على الساعة] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'في %s',
              past: 'منذ %s',
              s: 'ثوان',
              m: 'دقيقة',
              mm: '%d دقائق',
              h: 'ساعة',
              hh: '%d ساعات',
              d: 'يوم',
              dd: '%d أيام',
              M: 'شهر',
              MM: '%d أشهر',
              y: 'سنة',
              yy: '%d سنوات'
            },
            preparse: function (string) {
              return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return numberMap[match];
              }).replace(/،/g, ',');
            },
            postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                return symbolMap[match];
              }).replace(/,/g, '،');
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return arSa;

        })));


        /***/
      }),
      /* 286 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale  :  Arabic (Tunisia) [ar-tn]
        //! author : Nader Toukabri : https://github.com/naderio

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var arTn = moment.defineLocale('ar-tn', {
            months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
            monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
            weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
            weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
            weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[اليوم على الساعة] LT',
              nextDay: '[غدا على الساعة] LT',
              nextWeek: 'dddd [على الساعة] LT',
              lastDay: '[أمس على الساعة] LT',
              lastWeek: 'dddd [على الساعة] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'في %s',
              past: 'منذ %s',
              s: 'ثوان',
              m: 'دقيقة',
              mm: '%d دقائق',
              h: 'ساعة',
              hh: '%d ساعات',
              d: 'يوم',
              dd: '%d أيام',
              M: 'شهر',
              MM: '%d أشهر',
              y: 'سنة',
              yy: '%d سنوات'
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return arTn;

        })));


        /***/
      }),
      /* 287 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Azerbaijani [az]
        //! author : topchiyev : https://github.com/topchiyev

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var suffixes = {
            1: '-inci',
            5: '-inci',
            8: '-inci',
            70: '-inci',
            80: '-inci',
            2: '-nci',
            7: '-nci',
            20: '-nci',
            50: '-nci',
            3: '-üncü',
            4: '-üncü',
            100: '-üncü',
            6: '-ncı',
            9: '-uncu',
            10: '-uncu',
            30: '-uncu',
            60: '-ıncı',
            90: '-ıncı'
          };

          var az = moment.defineLocale('az', {
            months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
            monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
            weekdays: 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
            weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
            weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[bugün saat] LT',
              nextDay: '[sabah saat] LT',
              nextWeek: '[gələn həftə] dddd [saat] LT',
              lastDay: '[dünən] LT',
              lastWeek: '[keçən həftə] dddd [saat] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s sonra',
              past: '%s əvvəl',
              s: 'birneçə saniyyə',
              m: 'bir dəqiqə',
              mm: '%d dəqiqə',
              h: 'bir saat',
              hh: '%d saat',
              d: 'bir gün',
              dd: '%d gün',
              M: 'bir ay',
              MM: '%d ay',
              y: 'bir il',
              yy: '%d il'
            },
            meridiemParse: /gecə|səhər|gündüz|axşam/,
            isPM: function (input) {
              return /^(gündüz|axşam)$/.test(input);
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                return 'gecə';
              } else if (hour < 12) {
                return 'səhər';
              } else if (hour < 17) {
                return 'gündüz';
              } else {
                return 'axşam';
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
            ordinal: function (number) {
              if (number === 0) { // special case for zero
                return number + '-ıncı';
              }
              var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
              return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return az;

        })));


        /***/
      }),
      /* 288 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Belarusian [be]
        //! author : Dmitry Demidov : https://github.com/demidov91
        //! author: Praleska: http://praleska.pro/
        //! Author : Menelion Elensúle : https://github.com/Oire

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function plural(word, num) {
            var forms = word.split('_');
            return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
          }

          function relativeTimeWithPlural(number, withoutSuffix, key) {
            var format = {
              'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
              'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
              'dd': 'дзень_дні_дзён',
              'MM': 'месяц_месяцы_месяцаў',
              'yy': 'год_гады_гадоў'
            };
            if (key === 'm') {
              return withoutSuffix ? 'хвіліна' : 'хвіліну';
            } else if (key === 'h') {
              return withoutSuffix ? 'гадзіна' : 'гадзіну';
            } else {
              return number + ' ' + plural(format[key], +number);
            }
          }

          var be = moment.defineLocale('be', {
            months: {
              format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
              standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
            },
            monthsShort: 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
            weekdays: {
              format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
              standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
              isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
            },
            weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
            weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D MMMM YYYY г.',
              LLL: 'D MMMM YYYY г., HH:mm',
              LLLL: 'dddd, D MMMM YYYY г., HH:mm'
            },
            calendar: {
              sameDay: '[Сёння ў] LT',
              nextDay: '[Заўтра ў] LT',
              lastDay: '[Учора ў] LT',
              nextWeek: function () {
                return '[У] dddd [ў] LT';
              },
              lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                  return '[У мінулую] dddd [ў] LT';
                case 1:
                case 2:
                case 4:
                  return '[У мінулы] dddd [ў] LT';
                }
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'праз %s',
              past: '%s таму',
              s: 'некалькі секунд',
              m: relativeTimeWithPlural,
              mm: relativeTimeWithPlural,
              h: relativeTimeWithPlural,
              hh: relativeTimeWithPlural,
              d: 'дзень',
              dd: relativeTimeWithPlural,
              M: 'месяц',
              MM: relativeTimeWithPlural,
              y: 'год',
              yy: relativeTimeWithPlural
            },
            meridiemParse: /ночы|раніцы|дня|вечара/,
            isPM: function (input) {
              return /^(дня|вечара)$/.test(input);
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                return 'ночы';
              } else if (hour < 12) {
                return 'раніцы';
              } else if (hour < 17) {
                return 'дня';
              } else {
                return 'вечара';
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
            ordinal: function (number, period) {
              switch (period) {
              case 'M':
              case 'd':
              case 'DDD':
              case 'w':
              case 'W':
                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
              case 'D':
                return number + '-га';
              default:
                return number;
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return be;

        })));


        /***/
      }),
      /* 289 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Bulgarian [bg]
        //! author : Krasen Borisov : https://github.com/kraz

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var bg = moment.defineLocale('bg', {
            months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
            monthsShort: 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
            weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
            weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
            weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'D.MM.YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY H:mm',
              LLLL: 'dddd, D MMMM YYYY H:mm'
            },
            calendar: {
              sameDay: '[Днес в] LT',
              nextDay: '[Утре в] LT',
              nextWeek: 'dddd [в] LT',
              lastDay: '[Вчера в] LT',
              lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                  return '[В изминалата] dddd [в] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                  return '[В изминалия] dddd [в] LT';
                }
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'след %s',
              past: 'преди %s',
              s: 'няколко секунди',
              m: 'минута',
              mm: '%d минути',
              h: 'час',
              hh: '%d часа',
              d: 'ден',
              dd: '%d дни',
              M: 'месец',
              MM: '%d месеца',
              y: 'година',
              yy: '%d години'
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
            ordinal: function (number) {
              var lastDigit = number % 10,
                last2Digits = number % 100;
              if (number === 0) {
                return number + '-ев';
              } else if (last2Digits === 0) {
                return number + '-ен';
              } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
              } else if (lastDigit === 1) {
                return number + '-ви';
              } else if (lastDigit === 2) {
                return number + '-ри';
              } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
              } else {
                return number + '-ти';
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return bg;

        })));


        /***/
      }),
      /* 290 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Bengali [bn]
        //! author : Kaushik Gandhi : https://github.com/kaushikgandhi

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var symbolMap = {
            '1': '১',
            '2': '২',
            '3': '৩',
            '4': '৪',
            '5': '৫',
            '6': '৬',
            '7': '৭',
            '8': '৮',
            '9': '৯',
            '0': '০'
          };
          var numberMap = {
            '১': '1',
            '২': '2',
            '৩': '3',
            '৪': '4',
            '৫': '5',
            '৬': '6',
            '৭': '7',
            '৮': '8',
            '৯': '9',
            '০': '0'
          };

          var bn = moment.defineLocale('bn', {
            months: 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
            monthsShort: 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
            weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
            weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
            weekdaysMin: 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
            longDateFormat: {
              LT: 'A h:mm সময়',
              LTS: 'A h:mm:ss সময়',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY, A h:mm সময়',
              LLLL: 'dddd, D MMMM YYYY, A h:mm সময়'
            },
            calendar: {
              sameDay: '[আজ] LT',
              nextDay: '[আগামীকাল] LT',
              nextWeek: 'dddd, LT',
              lastDay: '[গতকাল] LT',
              lastWeek: '[গত] dddd, LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s পরে',
              past: '%s আগে',
              s: 'কয়েক সেকেন্ড',
              m: 'এক মিনিট',
              mm: '%d মিনিট',
              h: 'এক ঘন্টা',
              hh: '%d ঘন্টা',
              d: 'এক দিন',
              dd: '%d দিন',
              M: 'এক মাস',
              MM: '%d মাস',
              y: 'এক বছর',
              yy: '%d বছর'
            },
            preparse: function (string) {
              return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
              });
            },
            postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                return symbolMap[match];
              });
            },
            meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if ((meridiem === 'রাত' && hour >= 4) ||
                (meridiem === 'দুপুর' && hour < 5) ||
                meridiem === 'বিকাল') {
                return hour + 12;
              } else {
                return hour;
              }
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                return 'রাত';
              } else if (hour < 10) {
                return 'সকাল';
              } else if (hour < 17) {
                return 'দুপুর';
              } else if (hour < 20) {
                return 'বিকাল';
              } else {
                return 'রাত';
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return bn;

        })));


        /***/
      }),
      /* 291 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Tibetan [bo]
        //! author : Thupten N. Chakrishar : https://github.com/vajradog

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var symbolMap = {
            '1': '༡',
            '2': '༢',
            '3': '༣',
            '4': '༤',
            '5': '༥',
            '6': '༦',
            '7': '༧',
            '8': '༨',
            '9': '༩',
            '0': '༠'
          };
          var numberMap = {
            '༡': '1',
            '༢': '2',
            '༣': '3',
            '༤': '4',
            '༥': '5',
            '༦': '6',
            '༧': '7',
            '༨': '8',
            '༩': '9',
            '༠': '0'
          };

          var bo = moment.defineLocale('bo', {
            months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
            monthsShort: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
            weekdays: 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
            weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
            weekdaysMin: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
            longDateFormat: {
              LT: 'A h:mm',
              LTS: 'A h:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY, A h:mm',
              LLLL: 'dddd, D MMMM YYYY, A h:mm'
            },
            calendar: {
              sameDay: '[དི་རིང] LT',
              nextDay: '[སང་ཉིན] LT',
              nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',
              lastDay: '[ཁ་སང] LT',
              lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s ལ་',
              past: '%s སྔན་ལ',
              s: 'ལམ་སང',
              m: 'སྐར་མ་གཅིག',
              mm: '%d སྐར་མ',
              h: 'ཆུ་ཚོད་གཅིག',
              hh: '%d ཆུ་ཚོད',
              d: 'ཉིན་གཅིག',
              dd: '%d ཉིན་',
              M: 'ཟླ་བ་གཅིག',
              MM: '%d ཟླ་བ',
              y: 'ལོ་གཅིག',
              yy: '%d ལོ'
            },
            preparse: function (string) {
              return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                return numberMap[match];
              });
            },
            postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                return symbolMap[match];
              });
            },
            meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
                (meridiem === 'ཉིན་གུང' && hour < 5) ||
                meridiem === 'དགོང་དག') {
                return hour + 12;
              } else {
                return hour;
              }
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                return 'མཚན་མོ';
              } else if (hour < 10) {
                return 'ཞོགས་ཀས';
              } else if (hour < 17) {
                return 'ཉིན་གུང';
              } else if (hour < 20) {
                return 'དགོང་དག';
              } else {
                return 'མཚན་མོ';
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return bo;

        })));


        /***/
      }),
      /* 292 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Breton [br]
        //! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function relativeTimeWithMutation(number, withoutSuffix, key) {
            var format = {
              'mm': 'munutenn',
              'MM': 'miz',
              'dd': 'devezh'
            };
            return number + ' ' + mutation(format[key], number);
          }

          function specialMutationForYears(number) {
            switch (lastNumber(number)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
              return number + ' bloaz';
            default:
              return number + ' vloaz';
            }
          }

          function lastNumber(number) {
            if (number > 9) {
              return lastNumber(number % 10);
            }
            return number;
          }

          function mutation(text, number) {
            if (number === 2) {
              return softMutation(text);
            }
            return text;
          }

          function softMutation(text) {
            var mutationTable = {
              'm': 'v',
              'b': 'v',
              'd': 'z'
            };
            if (mutationTable[text.charAt(0)] === undefined) {
              return text;
            }
            return mutationTable[text.charAt(0)] + text.substring(1);
          }

          var br = moment.defineLocale('br', {
            months: 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
            monthsShort: 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
            weekdays: 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
            weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
            weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'h[e]mm A',
              LTS: 'h[e]mm:ss A',
              L: 'DD/MM/YYYY',
              LL: 'D [a viz] MMMM YYYY',
              LLL: 'D [a viz] MMMM YYYY h[e]mm A',
              LLLL: 'dddd, D [a viz] MMMM YYYY h[e]mm A'
            },
            calendar: {
              sameDay: '[Hiziv da] LT',
              nextDay: '[Warc\'hoazh da] LT',
              nextWeek: 'dddd [da] LT',
              lastDay: '[Dec\'h da] LT',
              lastWeek: 'dddd [paset da] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'a-benn %s',
              past: '%s \'zo',
              s: 'un nebeud segondennoù',
              m: 'ur vunutenn',
              mm: relativeTimeWithMutation,
              h: 'un eur',
              hh: '%d eur',
              d: 'un devezh',
              dd: relativeTimeWithMutation,
              M: 'ur miz',
              MM: relativeTimeWithMutation,
              y: 'ur bloaz',
              yy: specialMutationForYears
            },
            dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
            ordinal: function (number) {
              var output = (number === 1) ? 'añ' : 'vet';
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return br;

        })));


        /***/
      }),
      /* 293 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Bosnian [bs]
        //! author : Nedim Cholich : https://github.com/frontyard
        //! based on (hr) translation by Bojan Marković

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function translate(number, withoutSuffix, key) {
            var result = number + ' ';
            switch (key) {
            case 'm':
              return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
              if (number === 1) {
                result += 'minuta';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
              } else {
                result += 'minuta';
              }
              return result;
            case 'h':
              return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
              if (number === 1) {
                result += 'sat';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
              } else {
                result += 'sati';
              }
              return result;
            case 'dd':
              if (number === 1) {
                result += 'dan';
              } else {
                result += 'dana';
              }
              return result;
            case 'MM':
              if (number === 1) {
                result += 'mjesec';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
              } else {
                result += 'mjeseci';
              }
              return result;
            case 'yy':
              if (number === 1) {
                result += 'godina';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
              } else {
                result += 'godina';
              }
              return result;
            }
          }

          var bs = moment.defineLocale('bs', {
            months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
            monthsShort: 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
            monthsParseExact: true,
            weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
            weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
            weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm',
              LLLL: 'dddd, D. MMMM YYYY H:mm'
            },
            calendar: {
              sameDay: '[danas u] LT',
              nextDay: '[sutra u] LT',
              nextWeek: function () {
                switch (this.day()) {
                case 0:
                  return '[u] [nedjelju] [u] LT';
                case 3:
                  return '[u] [srijedu] [u] LT';
                case 6:
                  return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                  return '[u] dddd [u] LT';
                }
              },
              lastDay: '[jučer u] LT',
              lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                  return '[prošlu] dddd [u] LT';
                case 6:
                  return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                  return '[prošli] dddd [u] LT';
                }
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'za %s',
              past: 'prije %s',
              s: 'par sekundi',
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: 'dan',
              dd: translate,
              M: 'mjesec',
              MM: translate,
              y: 'godinu',
              yy: translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return bs;

        })));


        /***/
      }),
      /* 294 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Catalan [ca]
        //! author : Juan G. Hurtado : https://github.com/juanghurtado

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var ca = moment.defineLocale('ca', {
            months: {
              standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
              format: 'de gener_de febrer_de març_d\'abril_de maig_de juny_de juliol_d\'agost_de setembre_d\'octubre_de novembre_de desembre'.split('_'),
              isFormat: /D[oD]?(\s)+MMMM/
            },
            monthsShort: 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
            monthsParseExact: true,
            weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
            weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
            weekdaysMin: 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD/MM/YYYY',
              LL: '[el] D MMMM [de] YYYY',
              ll: 'D MMM YYYY',
              LLL: '[el] D MMMM [de] YYYY [a les] H:mm',
              lll: 'D MMM YYYY, H:mm',
              LLLL: '[el] dddd D MMMM [de] YYYY [a les] H:mm',
              llll: 'ddd D MMM YYYY, H:mm'
            },
            calendar: {
              sameDay: function () {
                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
              },
              nextDay: function () {
                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
              },
              nextWeek: function () {
                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
              },
              lastDay: function () {
                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
              },
              lastWeek: function () {
                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'd\'aquí %s',
              past: 'fa %s',
              s: 'uns segons',
              m: 'un minut',
              mm: '%d minuts',
              h: 'una hora',
              hh: '%d hores',
              d: 'un dia',
              dd: '%d dies',
              M: 'un mes',
              MM: '%d mesos',
              y: 'un any',
              yy: '%d anys'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
            ordinal: function (number, period) {
              var output = (number === 1) ? 'r' :
                (number === 2) ? 'n' :
                (number === 3) ? 'r' :
                (number === 4) ? 't' : 'è';
              if (period === 'w' || period === 'W') {
                output = 'a';
              }
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return ca;

        })));


        /***/
      }),
      /* 295 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Czech [cs]
        //! author : petrbela : https://github.com/petrbela

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');
          var monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');

          function plural(n) {
            return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
          }

          function translate(number, withoutSuffix, key, isFuture) {
            var result = number + ' ';
            switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
              return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
            case 'm': // a minute / in a minute / a minute ago
              return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minuty' : 'minut');
              } else {
                return result + 'minutami';
              }
              break;
            case 'h': // an hour / in an hour / an hour ago
              return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodin');
              } else {
                return result + 'hodinami';
              }
              break;
            case 'd': // a day / in a day / a day ago
              return (withoutSuffix || isFuture) ? 'den' : 'dnem';
            case 'dd': // 9 days / in 9 days / 9 days ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dny' : 'dní');
              } else {
                return result + 'dny';
              }
              break;
            case 'M': // a month / in a month / a month ago
              return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
            case 'MM': // 9 months / in 9 months / 9 months ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'měsíce' : 'měsíců');
              } else {
                return result + 'měsíci';
              }
              break;
            case 'y': // a year / in a year / a year ago
              return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
            case 'yy': // 9 years / in 9 years / 9 years ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'let');
              } else {
                return result + 'lety';
              }
              break;
            }
          }

          var cs = moment.defineLocale('cs', {
            months: months,
            monthsShort: monthsShort,
            monthsParse: (function (months, monthsShort) {
              var i, _monthsParse = [];
              for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
              }
              return _monthsParse;
            }(months, monthsShort)),
            shortMonthsParse: (function (monthsShort) {
              var i, _shortMonthsParse = [];
              for (i = 0; i < 12; i++) {
                _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
              }
              return _shortMonthsParse;
            }(monthsShort)),
            longMonthsParse: (function (months) {
              var i, _longMonthsParse = [];
              for (i = 0; i < 12; i++) {
                _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
              }
              return _longMonthsParse;
            }(months)),
            weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
            weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),
            weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm',
              LLLL: 'dddd D. MMMM YYYY H:mm',
              l: 'D. M. YYYY'
            },
            calendar: {
              sameDay: '[dnes v] LT',
              nextDay: '[zítra v] LT',
              nextWeek: function () {
                switch (this.day()) {
                case 0:
                  return '[v neděli v] LT';
                case 1:
                case 2:
                  return '[v] dddd [v] LT';
                case 3:
                  return '[ve středu v] LT';
                case 4:
                  return '[ve čtvrtek v] LT';
                case 5:
                  return '[v pátek v] LT';
                case 6:
                  return '[v sobotu v] LT';
                }
              },
              lastDay: '[včera v] LT',
              lastWeek: function () {
                switch (this.day()) {
                case 0:
                  return '[minulou neděli v] LT';
                case 1:
                case 2:
                  return '[minulé] dddd [v] LT';
                case 3:
                  return '[minulou středu v] LT';
                case 4:
                case 5:
                  return '[minulý] dddd [v] LT';
                case 6:
                  return '[minulou sobotu v] LT';
                }
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'za %s',
              past: 'před %s',
              s: translate,
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: translate,
              dd: translate,
              M: translate,
              MM: translate,
              y: translate,
              yy: translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return cs;

        })));


        /***/
      }),
      /* 296 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Chuvash [cv]
        //! author : Anatoly Mironov : https://github.com/mirontoli

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var cv = moment.defineLocale('cv', {
            months: 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
            monthsShort: 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
            weekdays: 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
            weekdaysShort: 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
            weekdaysMin: 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD-MM-YYYY',
              LL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
              LLL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
              LLLL: 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
            },
            calendar: {
              sameDay: '[Паян] LT [сехетре]',
              nextDay: '[Ыран] LT [сехетре]',
              lastDay: '[Ӗнер] LT [сехетре]',
              nextWeek: '[Ҫитес] dddd LT [сехетре]',
              lastWeek: '[Иртнӗ] dddd LT [сехетре]',
              sameElse: 'L'
            },
            relativeTime: {
              future: function (output) {
                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
                return output + affix;
              },
              past: '%s каялла',
              s: 'пӗр-ик ҫеккунт',
              m: 'пӗр минут',
              mm: '%d минут',
              h: 'пӗр сехет',
              hh: '%d сехет',
              d: 'пӗр кун',
              dd: '%d кун',
              M: 'пӗр уйӑх',
              MM: '%d уйӑх',
              y: 'пӗр ҫул',
              yy: '%d ҫул'
            },
            dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
            ordinal: '%d-мӗш',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return cv;

        })));


        /***/
      }),
      /* 297 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Welsh [cy]
        //! author : Robert Allen : https://github.com/robgallen
        //! author : https://github.com/ryangreaves

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var cy = moment.defineLocale('cy', {
            months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
            monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
            weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
            weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
            weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
            weekdaysParseExact: true,
            // time formats are the same as en-gb
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Heddiw am] LT',
              nextDay: '[Yfory am] LT',
              nextWeek: 'dddd [am] LT',
              lastDay: '[Ddoe am] LT',
              lastWeek: 'dddd [diwethaf am] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'mewn %s',
              past: '%s yn ôl',
              s: 'ychydig eiliadau',
              m: 'munud',
              mm: '%d munud',
              h: 'awr',
              hh: '%d awr',
              d: 'diwrnod',
              dd: '%d diwrnod',
              M: 'mis',
              MM: '%d mis',
              y: 'blwyddyn',
              yy: '%d flynedd'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
            // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
            ordinal: function (number) {
              var b = number,
                output = '',
                lookup = [
                  '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                  'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
                ];
              if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                  output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                  output = 'ain';
                }
              } else if (b > 0) {
                output = lookup[b];
              }
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return cy;

        })));


        /***/
      }),
      /* 298 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Danish [da]
        //! author : Ulrik Nielsen : https://github.com/mrbase

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var da = moment.defineLocale('da', {
            months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
            monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
            weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
            weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),
            weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY HH:mm',
              LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'
            },
            calendar: {
              sameDay: '[i dag kl.] LT',
              nextDay: '[i morgen kl.] LT',
              nextWeek: 'på dddd [kl.] LT',
              lastDay: '[i går kl.] LT',
              lastWeek: '[i] dddd[s kl.] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'om %s',
              past: '%s siden',
              s: 'få sekunder',
              m: 'et minut',
              mm: '%d minutter',
              h: 'en time',
              hh: '%d timer',
              d: 'en dag',
              dd: '%d dage',
              M: 'en måned',
              MM: '%d måneder',
              y: 'et år',
              yy: '%d år'
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return da;

        })));


        /***/
      }),
      /* 299 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : German [de]
        //! author : lluchs : https://github.com/lluchs
        //! author: Menelion Elensúle: https://github.com/Oire
        //! author : Mikolaj Dadela : https://github.com/mik01aj

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              'm': ['eine Minute', 'einer Minute'],
              'h': ['eine Stunde', 'einer Stunde'],
              'd': ['ein Tag', 'einem Tag'],
              'dd': [number + ' Tage', number + ' Tagen'],
              'M': ['ein Monat', 'einem Monat'],
              'MM': [number + ' Monate', number + ' Monaten'],
              'y': ['ein Jahr', 'einem Jahr'],
              'yy': [number + ' Jahre', number + ' Jahren']
            };
            return withoutSuffix ? format[key][0] : format[key][1];
          }

          var de = moment.defineLocale('de', {
            months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
            monthsShort: 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
            monthsParseExact: true,
            weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
            weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
            weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY HH:mm',
              LLLL: 'dddd, D. MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[heute um] LT [Uhr]',
              sameElse: 'L',
              nextDay: '[morgen um] LT [Uhr]',
              nextWeek: 'dddd [um] LT [Uhr]',
              lastDay: '[gestern um] LT [Uhr]',
              lastWeek: '[letzten] dddd [um] LT [Uhr]'
            },
            relativeTime: {
              future: 'in %s',
              past: 'vor %s',
              s: 'ein paar Sekunden',
              m: processRelativeTime,
              mm: '%d Minuten',
              h: processRelativeTime,
              hh: '%d Stunden',
              d: processRelativeTime,
              dd: processRelativeTime,
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return de;

        })));


        /***/
      }),
      /* 300 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : German (Austria) [de-at]
        //! author : lluchs : https://github.com/lluchs
        //! author: Menelion Elensúle: https://github.com/Oire
        //! author : Martin Groller : https://github.com/MadMG
        //! author : Mikolaj Dadela : https://github.com/mik01aj

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              'm': ['eine Minute', 'einer Minute'],
              'h': ['eine Stunde', 'einer Stunde'],
              'd': ['ein Tag', 'einem Tag'],
              'dd': [number + ' Tage', number + ' Tagen'],
              'M': ['ein Monat', 'einem Monat'],
              'MM': [number + ' Monate', number + ' Monaten'],
              'y': ['ein Jahr', 'einem Jahr'],
              'yy': [number + ' Jahre', number + ' Jahren']
            };
            return withoutSuffix ? format[key][0] : format[key][1];
          }

          var deAt = moment.defineLocale('de-at', {
            months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
            monthsShort: 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
            monthsParseExact: true,
            weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
            weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
            weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY HH:mm',
              LLLL: 'dddd, D. MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[heute um] LT [Uhr]',
              sameElse: 'L',
              nextDay: '[morgen um] LT [Uhr]',
              nextWeek: 'dddd [um] LT [Uhr]',
              lastDay: '[gestern um] LT [Uhr]',
              lastWeek: '[letzten] dddd [um] LT [Uhr]'
            },
            relativeTime: {
              future: 'in %s',
              past: 'vor %s',
              s: 'ein paar Sekunden',
              m: processRelativeTime,
              mm: '%d Minuten',
              h: processRelativeTime,
              hh: '%d Stunden',
              d: processRelativeTime,
              dd: processRelativeTime,
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return deAt;

        })));


        /***/
      }),
      /* 301 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : German (Switzerland) [de-ch]
        //! author : sschueller : https://github.com/sschueller

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          // based on: https://www.bk.admin.ch/dokumentation/sprachen/04915/05016/index.html?lang=de#

          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              'm': ['eine Minute', 'einer Minute'],
              'h': ['eine Stunde', 'einer Stunde'],
              'd': ['ein Tag', 'einem Tag'],
              'dd': [number + ' Tage', number + ' Tagen'],
              'M': ['ein Monat', 'einem Monat'],
              'MM': [number + ' Monate', number + ' Monaten'],
              'y': ['ein Jahr', 'einem Jahr'],
              'yy': [number + ' Jahre', number + ' Jahren']
            };
            return withoutSuffix ? format[key][0] : format[key][1];
          }

          var deCh = moment.defineLocale('de-ch', {
            months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
            monthsShort: 'Jan._Febr._März_April_Mai_Juni_Juli_Aug._Sept._Okt._Nov._Dez.'.split('_'),
            monthsParseExact: true,
            weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
            weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
            weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH.mm',
              LTS: 'HH.mm.ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY HH.mm',
              LLLL: 'dddd, D. MMMM YYYY HH.mm'
            },
            calendar: {
              sameDay: '[heute um] LT [Uhr]',
              sameElse: 'L',
              nextDay: '[morgen um] LT [Uhr]',
              nextWeek: 'dddd [um] LT [Uhr]',
              lastDay: '[gestern um] LT [Uhr]',
              lastWeek: '[letzten] dddd [um] LT [Uhr]'
            },
            relativeTime: {
              future: 'in %s',
              past: 'vor %s',
              s: 'ein paar Sekunden',
              m: processRelativeTime,
              mm: '%d Minuten',
              h: processRelativeTime,
              hh: '%d Stunden',
              d: processRelativeTime,
              dd: processRelativeTime,
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return deCh;

        })));


        /***/
      }),
      /* 302 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Maldivian [dv]
        //! author : Jawish Hameed : https://github.com/jawish

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var months = [
            'ޖެނުއަރީ',
            'ފެބްރުއަރީ',
            'މާރިޗު',
            'އޭޕްރީލު',
            'މޭ',
            'ޖޫން',
            'ޖުލައި',
            'އޯގަސްޓު',
            'ސެޕްޓެމްބަރު',
            'އޮކްޓޯބަރު',
            'ނޮވެމްބަރު',
            'ޑިސެމްބަރު'
          ];
          var weekdays = [
            'އާދިއްތަ',
            'ހޯމަ',
            'އަންގާރަ',
            'ބުދަ',
            'ބުރާސްފަތި',
            'ހުކުރު',
            'ހޮނިހިރު'
          ];

          var dv = moment.defineLocale('dv', {
            months: months,
            monthsShort: months,
            weekdays: weekdays,
            weekdaysShort: weekdays,
            weekdaysMin: 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
            longDateFormat: {

              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'D/M/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            meridiemParse: /މކ|މފ/,
            isPM: function (input) {
              return 'މފ' === input;
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 12) {
                return 'މކ';
              } else {
                return 'މފ';
              }
            },
            calendar: {
              sameDay: '[މިއަދު] LT',
              nextDay: '[މާދަމާ] LT',
              nextWeek: 'dddd LT',
              lastDay: '[އިއްޔެ] LT',
              lastWeek: '[ފާއިތުވި] dddd LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'ތެރޭގައި %s',
              past: 'ކުރިން %s',
              s: 'ސިކުންތުކޮޅެއް',
              m: 'މިނިޓެއް',
              mm: 'މިނިޓު %d',
              h: 'ގަޑިއިރެއް',
              hh: 'ގަޑިއިރު %d',
              d: 'ދުވަހެއް',
              dd: 'ދުވަސް %d',
              M: 'މަހެއް',
              MM: 'މަސް %d',
              y: 'އަހަރެއް',
              yy: 'އަހަރު %d'
            },
            preparse: function (string) {
              return string.replace(/،/g, ',');
            },
            postformat: function (string) {
              return string.replace(/,/g, '،');
            },
            week: {
              dow: 7, // Sunday is the first day of the week.
              doy: 12 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return dv;

        })));


        /***/
      }),
      /* 303 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Greek [el]
        //! author : Aggelos Karalias : https://github.com/mehiel

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';

          function isFunction(input) {
            return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
          }


          var el = moment.defineLocale('el', {
            monthsNominativeEl: 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
            monthsGenitiveEl: 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
            months: function (momentToFormat, format) {
              if (!momentToFormat) {
                return this._monthsNominativeEl;
              } else if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
              } else {
                return this._monthsNominativeEl[momentToFormat.month()];
              }
            },
            monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
            weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
            weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
            weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
            meridiem: function (hours, minutes, isLower) {
              if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
              } else {
                return isLower ? 'πμ' : 'ΠΜ';
              }
            },
            isPM: function (input) {
              return ((input + '').toLowerCase()[0] === 'μ');
            },
            meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
            longDateFormat: {
              LT: 'h:mm A',
              LTS: 'h:mm:ss A',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY h:mm A',
              LLLL: 'dddd, D MMMM YYYY h:mm A'
            },
            calendarEl: {
              sameDay: '[Σήμερα {}] LT',
              nextDay: '[Αύριο {}] LT',
              nextWeek: 'dddd [{}] LT',
              lastDay: '[Χθες {}] LT',
              lastWeek: function () {
                switch (this.day()) {
                case 6:
                  return '[το προηγούμενο] dddd [{}] LT';
                default:
                  return '[την προηγούμενη] dddd [{}] LT';
                }
              },
              sameElse: 'L'
            },
            calendar: function (key, mom) {
              var output = this._calendarEl[key],
                hours = mom && mom.hours();
              if (isFunction(output)) {
                output = output.apply(mom);
              }
              return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
            },
            relativeTime: {
              future: 'σε %s',
              past: '%s πριν',
              s: 'λίγα δευτερόλεπτα',
              m: 'ένα λεπτό',
              mm: '%d λεπτά',
              h: 'μία ώρα',
              hh: '%d ώρες',
              d: 'μία μέρα',
              dd: '%d μέρες',
              M: 'ένας μήνας',
              MM: '%d μήνες',
              y: 'ένας χρόνος',
              yy: '%d χρόνια'
            },
            dayOfMonthOrdinalParse: /\d{1,2}η/,
            ordinal: '%dη',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4st is the first week of the year.
            }
          });

          return el;

        })));


        /***/
      }),
      /* 304 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : English (Australia) [en-au]
        //! author : Jared Morse : https://github.com/jarcoal

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var enAu = moment.defineLocale('en-au', {
            months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
            monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
            weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
            weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
            weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
            longDateFormat: {
              LT: 'h:mm A',
              LTS: 'h:mm:ss A',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY h:mm A',
              LLLL: 'dddd, D MMMM YYYY h:mm A'
            },
            calendar: {
              sameDay: '[Today at] LT',
              nextDay: '[Tomorrow at] LT',
              nextWeek: 'dddd [at] LT',
              lastDay: '[Yesterday at] LT',
              lastWeek: '[Last] dddd [at] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'in %s',
              past: '%s ago',
              s: 'a few seconds',
              m: 'a minute',
              mm: '%d minutes',
              h: 'an hour',
              hh: '%d hours',
              d: 'a day',
              dd: '%d days',
              M: 'a month',
              MM: '%d months',
              y: 'a year',
              yy: '%d years'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function (number) {
              var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return enAu;

        })));


        /***/
      }),
      /* 305 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : English (Canada) [en-ca]
        //! author : Jonathan Abourbih : https://github.com/jonbca

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var enCa = moment.defineLocale('en-ca', {
            months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
            monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
            weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
            weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
            weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
            longDateFormat: {
              LT: 'h:mm A',
              LTS: 'h:mm:ss A',
              L: 'YYYY-MM-DD',
              LL: 'MMMM D, YYYY',
              LLL: 'MMMM D, YYYY h:mm A',
              LLLL: 'dddd, MMMM D, YYYY h:mm A'
            },
            calendar: {
              sameDay: '[Today at] LT',
              nextDay: '[Tomorrow at] LT',
              nextWeek: 'dddd [at] LT',
              lastDay: '[Yesterday at] LT',
              lastWeek: '[Last] dddd [at] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'in %s',
              past: '%s ago',
              s: 'a few seconds',
              m: 'a minute',
              mm: '%d minutes',
              h: 'an hour',
              hh: '%d hours',
              d: 'a day',
              dd: '%d days',
              M: 'a month',
              MM: '%d months',
              y: 'a year',
              yy: '%d years'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function (number) {
              var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
              return number + output;
            }
          });

          return enCa;

        })));


        /***/
      }),
      /* 306 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : English (United Kingdom) [en-gb]
        //! author : Chris Gedrim : https://github.com/chrisgedrim

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var enGb = moment.defineLocale('en-gb', {
            months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
            monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
            weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
            weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
            weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Today at] LT',
              nextDay: '[Tomorrow at] LT',
              nextWeek: 'dddd [at] LT',
              lastDay: '[Yesterday at] LT',
              lastWeek: '[Last] dddd [at] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'in %s',
              past: '%s ago',
              s: 'a few seconds',
              m: 'a minute',
              mm: '%d minutes',
              h: 'an hour',
              hh: '%d hours',
              d: 'a day',
              dd: '%d days',
              M: 'a month',
              MM: '%d months',
              y: 'a year',
              yy: '%d years'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function (number) {
              var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return enGb;

        })));


        /***/
      }),
      /* 307 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : English (Ireland) [en-ie]
        //! author : Chris Cartlidge : https://github.com/chriscartlidge

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var enIe = moment.defineLocale('en-ie', {
            months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
            monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
            weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
            weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
            weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD-MM-YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Today at] LT',
              nextDay: '[Tomorrow at] LT',
              nextWeek: 'dddd [at] LT',
              lastDay: '[Yesterday at] LT',
              lastWeek: '[Last] dddd [at] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'in %s',
              past: '%s ago',
              s: 'a few seconds',
              m: 'a minute',
              mm: '%d minutes',
              h: 'an hour',
              hh: '%d hours',
              d: 'a day',
              dd: '%d days',
              M: 'a month',
              MM: '%d months',
              y: 'a year',
              yy: '%d years'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function (number) {
              var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return enIe;

        })));


        /***/
      }),
      /* 308 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : English (New Zealand) [en-nz]
        //! author : Luke McGregor : https://github.com/lukemcgregor

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var enNz = moment.defineLocale('en-nz', {
            months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
            monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
            weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
            weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
            weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
            longDateFormat: {
              LT: 'h:mm A',
              LTS: 'h:mm:ss A',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY h:mm A',
              LLLL: 'dddd, D MMMM YYYY h:mm A'
            },
            calendar: {
              sameDay: '[Today at] LT',
              nextDay: '[Tomorrow at] LT',
              nextWeek: 'dddd [at] LT',
              lastDay: '[Yesterday at] LT',
              lastWeek: '[Last] dddd [at] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'in %s',
              past: '%s ago',
              s: 'a few seconds',
              m: 'a minute',
              mm: '%d minutes',
              h: 'an hour',
              hh: '%d hours',
              d: 'a day',
              dd: '%d days',
              M: 'a month',
              MM: '%d months',
              y: 'a year',
              yy: '%d years'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function (number) {
              var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return enNz;

        })));


        /***/
      }),
      /* 309 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Esperanto [eo]
        //! author : Colin Dean : https://github.com/colindean
        //! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
        //! comment : miestasmia corrected the translation by colindean

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var eo = moment.defineLocale('eo', {
            months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
            monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
            weekdays: 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
            weekdaysShort: 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
            weekdaysMin: 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'YYYY-MM-DD',
              LL: 'D[-a de] MMMM, YYYY',
              LLL: 'D[-a de] MMMM, YYYY HH:mm',
              LLLL: 'dddd, [la] D[-a de] MMMM, YYYY HH:mm'
            },
            meridiemParse: /[ap]\.t\.m/i,
            isPM: function (input) {
              return input.charAt(0).toLowerCase() === 'p';
            },
            meridiem: function (hours, minutes, isLower) {
              if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
              } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
              }
            },
            calendar: {
              sameDay: '[Hodiaŭ je] LT',
              nextDay: '[Morgaŭ je] LT',
              nextWeek: 'dddd [je] LT',
              lastDay: '[Hieraŭ je] LT',
              lastWeek: '[pasinta] dddd [je] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'post %s',
              past: 'antaŭ %s',
              s: 'sekundoj',
              m: 'minuto',
              mm: '%d minutoj',
              h: 'horo',
              hh: '%d horoj',
              d: 'tago', //ne 'diurno', ĉar estas uzita por proksimumo
              dd: '%d tagoj',
              M: 'monato',
              MM: '%d monatoj',
              y: 'jaro',
              yy: '%d jaroj'
            },
            dayOfMonthOrdinalParse: /\d{1,2}a/,
            ordinal: '%da',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return eo;

        })));


        /***/
      }),
      /* 310 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Spanish [es]
        //! author : Julio Napurí : https://github.com/julionc

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
          var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

          var es = moment.defineLocale('es', {
            months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
            monthsShort: function (m, format) {
              if (!m) {
                return monthsShortDot;
              } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
              } else {
                return monthsShortDot[m.month()];
              }
            },
            monthsParseExact: true,
            weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
            weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
            weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D [de] MMMM [de] YYYY',
              LLL: 'D [de] MMMM [de] YYYY H:mm',
              LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'
            },
            calendar: {
              sameDay: function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              nextDay: function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              nextWeek: function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              lastDay: function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              lastWeek: function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'en %s',
              past: 'hace %s',
              s: 'unos segundos',
              m: 'un minuto',
              mm: '%d minutos',
              h: 'una hora',
              hh: '%d horas',
              d: 'un día',
              dd: '%d días',
              M: 'un mes',
              MM: '%d meses',
              y: 'un año',
              yy: '%d años'
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: '%dº',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return es;

        })));


        /***/
      }),
      /* 311 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Spanish (Dominican Republic) [es-do]

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
          var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

          var esDo = moment.defineLocale('es-do', {
            months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
            monthsShort: function (m, format) {
              if (!m) {
                return monthsShortDot;
              } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
              } else {
                return monthsShortDot[m.month()];
              }
            },
            monthsParseExact: true,
            weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
            weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
            weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'h:mm A',
              LTS: 'h:mm:ss A',
              L: 'DD/MM/YYYY',
              LL: 'D [de] MMMM [de] YYYY',
              LLL: 'D [de] MMMM [de] YYYY h:mm A',
              LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A'
            },
            calendar: {
              sameDay: function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              nextDay: function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              nextWeek: function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              lastDay: function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              lastWeek: function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'en %s',
              past: 'hace %s',
              s: 'unos segundos',
              m: 'un minuto',
              mm: '%d minutos',
              h: 'una hora',
              hh: '%d horas',
              d: 'un día',
              dd: '%d días',
              M: 'un mes',
              MM: '%d meses',
              y: 'un año',
              yy: '%d años'
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: '%dº',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return esDo;

        })));


        /***/
      }),
      /* 312 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Estonian [et]
        //! author : Henry Kehlmann : https://github.com/madhenry
        //! improvements : Illimar Tambek : https://github.com/ragulka

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              's': ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
              'm': ['ühe minuti', 'üks minut'],
              'mm': [number + ' minuti', number + ' minutit'],
              'h': ['ühe tunni', 'tund aega', 'üks tund'],
              'hh': [number + ' tunni', number + ' tundi'],
              'd': ['ühe päeva', 'üks päev'],
              'M': ['kuu aja', 'kuu aega', 'üks kuu'],
              'MM': [number + ' kuu', number + ' kuud'],
              'y': ['ühe aasta', 'aasta', 'üks aasta'],
              'yy': [number + ' aasta', number + ' aastat']
            };
            if (withoutSuffix) {
              return format[key][2] ? format[key][2] : format[key][1];
            }
            return isFuture ? format[key][0] : format[key][1];
          }

          var et = moment.defineLocale('et', {
            months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
            monthsShort: 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
            weekdays: 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
            weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
            weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm',
              LLLL: 'dddd, D. MMMM YYYY H:mm'
            },
            calendar: {
              sameDay: '[Täna,] LT',
              nextDay: '[Homme,] LT',
              nextWeek: '[Järgmine] dddd LT',
              lastDay: '[Eile,] LT',
              lastWeek: '[Eelmine] dddd LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s pärast',
              past: '%s tagasi',
              s: processRelativeTime,
              m: processRelativeTime,
              mm: processRelativeTime,
              h: processRelativeTime,
              hh: processRelativeTime,
              d: processRelativeTime,
              dd: '%d päeva',
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return et;

        })));


        /***/
      }),
      /* 313 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Basque [eu]
        //! author : Eneko Illarramendi : https://github.com/eillarra

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var eu = moment.defineLocale('eu', {
            months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
            monthsShort: 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
            monthsParseExact: true,
            weekdays: 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
            weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
            weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'YYYY-MM-DD',
              LL: 'YYYY[ko] MMMM[ren] D[a]',
              LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
              LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
              l: 'YYYY-M-D',
              ll: 'YYYY[ko] MMM D[a]',
              lll: 'YYYY[ko] MMM D[a] HH:mm',
              llll: 'ddd, YYYY[ko] MMM D[a] HH:mm'
            },
            calendar: {
              sameDay: '[gaur] LT[etan]',
              nextDay: '[bihar] LT[etan]',
              nextWeek: 'dddd LT[etan]',
              lastDay: '[atzo] LT[etan]',
              lastWeek: '[aurreko] dddd LT[etan]',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s barru',
              past: 'duela %s',
              s: 'segundo batzuk',
              m: 'minutu bat',
              mm: '%d minutu',
              h: 'ordu bat',
              hh: '%d ordu',
              d: 'egun bat',
              dd: '%d egun',
              M: 'hilabete bat',
              MM: '%d hilabete',
              y: 'urte bat',
              yy: '%d urte'
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return eu;

        })));


        /***/
      }),
      /* 314 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Persian [fa]
        //! author : Ebrahim Byagowi : https://github.com/ebraminio

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var symbolMap = {
            '1': '۱',
            '2': '۲',
            '3': '۳',
            '4': '۴',
            '5': '۵',
            '6': '۶',
            '7': '۷',
            '8': '۸',
            '9': '۹',
            '0': '۰'
          };
          var numberMap = {
            '۱': '1',
            '۲': '2',
            '۳': '3',
            '۴': '4',
            '۵': '5',
            '۶': '6',
            '۷': '7',
            '۸': '8',
            '۹': '9',
            '۰': '0'
          };

          var fa = moment.defineLocale('fa', {
            months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
            monthsShort: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
            weekdays: 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
            weekdaysShort: 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
            weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            meridiemParse: /قبل از ظهر|بعد از ظهر/,
            isPM: function (input) {
              return /بعد از ظهر/.test(input);
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 12) {
                return 'قبل از ظهر';
              } else {
                return 'بعد از ظهر';
              }
            },
            calendar: {
              sameDay: '[امروز ساعت] LT',
              nextDay: '[فردا ساعت] LT',
              nextWeek: 'dddd [ساعت] LT',
              lastDay: '[دیروز ساعت] LT',
              lastWeek: 'dddd [پیش] [ساعت] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'در %s',
              past: '%s پیش',
              s: 'چند ثانیه',
              m: 'یک دقیقه',
              mm: '%d دقیقه',
              h: 'یک ساعت',
              hh: '%d ساعت',
              d: 'یک روز',
              dd: '%d روز',
              M: 'یک ماه',
              MM: '%d ماه',
              y: 'یک سال',
              yy: '%d سال'
            },
            preparse: function (string) {
              return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
              }).replace(/،/g, ',');
            },
            postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                return symbolMap[match];
              }).replace(/,/g, '،');
            },
            dayOfMonthOrdinalParse: /\d{1,2}م/,
            ordinal: '%dم',
            week: {
              dow: 6, // Saturday is the first day of the week.
              doy: 12 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return fa;

        })));


        /***/
      }),
      /* 315 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Finnish [fi]
        //! author : Tarmo Aidantausta : https://github.com/bleadof

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' ');
          var numbersFuture = [
            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
            numbersPast[7], numbersPast[8], numbersPast[9]
          ];

          function translate(number, withoutSuffix, key, isFuture) {
            var result = '';
            switch (key) {
            case 's':
              return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
            case 'm':
              return isFuture ? 'minuutin' : 'minuutti';
            case 'mm':
              result = isFuture ? 'minuutin' : 'minuuttia';
              break;
            case 'h':
              return isFuture ? 'tunnin' : 'tunti';
            case 'hh':
              result = isFuture ? 'tunnin' : 'tuntia';
              break;
            case 'd':
              return isFuture ? 'päivän' : 'päivä';
            case 'dd':
              result = isFuture ? 'päivän' : 'päivää';
              break;
            case 'M':
              return isFuture ? 'kuukauden' : 'kuukausi';
            case 'MM':
              result = isFuture ? 'kuukauden' : 'kuukautta';
              break;
            case 'y':
              return isFuture ? 'vuoden' : 'vuosi';
            case 'yy':
              result = isFuture ? 'vuoden' : 'vuotta';
              break;
            }
            result = verbalNumber(number, isFuture) + ' ' + result;
            return result;
          }

          function verbalNumber(number, isFuture) {
            return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
          }

          var fi = moment.defineLocale('fi', {
            months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
            monthsShort: 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
            weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
            weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
            weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
            longDateFormat: {
              LT: 'HH.mm',
              LTS: 'HH.mm.ss',
              L: 'DD.MM.YYYY',
              LL: 'Do MMMM[ta] YYYY',
              LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
              LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
              l: 'D.M.YYYY',
              ll: 'Do MMM YYYY',
              lll: 'Do MMM YYYY, [klo] HH.mm',
              llll: 'ddd, Do MMM YYYY, [klo] HH.mm'
            },
            calendar: {
              sameDay: '[tänään] [klo] LT',
              nextDay: '[huomenna] [klo] LT',
              nextWeek: 'dddd [klo] LT',
              lastDay: '[eilen] [klo] LT',
              lastWeek: '[viime] dddd[na] [klo] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s päästä',
              past: '%s sitten',
              s: translate,
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: translate,
              dd: translate,
              M: translate,
              MM: translate,
              y: translate,
              yy: translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return fi;

        })));


        /***/
      }),
      /* 316 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Faroese [fo]
        //! author : Ragnar Johannesen : https://github.com/ragnar123

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var fo = moment.defineLocale('fo', {
            months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
            monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
            weekdays: 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
            weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
            weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D. MMMM, YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Í dag kl.] LT',
              nextDay: '[Í morgin kl.] LT',
              nextWeek: 'dddd [kl.] LT',
              lastDay: '[Í gjár kl.] LT',
              lastWeek: '[síðstu] dddd [kl] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'um %s',
              past: '%s síðani',
              s: 'fá sekund',
              m: 'ein minutt',
              mm: '%d minuttir',
              h: 'ein tími',
              hh: '%d tímar',
              d: 'ein dagur',
              dd: '%d dagar',
              M: 'ein mánaði',
              MM: '%d mánaðir',
              y: 'eitt ár',
              yy: '%d ár'
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return fo;

        })));


        /***/
      }),
      /* 317 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : French [fr]
        //! author : John Fischer : https://github.com/jfroffice

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var fr = moment.defineLocale('fr', {
            months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
            monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
            monthsParseExact: true,
            weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
            weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
            weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Aujourd’hui à] LT',
              nextDay: '[Demain à] LT',
              nextWeek: 'dddd [à] LT',
              lastDay: '[Hier à] LT',
              lastWeek: 'dddd [dernier à] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'dans %s',
              past: 'il y a %s',
              s: 'quelques secondes',
              m: 'une minute',
              mm: '%d minutes',
              h: 'une heure',
              hh: '%d heures',
              d: 'un jour',
              dd: '%d jours',
              M: 'un mois',
              MM: '%d mois',
              y: 'un an',
              yy: '%d ans'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
            ordinal: function (number, period) {
              switch (period) {
                // TODO: Return 'e' when day of month > 1. Move this case inside
                // block for masculine words below.
                // See https://github.com/moment/moment/issues/3375
              case 'D':
                return number + (number === 1 ? 'er' : '');

                // Words with masculine grammatical gender: mois, trimestre, jour
              default:
              case 'M':
              case 'Q':
              case 'DDD':
              case 'd':
                return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
              case 'w':
              case 'W':
                return number + (number === 1 ? 're' : 'e');
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return fr;

        })));


        /***/
      }),
      /* 318 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : French (Canada) [fr-ca]
        //! author : Jonathan Abourbih : https://github.com/jonbca

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var frCa = moment.defineLocale('fr-ca', {
            months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
            monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
            monthsParseExact: true,
            weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
            weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
            weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'YYYY-MM-DD',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Aujourd’hui à] LT',
              nextDay: '[Demain à] LT',
              nextWeek: 'dddd [à] LT',
              lastDay: '[Hier à] LT',
              lastWeek: 'dddd [dernier à] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'dans %s',
              past: 'il y a %s',
              s: 'quelques secondes',
              m: 'une minute',
              mm: '%d minutes',
              h: 'une heure',
              hh: '%d heures',
              d: 'un jour',
              dd: '%d jours',
              M: 'un mois',
              MM: '%d mois',
              y: 'un an',
              yy: '%d ans'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
            ordinal: function (number, period) {
              switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                  return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
              case 'w':
                case 'W':
                  return number + (number === 1 ? 're' : 'e');
              }
            }
          });

          return frCa;

        })));


        /***/
      }),
      /* 319 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : French (Switzerland) [fr-ch]
        //! author : Gaspard Bucher : https://github.com/gaspard

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var frCh = moment.defineLocale('fr-ch', {
            months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
            monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
            monthsParseExact: true,
            weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
            weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
            weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Aujourd’hui à] LT',
              nextDay: '[Demain à] LT',
              nextWeek: 'dddd [à] LT',
              lastDay: '[Hier à] LT',
              lastWeek: 'dddd [dernier à] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'dans %s',
              past: 'il y a %s',
              s: 'quelques secondes',
              m: 'une minute',
              mm: '%d minutes',
              h: 'une heure',
              hh: '%d heures',
              d: 'un jour',
              dd: '%d jours',
              M: 'un mois',
              MM: '%d mois',
              y: 'un an',
              yy: '%d ans'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
            ordinal: function (number, period) {
              switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                  return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
              case 'w':
                case 'W':
                  return number + (number === 1 ? 're' : 'e');
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return frCh;

        })));


        /***/
      }),
      /* 320 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Frisian [fy]
        //! author : Robin van der Vliet : https://github.com/robin0van0der0v

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_');
          var monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

          var fy = moment.defineLocale('fy', {
            months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
            monthsShort: function (m, format) {
              if (!m) {
                return monthsShortWithDots;
              } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
              } else {
                return monthsShortWithDots[m.month()];
              }
            },
            monthsParseExact: true,
            weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
            weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
            weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD-MM-YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[hjoed om] LT',
              nextDay: '[moarn om] LT',
              nextWeek: 'dddd [om] LT',
              lastDay: '[juster om] LT',
              lastWeek: '[ôfrûne] dddd [om] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'oer %s',
              past: '%s lyn',
              s: 'in pear sekonden',
              m: 'ien minút',
              mm: '%d minuten',
              h: 'ien oere',
              hh: '%d oeren',
              d: 'ien dei',
              dd: '%d dagen',
              M: 'ien moanne',
              MM: '%d moannen',
              y: 'ien jier',
              yy: '%d jierren'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
            ordinal: function (number) {
              return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return fy;

        })));


        /***/
      }),
      /* 321 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Scottish Gaelic [gd]
        //! author : Jon Ashdown : https://github.com/jonashdown

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var months = [
            'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
          ];

          var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

          var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

          var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

          var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

          var gd = moment.defineLocale('gd', {
            months: months,
            monthsShort: monthsShort,
            monthsParseExact: true,
            weekdays: weekdays,
            weekdaysShort: weekdaysShort,
            weekdaysMin: weekdaysMin,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[An-diugh aig] LT',
              nextDay: '[A-màireach aig] LT',
              nextWeek: 'dddd [aig] LT',
              lastDay: '[An-dè aig] LT',
              lastWeek: 'dddd [seo chaidh] [aig] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'ann an %s',
              past: 'bho chionn %s',
              s: 'beagan diogan',
              m: 'mionaid',
              mm: '%d mionaidean',
              h: 'uair',
              hh: '%d uairean',
              d: 'latha',
              dd: '%d latha',
              M: 'mìos',
              MM: '%d mìosan',
              y: 'bliadhna',
              yy: '%d bliadhna'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
            ordinal: function (number) {
              var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return gd;

        })));


        /***/
      }),
      /* 322 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Galician [gl]
        //! author : Juan G. Hurtado : https://github.com/juanghurtado

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var gl = moment.defineLocale('gl', {
            months: 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
            monthsShort: 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
            monthsParseExact: true,
            weekdays: 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
            weekdaysShort: 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
            weekdaysMin: 'do_lu_ma_mé_xo_ve_sá'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D [de] MMMM [de] YYYY',
              LLL: 'D [de] MMMM [de] YYYY H:mm',
              LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'
            },
            calendar: {
              sameDay: function () {
                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
              },
              nextDay: function () {
                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
              },
              nextWeek: function () {
                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
              },
              lastDay: function () {
                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
              },
              lastWeek: function () {
                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: function (str) {
                if (str.indexOf('un') === 0) {
                  return 'n' + str;
                }
                return 'en ' + str;
              },
              past: 'hai %s',
              s: 'uns segundos',
              m: 'un minuto',
              mm: '%d minutos',
              h: 'unha hora',
              hh: '%d horas',
              d: 'un día',
              dd: '%d días',
              M: 'un mes',
              MM: '%d meses',
              y: 'un ano',
              yy: '%d anos'
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: '%dº',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return gl;

        })));


        /***/
      }),
      /* 323 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Konkani Latin script [gom-latn]
        //! author : The Discoverer : https://github.com/WikiDiscoverer

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              's': ['thodde secondanim', 'thodde second'],
              'm': ['eka mintan', 'ek minute'],
              'mm': [number + ' mintanim', number + ' mintam'],
              'h': ['eka horan', 'ek hor'],
              'hh': [number + ' horanim', number + ' hor'],
              'd': ['eka disan', 'ek dis'],
              'dd': [number + ' disanim', number + ' dis'],
              'M': ['eka mhoinean', 'ek mhoino'],
              'MM': [number + ' mhoineanim', number + ' mhoine'],
              'y': ['eka vorsan', 'ek voros'],
              'yy': [number + ' vorsanim', number + ' vorsam']
            };
            return withoutSuffix ? format[key][0] : format[key][1];
          }

          var gomLatn = moment.defineLocale('gom-latn', {
            months: 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
            monthsShort: 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
            monthsParseExact: true,
            weekdays: 'Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son\'var'.split('_'),
            weekdaysShort: 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
            weekdaysMin: 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'A h:mm [vazta]',
              LTS: 'A h:mm:ss [vazta]',
              L: 'DD-MM-YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY A h:mm [vazta]',
              LLLL: 'dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]',
              llll: 'ddd, D MMM YYYY, A h:mm [vazta]'
            },
            calendar: {
              sameDay: '[Aiz] LT',
              nextDay: '[Faleam] LT',
              nextWeek: '[Ieta to] dddd[,] LT',
              lastDay: '[Kal] LT',
              lastWeek: '[Fatlo] dddd[,] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s',
              past: '%s adim',
              s: processRelativeTime,
              m: processRelativeTime,
              mm: processRelativeTime,
              h: processRelativeTime,
              hh: processRelativeTime,
              d: processRelativeTime,
              dd: processRelativeTime,
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime
            },
            dayOfMonthOrdinalParse: /\d{1,2}(er)/,
            ordinal: function (number, period) {
              switch (period) {
                // the ordinal 'er' only applies to day of the month
              case 'D':
                return number + 'er';
              default:
              case 'M':
              case 'Q':
              case 'DDD':
              case 'd':
              case 'w':
              case 'W':
                return number;
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            },
            meridiemParse: /rati|sokalli|donparam|sanje/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === 'rati') {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === 'sokalli') {
                return hour;
              } else if (meridiem === 'donparam') {
                return hour > 12 ? hour : hour + 12;
              } else if (meridiem === 'sanje') {
                return hour + 12;
              }
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                return 'rati';
              } else if (hour < 12) {
                return 'sokalli';
              } else if (hour < 16) {
                return 'donparam';
              } else if (hour < 20) {
                return 'sanje';
              } else {
                return 'rati';
              }
            }
          });

          return gomLatn;

        })));


        /***/
      }),
      /* 324 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Hebrew [he]
        //! author : Tomer Cohen : https://github.com/tomer
        //! author : Moshe Simantov : https://github.com/DevelopmentIL
        //! author : Tal Ater : https://github.com/TalAter

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var he = moment.defineLocale('he', {
            months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
            monthsShort: 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
            weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
            weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
            weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D [ב]MMMM YYYY',
              LLL: 'D [ב]MMMM YYYY HH:mm',
              LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',
              l: 'D/M/YYYY',
              ll: 'D MMM YYYY',
              lll: 'D MMM YYYY HH:mm',
              llll: 'ddd, D MMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[היום ב־]LT',
              nextDay: '[מחר ב־]LT',
              nextWeek: 'dddd [בשעה] LT',
              lastDay: '[אתמול ב־]LT',
              lastWeek: '[ביום] dddd [האחרון בשעה] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'בעוד %s',
              past: 'לפני %s',
              s: 'מספר שניות',
              m: 'דקה',
              mm: '%d דקות',
              h: 'שעה',
              hh: function (number) {
                if (number === 2) {
                  return 'שעתיים';
                }
                return number + ' שעות';
              },
              d: 'יום',
              dd: function (number) {
                if (number === 2) {
                  return 'יומיים';
                }
                return number + ' ימים';
              },
              M: 'חודש',
              MM: function (number) {
                if (number === 2) {
                  return 'חודשיים';
                }
                return number + ' חודשים';
              },
              y: 'שנה',
              yy: function (number) {
                if (number === 2) {
                  return 'שנתיים';
                } else if (number % 10 === 0 && number !== 10) {
                  return number + ' שנה';
                }
                return number + ' שנים';
              }
            },
            meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
            isPM: function (input) {
              return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 5) {
                return 'לפנות בוקר';
              } else if (hour < 10) {
                return 'בבוקר';
              } else if (hour < 12) {
                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
              } else if (hour < 18) {
                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
              } else {
                return 'בערב';
              }
            }
          });

          return he;

        })));


        /***/
      }),
      /* 325 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Hindi [hi]
        //! author : Mayank Singhal : https://github.com/mayanksinghal

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var symbolMap = {
            '1': '१',
            '2': '२',
            '3': '३',
            '4': '४',
            '5': '५',
            '6': '६',
            '7': '७',
            '8': '८',
            '9': '९',
            '0': '०'
          };
          var numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0'
          };

          var hi = moment.defineLocale('hi', {
            months: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
            monthsShort: 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
            monthsParseExact: true,
            weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
            weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
            weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
            longDateFormat: {
              LT: 'A h:mm बजे',
              LTS: 'A h:mm:ss बजे',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY, A h:mm बजे',
              LLLL: 'dddd, D MMMM YYYY, A h:mm बजे'
            },
            calendar: {
              sameDay: '[आज] LT',
              nextDay: '[कल] LT',
              nextWeek: 'dddd, LT',
              lastDay: '[कल] LT',
              lastWeek: '[पिछले] dddd, LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s में',
              past: '%s पहले',
              s: 'कुछ ही क्षण',
              m: 'एक मिनट',
              mm: '%d मिनट',
              h: 'एक घंटा',
              hh: '%d घंटे',
              d: 'एक दिन',
              dd: '%d दिन',
              M: 'एक महीने',
              MM: '%d महीने',
              y: 'एक वर्ष',
              yy: '%d वर्ष'
            },
            preparse: function (string) {
              return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
              });
            },
            postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                return symbolMap[match];
              });
            },
            // Hindi notation for meridiems are quite fuzzy in practice. While there exists
            // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
            meridiemParse: /रात|सुबह|दोपहर|शाम/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === 'सुबह') {
                return hour;
              } else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === 'शाम') {
                return hour + 12;
              }
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                return 'रात';
              } else if (hour < 10) {
                return 'सुबह';
              } else if (hour < 17) {
                return 'दोपहर';
              } else if (hour < 20) {
                return 'शाम';
              } else {
                return 'रात';
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return hi;

        })));


        /***/
      }),
      /* 326 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Croatian [hr]
        //! author : Bojan Marković : https://github.com/bmarkovic

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function translate(number, withoutSuffix, key) {
            var result = number + ' ';
            switch (key) {
            case 'm':
              return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
              if (number === 1) {
                result += 'minuta';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
              } else {
                result += 'minuta';
              }
              return result;
            case 'h':
              return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
              if (number === 1) {
                result += 'sat';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
              } else {
                result += 'sati';
              }
              return result;
            case 'dd':
              if (number === 1) {
                result += 'dan';
              } else {
                result += 'dana';
              }
              return result;
            case 'MM':
              if (number === 1) {
                result += 'mjesec';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
              } else {
                result += 'mjeseci';
              }
              return result;
            case 'yy':
              if (number === 1) {
                result += 'godina';
              } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
              } else {
                result += 'godina';
              }
              return result;
            }
          }

          var hr = moment.defineLocale('hr', {
            months: {
              format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
              standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
            },
            monthsShort: 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
            monthsParseExact: true,
            weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
            weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
            weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm',
              LLLL: 'dddd, D. MMMM YYYY H:mm'
            },
            calendar: {
              sameDay: '[danas u] LT',
              nextDay: '[sutra u] LT',
              nextWeek: function () {
                switch (this.day()) {
                case 0:
                  return '[u] [nedjelju] [u] LT';
                case 3:
                  return '[u] [srijedu] [u] LT';
                case 6:
                  return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                  return '[u] dddd [u] LT';
                }
              },
              lastDay: '[jučer u] LT',
              lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                  return '[prošlu] dddd [u] LT';
                case 6:
                  return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                  return '[prošli] dddd [u] LT';
                }
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'za %s',
              past: 'prije %s',
              s: 'par sekundi',
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: 'dan',
              dd: translate,
              M: 'mjesec',
              MM: translate,
              y: 'godinu',
              yy: translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return hr;

        })));


        /***/
      }),
      /* 327 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Hungarian [hu]
        //! author : Adam Brunner : https://github.com/adambrunner

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');

          function translate(number, withoutSuffix, key, isFuture) {
            var num = number,
              suffix;
            switch (key) {
            case 's':
              return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
            case 'm':
              return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'mm':
              return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'h':
              return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'hh':
              return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'd':
              return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'dd':
              return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'M':
              return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'MM':
              return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'y':
              return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
            case 'yy':
              return num + (isFuture || withoutSuffix ? ' év' : ' éve');
            }
            return '';
          }

          function week(isFuture) {
            return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
          }

          var hu = moment.defineLocale('hu', {
            months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
            monthsShort: 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
            weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
            weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
            weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'YYYY.MM.DD.',
              LL: 'YYYY. MMMM D.',
              LLL: 'YYYY. MMMM D. H:mm',
              LLLL: 'YYYY. MMMM D., dddd H:mm'
            },
            meridiemParse: /de|du/i,
            isPM: function (input) {
              return input.charAt(1).toLowerCase() === 'u';
            },
            meridiem: function (hours, minutes, isLower) {
              if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
              } else {
                return isLower === true ? 'du' : 'DU';
              }
            },
            calendar: {
              sameDay: '[ma] LT[-kor]',
              nextDay: '[holnap] LT[-kor]',
              nextWeek: function () {
                return week.call(this, true);
              },
              lastDay: '[tegnap] LT[-kor]',
              lastWeek: function () {
                return week.call(this, false);
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s múlva',
              past: '%s',
              s: translate,
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: translate,
              dd: translate,
              M: translate,
              MM: translate,
              y: translate,
              yy: translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return hu;

        })));


        /***/
      }),
      /* 328 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Armenian [hy-am]
        //! author : Armendarabyan : https://github.com/armendarabyan

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var hyAm = moment.defineLocale('hy-am', {
            months: {
              format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
              standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
            },
            monthsShort: 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
            weekdays: 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
            weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
            weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D MMMM YYYY թ.',
              LLL: 'D MMMM YYYY թ., HH:mm',
              LLLL: 'dddd, D MMMM YYYY թ., HH:mm'
            },
            calendar: {
              sameDay: '[այսօր] LT',
              nextDay: '[վաղը] LT',
              lastDay: '[երեկ] LT',
              nextWeek: function () {
                return 'dddd [օրը ժամը] LT';
              },
              lastWeek: function () {
                return '[անցած] dddd [օրը ժամը] LT';
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s հետո',
              past: '%s առաջ',
              s: 'մի քանի վայրկյան',
              m: 'րոպե',
              mm: '%d րոպե',
              h: 'ժամ',
              hh: '%d ժամ',
              d: 'օր',
              dd: '%d օր',
              M: 'ամիս',
              MM: '%d ամիս',
              y: 'տարի',
              yy: '%d տարի'
            },
            meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
            isPM: function (input) {
              return /^(ցերեկվա|երեկոյան)$/.test(input);
            },
            meridiem: function (hour) {
              if (hour < 4) {
                return 'գիշերվա';
              } else if (hour < 12) {
                return 'առավոտվա';
              } else if (hour < 17) {
                return 'ցերեկվա';
              } else {
                return 'երեկոյան';
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
            ordinal: function (number, period) {
              switch (period) {
              case 'DDD':
              case 'w':
              case 'W':
              case 'DDDo':
                if (number === 1) {
                  return number + '-ին';
                }
                return number + '-րդ';
              default:
                return number;
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return hyAm;

        })));


        /***/
      }),
      /* 329 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Indonesian [id]
        //! author : Mohammad Satrio Utomo : https://github.com/tyok
        //! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var id = moment.defineLocale('id', {
            months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
            monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
            weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
            weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
            weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
            longDateFormat: {
              LT: 'HH.mm',
              LTS: 'HH.mm.ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY [pukul] HH.mm',
              LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
            },
            meridiemParse: /pagi|siang|sore|malam/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === 'pagi') {
                return hour;
              } else if (meridiem === 'siang') {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === 'sore' || meridiem === 'malam') {
                return hour + 12;
              }
            },
            meridiem: function (hours, minutes, isLower) {
              if (hours < 11) {
                return 'pagi';
              } else if (hours < 15) {
                return 'siang';
              } else if (hours < 19) {
                return 'sore';
              } else {
                return 'malam';
              }
            },
            calendar: {
              sameDay: '[Hari ini pukul] LT',
              nextDay: '[Besok pukul] LT',
              nextWeek: 'dddd [pukul] LT',
              lastDay: '[Kemarin pukul] LT',
              lastWeek: 'dddd [lalu pukul] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'dalam %s',
              past: '%s yang lalu',
              s: 'beberapa detik',
              m: 'semenit',
              mm: '%d menit',
              h: 'sejam',
              hh: '%d jam',
              d: 'sehari',
              dd: '%d hari',
              M: 'sebulan',
              MM: '%d bulan',
              y: 'setahun',
              yy: '%d tahun'
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return id;

        })));


        /***/
      }),
      /* 330 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Icelandic [is]
        //! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function plural(n) {
            if (n % 100 === 11) {
              return true;
            } else if (n % 10 === 1) {
              return false;
            }
            return true;
          }

          function translate(number, withoutSuffix, key, isFuture) {
            var result = number + ' ';
            switch (key) {
            case 's':
              return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
            case 'm':
              return withoutSuffix ? 'mínúta' : 'mínútu';
            case 'mm':
              if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
              } else if (withoutSuffix) {
                return result + 'mínúta';
              }
              return result + 'mínútu';
            case 'hh':
              if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
              }
              return result + 'klukkustund';
            case 'd':
              if (withoutSuffix) {
                return 'dagur';
              }
              return isFuture ? 'dag' : 'degi';
            case 'dd':
              if (plural(number)) {
                if (withoutSuffix) {
                  return result + 'dagar';
                }
                return result + (isFuture ? 'daga' : 'dögum');
              } else if (withoutSuffix) {
                return result + 'dagur';
              }
              return result + (isFuture ? 'dag' : 'degi');
            case 'M':
              if (withoutSuffix) {
                return 'mánuður';
              }
              return isFuture ? 'mánuð' : 'mánuði';
            case 'MM':
              if (plural(number)) {
                if (withoutSuffix) {
                  return result + 'mánuðir';
                }
                return result + (isFuture ? 'mánuði' : 'mánuðum');
              } else if (withoutSuffix) {
                return result + 'mánuður';
              }
              return result + (isFuture ? 'mánuð' : 'mánuði');
            case 'y':
              return withoutSuffix || isFuture ? 'ár' : 'ári';
            case 'yy':
              if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
              }
              return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
            }
          }

          var is = moment.defineLocale('is', {
            months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
            monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
            weekdays: 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
            weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
            weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY [kl.] H:mm',
              LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm'
            },
            calendar: {
              sameDay: '[í dag kl.] LT',
              nextDay: '[á morgun kl.] LT',
              nextWeek: 'dddd [kl.] LT',
              lastDay: '[í gær kl.] LT',
              lastWeek: '[síðasta] dddd [kl.] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'eftir %s',
              past: 'fyrir %s síðan',
              s: translate,
              m: translate,
              mm: translate,
              h: 'klukkustund',
              hh: translate,
              d: translate,
              dd: translate,
              M: translate,
              MM: translate,
              y: translate,
              yy: translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return is;

        })));


        /***/
      }),
      /* 331 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Italian [it]
        //! author : Lorenzo : https://github.com/aliem
        //! author: Mattia Larentis: https://github.com/nostalgiaz

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var it = moment.defineLocale('it', {
            months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
            monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
            weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
            weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
            weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Oggi alle] LT',
              nextDay: '[Domani alle] LT',
              nextWeek: 'dddd [alle] LT',
              lastDay: '[Ieri alle] LT',
              lastWeek: function () {
                switch (this.day()) {
                case 0:
                  return '[la scorsa] dddd [alle] LT';
                default:
                  return '[lo scorso] dddd [alle] LT';
                }
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: function (s) {
                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
              },
              past: '%s fa',
              s: 'alcuni secondi',
              m: 'un minuto',
              mm: '%d minuti',
              h: 'un\'ora',
              hh: '%d ore',
              d: 'un giorno',
              dd: '%d giorni',
              M: 'un mese',
              MM: '%d mesi',
              y: 'un anno',
              yy: '%d anni'
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: '%dº',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return it;

        })));


        /***/
      }),
      /* 332 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Japanese [ja]
        //! author : LI Long : https://github.com/baryon

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var ja = moment.defineLocale('ja', {
            months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
            monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
            weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
            weekdaysShort: '日_月_火_水_木_金_土'.split('_'),
            weekdaysMin: '日_月_火_水_木_金_土'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'YYYY/MM/DD',
              LL: 'YYYY年M月D日',
              LLL: 'YYYY年M月D日 HH:mm',
              LLLL: 'YYYY年M月D日 HH:mm dddd',
              l: 'YYYY/MM/DD',
              ll: 'YYYY年M月D日',
              lll: 'YYYY年M月D日 HH:mm',
              llll: 'YYYY年M月D日 HH:mm dddd'
            },
            meridiemParse: /午前|午後/i,
            isPM: function (input) {
              return input === '午後';
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 12) {
                return '午前';
              } else {
                return '午後';
              }
            },
            calendar: {
              sameDay: '[今日] LT',
              nextDay: '[明日] LT',
              nextWeek: '[来週]dddd LT',
              lastDay: '[昨日] LT',
              lastWeek: '[前週]dddd LT',
              sameElse: 'L'
            },
            dayOfMonthOrdinalParse: /\d{1,2}日/,
            ordinal: function (number, period) {
              switch (period) {
              case 'd':
              case 'D':
              case 'DDD':
                return number + '日';
              default:
                return number;
              }
            },
            relativeTime: {
              future: '%s後',
              past: '%s前',
              s: '数秒',
              m: '1分',
              mm: '%d分',
              h: '1時間',
              hh: '%d時間',
              d: '1日',
              dd: '%d日',
              M: '1ヶ月',
              MM: '%dヶ月',
              y: '1年',
              yy: '%d年'
            }
          });

          return ja;

        })));


        /***/
      }),
      /* 333 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Javanese [jv]
        //! author : Rony Lantip : https://github.com/lantip
        //! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var jv = moment.defineLocale('jv', {
            months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
            monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
            weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
            weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
            weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
            longDateFormat: {
              LT: 'HH.mm',
              LTS: 'HH.mm.ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY [pukul] HH.mm',
              LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
            },
            meridiemParse: /enjing|siyang|sonten|ndalu/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === 'enjing') {
                return hour;
              } else if (meridiem === 'siyang') {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                return hour + 12;
              }
            },
            meridiem: function (hours, minutes, isLower) {
              if (hours < 11) {
                return 'enjing';
              } else if (hours < 15) {
                return 'siyang';
              } else if (hours < 19) {
                return 'sonten';
              } else {
                return 'ndalu';
              }
            },
            calendar: {
              sameDay: '[Dinten puniko pukul] LT',
              nextDay: '[Mbenjang pukul] LT',
              nextWeek: 'dddd [pukul] LT',
              lastDay: '[Kala wingi pukul] LT',
              lastWeek: 'dddd [kepengker pukul] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'wonten ing %s',
              past: '%s ingkang kepengker',
              s: 'sawetawis detik',
              m: 'setunggal menit',
              mm: '%d menit',
              h: 'setunggal jam',
              hh: '%d jam',
              d: 'sedinten',
              dd: '%d dinten',
              M: 'sewulan',
              MM: '%d wulan',
              y: 'setaun',
              yy: '%d taun'
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return jv;

        })));


        /***/
      }),
      /* 334 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Georgian [ka]
        //! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var ka = moment.defineLocale('ka', {
            months: {
              standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
              format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
            },
            monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
            weekdays: {
              standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
              format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
              isFormat: /(წინა|შემდეგ)/
            },
            weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
            weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
            longDateFormat: {
              LT: 'h:mm A',
              LTS: 'h:mm:ss A',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY h:mm A',
              LLLL: 'dddd, D MMMM YYYY h:mm A'
            },
            calendar: {
              sameDay: '[დღეს] LT[-ზე]',
              nextDay: '[ხვალ] LT[-ზე]',
              lastDay: '[გუშინ] LT[-ზე]',
              nextWeek: '[შემდეგ] dddd LT[-ზე]',
              lastWeek: '[წინა] dddd LT-ზე',
              sameElse: 'L'
            },
            relativeTime: {
              future: function (s) {
                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
                  s.replace(/ი$/, 'ში') :
                  s + 'ში';
              },
              past: function (s) {
                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
                  return s.replace(/(ი|ე)$/, 'ის უკან');
                }
                if ((/წელი/).test(s)) {
                  return s.replace(/წელი$/, 'წლის უკან');
                }
              },
              s: 'რამდენიმე წამი',
              m: 'წუთი',
              mm: '%d წუთი',
              h: 'საათი',
              hh: '%d საათი',
              d: 'დღე',
              dd: '%d დღე',
              M: 'თვე',
              MM: '%d თვე',
              y: 'წელი',
              yy: '%d წელი'
            },
            dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
            ordinal: function (number) {
              if (number === 0) {
                return number;
              }
              if (number === 1) {
                return number + '-ლი';
              }
              if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
                return 'მე-' + number;
              }
              return number + '-ე';
            },
            week: {
              dow: 1,
              doy: 7
            }
          });

          return ka;

        })));


        /***/
      }),
      /* 335 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Kazakh [kk]
        //! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var suffixes = {
            0: '-ші',
            1: '-ші',
            2: '-ші',
            3: '-ші',
            4: '-ші',
            5: '-ші',
            6: '-шы',
            7: '-ші',
            8: '-ші',
            9: '-шы',
            10: '-шы',
            20: '-шы',
            30: '-шы',
            40: '-шы',
            50: '-ші',
            60: '-шы',
            70: '-ші',
            80: '-ші',
            90: '-шы',
            100: '-ші'
          };

          var kk = moment.defineLocale('kk', {
            months: 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
            monthsShort: 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
            weekdays: 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
            weekdaysShort: 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
            weekdaysMin: 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Бүгін сағат] LT',
              nextDay: '[Ертең сағат] LT',
              nextWeek: 'dddd [сағат] LT',
              lastDay: '[Кеше сағат] LT',
              lastWeek: '[Өткен аптаның] dddd [сағат] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s ішінде',
              past: '%s бұрын',
              s: 'бірнеше секунд',
              m: 'бір минут',
              mm: '%d минут',
              h: 'бір сағат',
              hh: '%d сағат',
              d: 'бір күн',
              dd: '%d күн',
              M: 'бір ай',
              MM: '%d ай',
              y: 'бір жыл',
              yy: '%d жыл'
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
            ordinal: function (number) {
              var a = number % 10,
                b = number >= 100 ? 100 : null;
              return number + (suffixes[number] || suffixes[a] || suffixes[b]);
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return kk;

        })));


        /***/
      }),
      /* 336 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Cambodian [km]
        //! author : Kruy Vanna : https://github.com/kruyvanna

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var km = moment.defineLocale('km', {
            months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
            monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
            weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
            weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
            weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
              nextDay: '[ស្អែក ម៉ោង] LT',
              nextWeek: 'dddd [ម៉ោង] LT',
              lastDay: '[ម្សិលមិញ ម៉ោង] LT',
              lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%sទៀត',
              past: '%sមុន',
              s: 'ប៉ុន្មានវិនាទី',
              m: 'មួយនាទី',
              mm: '%d នាទី',
              h: 'មួយម៉ោង',
              hh: '%d ម៉ោង',
              d: 'មួយថ្ងៃ',
              dd: '%d ថ្ងៃ',
              M: 'មួយខែ',
              MM: '%d ខែ',
              y: 'មួយឆ្នាំ',
              yy: '%d ឆ្នាំ'
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return km;

        })));


        /***/
      }),
      /* 337 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Kannada [kn]
        //! author : Rajeev Naik : https://github.com/rajeevnaikte

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var symbolMap = {
            '1': '೧',
            '2': '೨',
            '3': '೩',
            '4': '೪',
            '5': '೫',
            '6': '೬',
            '7': '೭',
            '8': '೮',
            '9': '೯',
            '0': '೦'
          };
          var numberMap = {
            '೧': '1',
            '೨': '2',
            '೩': '3',
            '೪': '4',
            '೫': '5',
            '೬': '6',
            '೭': '7',
            '೮': '8',
            '೯': '9',
            '೦': '0'
          };

          var kn = moment.defineLocale('kn', {
            months: 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),
            monthsShort: 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬ_ಅಕ್ಟೋಬ_ನವೆಂಬ_ಡಿಸೆಂಬ'.split('_'),
            monthsParseExact: true,
            weekdays: 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),
            weekdaysShort: 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
            weekdaysMin: 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
            longDateFormat: {
              LT: 'A h:mm',
              LTS: 'A h:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY, A h:mm',
              LLLL: 'dddd, D MMMM YYYY, A h:mm'
            },
            calendar: {
              sameDay: '[ಇಂದು] LT',
              nextDay: '[ನಾಳೆ] LT',
              nextWeek: 'dddd, LT',
              lastDay: '[ನಿನ್ನೆ] LT',
              lastWeek: '[ಕೊನೆಯ] dddd, LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s ನಂತರ',
              past: '%s ಹಿಂದೆ',
              s: 'ಕೆಲವು ಕ್ಷಣಗಳು',
              m: 'ಒಂದು ನಿಮಿಷ',
              mm: '%d ನಿಮಿಷ',
              h: 'ಒಂದು ಗಂಟೆ',
              hh: '%d ಗಂಟೆ',
              d: 'ಒಂದು ದಿನ',
              dd: '%d ದಿನ',
              M: 'ಒಂದು ತಿಂಗಳು',
              MM: '%d ತಿಂಗಳು',
              y: 'ಒಂದು ವರ್ಷ',
              yy: '%d ವರ್ಷ'
            },
            preparse: function (string) {
              return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
                return numberMap[match];
              });
            },
            postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                return symbolMap[match];
              });
            },
            meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === 'ರಾತ್ರಿ') {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
                return hour;
              } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
                return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === 'ಸಂಜೆ') {
                return hour + 12;
              }
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                return 'ರಾತ್ರಿ';
              } else if (hour < 10) {
                return 'ಬೆಳಿಗ್ಗೆ';
              } else if (hour < 17) {
                return 'ಮಧ್ಯಾಹ್ನ';
              } else if (hour < 20) {
                return 'ಸಂಜೆ';
              } else {
                return 'ರಾತ್ರಿ';
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
            ordinal: function (number) {
              return number + 'ನೇ';
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return kn;

        })));


        /***/
      }),
      /* 338 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Korean [ko]
        //! author : Kyungwook, Park : https://github.com/kyungw00k
        //! author : Jeeeyul Lee <jeeeyul@gmail.com>

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var ko = moment.defineLocale('ko', {
            months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
            monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
            weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
            weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
            weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
            longDateFormat: {
              LT: 'A h:mm',
              LTS: 'A h:mm:ss',
              L: 'YYYY.MM.DD',
              LL: 'YYYY년 MMMM D일',
              LLL: 'YYYY년 MMMM D일 A h:mm',
              LLLL: 'YYYY년 MMMM D일 dddd A h:mm',
              l: 'YYYY.MM.DD',
              ll: 'YYYY년 MMMM D일',
              lll: 'YYYY년 MMMM D일 A h:mm',
              llll: 'YYYY년 MMMM D일 dddd A h:mm'
            },
            calendar: {
              sameDay: '오늘 LT',
              nextDay: '내일 LT',
              nextWeek: 'dddd LT',
              lastDay: '어제 LT',
              lastWeek: '지난주 dddd LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s 후',
              past: '%s 전',
              s: '몇 초',
              ss: '%d초',
              m: '1분',
              mm: '%d분',
              h: '한 시간',
              hh: '%d시간',
              d: '하루',
              dd: '%d일',
              M: '한 달',
              MM: '%d달',
              y: '일 년',
              yy: '%d년'
            },
            dayOfMonthOrdinalParse: /\d{1,2}일/,
            ordinal: '%d일',
            meridiemParse: /오전|오후/,
            isPM: function (token) {
              return token === '오후';
            },
            meridiem: function (hour, minute, isUpper) {
              return hour < 12 ? '오전' : '오후';
            }
          });

          return ko;

        })));


        /***/
      }),
      /* 339 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Kyrgyz [ky]
        //! author : Chyngyz Arystan uulu : https://github.com/chyngyz

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';



          var suffixes = {
            0: '-чү',
            1: '-чи',
            2: '-чи',
            3: '-чү',
            4: '-чү',
            5: '-чи',
            6: '-чы',
            7: '-чи',
            8: '-чи',
            9: '-чу',
            10: '-чу',
            20: '-чы',
            30: '-чу',
            40: '-чы',
            50: '-чү',
            60: '-чы',
            70: '-чи',
            80: '-чи',
            90: '-чу',
            100: '-чү'
          };

          var ky = moment.defineLocale('ky', {
            months: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
            monthsShort: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
            weekdays: 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
            weekdaysShort: 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
            weekdaysMin: 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Бүгүн саат] LT',
              nextDay: '[Эртең саат] LT',
              nextWeek: 'dddd [саат] LT',
              lastDay: '[Кече саат] LT',
              lastWeek: '[Өткен аптанын] dddd [күнү] [саат] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s ичинде',
              past: '%s мурун',
              s: 'бирнече секунд',
              m: 'бир мүнөт',
              mm: '%d мүнөт',
              h: 'бир саат',
              hh: '%d саат',
              d: 'бир күн',
              dd: '%d күн',
              M: 'бир ай',
              MM: '%d ай',
              y: 'бир жыл',
              yy: '%d жыл'
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
            ordinal: function (number) {
              var a = number % 10,
                b = number >= 100 ? 100 : null;
              return number + (suffixes[number] || suffixes[a] || suffixes[b]);
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return ky;

        })));


        /***/
      }),
      /* 340 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Luxembourgish [lb]
        //! author : mweimerskirch : https://github.com/mweimerskirch
        //! author : David Raison : https://github.com/kwisatz

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              'm': ['eng Minutt', 'enger Minutt'],
              'h': ['eng Stonn', 'enger Stonn'],
              'd': ['een Dag', 'engem Dag'],
              'M': ['ee Mount', 'engem Mount'],
              'y': ['ee Joer', 'engem Joer']
            };
            return withoutSuffix ? format[key][0] : format[key][1];
          }

          function processFutureTime(string) {
            var number = string.substr(0, string.indexOf(' '));
            if (eifelerRegelAppliesToNumber(number)) {
              return 'a ' + string;
            }
            return 'an ' + string;
          }

          function processPastTime(string) {
            var number = string.substr(0, string.indexOf(' '));
            if (eifelerRegelAppliesToNumber(number)) {
              return 'viru ' + string;
            }
            return 'virun ' + string;
          }
          /**
           * Returns true if the word before the given number loses the '-n' ending.
           * e.g. 'an 10 Deeg' but 'a 5 Deeg'
           *
           * @param number {integer}
           * @returns {boolean}
           */
          function eifelerRegelAppliesToNumber(number) {
            number = parseInt(number, 10);
            if (isNaN(number)) {
              return false;
            }
            if (number < 0) {
              // Negative Number --> always true
              return true;
            } else if (number < 10) {
              // Only 1 digit
              if (4 <= number && number <= 7) {
                return true;
              }
              return false;
            } else if (number < 100) {
              // 2 digits
              var lastDigit = number % 10,
                firstDigit = number / 10;
              if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
              }
              return eifelerRegelAppliesToNumber(lastDigit);
            } else if (number < 10000) {
              // 3 or 4 digits --> recursively check first digit
              while (number >= 10) {
                number = number / 10;
              }
              return eifelerRegelAppliesToNumber(number);
            } else {
              // Anything larger than 4 digits: recursively check first n-3 digits
              number = number / 1000;
              return eifelerRegelAppliesToNumber(number);
            }
          }

          var lb = moment.defineLocale('lb', {
            months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
            monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
            monthsParseExact: true,
            weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
            weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
            weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'H:mm [Auer]',
              LTS: 'H:mm:ss [Auer]',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm [Auer]',
              LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
            },
            calendar: {
              sameDay: '[Haut um] LT',
              sameElse: 'L',
              nextDay: '[Muer um] LT',
              nextWeek: 'dddd [um] LT',
              lastDay: '[Gëschter um] LT',
              lastWeek: function () {
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                case 2:
                case 4:
                  return '[Leschten] dddd [um] LT';
                default:
                  return '[Leschte] dddd [um] LT';
                }
              }
            },
            relativeTime: {
              future: processFutureTime,
              past: processPastTime,
              s: 'e puer Sekonnen',
              m: processRelativeTime,
              mm: '%d Minutten',
              h: processRelativeTime,
              hh: '%d Stonnen',
              d: processRelativeTime,
              dd: '%d Deeg',
              M: processRelativeTime,
              MM: '%d Méint',
              y: processRelativeTime,
              yy: '%d Joer'
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return lb;

        })));


        /***/
      }),
      /* 341 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Lao [lo]
        //! author : Ryan Hart : https://github.com/ryanhart2

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var lo = moment.defineLocale('lo', {
            months: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
            monthsShort: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
            weekdays: 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
            weekdaysShort: 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
            weekdaysMin: 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'ວັນdddd D MMMM YYYY HH:mm'
            },
            meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
            isPM: function (input) {
              return input === 'ຕອນແລງ';
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 12) {
                return 'ຕອນເຊົ້າ';
              } else {
                return 'ຕອນແລງ';
              }
            },
            calendar: {
              sameDay: '[ມື້ນີ້ເວລາ] LT',
              nextDay: '[ມື້ອື່ນເວລາ] LT',
              nextWeek: '[ວັນ]dddd[ໜ້າເວລາ] LT',
              lastDay: '[ມື້ວານນີ້ເວລາ] LT',
              lastWeek: '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'ອີກ %s',
              past: '%sຜ່ານມາ',
              s: 'ບໍ່ເທົ່າໃດວິນາທີ',
              m: '1 ນາທີ',
              mm: '%d ນາທີ',
              h: '1 ຊົ່ວໂມງ',
              hh: '%d ຊົ່ວໂມງ',
              d: '1 ມື້',
              dd: '%d ມື້',
              M: '1 ເດືອນ',
              MM: '%d ເດືອນ',
              y: '1 ປີ',
              yy: '%d ປີ'
            },
            dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
            ordinal: function (number) {
              return 'ທີ່' + number;
            }
          });

          return lo;

        })));


        /***/
      }),
      /* 342 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Lithuanian [lt]
        //! author : Mindaugas Mozūras : https://github.com/mmozuras

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var units = {
            'm': 'minutė_minutės_minutę',
            'mm': 'minutės_minučių_minutes',
            'h': 'valanda_valandos_valandą',
            'hh': 'valandos_valandų_valandas',
            'd': 'diena_dienos_dieną',
            'dd': 'dienos_dienų_dienas',
            'M': 'mėnuo_mėnesio_mėnesį',
            'MM': 'mėnesiai_mėnesių_mėnesius',
            'y': 'metai_metų_metus',
            'yy': 'metai_metų_metus'
          };

          function translateSeconds(number, withoutSuffix, key, isFuture) {
            if (withoutSuffix) {
              return 'kelios sekundės';
            } else {
              return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
            }
          }

          function translateSingular(number, withoutSuffix, key, isFuture) {
            return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
          }

          function special(number) {
            return number % 10 === 0 || (number > 10 && number < 20);
          }

          function forms(key) {
            return units[key].split('_');
          }

          function translate(number, withoutSuffix, key, isFuture) {
            var result = number + ' ';
            if (number === 1) {
              return result + translateSingular(number, withoutSuffix, key[0], isFuture);
            } else if (withoutSuffix) {
              return result + (special(number) ? forms(key)[1] : forms(key)[0]);
            } else {
              if (isFuture) {
                return result + forms(key)[1];
              } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
              }
            }
          }
          var lt = moment.defineLocale('lt', {
            months: {
              format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
              standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
              isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
            },
            monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
            weekdays: {
              format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
              standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
              isFormat: /dddd HH:mm/
            },
            weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
            weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'YYYY-MM-DD',
              LL: 'YYYY [m.] MMMM D [d.]',
              LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
              LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
              l: 'YYYY-MM-DD',
              ll: 'YYYY [m.] MMMM D [d.]',
              lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
              llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
            },
            calendar: {
              sameDay: '[Šiandien] LT',
              nextDay: '[Rytoj] LT',
              nextWeek: 'dddd LT',
              lastDay: '[Vakar] LT',
              lastWeek: '[Praėjusį] dddd LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'po %s',
              past: 'prieš %s',
              s: translateSeconds,
              m: translateSingular,
              mm: translate,
              h: translateSingular,
              hh: translate,
              d: translateSingular,
              dd: translate,
              M: translateSingular,
              MM: translate,
              y: translateSingular,
              yy: translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}-oji/,
            ordinal: function (number) {
              return number + '-oji';
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return lt;

        })));


        /***/
      }),
      /* 343 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Latvian [lv]
        //! author : Kristaps Karlsons : https://github.com/skakri
        //! author : Jānis Elmeris : https://github.com/JanisE

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var units = {
            'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
            'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
            'h': 'stundas_stundām_stunda_stundas'.split('_'),
            'hh': 'stundas_stundām_stunda_stundas'.split('_'),
            'd': 'dienas_dienām_diena_dienas'.split('_'),
            'dd': 'dienas_dienām_diena_dienas'.split('_'),
            'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
            'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
            'y': 'gada_gadiem_gads_gadi'.split('_'),
            'yy': 'gada_gadiem_gads_gadi'.split('_')
          };
          /**
           * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
           */
          function format(forms, number, withoutSuffix) {
            if (withoutSuffix) {
              // E.g. "21 minūte", "3 minūtes".
              return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
            } else {
              // E.g. "21 minūtes" as in "pēc 21 minūtes".
              // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
              return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
            }
          }

          function relativeTimeWithPlural(number, withoutSuffix, key) {
            return number + ' ' + format(units[key], number, withoutSuffix);
          }

          function relativeTimeWithSingular(number, withoutSuffix, key) {
            return format(units[key], number, withoutSuffix);
          }

          function relativeSeconds(number, withoutSuffix) {
            return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
          }

          var lv = moment.defineLocale('lv', {
            months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
            monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
            weekdays: 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
            weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
            weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY.',
              LL: 'YYYY. [gada] D. MMMM',
              LLL: 'YYYY. [gada] D. MMMM, HH:mm',
              LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm'
            },
            calendar: {
              sameDay: '[Šodien pulksten] LT',
              nextDay: '[Rīt pulksten] LT',
              nextWeek: 'dddd [pulksten] LT',
              lastDay: '[Vakar pulksten] LT',
              lastWeek: '[Pagājušā] dddd [pulksten] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'pēc %s',
              past: 'pirms %s',
              s: relativeSeconds,
              m: relativeTimeWithSingular,
              mm: relativeTimeWithPlural,
              h: relativeTimeWithSingular,
              hh: relativeTimeWithPlural,
              d: relativeTimeWithSingular,
              dd: relativeTimeWithPlural,
              M: relativeTimeWithSingular,
              MM: relativeTimeWithPlural,
              y: relativeTimeWithSingular,
              yy: relativeTimeWithPlural
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return lv;

        })));


        /***/
      }),
      /* 344 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Montenegrin [me]
        //! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var translator = {
            words: { //Different grammatical cases
              m: ['jedan minut', 'jednog minuta'],
              mm: ['minut', 'minuta', 'minuta'],
              h: ['jedan sat', 'jednog sata'],
              hh: ['sat', 'sata', 'sati'],
              dd: ['dan', 'dana', 'dana'],
              MM: ['mjesec', 'mjeseca', 'mjeseci'],
              yy: ['godina', 'godine', 'godina']
            },
            correctGrammaticalCase: function (number, wordKey) {
              return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
            },
            translate: function (number, withoutSuffix, key) {
              var wordKey = translator.words[key];
              if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
              } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
              }
            }
          };

          var me = moment.defineLocale('me', {
            months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
            monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
            monthsParseExact: true,
            weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
            weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
            weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm',
              LLLL: 'dddd, D. MMMM YYYY H:mm'
            },
            calendar: {
              sameDay: '[danas u] LT',
              nextDay: '[sjutra u] LT',

              nextWeek: function () {
                switch (this.day()) {
                case 0:
                  return '[u] [nedjelju] [u] LT';
                case 3:
                  return '[u] [srijedu] [u] LT';
                case 6:
                  return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                  return '[u] dddd [u] LT';
                }
              },
              lastDay: '[juče u] LT',
              lastWeek: function () {
                var lastWeekDays = [
                  '[prošle] [nedjelje] [u] LT',
                  '[prošlog] [ponedjeljka] [u] LT',
                  '[prošlog] [utorka] [u] LT',
                  '[prošle] [srijede] [u] LT',
                  '[prošlog] [četvrtka] [u] LT',
                  '[prošlog] [petka] [u] LT',
                  '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'za %s',
              past: 'prije %s',
              s: 'nekoliko sekundi',
              m: translator.translate,
              mm: translator.translate,
              h: translator.translate,
              hh: translator.translate,
              d: 'dan',
              dd: translator.translate,
              M: 'mjesec',
              MM: translator.translate,
              y: 'godinu',
              yy: translator.translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return me;

        })));


        /***/
      }),
      /* 345 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Maori [mi]
        //! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var mi = moment.defineLocale('mi', {
            months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
            monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
            monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
            monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
            monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
            monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
            weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
            weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
            weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY [i] HH:mm',
              LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
            },
            calendar: {
              sameDay: '[i teie mahana, i] LT',
              nextDay: '[apopo i] LT',
              nextWeek: 'dddd [i] LT',
              lastDay: '[inanahi i] LT',
              lastWeek: 'dddd [whakamutunga i] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'i roto i %s',
              past: '%s i mua',
              s: 'te hēkona ruarua',
              m: 'he meneti',
              mm: '%d meneti',
              h: 'te haora',
              hh: '%d haora',
              d: 'he ra',
              dd: '%d ra',
              M: 'he marama',
              MM: '%d marama',
              y: 'he tau',
              yy: '%d tau'
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: '%dº',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return mi;

        })));


        /***/
      }),
      /* 346 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Macedonian [mk]
        //! author : Borislav Mickov : https://github.com/B0k0

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var mk = moment.defineLocale('mk', {
            months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
            monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
            weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
            weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
            weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'D.MM.YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY H:mm',
              LLLL: 'dddd, D MMMM YYYY H:mm'
            },
            calendar: {
              sameDay: '[Денес во] LT',
              nextDay: '[Утре во] LT',
              nextWeek: '[Во] dddd [во] LT',
              lastDay: '[Вчера во] LT',
              lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                  return '[Изминатата] dddd [во] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                  return '[Изминатиот] dddd [во] LT';
                }
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'после %s',
              past: 'пред %s',
              s: 'неколку секунди',
              m: 'минута',
              mm: '%d минути',
              h: 'час',
              hh: '%d часа',
              d: 'ден',
              dd: '%d дена',
              M: 'месец',
              MM: '%d месеци',
              y: 'година',
              yy: '%d години'
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
            ordinal: function (number) {
              var lastDigit = number % 10,
                last2Digits = number % 100;
              if (number === 0) {
                return number + '-ев';
              } else if (last2Digits === 0) {
                return number + '-ен';
              } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
              } else if (lastDigit === 1) {
                return number + '-ви';
              } else if (lastDigit === 2) {
                return number + '-ри';
              } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
              } else {
                return number + '-ти';
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return mk;

        })));


        /***/
      }),
      /* 347 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Malayalam [ml]
        //! author : Floyd Pink : https://github.com/floydpink

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var ml = moment.defineLocale('ml', {
            months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
            monthsShort: 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
            monthsParseExact: true,
            weekdays: 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
            weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
            weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
            longDateFormat: {
              LT: 'A h:mm -നു',
              LTS: 'A h:mm:ss -നു',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY, A h:mm -നു',
              LLLL: 'dddd, D MMMM YYYY, A h:mm -നു'
            },
            calendar: {
              sameDay: '[ഇന്ന്] LT',
              nextDay: '[നാളെ] LT',
              nextWeek: 'dddd, LT',
              lastDay: '[ഇന്നലെ] LT',
              lastWeek: '[കഴിഞ്ഞ] dddd, LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s കഴിഞ്ഞ്',
              past: '%s മുൻപ്',
              s: 'അൽപ നിമിഷങ്ങൾ',
              m: 'ഒരു മിനിറ്റ്',
              mm: '%d മിനിറ്റ്',
              h: 'ഒരു മണിക്കൂർ',
              hh: '%d മണിക്കൂർ',
              d: 'ഒരു ദിവസം',
              dd: '%d ദിവസം',
              M: 'ഒരു മാസം',
              MM: '%d മാസം',
              y: 'ഒരു വർഷം',
              yy: '%d വർഷം'
            },
            meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if ((meridiem === 'രാത്രി' && hour >= 4) ||
                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
                meridiem === 'വൈകുന്നേരം') {
                return hour + 12;
              } else {
                return hour;
              }
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                return 'രാത്രി';
              } else if (hour < 12) {
                return 'രാവിലെ';
              } else if (hour < 17) {
                return 'ഉച്ച കഴിഞ്ഞ്';
              } else if (hour < 20) {
                return 'വൈകുന്നേരം';
              } else {
                return 'രാത്രി';
              }
            }
          });

          return ml;

        })));


        /***/
      }),
      /* 348 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Marathi [mr]
        //! author : Harshad Kale : https://github.com/kalehv
        //! author : Vivek Athalye : https://github.com/vnathalye

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var symbolMap = {
            '1': '१',
            '2': '२',
            '3': '३',
            '4': '४',
            '5': '५',
            '6': '६',
            '7': '७',
            '8': '८',
            '9': '९',
            '0': '०'
          };
          var numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0'
          };

          function relativeTimeMr(number, withoutSuffix, string, isFuture) {
            var output = '';
            if (withoutSuffix) {
              switch (string) {
              case 's':
                output = 'काही सेकंद';
                break;
              case 'm':
                output = 'एक मिनिट';
                break;
              case 'mm':
                output = '%d मिनिटे';
                break;
              case 'h':
                output = 'एक तास';
                break;
              case 'hh':
                output = '%d तास';
                break;
              case 'd':
                output = 'एक दिवस';
                break;
              case 'dd':
                output = '%d दिवस';
                break;
              case 'M':
                output = 'एक महिना';
                break;
              case 'MM':
                output = '%d महिने';
                break;
              case 'y':
                output = 'एक वर्ष';
                break;
              case 'yy':
                output = '%d वर्षे';
                break;
              }
            } else {
              switch (string) {
              case 's':
                output = 'काही सेकंदां';
                break;
              case 'm':
                output = 'एका मिनिटा';
                break;
              case 'mm':
                output = '%d मिनिटां';
                break;
              case 'h':
                output = 'एका तासा';
                break;
              case 'hh':
                output = '%d तासां';
                break;
              case 'd':
                output = 'एका दिवसा';
                break;
              case 'dd':
                output = '%d दिवसां';
                break;
              case 'M':
                output = 'एका महिन्या';
                break;
              case 'MM':
                output = '%d महिन्यां';
                break;
              case 'y':
                output = 'एका वर्षा';
                break;
              case 'yy':
                output = '%d वर्षां';
                break;
              }
            }
            return output.replace(/%d/i, number);
          }

          var mr = moment.defineLocale('mr', {
            months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
            monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
            monthsParseExact: true,
            weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
            weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
            weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
            longDateFormat: {
              LT: 'A h:mm वाजता',
              LTS: 'A h:mm:ss वाजता',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY, A h:mm वाजता',
              LLLL: 'dddd, D MMMM YYYY, A h:mm वाजता'
            },
            calendar: {
              sameDay: '[आज] LT',
              nextDay: '[उद्या] LT',
              nextWeek: 'dddd, LT',
              lastDay: '[काल] LT',
              lastWeek: '[मागील] dddd, LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%sमध्ये',
              past: '%sपूर्वी',
              s: relativeTimeMr,
              m: relativeTimeMr,
              mm: relativeTimeMr,
              h: relativeTimeMr,
              hh: relativeTimeMr,
              d: relativeTimeMr,
              dd: relativeTimeMr,
              M: relativeTimeMr,
              MM: relativeTimeMr,
              y: relativeTimeMr,
              yy: relativeTimeMr
            },
            preparse: function (string) {
              return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
              });
            },
            postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                return symbolMap[match];
              });
            },
            meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === 'रात्री') {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === 'सकाळी') {
                return hour;
              } else if (meridiem === 'दुपारी') {
                return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === 'सायंकाळी') {
                return hour + 12;
              }
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                return 'रात्री';
              } else if (hour < 10) {
                return 'सकाळी';
              } else if (hour < 17) {
                return 'दुपारी';
              } else if (hour < 20) {
                return 'सायंकाळी';
              } else {
                return 'रात्री';
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return mr;

        })));


        /***/
      }),
      /* 349 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Malay [ms]
        //! author : Weldan Jamili : https://github.com/weldan

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var ms = moment.defineLocale('ms', {
            months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
            monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
            weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
            weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
            weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
            longDateFormat: {
              LT: 'HH.mm',
              LTS: 'HH.mm.ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY [pukul] HH.mm',
              LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
            },
            meridiemParse: /pagi|tengahari|petang|malam/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === 'pagi') {
                return hour;
              } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
              }
            },
            meridiem: function (hours, minutes, isLower) {
              if (hours < 11) {
                return 'pagi';
              } else if (hours < 15) {
                return 'tengahari';
              } else if (hours < 19) {
                return 'petang';
              } else {
                return 'malam';
              }
            },
            calendar: {
              sameDay: '[Hari ini pukul] LT',
              nextDay: '[Esok pukul] LT',
              nextWeek: 'dddd [pukul] LT',
              lastDay: '[Kelmarin pukul] LT',
              lastWeek: 'dddd [lepas pukul] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'dalam %s',
              past: '%s yang lepas',
              s: 'beberapa saat',
              m: 'seminit',
              mm: '%d minit',
              h: 'sejam',
              hh: '%d jam',
              d: 'sehari',
              dd: '%d hari',
              M: 'sebulan',
              MM: '%d bulan',
              y: 'setahun',
              yy: '%d tahun'
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return ms;

        })));


        /***/
      }),
      /* 350 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Malay [ms-my]
        //! note : DEPRECATED, the correct one is [ms]
        //! author : Weldan Jamili : https://github.com/weldan

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var msMy = moment.defineLocale('ms-my', {
            months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
            monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
            weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
            weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
            weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
            longDateFormat: {
              LT: 'HH.mm',
              LTS: 'HH.mm.ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY [pukul] HH.mm',
              LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
            },
            meridiemParse: /pagi|tengahari|petang|malam/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === 'pagi') {
                return hour;
              } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
              }
            },
            meridiem: function (hours, minutes, isLower) {
              if (hours < 11) {
                return 'pagi';
              } else if (hours < 15) {
                return 'tengahari';
              } else if (hours < 19) {
                return 'petang';
              } else {
                return 'malam';
              }
            },
            calendar: {
              sameDay: '[Hari ini pukul] LT',
              nextDay: '[Esok pukul] LT',
              nextWeek: 'dddd [pukul] LT',
              lastDay: '[Kelmarin pukul] LT',
              lastWeek: 'dddd [lepas pukul] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'dalam %s',
              past: '%s yang lepas',
              s: 'beberapa saat',
              m: 'seminit',
              mm: '%d minit',
              h: 'sejam',
              hh: '%d jam',
              d: 'sehari',
              dd: '%d hari',
              M: 'sebulan',
              MM: '%d bulan',
              y: 'setahun',
              yy: '%d tahun'
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return msMy;

        })));


        /***/
      }),
      /* 351 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Burmese [my]
        //! author : Squar team, mysquar.com
        //! author : David Rossellat : https://github.com/gholadr
        //! author : Tin Aung Lin : https://github.com/thanyawzinmin

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var symbolMap = {
            '1': '၁',
            '2': '၂',
            '3': '၃',
            '4': '၄',
            '5': '၅',
            '6': '၆',
            '7': '၇',
            '8': '၈',
            '9': '၉',
            '0': '၀'
          };
          var numberMap = {
            '၁': '1',
            '၂': '2',
            '၃': '3',
            '၄': '4',
            '၅': '5',
            '၆': '6',
            '၇': '7',
            '၈': '8',
            '၉': '9',
            '၀': '0'
          };

          var my = moment.defineLocale('my', {
            months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
            monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
            weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
            weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
            weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[ယနေ.] LT [မှာ]',
              nextDay: '[မနက်ဖြန်] LT [မှာ]',
              nextWeek: 'dddd LT [မှာ]',
              lastDay: '[မနေ.က] LT [မှာ]',
              lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'လာမည့် %s မှာ',
              past: 'လွန်ခဲ့သော %s က',
              s: 'စက္ကန်.အနည်းငယ်',
              m: 'တစ်မိနစ်',
              mm: '%d မိနစ်',
              h: 'တစ်နာရီ',
              hh: '%d နာရီ',
              d: 'တစ်ရက်',
              dd: '%d ရက်',
              M: 'တစ်လ',
              MM: '%d လ',
              y: 'တစ်နှစ်',
              yy: '%d နှစ်'
            },
            preparse: function (string) {
              return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                return numberMap[match];
              });
            },
            postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                return symbolMap[match];
              });
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return my;

        })));


        /***/
      }),
      /* 352 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Norwegian Bokmål [nb]
        //! authors : Espen Hovlandsdal : https://github.com/rexxars
        //!           Sigurd Gartmann : https://github.com/sigurdga

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var nb = moment.defineLocale('nb', {
            months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
            monthsShort: 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
            monthsParseExact: true,
            weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
            weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),
            weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY [kl.] HH:mm',
              LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'
            },
            calendar: {
              sameDay: '[i dag kl.] LT',
              nextDay: '[i morgen kl.] LT',
              nextWeek: 'dddd [kl.] LT',
              lastDay: '[i går kl.] LT',
              lastWeek: '[forrige] dddd [kl.] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'om %s',
              past: '%s siden',
              s: 'noen sekunder',
              m: 'ett minutt',
              mm: '%d minutter',
              h: 'en time',
              hh: '%d timer',
              d: 'en dag',
              dd: '%d dager',
              M: 'en måned',
              MM: '%d måneder',
              y: 'ett år',
              yy: '%d år'
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return nb;

        })));


        /***/
      }),
      /* 353 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Nepalese [ne]
        //! author : suvash : https://github.com/suvash

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var symbolMap = {
            '1': '१',
            '2': '२',
            '3': '३',
            '4': '४',
            '5': '५',
            '6': '६',
            '7': '७',
            '8': '८',
            '9': '९',
            '0': '०'
          };
          var numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0'
          };

          var ne = moment.defineLocale('ne', {
            months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
            monthsShort: 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
            monthsParseExact: true,
            weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
            weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
            weekdaysMin: 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'Aको h:mm बजे',
              LTS: 'Aको h:mm:ss बजे',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY, Aको h:mm बजे',
              LLLL: 'dddd, D MMMM YYYY, Aको h:mm बजे'
            },
            preparse: function (string) {
              return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
              });
            },
            postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                return symbolMap[match];
              });
            },
            meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === 'राति') {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === 'बिहान') {
                return hour;
              } else if (meridiem === 'दिउँसो') {
                return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === 'साँझ') {
                return hour + 12;
              }
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 3) {
                return 'राति';
              } else if (hour < 12) {
                return 'बिहान';
              } else if (hour < 16) {
                return 'दिउँसो';
              } else if (hour < 20) {
                return 'साँझ';
              } else {
                return 'राति';
              }
            },
            calendar: {
              sameDay: '[आज] LT',
              nextDay: '[भोलि] LT',
              nextWeek: '[आउँदो] dddd[,] LT',
              lastDay: '[हिजो] LT',
              lastWeek: '[गएको] dddd[,] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%sमा',
              past: '%s अगाडि',
              s: 'केही क्षण',
              m: 'एक मिनेट',
              mm: '%d मिनेट',
              h: 'एक घण्टा',
              hh: '%d घण्टा',
              d: 'एक दिन',
              dd: '%d दिन',
              M: 'एक महिना',
              MM: '%d महिना',
              y: 'एक बर्ष',
              yy: '%d बर्ष'
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return ne;

        })));


        /***/
      }),
      /* 354 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Dutch [nl]
        //! author : Joris Röling : https://github.com/jorisroling
        //! author : Jacob Middag : https://github.com/middagj

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
          var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

          var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
          var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

          var nl = moment.defineLocale('nl', {
            months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
            monthsShort: function (m, format) {
              if (!m) {
                return monthsShortWithDots;
              } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
              } else {
                return monthsShortWithDots[m.month()];
              }
            },

            monthsRegex: monthsRegex,
            monthsShortRegex: monthsRegex,
            monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
            monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

            monthsParse: monthsParse,
            longMonthsParse: monthsParse,
            shortMonthsParse: monthsParse,

            weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
            weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
            weekdaysMin: 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD-MM-YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[vandaag om] LT',
              nextDay: '[morgen om] LT',
              nextWeek: 'dddd [om] LT',
              lastDay: '[gisteren om] LT',
              lastWeek: '[afgelopen] dddd [om] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'over %s',
              past: '%s geleden',
              s: 'een paar seconden',
              m: 'één minuut',
              mm: '%d minuten',
              h: 'één uur',
              hh: '%d uur',
              d: 'één dag',
              dd: '%d dagen',
              M: 'één maand',
              MM: '%d maanden',
              y: 'één jaar',
              yy: '%d jaar'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
            ordinal: function (number) {
              return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return nl;

        })));


        /***/
      }),
      /* 355 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Dutch (Belgium) [nl-be]
        //! author : Joris Röling : https://github.com/jorisroling
        //! author : Jacob Middag : https://github.com/middagj

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
          var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

          var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
          var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

          var nlBe = moment.defineLocale('nl-be', {
            months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
            monthsShort: function (m, format) {
              if (!m) {
                return monthsShortWithDots;
              } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
              } else {
                return monthsShortWithDots[m.month()];
              }
            },

            monthsRegex: monthsRegex,
            monthsShortRegex: monthsRegex,
            monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
            monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

            monthsParse: monthsParse,
            longMonthsParse: monthsParse,
            shortMonthsParse: monthsParse,

            weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
            weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
            weekdaysMin: 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[vandaag om] LT',
              nextDay: '[morgen om] LT',
              nextWeek: 'dddd [om] LT',
              lastDay: '[gisteren om] LT',
              lastWeek: '[afgelopen] dddd [om] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'over %s',
              past: '%s geleden',
              s: 'een paar seconden',
              m: 'één minuut',
              mm: '%d minuten',
              h: 'één uur',
              hh: '%d uur',
              d: 'één dag',
              dd: '%d dagen',
              M: 'één maand',
              MM: '%d maanden',
              y: 'één jaar',
              yy: '%d jaar'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
            ordinal: function (number) {
              return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return nlBe;

        })));


        /***/
      }),
      /* 356 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Nynorsk [nn]
        //! author : https://github.com/mechuwind

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var nn = moment.defineLocale('nn', {
            months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
            monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
            weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
            weekdaysShort: 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
            weekdaysMin: 'su_må_ty_on_to_fr_lø'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY [kl.] H:mm',
              LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'
            },
            calendar: {
              sameDay: '[I dag klokka] LT',
              nextDay: '[I morgon klokka] LT',
              nextWeek: 'dddd [klokka] LT',
              lastDay: '[I går klokka] LT',
              lastWeek: '[Føregåande] dddd [klokka] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'om %s',
              past: '%s sidan',
              s: 'nokre sekund',
              m: 'eit minutt',
              mm: '%d minutt',
              h: 'ein time',
              hh: '%d timar',
              d: 'ein dag',
              dd: '%d dagar',
              M: 'ein månad',
              MM: '%d månader',
              y: 'eit år',
              yy: '%d år'
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return nn;

        })));


        /***/
      }),
      /* 357 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Punjabi (India) [pa-in]
        //! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var symbolMap = {
            '1': '੧',
            '2': '੨',
            '3': '੩',
            '4': '੪',
            '5': '੫',
            '6': '੬',
            '7': '੭',
            '8': '੮',
            '9': '੯',
            '0': '੦'
          };
          var numberMap = {
            '੧': '1',
            '੨': '2',
            '੩': '3',
            '੪': '4',
            '੫': '5',
            '੬': '6',
            '੭': '7',
            '੮': '8',
            '੯': '9',
            '੦': '0'
          };

          var paIn = moment.defineLocale('pa-in', {
            // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
            months: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
            monthsShort: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
            weekdays: 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
            weekdaysShort: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
            weekdaysMin: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
            longDateFormat: {
              LT: 'A h:mm ਵਜੇ',
              LTS: 'A h:mm:ss ਵਜੇ',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY, A h:mm ਵਜੇ',
              LLLL: 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
            },
            calendar: {
              sameDay: '[ਅਜ] LT',
              nextDay: '[ਕਲ] LT',
              nextWeek: 'dddd, LT',
              lastDay: '[ਕਲ] LT',
              lastWeek: '[ਪਿਛਲੇ] dddd, LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s ਵਿੱਚ',
              past: '%s ਪਿਛਲੇ',
              s: 'ਕੁਝ ਸਕਿੰਟ',
              m: 'ਇਕ ਮਿੰਟ',
              mm: '%d ਮਿੰਟ',
              h: 'ਇੱਕ ਘੰਟਾ',
              hh: '%d ਘੰਟੇ',
              d: 'ਇੱਕ ਦਿਨ',
              dd: '%d ਦਿਨ',
              M: 'ਇੱਕ ਮਹੀਨਾ',
              MM: '%d ਮਹੀਨੇ',
              y: 'ਇੱਕ ਸਾਲ',
              yy: '%d ਸਾਲ'
            },
            preparse: function (string) {
              return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
                return numberMap[match];
              });
            },
            postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                return symbolMap[match];
              });
            },
            // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
            // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
            meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === 'ਰਾਤ') {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === 'ਸਵੇਰ') {
                return hour;
              } else if (meridiem === 'ਦੁਪਹਿਰ') {
                return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === 'ਸ਼ਾਮ') {
                return hour + 12;
              }
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                return 'ਰਾਤ';
              } else if (hour < 10) {
                return 'ਸਵੇਰ';
              } else if (hour < 17) {
                return 'ਦੁਪਹਿਰ';
              } else if (hour < 20) {
                return 'ਸ਼ਾਮ';
              } else {
                return 'ਰਾਤ';
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return paIn;

        })));


        /***/
      }),
      /* 358 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Polish [pl]
        //! author : Rafal Hirsz : https://github.com/evoL

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');
          var monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');

          function plural(n) {
            return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
          }

          function translate(number, withoutSuffix, key) {
            var result = number + ' ';
            switch (key) {
            case 'm':
              return withoutSuffix ? 'minuta' : 'minutę';
            case 'mm':
              return result + (plural(number) ? 'minuty' : 'minut');
            case 'h':
              return withoutSuffix ? 'godzina' : 'godzinę';
            case 'hh':
              return result + (plural(number) ? 'godziny' : 'godzin');
            case 'MM':
              return result + (plural(number) ? 'miesiące' : 'miesięcy');
            case 'yy':
              return result + (plural(number) ? 'lata' : 'lat');
            }
          }

          var pl = moment.defineLocale('pl', {
            months: function (momentToFormat, format) {
              if (!momentToFormat) {
                return monthsNominative;
              } else if (format === '') {
                // Hack: if format empty we know this is used to generate
                // RegExp by moment. Give then back both valid forms of months
                // in RegExp ready format.
                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
              } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
              } else {
                return monthsNominative[momentToFormat.month()];
              }
            },
            monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
            weekdays: 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
            weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
            weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Dziś o] LT',
              nextDay: '[Jutro o] LT',
              nextWeek: '[W] dddd [o] LT',
              lastDay: '[Wczoraj o] LT',
              lastWeek: function () {
                switch (this.day()) {
                case 0:
                  return '[W zeszłą niedzielę o] LT';
                case 3:
                  return '[W zeszłą środę o] LT';
                case 6:
                  return '[W zeszłą sobotę o] LT';
                default:
                  return '[W zeszły] dddd [o] LT';
                }
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'za %s',
              past: '%s temu',
              s: 'kilka sekund',
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: '1 dzień',
              dd: '%d dni',
              M: 'miesiąc',
              MM: translate,
              y: 'rok',
              yy: translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return pl;

        })));


        /***/
      }),
      /* 359 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Portuguese [pt]
        //! author : Jefferson : https://github.com/jalex79

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var pt = moment.defineLocale('pt', {
            months: 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
            monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
            weekdays: 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
            weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
            weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D [de] MMMM [de] YYYY',
              LLL: 'D [de] MMMM [de] YYYY HH:mm',
              LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Hoje às] LT',
              nextDay: '[Amanhã às] LT',
              nextWeek: 'dddd [às] LT',
              lastDay: '[Ontem às] LT',
              lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                  '[Último] dddd [às] LT' : // Saturday + Sunday
                  '[Última] dddd [às] LT'; // Monday - Friday
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'em %s',
              past: 'há %s',
              s: 'segundos',
              m: 'um minuto',
              mm: '%d minutos',
              h: 'uma hora',
              hh: '%d horas',
              d: 'um dia',
              dd: '%d dias',
              M: 'um mês',
              MM: '%d meses',
              y: 'um ano',
              yy: '%d anos'
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: '%dº',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return pt;

        })));


        /***/
      }),
      /* 360 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Portuguese (Brazil) [pt-br]
        //! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var ptBr = moment.defineLocale('pt-br', {
            months: 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
            monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
            weekdays: 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
            weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
            weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D [de] MMMM [de] YYYY',
              LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',
              LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
            },
            calendar: {
              sameDay: '[Hoje às] LT',
              nextDay: '[Amanhã às] LT',
              nextWeek: 'dddd [às] LT',
              lastDay: '[Ontem às] LT',
              lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                  '[Último] dddd [às] LT' : // Saturday + Sunday
                  '[Última] dddd [às] LT'; // Monday - Friday
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'em %s',
              past: '%s atrás',
              s: 'poucos segundos',
              m: 'um minuto',
              mm: '%d minutos',
              h: 'uma hora',
              hh: '%d horas',
              d: 'um dia',
              dd: '%d dias',
              M: 'um mês',
              MM: '%d meses',
              y: 'um ano',
              yy: '%d anos'
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: '%dº'
          });

          return ptBr;

        })));


        /***/
      }),
      /* 361 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Romanian [ro]
        //! author : Vlad Gurdiga : https://github.com/gurdiga
        //! author : Valentin Agachi : https://github.com/avaly

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function relativeTimeWithPlural(number, withoutSuffix, key) {
            var format = {
                'mm': 'minute',
                'hh': 'ore',
                'dd': 'zile',
                'MM': 'luni',
                'yy': 'ani'
              },
              separator = ' ';
            if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
              separator = ' de ';
            }
            return number + separator + format[key];
          }

          var ro = moment.defineLocale('ro', {
            months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
            monthsShort: 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
            monthsParseExact: true,
            weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
            weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
            weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY H:mm',
              LLLL: 'dddd, D MMMM YYYY H:mm'
            },
            calendar: {
              sameDay: '[azi la] LT',
              nextDay: '[mâine la] LT',
              nextWeek: 'dddd [la] LT',
              lastDay: '[ieri la] LT',
              lastWeek: '[fosta] dddd [la] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'peste %s',
              past: '%s în urmă',
              s: 'câteva secunde',
              m: 'un minut',
              mm: relativeTimeWithPlural,
              h: 'o oră',
              hh: relativeTimeWithPlural,
              d: 'o zi',
              dd: relativeTimeWithPlural,
              M: 'o lună',
              MM: relativeTimeWithPlural,
              y: 'un an',
              yy: relativeTimeWithPlural
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return ro;

        })));


        /***/
      }),
      /* 362 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Russian [ru]
        //! author : Viktorminator : https://github.com/Viktorminator
        //! Author : Menelion Elensúle : https://github.com/Oire
        //! author : Коренберг Марк : https://github.com/socketpair

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function plural(word, num) {
            var forms = word.split('_');
            return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
          }

          function relativeTimeWithPlural(number, withoutSuffix, key) {
            var format = {
              'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
              'hh': 'час_часа_часов',
              'dd': 'день_дня_дней',
              'MM': 'месяц_месяца_месяцев',
              'yy': 'год_года_лет'
            };
            if (key === 'm') {
              return withoutSuffix ? 'минута' : 'минуту';
            } else {
              return number + ' ' + plural(format[key], +number);
            }
          }
          var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

          // http://new.gramota.ru/spravka/rules/139-prop : § 103
          // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
          // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
          var ru = moment.defineLocale('ru', {
            months: {
              format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
              standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
            },
            monthsShort: {
              // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
              format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
              standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
            },
            weekdays: {
              standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
              format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
              isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
            },
            weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
            weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
            monthsParse: monthsParse,
            longMonthsParse: monthsParse,
            shortMonthsParse: monthsParse,

            // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
            monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

            // копия предыдущего
            monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

            // полные названия с падежами
            monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

            // Выражение, которое соотвествует только сокращённым формам
            monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D MMMM YYYY г.',
              LLL: 'D MMMM YYYY г., HH:mm',
              LLLL: 'dddd, D MMMM YYYY г., HH:mm'
            },
            calendar: {
              sameDay: '[Сегодня в] LT',
              nextDay: '[Завтра в] LT',
              lastDay: '[Вчера в] LT',
              nextWeek: function (now) {
                if (now.week() !== this.week()) {
                  switch (this.day()) {
                  case 0:
                    return '[В следующее] dddd [в] LT';
                  case 1:
                  case 2:
                  case 4:
                    return '[В следующий] dddd [в] LT';
                  case 3:
                  case 5:
                  case 6:
                    return '[В следующую] dddd [в] LT';
                  }
                } else {
                  if (this.day() === 2) {
                    return '[Во] dddd [в] LT';
                  } else {
                    return '[В] dddd [в] LT';
                  }
                }
              },
              lastWeek: function (now) {
                if (now.week() !== this.week()) {
                  switch (this.day()) {
                  case 0:
                    return '[В прошлое] dddd [в] LT';
                  case 1:
                  case 2:
                  case 4:
                    return '[В прошлый] dddd [в] LT';
                  case 3:
                  case 5:
                  case 6:
                    return '[В прошлую] dddd [в] LT';
                  }
                } else {
                  if (this.day() === 2) {
                    return '[Во] dddd [в] LT';
                  } else {
                    return '[В] dddd [в] LT';
                  }
                }
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'через %s',
              past: '%s назад',
              s: 'несколько секунд',
              m: relativeTimeWithPlural,
              mm: relativeTimeWithPlural,
              h: 'час',
              hh: relativeTimeWithPlural,
              d: 'день',
              dd: relativeTimeWithPlural,
              M: 'месяц',
              MM: relativeTimeWithPlural,
              y: 'год',
              yy: relativeTimeWithPlural
            },
            meridiemParse: /ночи|утра|дня|вечера/i,
            isPM: function (input) {
              return /^(дня|вечера)$/.test(input);
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                return 'ночи';
              } else if (hour < 12) {
                return 'утра';
              } else if (hour < 17) {
                return 'дня';
              } else {
                return 'вечера';
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
            ordinal: function (number, period) {
              switch (period) {
              case 'M':
              case 'd':
              case 'DDD':
                return number + '-й';
              case 'D':
                return number + '-го';
              case 'w':
              case 'W':
                return number + '-я';
              default:
                return number;
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return ru;

        })));


        /***/
      }),
      /* 363 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Sindhi [sd]
        //! author : Narain Sagar : https://github.com/narainsagar

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var months = [
            'جنوري',
            'فيبروري',
            'مارچ',
            'اپريل',
            'مئي',
            'جون',
            'جولاءِ',
            'آگسٽ',
            'سيپٽمبر',
            'آڪٽوبر',
            'نومبر',
            'ڊسمبر'
          ];
          var days = [
            'آچر',
            'سومر',
            'اڱارو',
            'اربع',
            'خميس',
            'جمع',
            'ڇنڇر'
          ];

          var sd = moment.defineLocale('sd', {
            months: months,
            monthsShort: months,
            weekdays: days,
            weekdaysShort: days,
            weekdaysMin: days,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd، D MMMM YYYY HH:mm'
            },
            meridiemParse: /صبح|شام/,
            isPM: function (input) {
              return 'شام' === input;
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 12) {
                return 'صبح';
              }
              return 'شام';
            },
            calendar: {
              sameDay: '[اڄ] LT',
              nextDay: '[سڀاڻي] LT',
              nextWeek: 'dddd [اڳين هفتي تي] LT',
              lastDay: '[ڪالهه] LT',
              lastWeek: '[گزريل هفتي] dddd [تي] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s پوء',
              past: '%s اڳ',
              s: 'چند سيڪنڊ',
              m: 'هڪ منٽ',
              mm: '%d منٽ',
              h: 'هڪ ڪلاڪ',
              hh: '%d ڪلاڪ',
              d: 'هڪ ڏينهن',
              dd: '%d ڏينهن',
              M: 'هڪ مهينو',
              MM: '%d مهينا',
              y: 'هڪ سال',
              yy: '%d سال'
            },
            preparse: function (string) {
              return string.replace(/،/g, ',');
            },
            postformat: function (string) {
              return string.replace(/,/g, '،');
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return sd;

        })));


        /***/
      }),
      /* 364 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Northern Sami [se]
        //! authors : Bård Rolstad Henriksen : https://github.com/karamell

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';



          var se = moment.defineLocale('se', {
            months: 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
            monthsShort: 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
            weekdays: 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
            weekdaysShort: 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
            weekdaysMin: 's_v_m_g_d_b_L'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'MMMM D. [b.] YYYY',
              LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',
              LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
            },
            calendar: {
              sameDay: '[otne ti] LT',
              nextDay: '[ihttin ti] LT',
              nextWeek: 'dddd [ti] LT',
              lastDay: '[ikte ti] LT',
              lastWeek: '[ovddit] dddd [ti] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s geažes',
              past: 'maŋit %s',
              s: 'moadde sekunddat',
              m: 'okta minuhta',
              mm: '%d minuhtat',
              h: 'okta diimmu',
              hh: '%d diimmut',
              d: 'okta beaivi',
              dd: '%d beaivvit',
              M: 'okta mánnu',
              MM: '%d mánut',
              y: 'okta jahki',
              yy: '%d jagit'
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return se;

        })));


        /***/
      }),
      /* 365 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Sinhalese [si]
        //! author : Sampath Sitinamaluwa : https://github.com/sampathsris

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          /*jshint -W100*/
          var si = moment.defineLocale('si', {
            months: 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
            monthsShort: 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
            weekdays: 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
            weekdaysShort: 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
            weekdaysMin: 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'a h:mm',
              LTS: 'a h:mm:ss',
              L: 'YYYY/MM/DD',
              LL: 'YYYY MMMM D',
              LLL: 'YYYY MMMM D, a h:mm',
              LLLL: 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
            },
            calendar: {
              sameDay: '[අද] LT[ට]',
              nextDay: '[හෙට] LT[ට]',
              nextWeek: 'dddd LT[ට]',
              lastDay: '[ඊයේ] LT[ට]',
              lastWeek: '[පසුගිය] dddd LT[ට]',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%sකින්',
              past: '%sකට පෙර',
              s: 'තත්පර කිහිපය',
              m: 'මිනිත්තුව',
              mm: 'මිනිත්තු %d',
              h: 'පැය',
              hh: 'පැය %d',
              d: 'දිනය',
              dd: 'දින %d',
              M: 'මාසය',
              MM: 'මාස %d',
              y: 'වසර',
              yy: 'වසර %d'
            },
            dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
            ordinal: function (number) {
              return number + ' වැනි';
            },
            meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
            isPM: function (input) {
              return input === 'ප.ව.' || input === 'පස් වරු';
            },
            meridiem: function (hours, minutes, isLower) {
              if (hours > 11) {
                return isLower ? 'ප.ව.' : 'පස් වරු';
              } else {
                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
              }
            }
          });

          return si;

        })));


        /***/
      }),
      /* 366 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Slovak [sk]
        //! author : Martin Minka : https://github.com/k2s
        //! based on work of petrbela : https://github.com/petrbela

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');
          var monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');

          function plural(n) {
            return (n > 1) && (n < 5);
          }

          function translate(number, withoutSuffix, key, isFuture) {
            var result = number + ' ';
            switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
              return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
            case 'm': // a minute / in a minute / a minute ago
              return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minúty' : 'minút');
              } else {
                return result + 'minútami';
              }
              break;
            case 'h': // an hour / in an hour / an hour ago
              return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodín');
              } else {
                return result + 'hodinami';
              }
              break;
            case 'd': // a day / in a day / a day ago
              return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
            case 'dd': // 9 days / in 9 days / 9 days ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dni' : 'dní');
              } else {
                return result + 'dňami';
              }
              break;
            case 'M': // a month / in a month / a month ago
              return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
            case 'MM': // 9 months / in 9 months / 9 months ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'mesiace' : 'mesiacov');
              } else {
                return result + 'mesiacmi';
              }
              break;
            case 'y': // a year / in a year / a year ago
              return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
            case 'yy': // 9 years / in 9 years / 9 years ago
              if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'rokov');
              } else {
                return result + 'rokmi';
              }
              break;
            }
          }

          var sk = moment.defineLocale('sk', {
            months: months,
            monthsShort: monthsShort,
            weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
            weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),
            weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm',
              LLLL: 'dddd D. MMMM YYYY H:mm'
            },
            calendar: {
              sameDay: '[dnes o] LT',
              nextDay: '[zajtra o] LT',
              nextWeek: function () {
                switch (this.day()) {
                case 0:
                  return '[v nedeľu o] LT';
                case 1:
                case 2:
                  return '[v] dddd [o] LT';
                case 3:
                  return '[v stredu o] LT';
                case 4:
                  return '[vo štvrtok o] LT';
                case 5:
                  return '[v piatok o] LT';
                case 6:
                  return '[v sobotu o] LT';
                }
              },
              lastDay: '[včera o] LT',
              lastWeek: function () {
                switch (this.day()) {
                case 0:
                  return '[minulú nedeľu o] LT';
                case 1:
                case 2:
                  return '[minulý] dddd [o] LT';
                case 3:
                  return '[minulú stredu o] LT';
                case 4:
                case 5:
                  return '[minulý] dddd [o] LT';
                case 6:
                  return '[minulú sobotu o] LT';
                }
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'za %s',
              past: 'pred %s',
              s: translate,
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: translate,
              dd: translate,
              M: translate,
              MM: translate,
              y: translate,
              yy: translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return sk;

        })));


        /***/
      }),
      /* 367 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Slovenian [sl]
        //! author : Robert Sedovšek : https://github.com/sedovsek

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var result = number + ' ';
            switch (key) {
            case 's':
              return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
            case 'm':
              return withoutSuffix ? 'ena minuta' : 'eno minuto';
            case 'mm':
              if (number === 1) {
                result += withoutSuffix ? 'minuta' : 'minuto';
              } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
              } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
              } else {
                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
              }
              return result;
            case 'h':
              return withoutSuffix ? 'ena ura' : 'eno uro';
            case 'hh':
              if (number === 1) {
                result += withoutSuffix ? 'ura' : 'uro';
              } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'uri' : 'urama';
              } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'ure' : 'urami';
              } else {
                result += withoutSuffix || isFuture ? 'ur' : 'urami';
              }
              return result;
            case 'd':
              return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
            case 'dd':
              if (number === 1) {
                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
              } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
              } else {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
              }
              return result;
            case 'M':
              return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
            case 'MM':
              if (number === 1) {
                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
              } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
              } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
              } else {
                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
              }
              return result;
            case 'y':
              return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
            case 'yy':
              if (number === 1) {
                result += withoutSuffix || isFuture ? 'leto' : 'letom';
              } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
              } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'leta' : 'leti';
              } else {
                result += withoutSuffix || isFuture ? 'let' : 'leti';
              }
              return result;
            }
          }

          var sl = moment.defineLocale('sl', {
            months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
            monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
            monthsParseExact: true,
            weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
            weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
            weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm',
              LLLL: 'dddd, D. MMMM YYYY H:mm'
            },
            calendar: {
              sameDay: '[danes ob] LT',
              nextDay: '[jutri ob] LT',

              nextWeek: function () {
                switch (this.day()) {
                case 0:
                  return '[v] [nedeljo] [ob] LT';
                case 3:
                  return '[v] [sredo] [ob] LT';
                case 6:
                  return '[v] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                  return '[v] dddd [ob] LT';
                }
              },
              lastDay: '[včeraj ob] LT',
              lastWeek: function () {
                switch (this.day()) {
                case 0:
                  return '[prejšnjo] [nedeljo] [ob] LT';
                case 3:
                  return '[prejšnjo] [sredo] [ob] LT';
                case 6:
                  return '[prejšnjo] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                  return '[prejšnji] dddd [ob] LT';
                }
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'čez %s',
              past: 'pred %s',
              s: processRelativeTime,
              m: processRelativeTime,
              mm: processRelativeTime,
              h: processRelativeTime,
              hh: processRelativeTime,
              d: processRelativeTime,
              dd: processRelativeTime,
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return sl;

        })));


        /***/
      }),
      /* 368 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Albanian [sq]
        //! author : Flakërim Ismani : https://github.com/flakerimi
        //! author : Menelion Elensúle : https://github.com/Oire
        //! author : Oerd Cukalla : https://github.com/oerd

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var sq = moment.defineLocale('sq', {
            months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
            monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
            weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
            weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
            weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),
            weekdaysParseExact: true,
            meridiemParse: /PD|MD/,
            isPM: function (input) {
              return input.charAt(0) === 'M';
            },
            meridiem: function (hours, minutes, isLower) {
              return hours < 12 ? 'PD' : 'MD';
            },
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Sot në] LT',
              nextDay: '[Nesër në] LT',
              nextWeek: 'dddd [në] LT',
              lastDay: '[Dje në] LT',
              lastWeek: 'dddd [e kaluar në] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'në %s',
              past: '%s më parë',
              s: 'disa sekonda',
              m: 'një minutë',
              mm: '%d minuta',
              h: 'një orë',
              hh: '%d orë',
              d: 'një ditë',
              dd: '%d ditë',
              M: 'një muaj',
              MM: '%d muaj',
              y: 'një vit',
              yy: '%d vite'
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return sq;

        })));


        /***/
      }),
      /* 369 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Serbian [sr]
        //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var translator = {
            words: { //Different grammatical cases
              m: ['jedan minut', 'jedne minute'],
              mm: ['minut', 'minute', 'minuta'],
              h: ['jedan sat', 'jednog sata'],
              hh: ['sat', 'sata', 'sati'],
              dd: ['dan', 'dana', 'dana'],
              MM: ['mesec', 'meseca', 'meseci'],
              yy: ['godina', 'godine', 'godina']
            },
            correctGrammaticalCase: function (number, wordKey) {
              return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
            },
            translate: function (number, withoutSuffix, key) {
              var wordKey = translator.words[key];
              if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
              } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
              }
            }
          };

          var sr = moment.defineLocale('sr', {
            months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
            monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
            monthsParseExact: true,
            weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
            weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
            weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm',
              LLLL: 'dddd, D. MMMM YYYY H:mm'
            },
            calendar: {
              sameDay: '[danas u] LT',
              nextDay: '[sutra u] LT',
              nextWeek: function () {
                switch (this.day()) {
                case 0:
                  return '[u] [nedelju] [u] LT';
                case 3:
                  return '[u] [sredu] [u] LT';
                case 6:
                  return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                  return '[u] dddd [u] LT';
                }
              },
              lastDay: '[juče u] LT',
              lastWeek: function () {
                var lastWeekDays = [
                  '[prošle] [nedelje] [u] LT',
                  '[prošlog] [ponedeljka] [u] LT',
                  '[prošlog] [utorka] [u] LT',
                  '[prošle] [srede] [u] LT',
                  '[prošlog] [četvrtka] [u] LT',
                  '[prošlog] [petka] [u] LT',
                  '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'za %s',
              past: 'pre %s',
              s: 'nekoliko sekundi',
              m: translator.translate,
              mm: translator.translate,
              h: translator.translate,
              hh: translator.translate,
              d: 'dan',
              dd: translator.translate,
              M: 'mesec',
              MM: translator.translate,
              y: 'godinu',
              yy: translator.translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return sr;

        })));


        /***/
      }),
      /* 370 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Serbian Cyrillic [sr-cyrl]
        //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var translator = {
            words: { //Different grammatical cases
              m: ['један минут', 'једне минуте'],
              mm: ['минут', 'минуте', 'минута'],
              h: ['један сат', 'једног сата'],
              hh: ['сат', 'сата', 'сати'],
              dd: ['дан', 'дана', 'дана'],
              MM: ['месец', 'месеца', 'месеци'],
              yy: ['година', 'године', 'година']
            },
            correctGrammaticalCase: function (number, wordKey) {
              return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
            },
            translate: function (number, withoutSuffix, key) {
              var wordKey = translator.words[key];
              if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
              } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
              }
            }
          };

          var srCyrl = moment.defineLocale('sr-cyrl', {
            months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
            monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
            monthsParseExact: true,
            weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
            weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
            weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm',
              LLLL: 'dddd, D. MMMM YYYY H:mm'
            },
            calendar: {
              sameDay: '[данас у] LT',
              nextDay: '[сутра у] LT',
              nextWeek: function () {
                switch (this.day()) {
                case 0:
                  return '[у] [недељу] [у] LT';
                case 3:
                  return '[у] [среду] [у] LT';
                case 6:
                  return '[у] [суботу] [у] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                  return '[у] dddd [у] LT';
                }
              },
              lastDay: '[јуче у] LT',
              lastWeek: function () {
                var lastWeekDays = [
                  '[прошле] [недеље] [у] LT',
                  '[прошлог] [понедељка] [у] LT',
                  '[прошлог] [уторка] [у] LT',
                  '[прошле] [среде] [у] LT',
                  '[прошлог] [четвртка] [у] LT',
                  '[прошлог] [петка] [у] LT',
                  '[прошле] [суботе] [у] LT'
                ];
                return lastWeekDays[this.day()];
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'за %s',
              past: 'пре %s',
              s: 'неколико секунди',
              m: translator.translate,
              mm: translator.translate,
              h: translator.translate,
              hh: translator.translate,
              d: 'дан',
              dd: translator.translate,
              M: 'месец',
              MM: translator.translate,
              y: 'годину',
              yy: translator.translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return srCyrl;

        })));


        /***/
      }),
      /* 371 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : siSwati [ss]
        //! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';



          var ss = moment.defineLocale('ss', {
            months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
            monthsShort: 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
            weekdays: 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
            weekdaysShort: 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
            weekdaysMin: 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'h:mm A',
              LTS: 'h:mm:ss A',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY h:mm A',
              LLLL: 'dddd, D MMMM YYYY h:mm A'
            },
            calendar: {
              sameDay: '[Namuhla nga] LT',
              nextDay: '[Kusasa nga] LT',
              nextWeek: 'dddd [nga] LT',
              lastDay: '[Itolo nga] LT',
              lastWeek: 'dddd [leliphelile] [nga] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'nga %s',
              past: 'wenteka nga %s',
              s: 'emizuzwana lomcane',
              m: 'umzuzu',
              mm: '%d emizuzu',
              h: 'lihora',
              hh: '%d emahora',
              d: 'lilanga',
              dd: '%d emalanga',
              M: 'inyanga',
              MM: '%d tinyanga',
              y: 'umnyaka',
              yy: '%d iminyaka'
            },
            meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
            meridiem: function (hours, minutes, isLower) {
              if (hours < 11) {
                return 'ekuseni';
              } else if (hours < 15) {
                return 'emini';
              } else if (hours < 19) {
                return 'entsambama';
              } else {
                return 'ebusuku';
              }
            },
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === 'ekuseni') {
                return hour;
              } else if (meridiem === 'emini') {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
                if (hour === 0) {
                  return 0;
                }
                return hour + 12;
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}/,
            ordinal: '%d',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return ss;

        })));


        /***/
      }),
      /* 372 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Swedish [sv]
        //! author : Jens Alm : https://github.com/ulmus

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var sv = moment.defineLocale('sv', {
            months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
            monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
            weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
            weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
            weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'YYYY-MM-DD',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY [kl.] HH:mm',
              LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',
              lll: 'D MMM YYYY HH:mm',
              llll: 'ddd D MMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Idag] LT',
              nextDay: '[Imorgon] LT',
              lastDay: '[Igår] LT',
              nextWeek: '[På] dddd LT',
              lastWeek: '[I] dddd[s] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'om %s',
              past: 'för %s sedan',
              s: 'några sekunder',
              m: 'en minut',
              mm: '%d minuter',
              h: 'en timme',
              hh: '%d timmar',
              d: 'en dag',
              dd: '%d dagar',
              M: 'en månad',
              MM: '%d månader',
              y: 'ett år',
              yy: '%d år'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
            ordinal: function (number) {
              var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'e' :
                (b === 1) ? 'a' :
                (b === 2) ? 'a' :
                (b === 3) ? 'e' : 'e';
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return sv;

        })));


        /***/
      }),
      /* 373 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Swahili [sw]
        //! author : Fahad Kassim : https://github.com/fadsel

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var sw = moment.defineLocale('sw', {
            months: 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
            monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
            weekdays: 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
            weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
            weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[leo saa] LT',
              nextDay: '[kesho saa] LT',
              nextWeek: '[wiki ijayo] dddd [saat] LT',
              lastDay: '[jana] LT',
              lastWeek: '[wiki iliyopita] dddd [saat] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s baadaye',
              past: 'tokea %s',
              s: 'hivi punde',
              m: 'dakika moja',
              mm: 'dakika %d',
              h: 'saa limoja',
              hh: 'masaa %d',
              d: 'siku moja',
              dd: 'masiku %d',
              M: 'mwezi mmoja',
              MM: 'miezi %d',
              y: 'mwaka mmoja',
              yy: 'miaka %d'
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return sw;

        })));


        /***/
      }),
      /* 374 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Tamil [ta]
        //! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var symbolMap = {
            '1': '௧',
            '2': '௨',
            '3': '௩',
            '4': '௪',
            '5': '௫',
            '6': '௬',
            '7': '௭',
            '8': '௮',
            '9': '௯',
            '0': '௦'
          };
          var numberMap = {
            '௧': '1',
            '௨': '2',
            '௩': '3',
            '௪': '4',
            '௫': '5',
            '௬': '6',
            '௭': '7',
            '௮': '8',
            '௯': '9',
            '௦': '0'
          };

          var ta = moment.defineLocale('ta', {
            months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
            monthsShort: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
            weekdays: 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
            weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
            weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY, HH:mm',
              LLLL: 'dddd, D MMMM YYYY, HH:mm'
            },
            calendar: {
              sameDay: '[இன்று] LT',
              nextDay: '[நாளை] LT',
              nextWeek: 'dddd, LT',
              lastDay: '[நேற்று] LT',
              lastWeek: '[கடந்த வாரம்] dddd, LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s இல்',
              past: '%s முன்',
              s: 'ஒரு சில விநாடிகள்',
              m: 'ஒரு நிமிடம்',
              mm: '%d நிமிடங்கள்',
              h: 'ஒரு மணி நேரம்',
              hh: '%d மணி நேரம்',
              d: 'ஒரு நாள்',
              dd: '%d நாட்கள்',
              M: 'ஒரு மாதம்',
              MM: '%d மாதங்கள்',
              y: 'ஒரு வருடம்',
              yy: '%d ஆண்டுகள்'
            },
            dayOfMonthOrdinalParse: /\d{1,2}வது/,
            ordinal: function (number) {
              return number + 'வது';
            },
            preparse: function (string) {
              return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
                return numberMap[match];
              });
            },
            postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                return symbolMap[match];
              });
            },
            // refer http://ta.wikipedia.org/s/1er1
            meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
            meridiem: function (hour, minute, isLower) {
              if (hour < 2) {
                return ' யாமம்';
              } else if (hour < 6) {
                return ' வைகறை'; // வைகறை
              } else if (hour < 10) {
                return ' காலை'; // காலை
              } else if (hour < 14) {
                return ' நண்பகல்'; // நண்பகல்
              } else if (hour < 18) {
                return ' எற்பாடு'; // எற்பாடு
              } else if (hour < 22) {
                return ' மாலை'; // மாலை
              } else {
                return ' யாமம்';
              }
            },
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === 'யாமம்') {
                return hour < 2 ? hour : hour + 12;
              } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
                return hour;
              } else if (meridiem === 'நண்பகல்') {
                return hour >= 10 ? hour : hour + 12;
              } else {
                return hour + 12;
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return ta;

        })));


        /***/
      }),
      /* 375 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Telugu [te]
        //! author : Krishna Chaitanya Thota : https://github.com/kcthota

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var te = moment.defineLocale('te', {
            months: 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
            monthsShort: 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
            monthsParseExact: true,
            weekdays: 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
            weekdaysShort: 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
            weekdaysMin: 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
            longDateFormat: {
              LT: 'A h:mm',
              LTS: 'A h:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY, A h:mm',
              LLLL: 'dddd, D MMMM YYYY, A h:mm'
            },
            calendar: {
              sameDay: '[నేడు] LT',
              nextDay: '[రేపు] LT',
              nextWeek: 'dddd, LT',
              lastDay: '[నిన్న] LT',
              lastWeek: '[గత] dddd, LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s లో',
              past: '%s క్రితం',
              s: 'కొన్ని క్షణాలు',
              m: 'ఒక నిమిషం',
              mm: '%d నిమిషాలు',
              h: 'ఒక గంట',
              hh: '%d గంటలు',
              d: 'ఒక రోజు',
              dd: '%d రోజులు',
              M: 'ఒక నెల',
              MM: '%d నెలలు',
              y: 'ఒక సంవత్సరం',
              yy: '%d సంవత్సరాలు'
            },
            dayOfMonthOrdinalParse: /\d{1,2}వ/,
            ordinal: '%dవ',
            meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === 'రాత్రి') {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === 'ఉదయం') {
                return hour;
              } else if (meridiem === 'మధ్యాహ్నం') {
                return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === 'సాయంత్రం') {
                return hour + 12;
              }
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                return 'రాత్రి';
              } else if (hour < 10) {
                return 'ఉదయం';
              } else if (hour < 17) {
                return 'మధ్యాహ్నం';
              } else if (hour < 20) {
                return 'సాయంత్రం';
              } else {
                return 'రాత్రి';
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return te;

        })));


        /***/
      }),
      /* 376 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Tetun Dili (East Timor) [tet]
        //! author : Joshua Brooks : https://github.com/joshbrooks
        //! author : Onorio De J. Afonso : https://github.com/marobo

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var tet = moment.defineLocale('tet', {
            months: 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
            monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez'.split('_'),
            weekdays: 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu'.split('_'),
            weekdaysShort: 'Dom_Seg_Ters_Kua_Kint_Sext_Sab'.split('_'),
            weekdaysMin: 'Do_Seg_Te_Ku_Ki_Sex_Sa'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Ohin iha] LT',
              nextDay: '[Aban iha] LT',
              nextWeek: 'dddd [iha] LT',
              lastDay: '[Horiseik iha] LT',
              lastWeek: 'dddd [semana kotuk] [iha] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'iha %s',
              past: '%s liuba',
              s: 'minutu balun',
              m: 'minutu ida',
              mm: 'minutus %d',
              h: 'horas ida',
              hh: 'horas %d',
              d: 'loron ida',
              dd: 'loron %d',
              M: 'fulan ida',
              MM: 'fulan %d',
              y: 'tinan ida',
              yy: 'tinan %d'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function (number) {
              var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return tet;

        })));


        /***/
      }),
      /* 377 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Thai [th]
        //! author : Kridsada Thanabulpong : https://github.com/sirn

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var th = moment.defineLocale('th', {
            months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
            monthsShort: 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
            monthsParseExact: true,
            weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
            weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
            weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'H:mm',
              LTS: 'H:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY เวลา H:mm',
              LLLL: 'วันddddที่ D MMMM YYYY เวลา H:mm'
            },
            meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
            isPM: function (input) {
              return input === 'หลังเที่ยง';
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 12) {
                return 'ก่อนเที่ยง';
              } else {
                return 'หลังเที่ยง';
              }
            },
            calendar: {
              sameDay: '[วันนี้ เวลา] LT',
              nextDay: '[พรุ่งนี้ เวลา] LT',
              nextWeek: 'dddd[หน้า เวลา] LT',
              lastDay: '[เมื่อวานนี้ เวลา] LT',
              lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'อีก %s',
              past: '%sที่แล้ว',
              s: 'ไม่กี่วินาที',
              m: '1 นาที',
              mm: '%d นาที',
              h: '1 ชั่วโมง',
              hh: '%d ชั่วโมง',
              d: '1 วัน',
              dd: '%d วัน',
              M: '1 เดือน',
              MM: '%d เดือน',
              y: '1 ปี',
              yy: '%d ปี'
            }
          });

          return th;

        })));


        /***/
      }),
      /* 378 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Tagalog (Philippines) [tl-ph]
        //! author : Dan Hagman : https://github.com/hagmandan

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var tlPh = moment.defineLocale('tl-ph', {
            months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
            monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
            weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
            weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
            weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'MM/D/YYYY',
              LL: 'MMMM D, YYYY',
              LLL: 'MMMM D, YYYY HH:mm',
              LLLL: 'dddd, MMMM DD, YYYY HH:mm'
            },
            calendar: {
              sameDay: 'LT [ngayong araw]',
              nextDay: '[Bukas ng] LT',
              nextWeek: 'LT [sa susunod na] dddd',
              lastDay: 'LT [kahapon]',
              lastWeek: 'LT [noong nakaraang] dddd',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'sa loob ng %s',
              past: '%s ang nakalipas',
              s: 'ilang segundo',
              m: 'isang minuto',
              mm: '%d minuto',
              h: 'isang oras',
              hh: '%d oras',
              d: 'isang araw',
              dd: '%d araw',
              M: 'isang buwan',
              MM: '%d buwan',
              y: 'isang taon',
              yy: '%d taon'
            },
            dayOfMonthOrdinalParse: /\d{1,2}/,
            ordinal: function (number) {
              return number;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return tlPh;

        })));


        /***/
      }),
      /* 379 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Klingon [tlh]
        //! author : Dominika Kruk : https://github.com/amaranthrose

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

          function translateFuture(output) {
            var time = output;
            time = (output.indexOf('jaj') !== -1) ?
              time.slice(0, -3) + 'leS' :
              (output.indexOf('jar') !== -1) ?
              time.slice(0, -3) + 'waQ' :
              (output.indexOf('DIS') !== -1) ?
              time.slice(0, -3) + 'nem' :
              time + ' pIq';
            return time;
          }

          function translatePast(output) {
            var time = output;
            time = (output.indexOf('jaj') !== -1) ?
              time.slice(0, -3) + 'Hu’' :
              (output.indexOf('jar') !== -1) ?
              time.slice(0, -3) + 'wen' :
              (output.indexOf('DIS') !== -1) ?
              time.slice(0, -3) + 'ben' :
              time + ' ret';
            return time;
          }

          function translate(number, withoutSuffix, string, isFuture) {
            var numberNoun = numberAsNoun(number);
            switch (string) {
            case 'mm':
              return numberNoun + ' tup';
            case 'hh':
              return numberNoun + ' rep';
            case 'dd':
              return numberNoun + ' jaj';
            case 'MM':
              return numberNoun + ' jar';
            case 'yy':
              return numberNoun + ' DIS';
            }
          }

          function numberAsNoun(number) {
            var hundred = Math.floor((number % 1000) / 100),
              ten = Math.floor((number % 100) / 10),
              one = number % 10,
              word = '';
            if (hundred > 0) {
              word += numbersNouns[hundred] + 'vatlh';
            }
            if (ten > 0) {
              word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
            }
            if (one > 0) {
              word += ((word !== '') ? ' ' : '') + numbersNouns[one];
            }
            return (word === '') ? 'pagh' : word;
          }

          var tlh = moment.defineLocale('tlh', {
            months: 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
            monthsShort: 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
            monthsParseExact: true,
            weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
            weekdaysShort: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
            weekdaysMin: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[DaHjaj] LT',
              nextDay: '[wa’leS] LT',
              nextWeek: 'LLL',
              lastDay: '[wa’Hu’] LT',
              lastWeek: 'LLL',
              sameElse: 'L'
            },
            relativeTime: {
              future: translateFuture,
              past: translatePast,
              s: 'puS lup',
              m: 'wa’ tup',
              mm: translate,
              h: 'wa’ rep',
              hh: translate,
              d: 'wa’ jaj',
              dd: translate,
              M: 'wa’ jar',
              MM: translate,
              y: 'wa’ DIS',
              yy: translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return tlh;

        })));


        /***/
      }),
      /* 380 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Turkish [tr]
        //! authors : Erhan Gundogan : https://github.com/erhangundogan,
        //!           Burak Yiğit Kaya: https://github.com/BYK

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var suffixes = {
            1: '\'inci',
            5: '\'inci',
            8: '\'inci',
            70: '\'inci',
            80: '\'inci',
            2: '\'nci',
            7: '\'nci',
            20: '\'nci',
            50: '\'nci',
            3: '\'üncü',
            4: '\'üncü',
            100: '\'üncü',
            6: '\'ncı',
            9: '\'uncu',
            10: '\'uncu',
            30: '\'uncu',
            60: '\'ıncı',
            90: '\'ıncı'
          };

          var tr = moment.defineLocale('tr', {
            months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
            monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
            weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
            weekdaysShort: 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
            weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[bugün saat] LT',
              nextDay: '[yarın saat] LT',
              nextWeek: '[haftaya] dddd [saat] LT',
              lastDay: '[dün] LT',
              lastWeek: '[geçen hafta] dddd [saat] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s sonra',
              past: '%s önce',
              s: 'birkaç saniye',
              m: 'bir dakika',
              mm: '%d dakika',
              h: 'bir saat',
              hh: '%d saat',
              d: 'bir gün',
              dd: '%d gün',
              M: 'bir ay',
              MM: '%d ay',
              y: 'bir yıl',
              yy: '%d yıl'
            },
            dayOfMonthOrdinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
            ordinal: function (number) {
              if (number === 0) { // special case for zero
                return number + '\'ıncı';
              }
              var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
              return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return tr;

        })));


        /***/
      }),
      /* 381 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Talossan [tzl]
        //! author : Robin van der Vliet : https://github.com/robin0van0der0v
        //! author : Iustì Canun

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
          // This is currently too difficult (maybe even impossible) to add.
          var tzl = moment.defineLocale('tzl', {
            months: 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
            monthsShort: 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
            weekdays: 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
            weekdaysShort: 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
            weekdaysMin: 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
            longDateFormat: {
              LT: 'HH.mm',
              LTS: 'HH.mm.ss',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM [dallas] YYYY',
              LLL: 'D. MMMM [dallas] YYYY HH.mm',
              LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
            },
            meridiemParse: /d\'o|d\'a/i,
            isPM: function (input) {
              return 'd\'o' === input.toLowerCase();
            },
            meridiem: function (hours, minutes, isLower) {
              if (hours > 11) {
                return isLower ? 'd\'o' : 'D\'O';
              } else {
                return isLower ? 'd\'a' : 'D\'A';
              }
            },
            calendar: {
              sameDay: '[oxhi à] LT',
              nextDay: '[demà à] LT',
              nextWeek: 'dddd [à] LT',
              lastDay: '[ieiri à] LT',
              lastWeek: '[sür el] dddd [lasteu à] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'osprei %s',
              past: 'ja%s',
              s: processRelativeTime,
              m: processRelativeTime,
              mm: processRelativeTime,
              h: processRelativeTime,
              hh: processRelativeTime,
              d: processRelativeTime,
              dd: processRelativeTime,
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              's': ['viensas secunds', '\'iensas secunds'],
              'm': ['\'n míut', '\'iens míut'],
              'mm': [number + ' míuts', '' + number + ' míuts'],
              'h': ['\'n þora', '\'iensa þora'],
              'hh': [number + ' þoras', '' + number + ' þoras'],
              'd': ['\'n ziua', '\'iensa ziua'],
              'dd': [number + ' ziuas', '' + number + ' ziuas'],
              'M': ['\'n mes', '\'iens mes'],
              'MM': [number + ' mesen', '' + number + ' mesen'],
              'y': ['\'n ar', '\'iens ar'],
              'yy': [number + ' ars', '' + number + ' ars']
            };
            return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
          }

          return tzl;

        })));


        /***/
      }),
      /* 382 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Central Atlas Tamazight [tzm]
        //! author : Abdel Said : https://github.com/abdelsaid

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var tzm = moment.defineLocale('tzm', {
            months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
            monthsShort: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
            weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
            weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
            weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
              nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
              nextWeek: 'dddd [ⴴ] LT',
              lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
              lastWeek: 'dddd [ⴴ] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
              past: 'ⵢⴰⵏ %s',
              s: 'ⵉⵎⵉⴽ',
              m: 'ⵎⵉⵏⵓⴺ',
              mm: '%d ⵎⵉⵏⵓⴺ',
              h: 'ⵙⴰⵄⴰ',
              hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
              d: 'ⴰⵙⵙ',
              dd: '%d oⵙⵙⴰⵏ',
              M: 'ⴰⵢoⵓⵔ',
              MM: '%d ⵉⵢⵢⵉⵔⵏ',
              y: 'ⴰⵙⴳⴰⵙ',
              yy: '%d ⵉⵙⴳⴰⵙⵏ'
            },
            week: {
              dow: 6, // Saturday is the first day of the week.
              doy: 12 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return tzm;

        })));


        /***/
      }),
      /* 383 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Central Atlas Tamazight Latin [tzm-latn]
        //! author : Abdel Said : https://github.com/abdelsaid

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var tzmLatn = moment.defineLocale('tzm-latn', {
            months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
            monthsShort: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
            weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
            weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
            weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[asdkh g] LT',
              nextDay: '[aska g] LT',
              nextWeek: 'dddd [g] LT',
              lastDay: '[assant g] LT',
              lastWeek: 'dddd [g] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'dadkh s yan %s',
              past: 'yan %s',
              s: 'imik',
              m: 'minuḍ',
              mm: '%d minuḍ',
              h: 'saɛa',
              hh: '%d tassaɛin',
              d: 'ass',
              dd: '%d ossan',
              M: 'ayowr',
              MM: '%d iyyirn',
              y: 'asgas',
              yy: '%d isgasn'
            },
            week: {
              dow: 6, // Saturday is the first day of the week.
              doy: 12 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return tzmLatn;

        })));


        /***/
      }),
      /* 384 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Ukrainian [uk]
        //! author : zemlanin : https://github.com/zemlanin
        //! Author : Menelion Elensúle : https://github.com/Oire

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          function plural(word, num) {
            var forms = word.split('_');
            return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
          }

          function relativeTimeWithPlural(number, withoutSuffix, key) {
            var format = {
              'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
              'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
              'dd': 'день_дні_днів',
              'MM': 'місяць_місяці_місяців',
              'yy': 'рік_роки_років'
            };
            if (key === 'm') {
              return withoutSuffix ? 'хвилина' : 'хвилину';
            } else if (key === 'h') {
              return withoutSuffix ? 'година' : 'годину';
            } else {
              return number + ' ' + plural(format[key], +number);
            }
          }

          function weekdaysCaseReplace(m, format) {
            var weekdays = {
              'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
              'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
              'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
            };

            if (!m) {
              return weekdays['nominative'];
            }

            var nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
              'accusative' :
              ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
                'genitive' :
                'nominative');
            return weekdays[nounCase][m.day()];
          }

          function processHoursFunction(str) {
            return function () {
              return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
            };
          }

          var uk = moment.defineLocale('uk', {
            months: {
              'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
              'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
            },
            monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
            weekdays: weekdaysCaseReplace,
            weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
            weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD.MM.YYYY',
              LL: 'D MMMM YYYY р.',
              LLL: 'D MMMM YYYY р., HH:mm',
              LLLL: 'dddd, D MMMM YYYY р., HH:mm'
            },
            calendar: {
              sameDay: processHoursFunction('[Сьогодні '),
              nextDay: processHoursFunction('[Завтра '),
              lastDay: processHoursFunction('[Вчора '),
              nextWeek: processHoursFunction('[У] dddd ['),
              lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                  return processHoursFunction('[Минулої] dddd [').call(this);
                case 1:
                case 2:
                case 4:
                  return processHoursFunction('[Минулого] dddd [').call(this);
                }
              },
              sameElse: 'L'
            },
            relativeTime: {
              future: 'за %s',
              past: '%s тому',
              s: 'декілька секунд',
              m: relativeTimeWithPlural,
              mm: relativeTimeWithPlural,
              h: 'годину',
              hh: relativeTimeWithPlural,
              d: 'день',
              dd: relativeTimeWithPlural,
              M: 'місяць',
              MM: relativeTimeWithPlural,
              y: 'рік',
              yy: relativeTimeWithPlural
            },
            // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
            meridiemParse: /ночі|ранку|дня|вечора/,
            isPM: function (input) {
              return /^(дня|вечора)$/.test(input);
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                return 'ночі';
              } else if (hour < 12) {
                return 'ранку';
              } else if (hour < 17) {
                return 'дня';
              } else {
                return 'вечора';
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
            ordinal: function (number, period) {
              switch (period) {
              case 'M':
              case 'd':
              case 'DDD':
              case 'w':
              case 'W':
                return number + '-й';
              case 'D':
                return number + '-го';
              default:
                return number;
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return uk;

        })));


        /***/
      }),
      /* 385 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Urdu [ur]
        //! author : Sawood Alam : https://github.com/ibnesayeed
        //! author : Zack : https://github.com/ZackVision

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var months = [
            'جنوری',
            'فروری',
            'مارچ',
            'اپریل',
            'مئی',
            'جون',
            'جولائی',
            'اگست',
            'ستمبر',
            'اکتوبر',
            'نومبر',
            'دسمبر'
          ];
          var days = [
            'اتوار',
            'پیر',
            'منگل',
            'بدھ',
            'جمعرات',
            'جمعہ',
            'ہفتہ'
          ];

          var ur = moment.defineLocale('ur', {
            months: months,
            monthsShort: months,
            weekdays: days,
            weekdaysShort: days,
            weekdaysMin: days,
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd، D MMMM YYYY HH:mm'
            },
            meridiemParse: /صبح|شام/,
            isPM: function (input) {
              return 'شام' === input;
            },
            meridiem: function (hour, minute, isLower) {
              if (hour < 12) {
                return 'صبح';
              }
              return 'شام';
            },
            calendar: {
              sameDay: '[آج بوقت] LT',
              nextDay: '[کل بوقت] LT',
              nextWeek: 'dddd [بوقت] LT',
              lastDay: '[گذشتہ روز بوقت] LT',
              lastWeek: '[گذشتہ] dddd [بوقت] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s بعد',
              past: '%s قبل',
              s: 'چند سیکنڈ',
              m: 'ایک منٹ',
              mm: '%d منٹ',
              h: 'ایک گھنٹہ',
              hh: '%d گھنٹے',
              d: 'ایک دن',
              dd: '%d دن',
              M: 'ایک ماہ',
              MM: '%d ماہ',
              y: 'ایک سال',
              yy: '%d سال'
            },
            preparse: function (string) {
              return string.replace(/،/g, ',');
            },
            postformat: function (string) {
              return string.replace(/,/g, '،');
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return ur;

        })));


        /***/
      }),
      /* 386 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Uzbek [uz]
        //! author : Sardor Muminov : https://github.com/muminoff

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var uz = moment.defineLocale('uz', {
            months: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
            monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
            weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
            weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
            weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'D MMMM YYYY, dddd HH:mm'
            },
            calendar: {
              sameDay: '[Бугун соат] LT [да]',
              nextDay: '[Эртага] LT [да]',
              nextWeek: 'dddd [куни соат] LT [да]',
              lastDay: '[Кеча соат] LT [да]',
              lastWeek: '[Утган] dddd [куни соат] LT [да]',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'Якин %s ичида',
              past: 'Бир неча %s олдин',
              s: 'фурсат',
              m: 'бир дакика',
              mm: '%d дакика',
              h: 'бир соат',
              hh: '%d соат',
              d: 'бир кун',
              dd: '%d кун',
              M: 'бир ой',
              MM: '%d ой',
              y: 'бир йил',
              yy: '%d йил'
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return uz;

        })));


        /***/
      }),
      /* 387 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Uzbek Latin [uz-latn]
        //! author : Rasulbek Mirzayev : github.com/Rasulbeeek

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var uzLatn = moment.defineLocale('uz-latn', {
            months: 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),
            monthsShort: 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
            weekdays: 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
            weekdaysShort: 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
            weekdaysMin: 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'D MMMM YYYY, dddd HH:mm'
            },
            calendar: {
              sameDay: '[Bugun soat] LT [da]',
              nextDay: '[Ertaga] LT [da]',
              nextWeek: 'dddd [kuni soat] LT [da]',
              lastDay: '[Kecha soat] LT [da]',
              lastWeek: '[O\'tgan] dddd [kuni soat] LT [da]',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'Yaqin %s ichida',
              past: 'Bir necha %s oldin',
              s: 'soniya',
              m: 'bir daqiqa',
              mm: '%d daqiqa',
              h: 'bir soat',
              hh: '%d soat',
              d: 'bir kun',
              dd: '%d kun',
              M: 'bir oy',
              MM: '%d oy',
              y: 'bir yil',
              yy: '%d yil'
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7 // The week that contains Jan 1st is the first week of the year.
            }
          });

          return uzLatn;

        })));


        /***/
      }),
      /* 388 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Vietnamese [vi]
        //! author : Bang Nguyen : https://github.com/bangnk

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var vi = moment.defineLocale('vi', {
            months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
            monthsShort: 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
            monthsParseExact: true,
            weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
            weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
            weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
            weekdaysParseExact: true,
            meridiemParse: /sa|ch/i,
            isPM: function (input) {
              return /^ch$/i.test(input);
            },
            meridiem: function (hours, minutes, isLower) {
              if (hours < 12) {
                return isLower ? 'sa' : 'SA';
              } else {
                return isLower ? 'ch' : 'CH';
              }
            },
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM [năm] YYYY',
              LLL: 'D MMMM [năm] YYYY HH:mm',
              LLLL: 'dddd, D MMMM [năm] YYYY HH:mm',
              l: 'DD/M/YYYY',
              ll: 'D MMM YYYY',
              lll: 'D MMM YYYY HH:mm',
              llll: 'ddd, D MMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[Hôm nay lúc] LT',
              nextDay: '[Ngày mai lúc] LT',
              nextWeek: 'dddd [tuần tới lúc] LT',
              lastDay: '[Hôm qua lúc] LT',
              lastWeek: 'dddd [tuần rồi lúc] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: '%s tới',
              past: '%s trước',
              s: 'vài giây',
              m: 'một phút',
              mm: '%d phút',
              h: 'một giờ',
              hh: '%d giờ',
              d: 'một ngày',
              dd: '%d ngày',
              M: 'một tháng',
              MM: '%d tháng',
              y: 'một năm',
              yy: '%d năm'
            },
            dayOfMonthOrdinalParse: /\d{1,2}/,
            ordinal: function (number) {
              return number;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return vi;

        })));


        /***/
      }),
      /* 389 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Pseudo [x-pseudo]
        //! author : Andrew Hood : https://github.com/andrewhood125

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var xPseudo = moment.defineLocale('x-pseudo', {
            months: 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
            monthsShort: 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
            monthsParseExact: true,
            weekdays: 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
            weekdaysShort: 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
            weekdaysMin: 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: 'HH:mm',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
            },
            calendar: {
              sameDay: '[T~ódá~ý át] LT',
              nextDay: '[T~ómó~rró~w át] LT',
              nextWeek: 'dddd [át] LT',
              lastDay: '[Ý~ést~érdá~ý át] LT',
              lastWeek: '[L~ást] dddd [át] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'í~ñ %s',
              past: '%s á~gó',
              s: 'á ~féw ~sécó~ñds',
              m: 'á ~míñ~úté',
              mm: '%d m~íñú~tés',
              h: 'á~ñ hó~úr',
              hh: '%d h~óúrs',
              d: 'á ~dáý',
              dd: '%d d~áýs',
              M: 'á ~móñ~th',
              MM: '%d m~óñt~hs',
              y: 'á ~ýéár',
              yy: '%d ý~éárs'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function (number) {
              var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return xPseudo;

        })));


        /***/
      }),
      /* 390 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Yoruba Nigeria [yo]
        //! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var yo = moment.defineLocale('yo', {
            months: 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
            monthsShort: 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
            weekdays: 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
            weekdaysShort: 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
            weekdaysMin: 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
            longDateFormat: {
              LT: 'h:mm A',
              LTS: 'h:mm:ss A',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY h:mm A',
              LLLL: 'dddd, D MMMM YYYY h:mm A'
            },
            calendar: {
              sameDay: '[Ònì ni] LT',
              nextDay: '[Ọ̀la ni] LT',
              nextWeek: 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
              lastDay: '[Àna ni] LT',
              lastWeek: 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
              sameElse: 'L'
            },
            relativeTime: {
              future: 'ní %s',
              past: '%s kọjá',
              s: 'ìsẹjú aayá die',
              m: 'ìsẹjú kan',
              mm: 'ìsẹjú %d',
              h: 'wákati kan',
              hh: 'wákati %d',
              d: 'ọjọ́ kan',
              dd: 'ọjọ́ %d',
              M: 'osù kan',
              MM: 'osù %d',
              y: 'ọdún kan',
              yy: 'ọdún %d'
            },
            dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
            ordinal: 'ọjọ́ %d',
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return yo;

        })));


        /***/
      }),
      /* 391 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Chinese (China) [zh-cn]
        //! author : suupic : https://github.com/suupic
        //! author : Zeno Zeng : https://github.com/zenozeng

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var zhCn = moment.defineLocale('zh-cn', {
            months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
            monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
            weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
            weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
            weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'YYYY年MMMD日',
              LL: 'YYYY年MMMD日',
              LLL: 'YYYY年MMMD日Ah点mm分',
              LLLL: 'YYYY年MMMD日ddddAh点mm分',
              l: 'YYYY年MMMD日',
              ll: 'YYYY年MMMD日',
              lll: 'YYYY年MMMD日 HH:mm',
              llll: 'YYYY年MMMD日dddd HH:mm'
            },
            meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === '凌晨' || meridiem === '早上' ||
                meridiem === '上午') {
                return hour;
              } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
              } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
              }
            },
            meridiem: function (hour, minute, isLower) {
              var hm = hour * 100 + minute;
              if (hm < 600) {
                return '凌晨';
              } else if (hm < 900) {
                return '早上';
              } else if (hm < 1130) {
                return '上午';
              } else if (hm < 1230) {
                return '中午';
              } else if (hm < 1800) {
                return '下午';
              } else {
                return '晚上';
              }
            },
            calendar: {
              sameDay: '[今天]LT',
              nextDay: '[明天]LT',
              nextWeek: '[下]ddddLT',
              lastDay: '[昨天]LT',
              lastWeek: '[上]ddddLT',
              sameElse: 'L'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
            ordinal: function (number, period) {
              switch (period) {
              case 'd':
              case 'D':
              case 'DDD':
                return number + '日';
              case 'M':
                return number + '月';
              case 'w':
              case 'W':
                return number + '周';
              default:
                return number;
              }
            },
            relativeTime: {
              future: '%s内',
              past: '%s前',
              s: '几秒',
              m: '1 分钟',
              mm: '%d 分钟',
              h: '1 小时',
              hh: '%d 小时',
              d: '1 天',
              dd: '%d 天',
              M: '1 个月',
              MM: '%d 个月',
              y: '1 年',
              yy: '%d 年'
            },
            week: {
              // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
            }
          });

          return zhCn;

        })));


        /***/
      }),
      /* 392 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Chinese (Hong Kong) [zh-hk]
        //! author : Ben : https://github.com/ben-lin
        //! author : Chris Lam : https://github.com/hehachris
        //! author : Konstantin : https://github.com/skfd

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var zhHk = moment.defineLocale('zh-hk', {
            months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
            monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
            weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
            weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
            weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'YYYY年MMMD日',
              LL: 'YYYY年MMMD日',
              LLL: 'YYYY年MMMD日 HH:mm',
              LLLL: 'YYYY年MMMD日dddd HH:mm',
              l: 'YYYY年MMMD日',
              ll: 'YYYY年MMMD日',
              lll: 'YYYY年MMMD日 HH:mm',
              llll: 'YYYY年MMMD日dddd HH:mm'
            },
            meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
              } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
              }
            },
            meridiem: function (hour, minute, isLower) {
              var hm = hour * 100 + minute;
              if (hm < 600) {
                return '凌晨';
              } else if (hm < 900) {
                return '早上';
              } else if (hm < 1130) {
                return '上午';
              } else if (hm < 1230) {
                return '中午';
              } else if (hm < 1800) {
                return '下午';
              } else {
                return '晚上';
              }
            },
            calendar: {
              sameDay: '[今天]LT',
              nextDay: '[明天]LT',
              nextWeek: '[下]ddddLT',
              lastDay: '[昨天]LT',
              lastWeek: '[上]ddddLT',
              sameElse: 'L'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
            ordinal: function (number, period) {
              switch (period) {
              case 'd':
              case 'D':
              case 'DDD':
                return number + '日';
              case 'M':
                return number + '月';
              case 'w':
              case 'W':
                return number + '週';
              default:
                return number;
              }
            },
            relativeTime: {
              future: '%s內',
              past: '%s前',
              s: '幾秒',
              m: '1 分鐘',
              mm: '%d 分鐘',
              h: '1 小時',
              hh: '%d 小時',
              d: '1 天',
              dd: '%d 天',
              M: '1 個月',
              MM: '%d 個月',
              y: '1 年',
              yy: '%d 年'
            }
          });

          return zhHk;

        })));


        /***/
      }),
      /* 393 */
      /***/
      (function (module, exports, __webpack_require__) {

        //! moment.js locale configuration
        //! locale : Chinese (Taiwan) [zh-tw]
        //! author : Ben : https://github.com/ben-lin
        //! author : Chris Lam : https://github.com/hehachris

        ;
        (function (global, factory) {
          true ? factory(__webpack_require__(277)) :
            typeof define === 'function' && define.amd ? define(['../moment'], factory) :
            factory(global.moment)
        }(this, (function (moment) {
          'use strict';


          var zhTw = moment.defineLocale('zh-tw', {
            months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
            monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
            weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
            weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
            weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
            longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'YYYY年MMMD日',
              LL: 'YYYY年MMMD日',
              LLL: 'YYYY年MMMD日 HH:mm',
              LLLL: 'YYYY年MMMD日dddd HH:mm',
              l: 'YYYY年MMMD日',
              ll: 'YYYY年MMMD日',
              lll: 'YYYY年MMMD日 HH:mm',
              llll: 'YYYY年MMMD日dddd HH:mm'
            },
            meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
            meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
              } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
              }
            },
            meridiem: function (hour, minute, isLower) {
              var hm = hour * 100 + minute;
              if (hm < 600) {
                return '凌晨';
              } else if (hm < 900) {
                return '早上';
              } else if (hm < 1130) {
                return '上午';
              } else if (hm < 1230) {
                return '中午';
              } else if (hm < 1800) {
                return '下午';
              } else {
                return '晚上';
              }
            },
            calendar: {
              sameDay: '[今天]LT',
              nextDay: '[明天]LT',
              nextWeek: '[下]ddddLT',
              lastDay: '[昨天]LT',
              lastWeek: '[上]ddddLT',
              sameElse: 'L'
            },
            dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
            ordinal: function (number, period) {
              switch (period) {
              case 'd':
              case 'D':
              case 'DDD':
                return number + '日';
              case 'M':
                return number + '月';
              case 'w':
              case 'W':
                return number + '週';
              default:
                return number;
              }
            },
            relativeTime: {
              future: '%s內',
              past: '%s前',
              s: '幾秒',
              m: '1 分鐘',
              mm: '%d 分鐘',
              h: '1 小時',
              hh: '%d 小時',
              d: '1 天',
              dd: '%d 天',
              M: '1 個月',
              MM: '%d 個月',
              y: '1 年',
              yy: '%d 年'
            }
          });

          return zhTw;

        })));


        /***/
      }),
      /* 394 */
      /***/
      (function (module, exports) {

        module.exports = {
          DISPLAY_FORMAT: 'L',
          ISO_FORMAT: 'YYYY-MM-DD',

          START_DATE: 'startDate',
          END_DATE: 'endDate',

          HORIZONTAL_ORIENTATION: 'horizontal',
          VERTICAL_ORIENTATION: 'vertical',

          ANCHOR_LEFT: 'left',
          ANCHOR_RIGHT: 'right',
        };


        /***/
      }),
      /* 395 */
      /***/
      (function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports['default'] = isTouchDevice;

        function isTouchDevice() {
          return !!(typeof window !== 'undefined' && 'ontouchstart' in window) || !!(typeof navigator !== 'undefined' && navigator.maxTouchPoints);
        }

        /***/
      }),
      /* 396 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactDom = __webpack_require__(30);

        var _reactDom2 = _interopRequireDefault(_reactDom);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var KEYCODES = {
          ESCAPE: 27
        };

        var Portal = function (_React$Component) {
          _inherits(Portal, _React$Component);

          function Portal() {
            _classCallCheck(this, Portal);

            var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Portal).call(this));

            _this.state = { active: false };
            _this.handleWrapperClick = _this.handleWrapperClick.bind(_this);
            _this.closePortal = _this.closePortal.bind(_this);
            _this.handleOutsideMouseClick = _this.handleOutsideMouseClick.bind(_this);
            _this.handleKeydown = _this.handleKeydown.bind(_this);
            _this.portal = null;
            _this.node = null;
            return _this;
          }

          _createClass(Portal, [{
            key: 'componentDidMount',
            value: function componentDidMount() {
              if (this.props.closeOnEsc) {
                document.addEventListener('keydown', this.handleKeydown);
              }

              if (this.props.closeOnOutsideClick) {
                document.addEventListener('mouseup', this.handleOutsideMouseClick);
                document.addEventListener('touchstart', this.handleOutsideMouseClick);
              }

              if (this.props.isOpened) {
                this.openPortal();
              }
            }
          }, {
            key: 'componentWillReceiveProps',
            value: function componentWillReceiveProps(newProps) {
              // portal's 'is open' state is handled through the prop isOpened
              if (typeof newProps.isOpened !== 'undefined') {
                if (newProps.isOpened) {
                  if (this.state.active) {
                    this.renderPortal(newProps);
                  } else {
                    this.openPortal(newProps);
                  }
                }
                if (!newProps.isOpened && this.state.active) {
                  this.closePortal();
                }
              }

              // portal handles its own 'is open' state
              if (typeof newProps.isOpened === 'undefined' && this.state.active) {
                this.renderPortal(newProps);
              }
            }
          }, {
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
              if (this.props.closeOnEsc) {
                document.removeEventListener('keydown', this.handleKeydown);
              }

              if (this.props.closeOnOutsideClick) {
                document.removeEventListener('mouseup', this.handleOutsideMouseClick);
                document.removeEventListener('touchstart', this.handleOutsideMouseClick);
              }

              this.closePortal(true);
            }
          }, {
            key: 'handleWrapperClick',
            value: function handleWrapperClick(e) {
              e.preventDefault();
              e.stopPropagation();
              if (this.state.active) {
                return;
              }
              this.openPortal();
            }
          }, {
            key: 'openPortal',
            value: function openPortal() {
              var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];

              this.setState({ active: true });
              this.renderPortal(props);
              this.props.onOpen(this.node);
            }
          }, {
            key: 'closePortal',
            value: function closePortal() {
              var _this2 = this;

              var isUnmounted = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

              var resetPortalState = function resetPortalState() {
                if (_this2.node) {
                  _reactDom2.default.unmountComponentAtNode(_this2.node);
                  document.body.removeChild(_this2.node);
                }
                _this2.portal = null;
                _this2.node = null;
                if (isUnmounted !== true) {
                  _this2.setState({ active: false });
                }
              };

              if (this.state.active) {
                if (this.props.beforeClose) {
                  this.props.beforeClose(this.node, resetPortalState);
                } else {
                  resetPortalState();
                }

                this.props.onClose();
              }
            }
          }, {
            key: 'handleOutsideMouseClick',
            value: function handleOutsideMouseClick(e) {
              if (!this.state.active) {
                return;
              }

              var root = (0, _reactDom.findDOMNode)(this.portal);
              if (root.contains(e.target) || e.button && e.button !== 0) {
                return;
              }

              e.stopPropagation();
              this.closePortal();
            }
          }, {
            key: 'handleKeydown',
            value: function handleKeydown(e) {
              if (e.keyCode === KEYCODES.ESCAPE && this.state.active) {
                this.closePortal();
              }
            }
          }, {
            key: 'renderPortal',
            value: function renderPortal(props) {
              if (!this.node) {
                this.node = document.createElement('div');
                document.body.appendChild(this.node);
              }

              var children = props.children;
              // https://gist.github.com/jimfb/d99e0678e9da715ccf6454961ef04d1b
              if (typeof props.children.type === 'function') {
                children = _react2.default.cloneElement(props.children, { closePortal: this.closePortal });
              }

              this.portal = _reactDom2.default.unstable_renderSubtreeIntoContainer(this, children, this.node, this.props.onUpdate);
            }
          }, {
            key: 'render',
            value: function render() {
              if (this.props.openByClickOn) {
                return _react2.default.cloneElement(this.props.openByClickOn, { onClick: this.handleWrapperClick });
              }
              return null;
            }
          }]);

          return Portal;
        }(_react2.default.Component);

        exports.default = Portal;


        Portal.propTypes = {
          children: _react2.default.PropTypes.element.isRequired,
          openByClickOn: _react2.default.PropTypes.element,
          closeOnEsc: _react2.default.PropTypes.bool,
          closeOnOutsideClick: _react2.default.PropTypes.bool,
          isOpened: _react2.default.PropTypes.bool,
          onOpen: _react2.default.PropTypes.func,
          onClose: _react2.default.PropTypes.func,
          beforeClose: _react2.default.PropTypes.func,
          onUpdate: _react2.default.PropTypes.func
        };

        Portal.defaultProps = {
          onOpen: function onOpen() {},
          onClose: function onClose() {},
          onUpdate: function onUpdate() {}
        };
        module.exports = exports['default'];


        /***/
      }),
      /* 397 */
      /***/
      (function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports['default'] = getResponsiveContainerStyles;

        var _constants = __webpack_require__(394);

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function getResponsiveContainerStyles(anchorDirection, currentOffset, containerEdge, margin) {
          var windowWidth = typeof window !== 'undefined' && window.innerWidth;
          var calculatedOffset = anchorDirection === _constants.ANCHOR_LEFT ? windowWidth - containerEdge : containerEdge;
          var calculatedMargin = margin || 0;

          return _defineProperty({}, anchorDirection, Math.min(currentOffset + calculatedOffset - calculatedMargin, 0));
        }

        /***/
      }),
      /* 398 */
      /***/
      (function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports['default'] = isInclusivelyAfterDay;

        var _moment = __webpack_require__(277);

        var _moment2 = _interopRequireDefault(_moment);

        var _isSameDay = __webpack_require__(399);

        var _isSameDay2 = _interopRequireDefault(_isSameDay);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        function isInclusivelyAfterDay(a, b) {
          if (!_moment2['default'].isMoment(a) || !_moment2['default'].isMoment(b)) return false;
          return a.isAfter(b) || (0, _isSameDay2['default'])(a, b);
        }

        /***/
      }),
      /* 399 */
      /***/
      (function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports['default'] = isSameDay;

        var _moment = __webpack_require__(277);

        var _moment2 = _interopRequireDefault(_moment);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        function isSameDay(a, b) {
          if (!_moment2['default'].isMoment(a) || !_moment2['default'].isMoment(b)) return false;
          return a.isSame(b, 'day');
        }

        /***/
      }),
      /* 400 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports =
          /******/
          (function (modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

              /******/ // Check if module is in cache
              /******/
              if (installedModules[moduleId])
              /******/
                return installedModules[moduleId].exports;

              /******/ // Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                  /******/
              };

              /******/ // Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

              /******/ // Flag the module as loaded
              /******/
              module.loaded = true;

              /******/ // Return the exports of the module
              /******/
              return module.exports;
              /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
          })
          /************************************************************************/
          /******/
          ([
            /* 0 */
            /***/
            function (module, exports, __webpack_require__) {

              var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _createClass = function () {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function (Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps);
                  if (staticProps) defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              var _moment = __webpack_require__(4);

              var _moment2 = _interopRequireDefault(_moment);

              var _reactMomentProptypes = __webpack_require__(3);

              var _reactMomentProptypes2 = _interopRequireDefault(_reactMomentProptypes);

              var _DateRangePickerInput = __webpack_require__(24);

              var _DateRangePickerInput2 = _interopRequireDefault(_DateRangePickerInput);

              var _toMomentObject = __webpack_require__(25);

              var _toMomentObject2 = _interopRequireDefault(_toMomentObject);

              var _toLocalizedDateString = __webpack_require__(26);

              var _toLocalizedDateString2 = _interopRequireDefault(_toLocalizedDateString);

              var _isInclusivelyAfterDay = __webpack_require__(17);

              var _isInclusivelyAfterDay2 = _interopRequireDefault(_isInclusivelyAfterDay);

              var _isInclusivelyBeforeDay = __webpack_require__(27);

              var _isInclusivelyBeforeDay2 = _interopRequireDefault(_isInclusivelyBeforeDay);

              var _constants = __webpack_require__(9);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _possibleConstructorReturn(self, call) {
                if (!self) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              }

              var propTypes = {
                startDate: _reactMomentProptypes2['default'].momentObj,
                startDateId: _react.PropTypes.string,
                startDatePlaceholderText: _react.PropTypes.string,
                isStartDateFocused: _react.PropTypes.bool,

                endDate: _reactMomentProptypes2['default'].momentObj,
                endDateId: _react.PropTypes.string,
                endDatePlaceholderText: _react.PropTypes.string,
                isEndDateFocused: _react.PropTypes.bool,

                showClearDates: _react.PropTypes.bool,
                showCaret: _react.PropTypes.bool,
                disabled: _react.PropTypes.bool,
                required: _react.PropTypes.bool,

                keepOpenOnDateSelect: _react.PropTypes.bool,
                reopenPickerOnClearDates: _react.PropTypes.bool,
                withFullScreenPortal: _react.PropTypes.bool,
                isOutsideRange: _react.PropTypes.func,
                displayFormat: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),

                onFocusChange: _react.PropTypes.func,
                onDatesChange: _react.PropTypes.func,

                // i18n
                phrases: _react.PropTypes.shape({
                  clearDates: _react.PropTypes.node
                })
              };

              var defaultProps = {
                startDate: null,
                startDateId: _constants.START_DATE,
                startDatePlaceholderText: 'Start Date',
                isStartDateFocused: false,

                endDate: null,
                endDateId: _constants.END_DATE,
                endDatePlaceholderText: 'End Date',
                isEndDateFocused: false,

                showClearDates: false,
                showCaret: false,
                disabled: false,
                required: false,

                keepOpenOnDateSelect: false,
                reopenPickerOnClearDates: false,
                withFullScreenPortal: false,
                isOutsideRange: function () {
                  function isOutsideRange(day) {
                    return !(0, _isInclusivelyAfterDay2['default'])(day, (0, _moment2['default'])());
                  }

                  return isOutsideRange;
                }(),
                displayFormat: function () {
                  function displayFormat() {
                    return _moment2['default'].localeData().longDateFormat('L');
                  }

                  return displayFormat;
                }(),

                onFocusChange: function () {
                  function onFocusChange() {}

                  return onFocusChange;
                }(),
                onDatesChange: function () {
                  function onDatesChange() {}

                  return onDatesChange;
                }(),

                // i18n
                phrases: {
                  clearDates: 'Clear Dates'
                }
              };

              var DateRangePickerInputWithHandlers = function (_React$Component) {
                _inherits(DateRangePickerInputWithHandlers, _React$Component);

                function DateRangePickerInputWithHandlers(props) {
                  _classCallCheck(this, DateRangePickerInputWithHandlers);

                  var _this = _possibleConstructorReturn(this, (DateRangePickerInputWithHandlers.__proto__ || Object.getPrototypeOf(DateRangePickerInputWithHandlers)).call(this, props));

                  _this.onClearFocus = _this.onClearFocus.bind(_this);
                  _this.onStartDateChange = _this.onStartDateChange.bind(_this);
                  _this.onStartDateFocus = _this.onStartDateFocus.bind(_this);
                  _this.onEndDateChange = _this.onEndDateChange.bind(_this);
                  _this.onEndDateFocus = _this.onEndDateFocus.bind(_this);
                  _this.clearDates = _this.clearDates.bind(_this);
                  return _this;
                }

                _createClass(DateRangePickerInputWithHandlers, [{
                  key: 'onClearFocus',
                  value: function () {
                    function onClearFocus() {
                      this.props.onFocusChange(null);
                    }

                    return onClearFocus;
                  }()
                }, {
                  key: 'onEndDateChange',
                  value: function () {
                    function onEndDateChange(endDateString) {
                      var _props = this.props;
                      var startDate = _props.startDate;
                      var isOutsideRange = _props.isOutsideRange;
                      var keepOpenOnDateSelect = _props.keepOpenOnDateSelect;
                      var onDatesChange = _props.onDatesChange;
                      var onFocusChange = _props.onFocusChange;

                      var endDate = (0, _toMomentObject2['default'])(endDateString, this.getDisplayFormat());

                      var isEndDateValid = endDate && !isOutsideRange(endDate) && !(0, _isInclusivelyBeforeDay2['default'])(endDate, startDate);
                      if (isEndDateValid) {
                        onDatesChange({ startDate: startDate, endDate: endDate });
                        if (!keepOpenOnDateSelect) onFocusChange(null);
                      } else {
                        onDatesChange({
                          startDate: startDate,
                          endDate: null
                        });
                      }
                    }

                    return onEndDateChange;
                  }()
                }, {
                  key: 'onEndDateFocus',
                  value: function () {
                    function onEndDateFocus() {
                      var _props2 = this.props;
                      var startDate = _props2.startDate;
                      var onFocusChange = _props2.onFocusChange;
                      var withFullScreenPortal = _props2.withFullScreenPortal;
                      var disabled = _props2.disabled;

                      if (!startDate && withFullScreenPortal && !disabled) {
                        // When the datepicker is full screen, we never want to focus the end date first
                        // because there's no indication that that is the case once the datepicker is open and it
                        // might confuse the user
                        onFocusChange(_constants.START_DATE);
                      } else if (!disabled) {
                        onFocusChange(_constants.END_DATE);
                      }
                    }

                    return onEndDateFocus;
                  }()
                }, {
                  key: 'onStartDateChange',
                  value: function () {
                    function onStartDateChange(startDateString) {
                      var startDate = (0, _toMomentObject2['default'])(startDateString, this.getDisplayFormat());

                      var endDate = this.props.endDate;
                      var _props3 = this.props;
                      var isOutsideRange = _props3.isOutsideRange;
                      var onDatesChange = _props3.onDatesChange;
                      var onFocusChange = _props3.onFocusChange;

                      var isStartDateValid = startDate && !isOutsideRange(startDate);
                      if (isStartDateValid) {
                        if ((0, _isInclusivelyBeforeDay2['default'])(endDate, startDate)) {
                          endDate = null;
                        }

                        onDatesChange({ startDate: startDate, endDate: endDate });
                        onFocusChange(_constants.END_DATE);
                      } else {
                        onDatesChange({
                          startDate: null,
                          endDate: endDate
                        });
                      }
                    }

                    return onStartDateChange;
                  }()
                }, {
                  key: 'onStartDateFocus',
                  value: function () {
                    function onStartDateFocus() {
                      if (!this.props.disabled) {
                        this.props.onFocusChange(_constants.START_DATE);
                      }
                    }

                    return onStartDateFocus;
                  }()
                }, {
                  key: 'getDisplayFormat',
                  value: function () {
                    function getDisplayFormat() {
                      var displayFormat = this.props.displayFormat;

                      return typeof displayFormat === 'string' ? displayFormat : displayFormat();
                    }

                    return getDisplayFormat;
                  }()
                }, {
                  key: 'getDateString',
                  value: function () {
                    function getDateString(date) {
                      var displayFormat = this.getDisplayFormat();
                      if (date && displayFormat) {
                        return date && date.format(displayFormat);
                      }
                      return (0, _toLocalizedDateString2['default'])(date);
                    }

                    return getDateString;
                  }()
                }, {
                  key: 'clearDates',
                  value: function () {
                    function clearDates() {
                      var _props4 = this.props;
                      var onDatesChange = _props4.onDatesChange;
                      var reopenPickerOnClearDates = _props4.reopenPickerOnClearDates;
                      var onFocusChange = _props4.onFocusChange;

                      onDatesChange({ startDate: null, endDate: null });
                      if (reopenPickerOnClearDates) {
                        onFocusChange(_constants.START_DATE);
                      }
                    }

                    return clearDates;
                  }()
                }, {
                  key: 'render',
                  value: function () {
                    function render() {
                      var _props5 = this.props;
                      var startDate = _props5.startDate;
                      var startDateId = _props5.startDateId;
                      var startDatePlaceholderText = _props5.startDatePlaceholderText;
                      var isStartDateFocused = _props5.isStartDateFocused;
                      var endDate = _props5.endDate;
                      var endDateId = _props5.endDateId;
                      var endDatePlaceholderText = _props5.endDatePlaceholderText;
                      var isEndDateFocused = _props5.isEndDateFocused;
                      var showClearDates = _props5.showClearDates;
                      var showCaret = _props5.showCaret;
                      var disabled = _props5.disabled;
                      var required = _props5.required;
                      var phrases = _props5.phrases;

                      var startDateString = this.getDateString(startDate);
                      var endDateString = this.getDateString(endDate);

                      return _react2['default'].createElement(_DateRangePickerInput2['default'], {
                        startDate: startDateString,
                        startDateId: startDateId,
                        startDatePlaceholderText: startDatePlaceholderText,
                        isStartDateFocused: isStartDateFocused,
                        endDate: endDateString,
                        endDateId: endDateId,
                        endDatePlaceholderText: endDatePlaceholderText,
                        isEndDateFocused: isEndDateFocused,
                        disabled: disabled,
                        required: required,
                        showCaret: showCaret,
                        phrases: phrases,
                        onStartDateChange: this.onStartDateChange,
                        onStartDateFocus: this.onStartDateFocus,
                        onStartDateShiftTab: this.onClearFocus,
                        onEndDateChange: this.onEndDateChange,
                        onEndDateFocus: this.onEndDateFocus,
                        onEndDateTab: this.onClearFocus,
                        showClearDates: showClearDates,
                        onClearDates: this.clearDates
                      });
                    }

                    return render;
                  }()
                }]);

                return DateRangePickerInputWithHandlers;
              }(_react2['default'].Component);

              exports['default'] = DateRangePickerInputWithHandlers;

              DateRangePickerInputWithHandlers.propTypes = propTypes;
              DateRangePickerInputWithHandlers.defaultProps = defaultProps;

              /***/
            },
            /* 1 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(3);

              /***/
            },
            /* 2 */
            ,
            /* 3 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(401);

              /***/
            },
            /* 4 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(277);

              /***/
            },
            /* 5 */
            ,
            /* 6 */
            ,
            /* 7 */
            ,
            /* 8 */
            ,
            /* 9 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(394);

              /***/
            },
            /* 10 */
            ,
            /* 11 */
            ,
            /* 12 */
            ,
            /* 13 */
            ,
            /* 14 */
            ,
            /* 15 */
            ,
            /* 16 */
            ,
            /* 17 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(398);

              /***/
            },
            /* 18 */
            ,
            /* 19 */
            ,
            /* 20 */
            ,
            /* 21 */
            ,
            /* 22 */
            ,
            /* 23 */
            ,
            /* 24 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(403);

              /***/
            },
            /* 25 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(405);

              /***/
            },
            /* 26 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(406);

              /***/
            },
            /* 27 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(407);

              /***/
            }
            /******/
          ]);

        /***/
      }),
      /* 401 */
      /***/
      (function (module, exports, __webpack_require__) {

        var moment = __webpack_require__(277);
        var momentValidationWrapper = __webpack_require__(402);

        moment.createFromInputFallback = function (config) {
          config._d = new Date(config._i);
        };

        var ANONYMOUS = '<<anonymous>>';

        var ReactPropTypeLocationNames = {
          prop: 'prop',
          context: 'context',
          childContext: 'child context',
        };

        function createInvalidRequiredErrorMessage(propName, componentName, value) {
          return new Error(
            'The prop `' + propName + '` is marked as required in `' + componentName + '`, but its value is `' + value + '`.'
          );
        }

        function createMomentChecker(type, typeValidator, validator, momentType) {

          function propValidator(
            isRequired, // Bound parameter to indicate with the propType is required
            predicate, // Bound parameter to allow user to add dynamic validation
            props,
            propName,
            componentName,
            location,
            propFullName
          ) {
            var propValue = props[propName];
            var propType = typeof propValue;

            var isPropValueUndefined = typeof propValue === 'undefined';
            var isPropValueNull = propValue === null;

            if (isRequired) {
              componentName = componentName || ANONYMOUS;
              propFullName = propFullName || propName;
              if (isPropValueUndefined) {
                return createInvalidRequiredErrorMessage(propFullName, componentName, 'undefined');
              } else if (isPropValueNull) {
                return createInvalidRequiredErrorMessage(propFullName, componentName, 'null');
              }
            }

            if (isPropValueUndefined || isPropValueNull) {
              return null;
            }

            if (typeValidator && !typeValidator(propValue)) {
              return new Error(
                'Invalid input type: `' + propName + '` of type `' + propType + '` ' +
                'supplied to `' + componentName + '`, expected `' + type + '`.'
              );
            }

            if (!validator(propValue)) {
              return new Error(
                'Invalid ' + location + ' `' + propName + '` of type `' + propType + '` ' +
                'supplied to `' + componentName + '`, expected `' + momentType + '`.'
              );
            }

            if (predicate && !predicate(propValue)) {
              var predicateName = predicate.name || ANONYMOUS;
              return new Error(
                'Invalid ' + location + ' `' + propName + '` of type `' + propType + '` ' +
                'supplied to `' + componentName + '`. Failed to succeed with predicate `' +
                predicateName + '`.'
              );
            }

            return null;

          }

          var requiredPropValidator = propValidator.bind(null, false, null);
          requiredPropValidator.isRequired = propValidator.bind(null, true, null);
          requiredPropValidator.withPredicate = function predicateApplication(predicate) {
            if (typeof predicate !== 'function') {
              throw new Error('`predicate` must be a function');
            }
            var basePropValidator = propValidator.bind(null, false, predicate);
            basePropValidator.isRequired = propValidator.bind(null, true, predicate);
            return basePropValidator;
          };

          return requiredPropValidator;

        }

        module.exports = {

          momentObj: createMomentChecker(
            'object',
            function (obj) {
              return typeof obj === 'object';
            },
            function isValid(value) {
              return momentValidationWrapper.isValidMoment(value);
            },
            'Moment'
          ),

          momentString: createMomentChecker(
            'string',
            function (str) {
              return typeof str === 'string';
            },
            function isValid(value) {
              return momentValidationWrapper.isValidMoment(moment(value));
            },
            'Moment'
          ),

          momentDurationObj: createMomentChecker(
            'object',
            function (obj) {
              return typeof obj === 'object';
            },
            function isValid(value) {
              return moment.isDuration(value);
            },
            'Duration'
          ),

        };


        /***/
      }),
      /* 402 */
      /***/
      (function (module, exports, __webpack_require__) {

        var moment = __webpack_require__(277);

        function isValidMoment(testMoment) {
          if (typeof testMoment.isValid === 'function') {
            // moment 1.7.0+
            return testMoment.isValid();
          }

          return !isNaN(testMoment);
        }

        module.exports = {
          isValidMoment: isValidMoment,
        }


        /***/
      }),
      /* 403 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports =
          /******/
          (function (modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

              /******/ // Check if module is in cache
              /******/
              if (installedModules[moduleId])
              /******/
                return installedModules[moduleId].exports;

              /******/ // Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                  /******/
              };

              /******/ // Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

              /******/ // Flag the module as loaded
              /******/
              module.loaded = true;

              /******/ // Return the exports of the module
              /******/
              return module.exports;
              /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
          })
          /************************************************************************/
          /******/
          ({

            /***/
            0:
            /***/
              function (module, exports, __webpack_require__) {

              var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _createClass = function () {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function (Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps);
                  if (staticProps) defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              var _classnames = __webpack_require__(5);

              var _classnames2 = _interopRequireDefault(_classnames);

              var _DateInput = __webpack_require__(22);

              var _DateInput2 = _interopRequireDefault(_DateInput);

              var _arrowRight = __webpack_require__(23);

              var _arrowRight2 = _interopRequireDefault(_arrowRight);

              var _close = __webpack_require__(20);

              var _close2 = _interopRequireDefault(_close);

              var _constants = __webpack_require__(9);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _possibleConstructorReturn(self, call) {
                if (!self) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              }

              var propTypes = {
                startDateId: _react.PropTypes.string,
                startDatePlaceholderText: _react.PropTypes.string,

                endDateId: _react.PropTypes.string,
                endDatePlaceholderText: _react.PropTypes.string,

                onStartDateFocus: _react.PropTypes.func,
                onEndDateFocus: _react.PropTypes.func,
                onStartDateChange: _react.PropTypes.func,
                onEndDateChange: _react.PropTypes.func,
                onStartDateShiftTab: _react.PropTypes.func,
                onEndDateTab: _react.PropTypes.func,
                onClearDates: _react.PropTypes.func,

                startDate: _react.PropTypes.string,
                endDate: _react.PropTypes.string,

                isStartDateFocused: _react.PropTypes.bool,
                isEndDateFocused: _react.PropTypes.bool,
                showClearDates: _react.PropTypes.bool,
                disabled: _react.PropTypes.bool,
                required: _react.PropTypes.bool,
                showCaret: _react.PropTypes.bool,

                // i18n
                phrases: _react.PropTypes.shape({
                  clearDates: _react.PropTypes.node
                })
              };

              var defaultProps = {
                startDateId: _constants.START_DATE,
                endDateId: _constants.END_DATE,
                startDatePlaceholderText: 'Start Date',
                endDatePlaceholderText: 'End Date',
                onStartDateFocus: function () {
                  function onStartDateFocus() {}

                  return onStartDateFocus;
                }(),
                onEndDateFocus: function () {
                  function onEndDateFocus() {}

                  return onEndDateFocus;
                }(),
                onStartDateChange: function () {
                  function onStartDateChange() {}

                  return onStartDateChange;
                }(),
                onEndDateChange: function () {
                  function onEndDateChange() {}

                  return onEndDateChange;
                }(),
                onStartDateShiftTab: function () {
                  function onStartDateShiftTab() {}

                  return onStartDateShiftTab;
                }(),
                onEndDateTab: function () {
                  function onEndDateTab() {}

                  return onEndDateTab;
                }(),
                onClearDates: function () {
                  function onClearDates() {}

                  return onClearDates;
                }(),

                startDate: '',
                endDate: '',

                isStartDateFocused: false,
                isEndDateFocused: false,
                showClearDates: false,
                disabled: false,
                required: false,
                showCaret: false,

                // i18n
                phrases: {
                  clearDates: 'Clear Dates'
                }
              };

              var DateRangePickerInput = function (_React$Component) {
                _inherits(DateRangePickerInput, _React$Component);

                function DateRangePickerInput(props) {
                  _classCallCheck(this, DateRangePickerInput);

                  var _this = _possibleConstructorReturn(this, (DateRangePickerInput.__proto__ || Object.getPrototypeOf(DateRangePickerInput)).call(this, props));

                  _this.state = {
                    isClearDatesHovered: false
                  };

                  _this.onClearDatesMouseEnter = _this.onClearDatesMouseEnter.bind(_this);
                  _this.onClearDatesMouseLeave = _this.onClearDatesMouseLeave.bind(_this);
                  return _this;
                }

                _createClass(DateRangePickerInput, [{
                  key: 'onClearDatesMouseEnter',
                  value: function () {
                    function onClearDatesMouseEnter() {
                      this.setState({
                        isClearDatesHovered: true
                      });
                    }

                    return onClearDatesMouseEnter;
                  }()
                }, {
                  key: 'onClearDatesMouseLeave',
                  value: function () {
                    function onClearDatesMouseLeave() {
                      this.setState({
                        isClearDatesHovered: false
                      });
                    }

                    return onClearDatesMouseLeave;
                  }()
                }, {
                  key: 'render',
                  value: function () {
                    function render() {
                      var _state = this.state;
                      var startDateString = _state.startDateString;
                      var endDateString = _state.endDateString;
                      var isClearDatesHovered = _state.isClearDatesHovered;
                      var _props = this.props;
                      var startDate = _props.startDate;
                      var startDateId = _props.startDateId;
                      var startDatePlaceholderText = _props.startDatePlaceholderText;
                      var isStartDateFocused = _props.isStartDateFocused;
                      var onStartDateChange = _props.onStartDateChange;
                      var onStartDateFocus = _props.onStartDateFocus;
                      var onStartDateShiftTab = _props.onStartDateShiftTab;
                      var endDate = _props.endDate;
                      var endDateId = _props.endDateId;
                      var endDatePlaceholderText = _props.endDatePlaceholderText;
                      var isEndDateFocused = _props.isEndDateFocused;
                      var onEndDateChange = _props.onEndDateChange;
                      var onEndDateFocus = _props.onEndDateFocus;
                      var onEndDateTab = _props.onEndDateTab;
                      var onClearDates = _props.onClearDates;
                      var showClearDates = _props.showClearDates;
                      var disabled = _props.disabled;
                      var required = _props.required;
                      var showCaret = _props.showCaret;
                      var phrases = _props.phrases;

                      var startDateValue = startDate || startDateString;
                      var endDateValue = endDate || endDateString;

                      return _react2['default'].createElement('div', {
                        className: (0, _classnames2['default'])('DateRangePickerInput', {
                          'DateRangePickerInput--disabled': disabled
                        })
                      }, _react2['default'].createElement(_DateInput2['default'], {
                        id: startDateId,
                        placeholder: startDatePlaceholderText,
                        dateValue: startDateValue,
                        focused: isStartDateFocused,
                        disabled: disabled,
                        required: required,
                        showCaret: showCaret,

                        onChange: onStartDateChange,
                        onFocus: onStartDateFocus,
                        onKeyDownShiftTab: onStartDateShiftTab
                      }), _react2['default'].createElement('div', { className: 'DateRangePickerInput__arrow' }, _react2['default'].createElement(_arrowRight2['default'], null)), _react2['default'].createElement(_DateInput2['default'], {
                        id: endDateId,
                        placeholder: endDatePlaceholderText,
                        dateValue: endDateValue,
                        focused: isEndDateFocused,
                        disabled: disabled,
                        required: required,
                        showCaret: showCaret,

                        onChange: onEndDateChange,
                        onFocus: onEndDateFocus,
                        onKeyDownTab: onEndDateTab
                      }), showClearDates && _react2['default'].createElement('button', {
                        type: 'button',
                        className: (0, _classnames2['default'])('DateRangePickerInput__clear-dates', {
                          'DateRangePickerInput__clear-dates--hide': !(startDateValue || endDateValue),
                          'DateRangePickerInput__clear-dates--hover': isClearDatesHovered
                        }),
                        onMouseEnter: this.onClearDatesMouseEnter,
                        onMouseLeave: this.onClearDatesMouseLeave,
                        onClick: onClearDates
                      }, _react2['default'].createElement('span', { className: 'screen-reader-only' }, phrases.clearDates), _react2['default'].createElement(_close2['default'], null)));
                    }

                    return render;
                  }()
                }]);

                return DateRangePickerInput;
              }(_react2['default'].Component);

              exports['default'] = DateRangePickerInput;

              DateRangePickerInput.propTypes = propTypes;
              DateRangePickerInput.defaultProps = defaultProps;

              /***/
            },

            /***/
            1:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(3);

              /***/
            },

            /***/
            5:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(56);

              /***/
            },

            /***/
            9:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(394);

              /***/
            },

            /***/
            20:
            /***/
              function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

              var _createClass = function () {
                function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

              function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

              function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

              function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

              var SVG = function (_React$Component) {
                _inherits(SVG, _React$Component);

                function SVG() {
                  _classCallCheck(this, SVG);

                  return _possibleConstructorReturn(this, (SVG.__proto__ || Object.getPrototypeOf(SVG)).apply(this, arguments));
                }

                _createClass(SVG, [{
                  key: "render",
                  value: function () {
                    function render() {
                      return _react2["default"].createElement(
                        "svg",
                        _extends({ viewBox: "0 0 12 12" }, this.props),
                        _react2["default"].createElement("path", { fillRule: "evenodd", d: "M11.53.47a.75.75 0 0 0-1.061 0l-4.47 4.47L1.529.47A.75.75 0 1 0 .468 1.531l4.47 4.47-4.47 4.47a.75.75 0 1 0 1.061 1.061l4.47-4.47 4.47 4.47a.75.75 0 1 0 1.061-1.061l-4.47-4.47 4.47-4.47a.75.75 0 0 0 0-1.061z" })
                      );
                    }

                    return render;
                  }()
                }]);

                return SVG;
              }(_react2["default"].Component);

              exports["default"] = SVG;

              /***/
            },

            /***/
            22:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(404);

              /***/
            },

            /***/
            23:
            /***/
              function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

              var _createClass = function () {
                function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

              function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

              function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

              function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

              var SVG = function (_React$Component) {
                _inherits(SVG, _React$Component);

                function SVG() {
                  _classCallCheck(this, SVG);

                  return _possibleConstructorReturn(this, (SVG.__proto__ || Object.getPrototypeOf(SVG)).apply(this, arguments));
                }

                _createClass(SVG, [{
                  key: "render",
                  value: function () {
                    function render() {
                      return _react2["default"].createElement(
                        "svg",
                        _extends({ viewBox: "0 0 1000 1000" }, this.props),
                        _react2["default"].createElement("path", { d: "M694.4 242.4l249.1 249.1c11 11 11 21 0 32L694.4 772.7c-5 5-10 7-16 7s-11-2-16-7c-11-11-11-21 0-32l210.1-210.1H67.1c-13 0-23-10-23-23s10-23 23-23h805.4L662.4 274.5c-21-21.1 11-53.1 32-32.1z" })
                      );
                    }

                    return render;
                  }()
                }]);

                return SVG;
              }(_react2["default"].Component);

              exports["default"] = SVG;

              /***/
            }

            /******/
          });

        /***/
      }),
      /* 404 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports =
          /******/
          (function (modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

              /******/ // Check if module is in cache
              /******/
              if (installedModules[moduleId])
              /******/
                return installedModules[moduleId].exports;

              /******/ // Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                  /******/
              };

              /******/ // Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

              /******/ // Flag the module as loaded
              /******/
              module.loaded = true;

              /******/ // Return the exports of the module
              /******/
              return module.exports;
              /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
          })
          /************************************************************************/
          /******/
          ({

            /***/
            0:
            /***/
              function (module, exports, __webpack_require__) {

              var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _createClass = function () {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function (Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps);
                  if (staticProps) defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              var _classnames = __webpack_require__(5);

              var _classnames2 = _interopRequireDefault(_classnames);

              var _isTouchDevice = __webpack_require__(14);

              var _isTouchDevice2 = _interopRequireDefault(_isTouchDevice);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _possibleConstructorReturn(self, call) {
                if (!self) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              }

              var propTypes = {
                id: _react.PropTypes.string.isRequired,
                placeholder: _react.PropTypes.string, // also used as label
                dateValue: _react.PropTypes.string,
                focused: _react.PropTypes.bool,
                disabled: _react.PropTypes.bool,
                required: _react.PropTypes.bool,
                showCaret: _react.PropTypes.bool,

                onChange: _react.PropTypes.func,
                onFocus: _react.PropTypes.func,
                onKeyDownShiftTab: _react.PropTypes.func,
                onKeyDownTab: _react.PropTypes.func
              };

              var defaultProps = {
                placeholder: 'Select Date',
                dateValue: '',
                focused: false,
                disabled: false,
                required: false,
                showCaret: false,

                onChange: function () {
                  function onChange() {}

                  return onChange;
                }(),
                onFocus: function () {
                  function onFocus() {}

                  return onFocus;
                }(),
                onKeyDownShiftTab: function () {
                  function onKeyDownShiftTab() {}

                  return onKeyDownShiftTab;
                }(),
                onKeyDownTab: function () {
                  function onKeyDownTab() {}

                  return onKeyDownTab;
                }()
              };

              var DateInput = function (_React$Component) {
                _inherits(DateInput, _React$Component);

                function DateInput(props) {
                  _classCallCheck(this, DateInput);

                  var _this = _possibleConstructorReturn(this, (DateInput.__proto__ || Object.getPrototypeOf(DateInput)).call(this, props));

                  _this.state = {
                    dateString: ''
                  };

                  _this.onChange = _this.onChange.bind(_this);
                  _this.onKeyDown = _this.onKeyDown.bind(_this);

                  _this.isTouchDevice = (0, _isTouchDevice2['default'])();
                  return _this;
                }

                _createClass(DateInput, [{
                  key: 'componentWillReceiveProps',
                  value: function () {
                    function componentWillReceiveProps(nextProps) {
                      if (!this.props.dateValue && nextProps.dateValue) {
                        this.setState({
                          dateString: ''
                        });
                      }
                    }

                    return componentWillReceiveProps;
                  }()
                }, {
                  key: 'componentDidUpdate',
                  value: function () {
                    function componentDidUpdate(prevProps) {
                      var focused = this.props.focused;

                      if (prevProps.focused === focused) return;

                      if (focused) {
                        this.inputRef.focus();
                        this.inputRef.select();
                      } else {
                        this.inputRef.blur();
                      }
                    }

                    return componentDidUpdate;
                  }()
                }, {
                  key: 'onChange',
                  value: function () {
                    function onChange(e) {
                      var dateString = e.target.value;

                      this.setState({ dateString: dateString });
                      this.props.onChange(dateString);
                    }

                    return onChange;
                  }()
                }, {
                  key: 'onKeyDown',
                  value: function () {
                    function onKeyDown(e) {
                      var _props = this.props;
                      var onKeyDownShiftTab = _props.onKeyDownShiftTab;
                      var onKeyDownTab = _props.onKeyDownTab;

                      if (e.key === 'Tab') {
                        if (e.shiftKey) {
                          onKeyDownShiftTab(e);
                        } else {
                          onKeyDownTab(e);
                        }
                      }
                    }

                    return onKeyDown;
                  }()
                }, {
                  key: 'render',
                  value: function () {
                    function render() {
                      var _this2 = this;

                      var dateString = this.state.dateString;
                      var _props2 = this.props;
                      var id = _props2.id;
                      var placeholder = _props2.placeholder;
                      var dateValue = _props2.dateValue;
                      var focused = _props2.focused;
                      var showCaret = _props2.showCaret;
                      var onFocus = _props2.onFocus;
                      var disabled = _props2.disabled;
                      var required = _props2.required;

                      var value = dateValue || dateString;

                      return _react2['default'].createElement('div', {
                        className: (0, _classnames2['default'])('DateInput', {
                          'DateInput--with-caret': showCaret && focused,
                          'DateInput--disabled': disabled
                        }),
                        onClick: onFocus
                      }, _react2['default'].createElement('label', { className: 'DateInput__label', htmlFor: id }, placeholder), _react2['default'].createElement('input', {
                        className: 'DateInput__input',
                        type: 'text',
                        id: id,
                        name: id,
                        ref: function () {
                          function ref(_ref) {
                            _this2.inputRef = _ref;
                          }

                          return ref;
                        }(),
                        value: value,
                        onChange: this.onChange,
                        onKeyDown: this.onKeyDown,
                        onFocus: onFocus,
                        placeholder: placeholder,
                        autoComplete: 'off',
                        disabled: disabled,
                        readOnly: this.isTouchDevice,
                        required: required
                      }), _react2['default'].createElement('div', {
                        className: (0, _classnames2['default'])('DateInput__display-text', {
                          'DateInput__display-text--has-input': !!value,
                          'DateInput__display-text--focused': focused,
                          'DateInput__display-text--disabled': disabled
                        })
                      }, value || placeholder));
                    }

                    return render;
                  }()
                }]);

                return DateInput;
              }(_react2['default'].Component);

              exports['default'] = DateInput;

              DateInput.propTypes = propTypes;
              DateInput.defaultProps = defaultProps;

              /***/
            },

            /***/
            1:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(3);

              /***/
            },

            /***/
            5:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(56);

              /***/
            },

            /***/
            14:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(395);

              /***/
            }

            /******/
          });

        /***/
      }),
      /* 405 */
      /***/
      (function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports['default'] = toMomentObject;

        var _moment = __webpack_require__(277);

        var _moment2 = _interopRequireDefault(_moment);

        var _constants = __webpack_require__(394);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        function toMomentObject(dateString, customFormat) {
          var dateFormats = customFormat ? [customFormat, _constants.DISPLAY_FORMAT, _constants.ISO_FORMAT] : [_constants.DISPLAY_FORMAT, _constants.ISO_FORMAT];

          var date = (0, _moment2['default'])(dateString, dateFormats, true);
          return date.isValid() ? date.hour(12) : null;
        }

        /***/
      }),
      /* 406 */
      /***/
      (function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports['default'] = toLocalizedDateString;

        var _moment = __webpack_require__(277);

        var _moment2 = _interopRequireDefault(_moment);

        var _toMomentObject = __webpack_require__(405);

        var _toMomentObject2 = _interopRequireDefault(_toMomentObject);

        var _constants = __webpack_require__(394);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        function toLocalizedDateString(date, currentFormat) {
          var dateObj = _moment2['default'].isMoment(date) ? date : (0, _toMomentObject2['default'])(date, currentFormat);
          if (!dateObj) return null;

          return dateObj.format(_constants.DISPLAY_FORMAT);
        }

        /***/
      }),
      /* 407 */
      /***/
      (function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports['default'] = isInclusivelyBeforeDay;

        var _moment = __webpack_require__(277);

        var _moment2 = _interopRequireDefault(_moment);

        var _isSameDay = __webpack_require__(399);

        var _isSameDay2 = _interopRequireDefault(_isSameDay);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        function isInclusivelyBeforeDay(a, b) {
          if (!_moment2['default'].isMoment(a) || !_moment2['default'].isMoment(b)) return false;
          return a.isBefore(b) || (0, _isSameDay2['default'])(a, b);
        }

        /***/
      }),
      /* 408 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports =
          /******/
          (function (modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

              /******/ // Check if module is in cache
              /******/
              if (installedModules[moduleId])
              /******/
                return installedModules[moduleId].exports;

              /******/ // Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                  /******/
              };

              /******/ // Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

              /******/ // Flag the module as loaded
              /******/
              module.loaded = true;

              /******/ // Return the exports of the module
              /******/
              return module.exports;
              /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
          })
          /************************************************************************/
          /******/
          ([
            /* 0 */
            /***/
            function (module, exports, __webpack_require__) {

              var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _createClass = function () {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function (Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps);
                  if (staticProps) defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              var _reactMomentProptypes = __webpack_require__(3);

              var _reactMomentProptypes2 = _interopRequireDefault(_reactMomentProptypes);

              var _moment = __webpack_require__(4);

              var _moment2 = _interopRequireDefault(_moment);

              var _arrayIncludes = __webpack_require__(34);

              var _arrayIncludes2 = _interopRequireDefault(_arrayIncludes);

              var _isTouchDevice = __webpack_require__(14);

              var _isTouchDevice2 = _interopRequireDefault(_isTouchDevice);

              var _isInclusivelyAfterDay = __webpack_require__(17);

              var _isInclusivelyAfterDay2 = _interopRequireDefault(_isInclusivelyAfterDay);

              var _isNextDay = __webpack_require__(35);

              var _isNextDay2 = _interopRequireDefault(_isNextDay);

              var _isSameDay = __webpack_require__(36);

              var _isSameDay2 = _interopRequireDefault(_isSameDay);

              var _FocusedInputShape = __webpack_require__(37);

              var _FocusedInputShape2 = _interopRequireDefault(_FocusedInputShape);

              var _OrientationShape = __webpack_require__(8);

              var _OrientationShape2 = _interopRequireDefault(_OrientationShape);

              var _constants = __webpack_require__(9);

              var _DayPicker = __webpack_require__(38);

              var _DayPicker2 = _interopRequireDefault(_DayPicker);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _possibleConstructorReturn(self, call) {
                if (!self) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              }

              var propTypes = {
                startDate: _reactMomentProptypes2['default'].momentObj,
                endDate: _reactMomentProptypes2['default'].momentObj,
                onDatesChange: _react.PropTypes.func,

                focusedInput: _FocusedInputShape2['default'],
                onFocusChange: _react.PropTypes.func,

                keepOpenOnDateSelect: _react.PropTypes.bool,
                minimumNights: _react.PropTypes.number,
                isOutsideRange: _react.PropTypes.func,
                isDayBlocked: _react.PropTypes.func,
                isDayHighlighted: _react.PropTypes.func,

                // DayPicker props
                enableOutsideDays: _react.PropTypes.bool,
                numberOfMonths: _react.PropTypes.number,
                orientation: _OrientationShape2['default'],
                withPortal: _react.PropTypes.bool,
                hidden: _react.PropTypes.bool,
                initialVisibleMonth: _react.PropTypes.func,

                navPrev: _react.PropTypes.node,
                navNext: _react.PropTypes.node,

                onDayClick: _react.PropTypes.func,
                onDayMouseDown: _react.PropTypes.func,
                onDayMouseUp: _react.PropTypes.func,
                onDayMouseEnter: _react.PropTypes.func,
                onDayMouseLeave: _react.PropTypes.func,
                onDayTouchStart: _react.PropTypes.func,
                onDayTouchEnd: _react.PropTypes.func,
                onDayTouchTap: _react.PropTypes.func,
                onPrevMonthClick: _react.PropTypes.func,
                onNextMonthClick: _react.PropTypes.func,
                onOutsideClick: _react.PropTypes.func,

                // i18n
                monthFormat: _react.PropTypes.string
              };

              var defaultProps = {
                startDate: undefined, // TODO: use null
                endDate: undefined, // TODO: use null
                onDatesChange: function () {
                  function onDatesChange() {}

                  return onDatesChange;
                }(),

                focusedInput: null,
                onFocusChange: function () {
                  function onFocusChange() {}

                  return onFocusChange;
                }(),

                keepOpenOnDateSelect: false,
                minimumNights: 1,
                isOutsideRange: function () {
                  function isOutsideRange() {}

                  return isOutsideRange;
                }(),
                isDayBlocked: function () {
                  function isDayBlocked() {}

                  return isDayBlocked;
                }(),
                isDayHighlighted: function () {
                  function isDayHighlighted() {}

                  return isDayHighlighted;
                }(),

                // DayPicker props
                enableOutsideDays: false,
                numberOfMonths: 1,
                orientation: _constants.HORIZONTAL_ORIENTATION,
                withPortal: false,
                hidden: false,

                initialVisibleMonth: function () {
                  function initialVisibleMonth() {
                    return (0, _moment2['default'])();
                  }

                  return initialVisibleMonth;
                }(),

                navPrev: null,
                navNext: null,

                onDayClick: function () {
                  function onDayClick() {}

                  return onDayClick;
                }(),
                onDayMouseDown: function () {
                  function onDayMouseDown() {}

                  return onDayMouseDown;
                }(),
                onDayMouseUp: function () {
                  function onDayMouseUp() {}

                  return onDayMouseUp;
                }(),
                onDayMouseEnter: function () {
                  function onDayMouseEnter() {}

                  return onDayMouseEnter;
                }(),
                onDayMouseLeave: function () {
                  function onDayMouseLeave() {}

                  return onDayMouseLeave;
                }(),
                onDayTouchStart: function () {
                  function onDayTouchStart() {}

                  return onDayTouchStart;
                }(),
                onDayTouchTap: function () {
                  function onDayTouchTap() {}

                  return onDayTouchTap;
                }(),
                onDayTouchEnd: function () {
                  function onDayTouchEnd() {}

                  return onDayTouchEnd;
                }(),
                onPrevMonthClick: function () {
                  function onPrevMonthClick() {}

                  return onPrevMonthClick;
                }(),
                onNextMonthClick: function () {
                  function onNextMonthClick() {}

                  return onNextMonthClick;
                }(),
                onOutsideClick: function () {
                  function onOutsideClick() {}

                  return onOutsideClick;
                }(),

                // i18n
                monthFormat: 'MMMM YYYY'
              };

              var DayPickerRangeController = function (_React$Component) {
                _inherits(DayPickerRangeController, _React$Component);

                function DayPickerRangeController(props) {
                  _classCallCheck(this, DayPickerRangeController);

                  var _this = _possibleConstructorReturn(this, (DayPickerRangeController.__proto__ || Object.getPrototypeOf(DayPickerRangeController)).call(this, props));

                  _this.state = {
                    hoverDate: null
                  };

                  _this.isTouchDevice = (0, _isTouchDevice2['default'])();
                  _this.today = (0, _moment2['default'])();

                  _this.onDayClick = _this.onDayClick.bind(_this);
                  _this.onDayMouseEnter = _this.onDayMouseEnter.bind(_this);
                  _this.onDayMouseLeave = _this.onDayMouseLeave.bind(_this);
                  return _this;
                }

                _createClass(DayPickerRangeController, [{
                  key: 'componentWillUpdate',
                  value: function () {
                    function componentWillUpdate() {
                      this.today = (0, _moment2['default'])();
                    }

                    return componentWillUpdate;
                  }()
                }, {
                  key: 'onDayClick',
                  value: function () {
                    function onDayClick(day, modifiers, e) {
                      var _props = this.props;
                      var keepOpenOnDateSelect = _props.keepOpenOnDateSelect;
                      var minimumNights = _props.minimumNights;

                      if (e) e.preventDefault();
                      if ((0, _arrayIncludes2['default'])(modifiers, 'blocked')) return;

                      var focusedInput = this.props.focusedInput;
                      var _props2 = this.props;
                      var startDate = _props2.startDate;
                      var endDate = _props2.endDate;

                      if (focusedInput === _constants.START_DATE) {
                        this.props.onFocusChange(_constants.END_DATE);

                        startDate = day;

                        if ((0, _isInclusivelyAfterDay2['default'])(day, endDate)) {
                          endDate = null;
                        }
                      } else if (focusedInput === _constants.END_DATE) {
                        var firstAllowedEndDate = startDate && startDate.clone().add(minimumNights, 'days');

                        if (!startDate) {
                          endDate = day;
                          this.props.onFocusChange(_constants.START_DATE);
                        } else if ((0, _isInclusivelyAfterDay2['default'])(day, firstAllowedEndDate)) {
                          endDate = day;
                          if (!keepOpenOnDateSelect) this.props.onFocusChange(null);
                        } else {
                          startDate = day;
                          endDate = null;
                        }
                      }

                      this.props.onDatesChange({ startDate: startDate, endDate: endDate });
                    }

                    return onDayClick;
                  }()
                }, {
                  key: 'onDayMouseEnter',
                  value: function () {
                    function onDayMouseEnter(day) {
                      if (this.isTouchDevice) return;

                      this.setState({
                        hoverDate: day
                      });
                    }

                    return onDayMouseEnter;
                  }()
                }, {
                  key: 'onDayMouseLeave',
                  value: function () {
                    function onDayMouseLeave() {
                      if (this.isTouchDevice) return;

                      this.setState({
                        hoverDate: null
                      });
                    }

                    return onDayMouseLeave;
                  }()
                }, {
                  key: 'doesNotMeetMinimumNights',
                  value: function () {
                    function doesNotMeetMinimumNights(day) {
                      var _props3 = this.props;
                      var startDate = _props3.startDate;
                      var isOutsideRange = _props3.isOutsideRange;
                      var focusedInput = _props3.focusedInput;
                      var minimumNights = _props3.minimumNights;

                      if (focusedInput !== _constants.END_DATE) return false;

                      if (startDate) {
                        var dayDiff = day.diff(startDate, 'days');
                        return dayDiff < minimumNights && dayDiff >= 0;
                      }
                      return isOutsideRange((0, _moment2['default'])(day).subtract(minimumNights, 'days'));
                    }

                    return doesNotMeetMinimumNights;
                  }()
                }, {
                  key: 'isDayAfterHoveredStartDate',
                  value: function () {
                    function isDayAfterHoveredStartDate(day) {
                      var _props4 = this.props;
                      var startDate = _props4.startDate;
                      var endDate = _props4.endDate;
                      var minimumNights = _props4.minimumNights;
                      var hoverDate = this.state.hoverDate;

                      return !!startDate && !endDate && !this.isBlocked(day) && (0, _isNextDay2['default'])(hoverDate, day) && minimumNights > 0 && (0, _isSameDay2['default'])(hoverDate, startDate);
                    }

                    return isDayAfterHoveredStartDate;
                  }()
                }, {
                  key: 'isEndDate',
                  value: function () {
                    function isEndDate(day) {
                      return (0, _isSameDay2['default'])(day, this.props.endDate);
                    }

                    return isEndDate;
                  }()
                }, {
                  key: 'isHovered',
                  value: function () {
                    function isHovered(day) {
                      return (0, _isSameDay2['default'])(day, this.state.hoverDate);
                    }

                    return isHovered;
                  }()
                }, {
                  key: 'isInHoveredSpan',
                  value: function () {
                    function isInHoveredSpan(day) {
                      var _props5 = this.props;
                      var startDate = _props5.startDate;
                      var endDate = _props5.endDate;
                      var hoverDate = this.state.hoverDate;

                      var isForwardRange = !!startDate && !endDate && (day.isBetween(startDate, hoverDate) || (0, _isSameDay2['default'])(hoverDate, day));
                      var isBackwardRange = !!endDate && !startDate && (day.isBetween(hoverDate, endDate) || (0, _isSameDay2['default'])(hoverDate, day));

                      var isValidDayHovered = hoverDate && !this.isBlocked(hoverDate);

                      return (isForwardRange || isBackwardRange) && isValidDayHovered;
                    }

                    return isInHoveredSpan;
                  }()
                }, {
                  key: 'isInSelectedSpan',
                  value: function () {
                    function isInSelectedSpan(day) {
                      var _props6 = this.props;
                      var startDate = _props6.startDate;
                      var endDate = _props6.endDate;

                      return day.isBetween(startDate, endDate);
                    }

                    return isInSelectedSpan;
                  }()
                }, {
                  key: 'isLastInRange',
                  value: function () {
                    function isLastInRange(day) {
                      return this.isInSelectedSpan(day) && (0, _isNextDay2['default'])(day, this.props.endDate);
                    }

                    return isLastInRange;
                  }()
                }, {
                  key: 'isStartDate',
                  value: function () {
                    function isStartDate(day) {
                      return (0, _isSameDay2['default'])(day, this.props.startDate);
                    }

                    return isStartDate;
                  }()
                }, {
                  key: 'isBlocked',
                  value: function () {
                    function isBlocked(day) {
                      var _props7 = this.props;
                      var isDayBlocked = _props7.isDayBlocked;
                      var isOutsideRange = _props7.isOutsideRange;

                      return isDayBlocked(day) || isOutsideRange(day) || this.doesNotMeetMinimumNights(day);
                    }

                    return isBlocked;
                  }()
                }, {
                  key: 'isToday',
                  value: function () {
                    function isToday(day) {
                      return (0, _isSameDay2['default'])(day, this.today);
                    }

                    return isToday;
                  }()
                }, {
                  key: 'render',
                  value: function () {
                    function render() {
                      var _this2 = this;

                      var _props8 = this.props;
                      var isDayBlocked = _props8.isDayBlocked;
                      var isDayHighlighted = _props8.isDayHighlighted;
                      var isOutsideRange = _props8.isOutsideRange;
                      var numberOfMonths = _props8.numberOfMonths;
                      var orientation = _props8.orientation;
                      var monthFormat = _props8.monthFormat;
                      var navPrev = _props8.navPrev;
                      var navNext = _props8.navNext;
                      var onOutsideClick = _props8.onOutsideClick;
                      var onPrevMonthClick = _props8.onPrevMonthClick;
                      var onNextMonthClick = _props8.onNextMonthClick;
                      var withPortal = _props8.withPortal;
                      var enableOutsideDays = _props8.enableOutsideDays;
                      var initialVisibleMonth = _props8.initialVisibleMonth;
                      var focusedInput = _props8.focusedInput;

                      var modifiers = {
                        today: function () {
                          function today(day) {
                            return _this2.isToday(day);
                          }

                          return today;
                        }(),
                        blocked: function () {
                          function blocked(day) {
                            return _this2.isBlocked(day);
                          }

                          return blocked;
                        }(),
                        'blocked-calendar': function () {
                          function blockedCalendar(day) {
                            return isDayBlocked(day);
                          }

                          return blockedCalendar;
                        }(),
                        'blocked-out-of-range': function () {
                          function blockedOutOfRange(day) {
                            return isOutsideRange(day);
                          }

                          return blockedOutOfRange;
                        }(),
                        'blocked-minimum-nights': function () {
                          function blockedMinimumNights(day) {
                            return _this2.doesNotMeetMinimumNights(day);
                          }

                          return blockedMinimumNights;
                        }(),
                        'highlighted-calendar': function () {
                          function highlightedCalendar(day) {
                            return isDayHighlighted(day);
                          }

                          return highlightedCalendar;
                        }(),
                        valid: function () {
                          function valid(day) {
                            return !_this2.isBlocked(day);
                          }

                          return valid;
                        }(),
                        // before anything has been set or after both are set
                        hovered: function () {
                          function hovered(day) {
                            return _this2.isHovered(day);
                          }

                          return hovered;
                        }(),

                        // while start date has been set, but end date has not been
                        'hovered-span': function () {
                          function hoveredSpan(day) {
                            return _this2.isInHoveredSpan(day);
                          }

                          return hoveredSpan;
                        }(),
                        'after-hovered-start': function () {
                          function afterHoveredStart(day) {
                            return _this2.isDayAfterHoveredStartDate(day);
                          }

                          return afterHoveredStart;
                        }(),
                        'last-in-range': function () {
                          function lastInRange(day) {
                            return _this2.isLastInRange(day);
                          }

                          return lastInRange;
                        }(),

                        // once a start date and end date have been set
                        'selected-start': function () {
                          function selectedStart(day) {
                            return _this2.isStartDate(day);
                          }

                          return selectedStart;
                        }(),
                        'selected-end': function () {
                          function selectedEnd(day) {
                            return _this2.isEndDate(day);
                          }

                          return selectedEnd;
                        }(),
                        'selected-span': function () {
                          function selectedSpan(day) {
                            return _this2.isInSelectedSpan(day);
                          }

                          return selectedSpan;
                        }()
                      };

                      return _react2['default'].createElement(_DayPicker2['default'], {
                        ref: function () {
                          function ref(_ref) {
                            _this2.dayPicker = _ref;
                          }

                          return ref;
                        }(),
                        orientation: orientation,
                        enableOutsideDays: enableOutsideDays,
                        modifiers: modifiers,
                        numberOfMonths: numberOfMonths,
                        onDayMouseEnter: this.onDayMouseEnter,
                        onDayMouseLeave: this.onDayMouseLeave,
                        onDayMouseDown: this.onDayClick,
                        onDayTouchTap: this.onDayClick,
                        onPrevMonthClick: onPrevMonthClick,
                        onNextMonthClick: onNextMonthClick,
                        monthFormat: monthFormat,
                        withPortal: withPortal,
                        hidden: !focusedInput,
                        initialVisibleMonth: initialVisibleMonth,
                        onOutsideClick: onOutsideClick,
                        navPrev: navPrev,
                        navNext: navNext
                      });
                    }

                    return render;
                  }()
                }]);

                return DayPickerRangeController;
              }(_react2['default'].Component);

              exports['default'] = DayPickerRangeController;

              DayPickerRangeController.propTypes = propTypes;
              DayPickerRangeController.defaultProps = defaultProps;

              /***/
            },
            /* 1 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(3);

              /***/
            },
            /* 2 */
            ,
            /* 3 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(401);

              /***/
            },
            /* 4 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(277);

              /***/
            },
            /* 5 */
            ,
            /* 6 */
            ,
            /* 7 */
            ,
            /* 8 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(409);

              /***/
            },
            /* 9 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(394);

              /***/
            },
            /* 10 */
            ,
            /* 11 */
            ,
            /* 12 */
            ,
            /* 13 */
            ,
            /* 14 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(395);

              /***/
            },
            /* 15 */
            ,
            /* 16 */
            ,
            /* 17 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(398);

              /***/
            },
            /* 18 */
            ,
            /* 19 */
            ,
            /* 20 */
            ,
            /* 21 */
            ,
            /* 22 */
            ,
            /* 23 */
            ,
            /* 24 */
            ,
            /* 25 */
            ,
            /* 26 */
            ,
            /* 27 */
            ,
            /* 28 */
            ,
            /* 29 */
            ,
            /* 30 */
            ,
            /* 31 */
            ,
            /* 32 */
            ,
            /* 33 */
            ,
            /* 34 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(410);

              /***/
            },
            /* 35 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(436);

              /***/
            },
            /* 36 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(399);

              /***/
            },
            /* 37 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(437);

              /***/
            },
            /* 38 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(438);

              /***/
            }
            /******/
          ]);

        /***/
      }),
      /* 409 */
      /***/
      (function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _react = __webpack_require__(3);

        var _constants = __webpack_require__(394);

        exports['default'] = _react.PropTypes.oneOf([_constants.HORIZONTAL_ORIENTATION, _constants.VERTICAL_ORIENTATION]);

        /***/
      }),
      /* 410 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var define = __webpack_require__(411);
        var ES = __webpack_require__(415);

        var implementation = __webpack_require__(433);
        var getPolyfill = __webpack_require__(434);
        var polyfill = getPolyfill();
        var shim = __webpack_require__(435);

        var slice = Array.prototype.slice;

        /* eslint-disable no-unused-vars */
        var boundIncludesShim = function includes(array, searchElement) {
          /* eslint-enable no-unused-vars */
          ES.RequireObjectCoercible(array);
          return polyfill.apply(array, slice.call(arguments, 1));
        };
        define(boundIncludesShim, {
          implementation: implementation,
          getPolyfill: getPolyfill,
          shim: shim
        });

        module.exports = boundIncludesShim;


        /***/
      }),
      /* 411 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var keys = __webpack_require__(412);
        var foreach = __webpack_require__(414);
        var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

        var toStr = Object.prototype.toString;

        var isFunction = function (fn) {
          return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
        };

        var arePropertyDescriptorsSupported = function () {
          var obj = {};
          try {
            Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
            /* eslint-disable no-unused-vars, no-restricted-syntax */
            for (var _ in obj) { return false; }
            /* eslint-enable no-unused-vars, no-restricted-syntax */
            return obj.x === obj;
          } catch (e) { /* this is IE 8. */
            return false;
          }
        };
        var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

        var defineProperty = function (object, name, value, predicate) {
          if (name in object && (!isFunction(predicate) || !predicate())) {
            return;
          }
          if (supportsDescriptors) {
            Object.defineProperty(object, name, {
              configurable: true,
              enumerable: false,
              value: value,
              writable: true
            });
          } else {
            object[name] = value;
          }
        };

        var defineProperties = function (object, map) {
          var predicates = arguments.length > 2 ? arguments[2] : {};
          var props = keys(map);
          if (hasSymbols) {
            props = props.concat(Object.getOwnPropertySymbols(map));
          }
          foreach(props, function (name) {
            defineProperty(object, name, map[name], predicates[name]);
          });
        };

        defineProperties.supportsDescriptors = !!supportsDescriptors;

        module.exports = defineProperties;


        /***/
      }),
      /* 412 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        // modified from https://github.com/es-shims/es5-shim
        var has = Object.prototype.hasOwnProperty;
        var toStr = Object.prototype.toString;
        var slice = Array.prototype.slice;
        var isArgs = __webpack_require__(413);
        var isEnumerable = Object.prototype.propertyIsEnumerable;
        var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
        var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
        var dontEnums = [
          'toString',
          'toLocaleString',
          'valueOf',
          'hasOwnProperty',
          'isPrototypeOf',
          'propertyIsEnumerable',
          'constructor'
        ];
        var equalsConstructorPrototype = function (o) {
          var ctor = o.constructor;
          return ctor && ctor.prototype === o;
        };
        var excludedKeys = {
          $console: true,
          $external: true,
          $frame: true,
          $frameElement: true,
          $frames: true,
          $innerHeight: true,
          $innerWidth: true,
          $outerHeight: true,
          $outerWidth: true,
          $pageXOffset: true,
          $pageYOffset: true,
          $parent: true,
          $scrollLeft: true,
          $scrollTop: true,
          $scrollX: true,
          $scrollY: true,
          $self: true,
          $webkitIndexedDB: true,
          $webkitStorageInfo: true,
          $window: true
        };
        var hasAutomationEqualityBug = (function () {
          /* global window */
          if (typeof window === 'undefined') { return false; }
          for (var k in window) {
            try {
              if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
                try {
                  equalsConstructorPrototype(window[k]);
                } catch (e) {
                  return true;
                }
              }
            } catch (e) {
              return true;
            }
          }
          return false;
        }());
        var equalsConstructorPrototypeIfNotBuggy = function (o) {
          /* global window */
          if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
            return equalsConstructorPrototype(o);
          }
          try {
            return equalsConstructorPrototype(o);
          } catch (e) {
            return false;
          }
        };

        var keysShim = function keys(object) {
          var isObject = object !== null && typeof object === 'object';
          var isFunction = toStr.call(object) === '[object Function]';
          var isArguments = isArgs(object);
          var isString = isObject && toStr.call(object) === '[object String]';
          var theKeys = [];

          if (!isObject && !isFunction && !isArguments) {
            throw new TypeError('Object.keys called on a non-object');
          }

          var skipProto = hasProtoEnumBug && isFunction;
          if (isString && object.length > 0 && !has.call(object, 0)) {
            for (var i = 0; i < object.length; ++i) {
              theKeys.push(String(i));
            }
          }

          if (isArguments && object.length > 0) {
            for (var j = 0; j < object.length; ++j) {
              theKeys.push(String(j));
            }
          } else {
            for (var name in object) {
              if (!(skipProto && name === 'prototype') && has.call(object, name)) {
                theKeys.push(String(name));
              }
            }
          }

          if (hasDontEnumBug) {
            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

            for (var k = 0; k < dontEnums.length; ++k) {
              if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
                theKeys.push(dontEnums[k]);
              }
            }
          }
          return theKeys;
        };

        keysShim.shim = function shimObjectKeys() {
          if (Object.keys) {
            var keysWorksWithArguments = (function () {
              // Safari 5.0 bug
              return (Object.keys(arguments) || '').length === 2;
            }(1, 2));
            if (!keysWorksWithArguments) {
              var originalKeys = Object.keys;
              Object.keys = function keys(object) {
                if (isArgs(object)) {
                  return originalKeys(slice.call(object));
                } else {
                  return originalKeys(object);
                }
              };
            }
          } else {
            Object.keys = keysShim;
          }
          return Object.keys || keysShim;
        };

        module.exports = keysShim;


        /***/
      }),
      /* 413 */
      /***/
      (function (module, exports) {

        'use strict';

        var toStr = Object.prototype.toString;

        module.exports = function isArguments(value) {
          var str = toStr.call(value);
          var isArgs = str === '[object Arguments]';
          if (!isArgs) {
            isArgs = str !== '[object Array]' &&
              value !== null &&
              typeof value === 'object' &&
              typeof value.length === 'number' &&
              value.length >= 0 &&
              toStr.call(value.callee) === '[object Function]';
          }
          return isArgs;
        };


        /***/
      }),
      /* 414 */
      /***/
      (function (module, exports) {


        var hasOwn = Object.prototype.hasOwnProperty;
        var toString = Object.prototype.toString;

        module.exports = function forEach(obj, fn, ctx) {
          if (toString.call(fn) !== '[object Function]') {
            throw new TypeError('iterator must be a function');
          }
          var l = obj.length;
          if (l === +l) {
            for (var i = 0; i < l; i++) {
              fn.call(ctx, obj[i], i, obj);
            }
          } else {
            for (var k in obj) {
              if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
              }
            }
          }
        };



        /***/
      }),
      /* 415 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var toStr = Object.prototype.toString;
        var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';
        var symbolToStr = hasSymbols ? Symbol.prototype.toString : toStr;

        var $isNaN = __webpack_require__(416);
        var $isFinite = __webpack_require__(417);
        var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;

        var assign = __webpack_require__(418);
        var sign = __webpack_require__(419);
        var mod = __webpack_require__(420);
        var isPrimitive = __webpack_require__(421);
        var toPrimitive = __webpack_require__(422);
        var parseInteger = parseInt;
        var bind = __webpack_require__(427);
        var strSlice = bind.call(Function.call, String.prototype.slice);
        var isBinary = bind.call(Function.call, RegExp.prototype.test, /^0b[01]+$/i);
        var isOctal = bind.call(Function.call, RegExp.prototype.test, /^0o[0-7]+$/i);
        var nonWS = ['\u0085', '\u200b', '\ufffe'].join('');
        var nonWSregex = new RegExp('[' + nonWS + ']', 'g');
        var hasNonWS = bind.call(Function.call, RegExp.prototype.test, nonWSregex);
        var invalidHexLiteral = /^[-+]0x[0-9a-f]+$/i;
        var isInvalidHexLiteral = bind.call(Function.call, RegExp.prototype.test, invalidHexLiteral);

        // whitespace from: http://es5.github.io/#x15.5.4.20
        // implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324
        var ws = [
          '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003',
          '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028',
          '\u2029\uFEFF'
        ].join('');
        var trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');
        var replace = bind.call(Function.call, String.prototype.replace);
        var trim = function (value) {
          return replace(value, trimRegex, '');
        };

        var ES5 = __webpack_require__(429);

        var hasRegExpMatcher = __webpack_require__(431);

        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-abstract-operations
        var ES6 = assign(assign({}, ES5), {

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-call-f-v-args
          Call: function Call(F, V) {
            var args = arguments.length > 2 ? arguments[2] : [];
            if (!this.IsCallable(F)) {
              throw new TypeError(F + ' is not a function');
            }
            return F.apply(V, args);
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toprimitive
          ToPrimitive: toPrimitive,

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toboolean
          // ToBoolean: ES5.ToBoolean,

          // http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber
          ToNumber: function ToNumber(argument) {
            var value = isPrimitive(argument) ? argument : toPrimitive(argument, 'number');
            if (typeof value === 'symbol') {
              throw new TypeError('Cannot convert a Symbol value to a number');
            }
            if (typeof value === 'string') {
              if (isBinary(value)) {
                return this.ToNumber(parseInteger(strSlice(value, 2), 2));
              } else if (isOctal(value)) {
                return this.ToNumber(parseInteger(strSlice(value, 2), 8));
              } else if (hasNonWS(value) || isInvalidHexLiteral(value)) {
                return NaN;
              } else {
                var trimmed = trim(value);
                if (trimmed !== value) {
                  return this.ToNumber(trimmed);
                }
              }
            }
            return Number(value);
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tointeger
          // ToInteger: ES5.ToNumber,

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint32
          // ToInt32: ES5.ToInt32,

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint32
          // ToUint32: ES5.ToUint32,

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint16
          ToInt16: function ToInt16(argument) {
            var int16bit = this.ToUint16(argument);
            return int16bit >= 0x8000 ? int16bit - 0x10000 : int16bit;
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint16
          // ToUint16: ES5.ToUint16,

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint8
          ToInt8: function ToInt8(argument) {
            var int8bit = this.ToUint8(argument);
            return int8bit >= 0x80 ? int8bit - 0x100 : int8bit;
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8
          ToUint8: function ToUint8(argument) {
            var number = this.ToNumber(argument);
            if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
            var posInt = sign(number) * Math.floor(Math.abs(number));
            return mod(posInt, 0x100);
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8clamp
          ToUint8Clamp: function ToUint8Clamp(argument) {
            var number = this.ToNumber(argument);
            if ($isNaN(number) || number <= 0) { return 0; }
            if (number >= 0xFF) { return 0xFF; }
            var f = Math.floor(argument);
            if (f + 0.5 < number) { return f + 1; }
            if (number < f + 0.5) { return f; }
            if (f % 2 !== 0) { return f + 1; }
            return f;
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tostring
          ToString: function ToString(argument) {
            if (typeof argument === 'symbol') {
              throw new TypeError('Cannot convert a Symbol value to a string');
            }
            return String(argument);
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toobject
          ToObject: function ToObject(value) {
            this.RequireObjectCoercible(value);
            return Object(value);
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
          ToPropertyKey: function ToPropertyKey(argument) {
            var key = this.ToPrimitive(argument, String);
            return typeof key === 'symbol' ? symbolToStr.call(key) : this.ToString(key);
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
          ToLength: function ToLength(argument) {
            var len = this.ToInteger(argument);
            if (len <= 0) { return 0; } // includes converting -0 to +0
            if (len > MAX_SAFE_INTEGER) { return MAX_SAFE_INTEGER; }
            return len;
          },

          // http://www.ecma-international.org/ecma-262/6.0/#sec-canonicalnumericindexstring
          CanonicalNumericIndexString: function CanonicalNumericIndexString(argument) {
            if (toStr.call(argument) !== '[object String]') {
              throw new TypeError('must be a string');
            }
            if (argument === '-0') { return -0; }
            var n = this.ToNumber(argument);
            if (this.SameValue(this.ToString(n), argument)) { return n; }
            return void 0;
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-requireobjectcoercible
          RequireObjectCoercible: ES5.CheckObjectCoercible,

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
          IsArray: Array.isArray || function IsArray(argument) {
            return toStr.call(argument) === '[object Array]';
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-iscallable
          // IsCallable: ES5.IsCallable,

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
          IsConstructor: function IsConstructor(argument) {
            return typeof argument === 'function' && !!argument.prototype; // unfortunately there's no way to truly check this without try/catch `new argument`
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isextensible-o
          IsExtensible: function IsExtensible(obj) {
            if (!Object.preventExtensions) { return true; }
            if (isPrimitive(obj)) {
              return false;
            }
            return Object.isExtensible(obj);
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isinteger
          IsInteger: function IsInteger(argument) {
            if (typeof argument !== 'number' || $isNaN(argument) || !$isFinite(argument)) {
              return false;
            }
            var abs = Math.abs(argument);
            return Math.floor(abs) === abs;
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ispropertykey
          IsPropertyKey: function IsPropertyKey(argument) {
            return typeof argument === 'string' || typeof argument === 'symbol';
          },

          // http://www.ecma-international.org/ecma-262/6.0/#sec-isregexp
          IsRegExp: function IsRegExp(argument) {
            if (!argument || typeof argument !== 'object') {
              return false;
            }
            if (hasSymbols) {
              var isRegExp = argument[Symbol.match];
              if (typeof isRegExp !== 'undefined') {
                return ES5.ToBoolean(isRegExp);
              }
            }
            return hasRegExpMatcher(argument);
          },

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevalue
          // SameValue: ES5.SameValue,

          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero
          SameValueZero: function SameValueZero(x, y) {
            return (x === y) || ($isNaN(x) && $isNaN(y));
          },

          /**
           * 7.3.2 GetV (V, P)
           * 1. Assert: IsPropertyKey(P) is true.
           * 2. Let O be ToObject(V).
           * 3. ReturnIfAbrupt(O).
           * 4. Return O.[[Get]](P, V).
           */
          GetV: function GetV(V, P) {
            // 7.3.2.1
            if (!this.IsPropertyKey(P)) {
              throw new TypeError('Assertion failed: IsPropertyKey(P) is not true');
            }

            // 7.3.2.2-3
            var O = this.ToObject(V);

            // 7.3.2.4
            return O[P];
          },

          /**
           * 7.3.9 - http://www.ecma-international.org/ecma-262/6.0/#sec-getmethod
           * 1. Assert: IsPropertyKey(P) is true.
           * 2. Let func be GetV(O, P).
           * 3. ReturnIfAbrupt(func).
           * 4. If func is either undefined or null, return undefined.
           * 5. If IsCallable(func) is false, throw a TypeError exception.
           * 6. Return func.
           */
          GetMethod: function GetMethod(O, P) {
            // 7.3.9.1
            if (!this.IsPropertyKey(P)) {
              throw new TypeError('Assertion failed: IsPropertyKey(P) is not true');
            }

            // 7.3.9.2
            var func = this.GetV(O, P);

            // 7.3.9.4
            if (func == null) {
              return undefined;
            }

            // 7.3.9.5
            if (!this.IsCallable(func)) {
              throw new TypeError(P + 'is not a function');
            }

            // 7.3.9.6
            return func;
          },

          /**
           * 7.3.1 Get (O, P) - http://www.ecma-international.org/ecma-262/6.0/#sec-get-o-p
           * 1. Assert: Type(O) is Object.
           * 2. Assert: IsPropertyKey(P) is true.
           * 3. Return O.[[Get]](P, O).
           */
          Get: function Get(O, P) {
            // 7.3.1.1
            if (this.Type(O) !== 'Object') {
              throw new TypeError('Assertion failed: Type(O) is not Object');
            }
            // 7.3.1.2
            if (!this.IsPropertyKey(P)) {
              throw new TypeError('Assertion failed: IsPropertyKey(P) is not true');
            }
            // 7.3.1.3
            return O[P];
          },

          Type: function Type(x) {
            if (typeof x === 'symbol') {
              return 'Symbol';
            }
            return ES5.Type(x);
          },

          // http://www.ecma-international.org/ecma-262/6.0/#sec-speciesconstructor
          SpeciesConstructor: function SpeciesConstructor(O, defaultConstructor) {
            if (this.Type(O) !== 'Object') {
              throw new TypeError('Assertion failed: Type(O) is not Object');
            }
            var C = O.constructor;
            if (typeof C === 'undefined') {
              return defaultConstructor;
            }
            if (this.Type(C) !== 'Object') {
              throw new TypeError('O.constructor is not an Object');
            }
            var S = hasSymbols && Symbol.species ? C[Symbol.species] : undefined;
            if (S == null) {
              return defaultConstructor;
            }
            if (this.IsConstructor(S)) {
              return S;
            }
            throw new TypeError('no constructor found');
          }
        });

        delete ES6.CheckObjectCoercible; // renamed in ES6 to RequireObjectCoercible

        module.exports = ES6;


        /***/
      }),
      /* 416 */
      /***/
      (function (module, exports) {

        module.exports = Number.isNaN || function isNaN(a) {
          return a !== a;
        };


        /***/
      }),
      /* 417 */
      /***/
      (function (module, exports) {

        var $isNaN = Number.isNaN || function (a) { return a !== a; };

        module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };


        /***/
      }),
      /* 418 */
      /***/
      (function (module, exports) {

        var has = Object.prototype.hasOwnProperty;
        module.exports = Object.assign || function assign(target, source) {
          for (var key in source) {
            if (has.call(source, key)) {
              target[key] = source[key];
            }
          }
          return target;
        };


        /***/
      }),
      /* 419 */
      /***/
      (function (module, exports) {

        module.exports = function sign(number) {
          return number >= 0 ? 1 : -1;
        };


        /***/
      }),
      /* 420 */
      /***/
      (function (module, exports) {

        module.exports = function mod(number, modulo) {
          var remain = number % modulo;
          return Math.floor(remain >= 0 ? remain : remain + modulo);
        };


        /***/
      }),
      /* 421 */
      /***/
      (function (module, exports) {

        module.exports = function isPrimitive(value) {
          return value === null || (typeof value !== 'function' && typeof value !== 'object');
        };


        /***/
      }),
      /* 422 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';

        var isPrimitive = __webpack_require__(423);
        var isCallable = __webpack_require__(424);
        var isDate = __webpack_require__(425);
        var isSymbol = __webpack_require__(426);

        var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
          if (typeof O === 'undefined' || O === null) {
            throw new TypeError('Cannot call method on ' + O);
          }
          if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {
            throw new TypeError('hint must be "string" or "number"');
          }
          var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
          var method, result, i;
          for (i = 0; i < methodNames.length; ++i) {
            method = O[methodNames[i]];
            if (isCallable(method)) {
              result = method.call(O);
              if (isPrimitive(result)) {
                return result;
              }
            }
          }
          throw new TypeError('No default value');
        };

        var GetMethod = function GetMethod(O, P) {
          var func = O[P];
          if (func !== null && typeof func !== 'undefined') {
            if (!isCallable(func)) {
              throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
            }
            return func;
          }
        };

        // http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
        module.exports = function ToPrimitive(input, PreferredType) {
          if (isPrimitive(input)) {
            return input;
          }
          var hint = 'default';
          if (arguments.length > 1) {
            if (PreferredType === String) {
              hint = 'string';
            } else if (PreferredType === Number) {
              hint = 'number';
            }
          }

          var exoticToPrim;
          if (hasSymbols) {
            if (Symbol.toPrimitive) {
              exoticToPrim = GetMethod(input, Symbol.toPrimitive);
            } else if (isSymbol(input)) {
              exoticToPrim = Symbol.prototype.valueOf;
            }
          }
          if (typeof exoticToPrim !== 'undefined') {
            var result = exoticToPrim.call(input, hint);
            if (isPrimitive(result)) {
              return result;
            }
            throw new TypeError('unable to convert exotic object to primitive');
          }
          if (hint === 'default' && (isDate(input) || isSymbol(input))) {
            hint = 'string';
          }
          return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
        };


        /***/
      }),
      /* 423 */
      /***/
      (function (module, exports) {

        module.exports = function isPrimitive(value) {
          return value === null || (typeof value !== 'function' && typeof value !== 'object');
        };


        /***/
      }),
      /* 424 */
      /***/
      (function (module, exports) {

        'use strict';

        var fnToStr = Function.prototype.toString;

        var constructorRegex = /^\s*class /;
        var isES6ClassFn = function isES6ClassFn(value) {
          try {
            var fnStr = fnToStr.call(value);
            var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
            var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
            var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
            return constructorRegex.test(spaceStripped);
          } catch (e) {
            return false; // not a function
          }
        };

        var tryFunctionObject = function tryFunctionObject(value) {
          try {
            if (isES6ClassFn(value)) { return false; }
            fnToStr.call(value);
            return true;
          } catch (e) {
            return false;
          }
        };
        var toStr = Object.prototype.toString;
        var fnClass = '[object Function]';
        var genClass = '[object GeneratorFunction]';
        var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

        module.exports = function isCallable(value) {
          if (!value) { return false; }
          if (typeof value !== 'function' && typeof value !== 'object') { return false; }
          if (hasToStringTag) { return tryFunctionObject(value); }
          if (isES6ClassFn(value)) { return false; }
          var strClass = toStr.call(value);
          return strClass === fnClass || strClass === genClass;
        };


        /***/
      }),
      /* 425 */
      /***/
      (function (module, exports) {

        'use strict';

        var getDay = Date.prototype.getDay;
        var tryDateObject = function tryDateObject(value) {
          try {
            getDay.call(value);
            return true;
          } catch (e) {
            return false;
          }
        };

        var toStr = Object.prototype.toString;
        var dateClass = '[object Date]';
        var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

        module.exports = function isDateObject(value) {
          if (typeof value !== 'object' || value === null) { return false; }
          return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
        };


        /***/
      }),
      /* 426 */
      /***/
      (function (module, exports) {

        'use strict';

        var toStr = Object.prototype.toString;
        var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

        if (hasSymbols) {
          var symToStr = Symbol.prototype.toString;
          var symStringRegex = /^Symbol\(.*\)$/;
          var isSymbolObject = function isSymbolObject(value) {
            if (typeof value.valueOf() !== 'symbol') { return false; }
            return symStringRegex.test(symToStr.call(value));
          };
          module.exports = function isSymbol(value) {
            if (typeof value === 'symbol') { return true; }
            if (toStr.call(value) !== '[object Symbol]') { return false; }
            try {
              return isSymbolObject(value);
            } catch (e) {
              return false;
            }
          };
        } else {
          module.exports = function isSymbol(value) {
            // this environment does not support Symbols.
            return false;
          };
        }


        /***/
      }),
      /* 427 */
      /***/
      (function (module, exports, __webpack_require__) {

        var implementation = __webpack_require__(428);

        module.exports = Function.prototype.bind || implementation;


        /***/
      }),
      /* 428 */
      /***/
      (function (module, exports) {

        var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
        var slice = Array.prototype.slice;
        var toStr = Object.prototype.toString;
        var funcType = '[object Function]';

        module.exports = function bind(that) {
          var target = this;
          if (typeof target !== 'function' || toStr.call(target) !== funcType) {
            throw new TypeError(ERROR_MESSAGE + target);
          }
          var args = slice.call(arguments, 1);

          var bound;
          var binder = function () {
            if (this instanceof bound) {
              var result = target.apply(
                this,
                args.concat(slice.call(arguments))
              );
              if (Object(result) === result) {
                return result;
              }
              return this;
            } else {
              return target.apply(
                that,
                args.concat(slice.call(arguments))
              );
            }
          };

          var boundLength = Math.max(0, target.length - args.length);
          var boundArgs = [];
          for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
          }

          bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

          if (target.prototype) {
            var Empty = function Empty() {};
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            Empty.prototype = null;
          }

          return bound;
        };


        /***/
      }),
      /* 429 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var $isNaN = __webpack_require__(416);
        var $isFinite = __webpack_require__(417);

        var sign = __webpack_require__(419);
        var mod = __webpack_require__(420);

        var IsCallable = __webpack_require__(424);
        var toPrimitive = __webpack_require__(430);

        // https://es5.github.io/#x9
        var ES5 = {
          ToPrimitive: toPrimitive,

          ToBoolean: function ToBoolean(value) {
            return Boolean(value);
          },
          ToNumber: function ToNumber(value) {
            return Number(value);
          },
          ToInteger: function ToInteger(value) {
            var number = this.ToNumber(value);
            if ($isNaN(number)) { return 0; }
            if (number === 0 || !$isFinite(number)) { return number; }
            return sign(number) * Math.floor(Math.abs(number));
          },
          ToInt32: function ToInt32(x) {
            return this.ToNumber(x) >> 0;
          },
          ToUint32: function ToUint32(x) {
            return this.ToNumber(x) >>> 0;
          },
          ToUint16: function ToUint16(value) {
            var number = this.ToNumber(value);
            if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
            var posInt = sign(number) * Math.floor(Math.abs(number));
            return mod(posInt, 0x10000);
          },
          ToString: function ToString(value) {
            return String(value);
          },
          ToObject: function ToObject(value) {
            this.CheckObjectCoercible(value);
            return Object(value);
          },
          CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
            /* jshint eqnull:true */
            if (value == null) {
              throw new TypeError(optMessage || 'Cannot call method on ' + value);
            }
            return value;
          },
          IsCallable: IsCallable,
          SameValue: function SameValue(x, y) {
            if (x === y) { // 0 === -0, but they are not identical.
              if (x === 0) { return 1 / x === 1 / y; }
              return true;
            }
            return $isNaN(x) && $isNaN(y);
          },

          // http://www.ecma-international.org/ecma-262/5.1/#sec-8
          Type: function Type(x) {
            if (x === null) {
              return 'Null';
            }
            if (typeof x === 'undefined') {
              return 'Undefined';
            }
            if (typeof x === 'function' || typeof x === 'object') {
              return 'Object';
            }
            if (typeof x === 'number') {
              return 'Number';
            }
            if (typeof x === 'boolean') {
              return 'Boolean';
            }
            if (typeof x === 'string') {
              return 'String';
            }
          }
        };

        module.exports = ES5;


        /***/
      }),
      /* 430 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var toStr = Object.prototype.toString;

        var isPrimitive = __webpack_require__(423);

        var isCallable = __webpack_require__(424);

        // https://es5.github.io/#x8.12
        var ES5internalSlots = {
          '[[DefaultValue]]': function (O, hint) {
            var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

            if (actualHint === String || actualHint === Number) {
              var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
              var value, i;
              for (i = 0; i < methods.length; ++i) {
                if (isCallable(O[methods[i]])) {
                  value = O[methods[i]]();
                  if (isPrimitive(value)) {
                    return value;
                  }
                }
              }
              throw new TypeError('No default value');
            }
            throw new TypeError('invalid [[DefaultValue]] hint supplied');
          }
        };

        // https://es5.github.io/#x9
        module.exports = function ToPrimitive(input, PreferredType) {
          if (isPrimitive(input)) {
            return input;
          }
          return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
        };


        /***/
      }),
      /* 431 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var has = __webpack_require__(432);
        var regexExec = RegExp.prototype.exec;
        var gOPD = Object.getOwnPropertyDescriptor;

        var tryRegexExecCall = function tryRegexExec(value) {
          try {
            var lastIndex = value.lastIndex;
            value.lastIndex = 0;

            regexExec.call(value);
            return true;
          } catch (e) {
            return false;
          } finally {
            value.lastIndex = lastIndex;
          }
        };
        var toStr = Object.prototype.toString;
        var regexClass = '[object RegExp]';
        var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

        module.exports = function isRegex(value) {
          if (!value || typeof value !== 'object') {
            return false;
          }
          if (!hasToStringTag) {
            return toStr.call(value) === regexClass;
          }

          var descriptor = gOPD(value, 'lastIndex');
          var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');
          if (!hasLastIndexDataProperty) {
            return false;
          }

          return tryRegexExecCall(value);
        };


        /***/
      }),
      /* 432 */
      /***/
      (function (module, exports, __webpack_require__) {

        var bind = __webpack_require__(427);

        module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


        /***/
      }),
      /* 433 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (global) {
          'use strict';

          var ES = __webpack_require__(415);
          var $isNaN = Number.isNaN || function (a) { return a !== a; };
          var $isFinite = Number.isFinite || function (n) { return typeof n === 'number' && global.isFinite(n); };
          var indexOf = Array.prototype.indexOf;

          module.exports = function includes(searchElement) {
            var fromIndex = arguments.length > 1 ? ES.ToInteger(arguments[1]) : 0;
            if (indexOf && !$isNaN(searchElement) && $isFinite(fromIndex) && typeof searchElement !== 'undefined') {
              return indexOf.apply(this, arguments) > -1;
            }

            var O = ES.ToObject(this);
            var length = ES.ToLength(O.length);
            if (length === 0) {
              return false;
            }
            var k = fromIndex >= 0 ? fromIndex : Math.max(0, length + fromIndex);
            while (k < length) {
              if (ES.SameValueZero(searchElement, O[k])) {
                return true;
              }
              k += 1;
            }
            return false;
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, (function () { return this; }())))

        /***/
      }),
      /* 434 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var implementation = __webpack_require__(433);

        module.exports = function getPolyfill() {
          return Array.prototype.includes || implementation;
        };


        /***/
      }),
      /* 435 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var define = __webpack_require__(411);
        var getPolyfill = __webpack_require__(434);

        module.exports = function shimArrayPrototypeIncludes() {
          var polyfill = getPolyfill();
          if (Array.prototype.includes !== polyfill) {
            define(Array.prototype, { includes: polyfill });
          }
          return polyfill;
        };


        /***/
      }),
      /* 436 */
      /***/
      (function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports['default'] = isNextDay;

        var _moment = __webpack_require__(277);

        var _moment2 = _interopRequireDefault(_moment);

        var _isSameDay = __webpack_require__(399);

        var _isSameDay2 = _interopRequireDefault(_isSameDay);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        function isNextDay(a, b) {
          if (!_moment2['default'].isMoment(a) || !_moment2['default'].isMoment(b)) return false;
          var nextDay = (0, _moment2['default'])(a).add(1, 'day');
          return (0, _isSameDay2['default'])(nextDay, b);
        }

        /***/
      }),
      /* 437 */
      /***/
      (function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _react = __webpack_require__(3);

        var _constants = __webpack_require__(394);

        exports['default'] = _react.PropTypes.oneOf([_constants.START_DATE, _constants.END_DATE]);

        /***/
      }),
      /* 438 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports =
          /******/
          (function (modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

              /******/ // Check if module is in cache
              /******/
              if (installedModules[moduleId])
              /******/
                return installedModules[moduleId].exports;

              /******/ // Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                  /******/
              };

              /******/ // Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

              /******/ // Flag the module as loaded
              /******/
              module.loaded = true;

              /******/ // Return the exports of the module
              /******/
              return module.exports;
              /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
          })
          /************************************************************************/
          /******/
          ([
            /* 0 */
            /***/
            function (module, exports, __webpack_require__) {

              var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _createClass = function () {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function (Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps);
                  if (staticProps) defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();

              exports.calculateDimension = calculateDimension;

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              var _reactAddonsShallowCompare = __webpack_require__(2);

              var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);

              var _reactDom = __webpack_require__(10);

              var _reactDom2 = _interopRequireDefault(_reactDom);

              var _moment = __webpack_require__(4);

              var _moment2 = _interopRequireDefault(_moment);

              var _classnames = __webpack_require__(5);

              var _classnames2 = _interopRequireDefault(_classnames);

              var _OutsideClickHandler = __webpack_require__(28);

              var _OutsideClickHandler2 = _interopRequireDefault(_OutsideClickHandler);

              var _CalendarMonthGrid = __webpack_require__(29);

              var _CalendarMonthGrid2 = _interopRequireDefault(_CalendarMonthGrid);

              var _DayPickerNavigation = __webpack_require__(30);

              var _DayPickerNavigation2 = _interopRequireDefault(_DayPickerNavigation);

              var _getTransformStyles = __webpack_require__(13);

              var _getTransformStyles2 = _interopRequireDefault(_getTransformStyles);

              var _OrientationShape = __webpack_require__(8);

              var _OrientationShape2 = _interopRequireDefault(_OrientationShape);

              var _constants = __webpack_require__(9);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _possibleConstructorReturn(self, call) {
                if (!self) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              }

              var CALENDAR_MONTH_WIDTH = 300;
              var DAY_PICKER_PADDING = 9;
              var MONTH_PADDING = 23;
              var PREV_TRANSITION = 'prev';
              var NEXT_TRANSITION = 'next';

              var propTypes = {
                enableOutsideDays: _react.PropTypes.bool,
                numberOfMonths: _react.PropTypes.number,
                modifiers: _react.PropTypes.object,
                orientation: _OrientationShape2['default'],
                withPortal: _react.PropTypes.bool,
                hidden: _react.PropTypes.bool,
                initialVisibleMonth: _react.PropTypes.func,

                navPrev: _react.PropTypes.node,
                navNext: _react.PropTypes.node,

                onDayClick: _react.PropTypes.func,
                onDayMouseDown: _react.PropTypes.func,
                onDayMouseUp: _react.PropTypes.func,
                onDayMouseEnter: _react.PropTypes.func,
                onDayMouseLeave: _react.PropTypes.func,
                onDayTouchStart: _react.PropTypes.func,
                onDayTouchEnd: _react.PropTypes.func,
                onDayTouchTap: _react.PropTypes.func,
                onPrevMonthClick: _react.PropTypes.func,
                onNextMonthClick: _react.PropTypes.func,
                onOutsideClick: _react.PropTypes.func,

                // i18n
                monthFormat: _react.PropTypes.string
              };

              var defaultProps = {
                enableOutsideDays: false,
                numberOfMonths: 1,
                modifiers: {},
                orientation: _constants.HORIZONTAL_ORIENTATION,
                withPortal: false,
                hidden: false,

                initialVisibleMonth: function () {
                  function initialVisibleMonth() {
                    return (0, _moment2['default'])();
                  }

                  return initialVisibleMonth;
                }(),

                navPrev: null,
                navNext: null,

                onDayClick: function () {
                  function onDayClick() {}

                  return onDayClick;
                }(),
                onDayMouseDown: function () {
                  function onDayMouseDown() {}

                  return onDayMouseDown;
                }(),
                onDayMouseUp: function () {
                  function onDayMouseUp() {}

                  return onDayMouseUp;
                }(),
                onDayMouseEnter: function () {
                  function onDayMouseEnter() {}

                  return onDayMouseEnter;
                }(),
                onDayMouseLeave: function () {
                  function onDayMouseLeave() {}

                  return onDayMouseLeave;
                }(),
                onDayTouchStart: function () {
                  function onDayTouchStart() {}

                  return onDayTouchStart;
                }(),
                onDayTouchTap: function () {
                  function onDayTouchTap() {}

                  return onDayTouchTap;
                }(),
                onDayTouchEnd: function () {
                  function onDayTouchEnd() {}

                  return onDayTouchEnd;
                }(),
                onPrevMonthClick: function () {
                  function onPrevMonthClick() {}

                  return onPrevMonthClick;
                }(),
                onNextMonthClick: function () {
                  function onNextMonthClick() {}

                  return onNextMonthClick;
                }(),
                onOutsideClick: function () {
                  function onOutsideClick() {}

                  return onOutsideClick;
                }(),

                // i18n
                monthFormat: 'MMMM YYYY'
              };

              function applyTransformStyles(el, transform) {
                var opacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

                var transformStyles = (0, _getTransformStyles2['default'])(transform);
                transformStyles.opacity = opacity;

                Object.keys(transformStyles).forEach(function (styleKey) {
                  // eslint-disable-next-line no-param-reassign
                  el.style[styleKey] = transformStyles[styleKey];
                });
              }

              function calculateDimension(el, axis) {
                var borderBox = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                var withMargin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

                if (!el) {
                  return 0;
                }

                var axisStart = axis === 'width' ? 'Left' : 'Top';
                var axisEnd = axis === 'width' ? 'Right' : 'Bottom';

                // Only read styles if we need to
                var style = !borderBox || withMargin ? window.getComputedStyle(el) : {};

                // Offset includes border and padding
                var size = axis === 'width' ? el.offsetWidth : el.offsetHeight;

                // Get the inner size
                if (!borderBox) {
                  size -= parseFloat(style['padding' + axisStart]) + parseFloat(style['padding' + axisEnd]) + parseFloat(style['border' + axisStart + 'Width']) + parseFloat(style['border' + axisEnd + 'Width']);
                }

                // Apply margin
                if (withMargin) {
                  size += parseFloat(style['margin' + axisStart]) + parseFloat(style['margin' + axisEnd]);
                }

                return size;
              }

              function getMonthHeight(el) {
                var caption = el.querySelector('.js-CalendarMonth__caption');
                var grid = el.querySelector('.js-CalendarMonth__grid');

                // Need to separate out table children for FF
                // Add an additional +1 for the border
                return calculateDimension(caption, 'height', true, true) + calculateDimension(grid, 'height') + 1;
              }

              var DayPicker = function (_React$Component) {
                _inherits(DayPicker, _React$Component);

                function DayPicker(props) {
                  _classCallCheck(this, DayPicker);

                  var _this = _possibleConstructorReturn(this, (DayPicker.__proto__ || Object.getPrototypeOf(DayPicker)).call(this, props));

                  _this.hasSetInitialVisibleMonth = !props.hidden;
                  _this.state = {
                    currentMonth: props.hidden ? (0, _moment2['default'])() : props.initialVisibleMonth(),
                    monthTransition: null,
                    translationValue: 0
                  };

                  _this.onPrevMonthClick = _this.onPrevMonthClick.bind(_this);
                  _this.onNextMonthClick = _this.onNextMonthClick.bind(_this);
                  _this.updateStateAfterMonthTransition = _this.updateStateAfterMonthTransition.bind(_this);
                  return _this;
                }

                _createClass(DayPicker, [{
                  key: 'componentDidMount',
                  value: function () {
                    function componentDidMount() {
                      if (this.isHorizontal()) {
                        this.adjustDayPickerHeight();
                        this.initializeDayPickerWidth();
                      }
                    }

                    return componentDidMount;
                  }()
                }, {
                  key: 'componentWillReceiveProps',
                  value: function () {
                    function componentWillReceiveProps(nextProps) {
                      if (!nextProps.hidden) {
                        if (!this.hasSetInitialVisibleMonth) {
                          this.hasSetInitialVisibleMonth = true;
                          this.setState({
                            currentMonth: nextProps.initialVisibleMonth()
                          });
                        }

                        if (!this.dayPickerWidth && this.isHorizontal()) {
                          this.initializeDayPickerWidth();
                          this.adjustDayPickerHeight();
                        }
                      }
                    }

                    return componentWillReceiveProps;
                  }()
                }, {
                  key: 'shouldComponentUpdate',
                  value: function () {
                    function shouldComponentUpdate(nextProps, nextState) {
                      return (0, _reactAddonsShallowCompare2['default'])(this, nextProps, nextState);
                    }

                    return shouldComponentUpdate;
                  }()
                }, {
                  key: 'componentDidUpdate',
                  value: function () {
                    function componentDidUpdate(prevProps, prevState) {
                      if (this.state.monthTransition || !this.state.currentMonth.isSame(prevState.currentMonth)) {
                        if (this.isHorizontal()) {
                          this.adjustDayPickerHeight();
                        }
                      }
                    }

                    return componentDidUpdate;
                  }()
                }, {
                  key: 'onPrevMonthClick',
                  value: function () {
                    function onPrevMonthClick(e) {
                      if (e) e.preventDefault();

                      if (this.props.onPrevMonthClick) {
                        this.props.onPrevMonthClick(e);
                      }

                      var translationValue = this.isVertical() ? this.getMonthHeightByIndex(0) : this.dayPickerWidth;

                      // The first CalendarMonth is always positioned absolute at top: 0 or left: 0
                      // so we need to transform it to the appropriate location before the animation.
                      // This behavior is because we would otherwise need a double-render in order to
                      // adjust the container position once we had the height the first calendar
                      // (ie first draw all the calendar, then in a second render, use the first calendar's
                      // height to position the container). Variable calendar heights, amirite? <3 Maja
                      this.translateFirstDayPickerForAnimation(translationValue);

                      this.setState({
                        monthTransition: PREV_TRANSITION,
                        translationValue: translationValue
                      });
                    }

                    return onPrevMonthClick;
                  }()
                }, {
                  key: 'onNextMonthClick',
                  value: function () {
                    function onNextMonthClick(e) {
                      if (e) e.preventDefault();
                      if (this.props.onNextMonthClick) {
                        this.props.onNextMonthClick(e);
                      }

                      var translationValue = this.isVertical() ? -this.getMonthHeightByIndex(1) : -this.dayPickerWidth;

                      this.setState({
                        monthTransition: NEXT_TRANSITION,
                        translationValue: translationValue
                      });
                    }

                    return onNextMonthClick;
                  }()
                }, {
                  key: 'getMonthHeightByIndex',
                  value: function () {
                    function getMonthHeightByIndex(i) {
                      return getMonthHeight(_reactDom2['default'].findDOMNode(this.refs.transitionContainer).querySelectorAll('.CalendarMonth')[i]);
                    }

                    return getMonthHeightByIndex;
                  }()
                }, {
                  key: 'isHorizontal',
                  value: function () {
                    function isHorizontal() {
                      return this.props.orientation === _constants.HORIZONTAL_ORIENTATION;
                    }

                    return isHorizontal;
                  }()
                }, {
                  key: 'isVertical',
                  value: function () {
                    function isVertical() {
                      return this.props.orientation === _constants.VERTICAL_ORIENTATION;
                    }

                    return isVertical;
                  }()
                }, {
                  key: 'initializeDayPickerWidth',
                  value: function () {
                    function initializeDayPickerWidth() {
                      this.dayPickerWidth = calculateDimension(_reactDom2['default'].findDOMNode(this.refs.calendarMonthGrid).querySelector('.CalendarMonth'), 'width', true);
                    }

                    return initializeDayPickerWidth;
                  }()
                }, {
                  key: 'updateStateAfterMonthTransition',
                  value: function () {
                    function updateStateAfterMonthTransition() {
                      var _state = this.state;
                      var currentMonth = _state.currentMonth;
                      var monthTransition = _state.monthTransition;

                      var newMonth = currentMonth;
                      if (monthTransition === PREV_TRANSITION) {
                        newMonth = currentMonth.clone().subtract(1, 'month');
                      } else if (monthTransition === NEXT_TRANSITION) {
                        newMonth = currentMonth.clone().add(1, 'month');
                      }

                      // clear the previous transforms
                      applyTransformStyles(_reactDom2['default'].findDOMNode(this.refs.calendarMonthGrid).querySelector('.CalendarMonth'), 'none');

                      this.setState({
                        currentMonth: newMonth,
                        monthTransition: null,
                        translationValue: 0
                      });
                    }

                    return updateStateAfterMonthTransition;
                  }()
                }, {
                  key: 'adjustDayPickerHeight',
                  value: function () {
                    function adjustDayPickerHeight() {
                      var transitionContainer = _reactDom2['default'].findDOMNode(this.refs.transitionContainer);
                      var heights = [];

                      Array.prototype.forEach.call(transitionContainer.querySelectorAll('.CalendarMonth'), function (el) {
                        if (el.getAttribute('data-visible') === 'true') {
                          heights.push(getMonthHeight(el));
                        }
                      });

                      var newMonthHeight = Math.max.apply(Math, heights) + MONTH_PADDING;

                      if (newMonthHeight !== calculateDimension(transitionContainer, 'height')) {
                        this.monthHeight = newMonthHeight;
                        transitionContainer.style.height = String(newMonthHeight) + 'px';
                      }
                    }

                    return adjustDayPickerHeight;
                  }()
                }, {
                  key: 'translateFirstDayPickerForAnimation',
                  value: function () {
                    function translateFirstDayPickerForAnimation(translationValue) {
                      var transformType = this.isVertical() ? 'translateY' : 'translateX';
                      var transformValue = transformType + '(-' + String(translationValue) + 'px)';

                      applyTransformStyles(_reactDom2['default'].findDOMNode(this.refs.transitionContainer).querySelector('.CalendarMonth'), transformValue, 1);
                    }

                    return translateFirstDayPickerForAnimation;
                  }()
                }, {
                  key: 'renderNavigation',
                  value: function () {
                    function renderNavigation() {
                      var _props = this.props;
                      var navPrev = _props.navPrev;
                      var navNext = _props.navNext;

                      return _react2['default'].createElement(_DayPickerNavigation2['default'], {
                        onPrevMonthClick: this.onPrevMonthClick,
                        onNextMonthClick: this.onNextMonthClick,
                        navPrev: navPrev,
                        navNext: navNext,
                        isVertical: this.isVertical()
                      });
                    }

                    return renderNavigation;
                  }()
                }, {
                  key: 'renderWeekHeader',
                  value: function () {
                    function renderWeekHeader(index) {
                      var horizontalStyle = {
                        left: index * CALENDAR_MONTH_WIDTH
                      };

                      var style = this.isHorizontal() ? horizontalStyle : {};

                      var header = [];
                      for (var i = 0; i < 7; i++) {
                        header.push(_react2['default'].createElement('li', { key: i }, _react2['default'].createElement('small', null, (0, _moment2['default'])().weekday(i).format('dd'))));
                      }

                      return _react2['default'].createElement('div', {
                        className: 'DayPicker__week-header',
                        key: 'week-' + String(index),
                        style: style
                      }, _react2['default'].createElement('ul', null, header));
                    }

                    return renderWeekHeader;
                  }()
                }, {
                  key: 'render',
                  value: function () {
                    function render() {
                      var _state2 = this.state;
                      var currentMonth = _state2.currentMonth;
                      var monthTransition = _state2.monthTransition;
                      var translationValue = _state2.translationValue;
                      var _props2 = this.props;
                      var enableOutsideDays = _props2.enableOutsideDays;
                      var numberOfMonths = _props2.numberOfMonths;
                      var orientation = _props2.orientation;
                      var modifiers = _props2.modifiers;
                      var withPortal = _props2.withPortal;
                      var onDayClick = _props2.onDayClick;
                      var onDayMouseDown = _props2.onDayMouseDown;
                      var onDayMouseUp = _props2.onDayMouseUp;
                      var onDayTouchStart = _props2.onDayTouchStart;
                      var onDayTouchEnd = _props2.onDayTouchEnd;
                      var onDayTouchTap = _props2.onDayTouchTap;
                      var onDayMouseEnter = _props2.onDayMouseEnter;
                      var onDayMouseLeave = _props2.onDayMouseLeave;
                      var onOutsideClick = _props2.onOutsideClick;
                      var monthFormat = _props2.monthFormat;

                      var numOfWeekHeaders = this.isVertical() ? 1 : numberOfMonths;
                      var weekHeaders = [];
                      for (var i = 0; i < numOfWeekHeaders; i++) {
                        weekHeaders.push(this.renderWeekHeader(i));
                      }

                      var firstVisibleMonthIndex = 1;
                      if (monthTransition === PREV_TRANSITION) {
                        firstVisibleMonthIndex -= 1;
                      } else if (monthTransition === NEXT_TRANSITION) {
                        firstVisibleMonthIndex += 1;
                      }

                      var dayPickerClassNames = (0, _classnames2['default'])('DayPicker', {
                        'DayPicker--horizontal': this.isHorizontal(),
                        'DayPicker--vertical': this.isVertical(),
                        'DayPicker--portal': withPortal
                      });

                      var transitionContainerClasses = (0, _classnames2['default'])('transition-container', {
                        'transition-container--horizontal': this.isHorizontal(),
                        'transition-container--vertical': this.isVertical()
                      });

                      var horizontalWidth = CALENDAR_MONTH_WIDTH * numberOfMonths + 2 * DAY_PICKER_PADDING;

                      // this is a kind of made-up value that generally looks good. we'll
                      // probably want to let the user set this explicitly.
                      var verticalHeight = 1.75 * CALENDAR_MONTH_WIDTH;

                      var dayPickerStyle = {
                        width: this.isHorizontal() && horizontalWidth,

                        // These values are to center the datepicker (approximately) on the page
                        marginLeft: this.isHorizontal() && withPortal && -horizontalWidth / 2,
                        marginTop: this.isHorizontal() && withPortal && -CALENDAR_MONTH_WIDTH / 2
                      };

                      var transitionContainerStyle = {
                        width: this.isHorizontal() && horizontalWidth,
                        height: this.isVertical() && !withPortal && verticalHeight
                      };

                      var isCalendarMonthGridAnimating = monthTransition !== null;
                      var transformType = this.isVertical() ? 'translateY' : 'translateX';
                      var transformValue = transformType + '(' + String(translationValue) + 'px)';

                      return _react2['default'].createElement('div', { className: dayPickerClassNames, style: dayPickerStyle }, _react2['default'].createElement(_OutsideClickHandler2['default'], { onOutsideClick: onOutsideClick }, this.renderNavigation(), _react2['default'].createElement('div', { className: 'DayPicker__week-headers' }, weekHeaders), _react2['default'].createElement('div', {
                        className: transitionContainerClasses,
                        ref: 'transitionContainer',
                        style: transitionContainerStyle
                      }, _react2['default'].createElement(_CalendarMonthGrid2['default'], {
                        ref: 'calendarMonthGrid',
                        transformValue: transformValue,
                        enableOutsideDays: enableOutsideDays,
                        firstVisibleMonthIndex: firstVisibleMonthIndex,
                        initialMonth: currentMonth,
                        isAnimating: isCalendarMonthGridAnimating,
                        modifiers: modifiers,
                        orientation: orientation,
                        withPortal: withPortal,
                        numberOfMonths: numberOfMonths,
                        onDayClick: onDayClick,
                        onDayMouseDown: onDayMouseDown,
                        onDayMouseUp: onDayMouseUp,
                        onDayTouchStart: onDayTouchStart,
                        onDayTouchEnd: onDayTouchEnd,
                        onDayTouchTap: onDayTouchTap,
                        onDayMouseEnter: onDayMouseEnter,
                        onDayMouseLeave: onDayMouseLeave,
                        onMonthTransitionEnd: this.updateStateAfterMonthTransition,
                        monthFormat: monthFormat
                      }))));
                    }

                    return render;
                  }()
                }]);

                return DayPicker;
              }(_react2['default'].Component);

              exports['default'] = DayPicker;

              DayPicker.propTypes = propTypes;
              DayPicker.defaultProps = defaultProps;

              /***/
            },
            /* 1 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(3);

              /***/
            },
            /* 2 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(439);

              /***/
            },
            /* 3 */
            ,
            /* 4 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(277);

              /***/
            },
            /* 5 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(56);

              /***/
            },
            /* 6 */
            ,
            /* 7 */
            ,
            /* 8 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(409);

              /***/
            },
            /* 9 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(394);

              /***/
            },
            /* 10 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(30);

              /***/
            },
            /* 11 */
            ,
            /* 12 */
            ,
            /* 13 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(441);

              /***/
            },
            /* 14 */
            ,
            /* 15 */
            ,
            /* 16 */
            ,
            /* 17 */
            ,
            /* 18 */
            ,
            /* 19 */
            ,
            /* 20 */
            ,
            /* 21 */
            ,
            /* 22 */
            ,
            /* 23 */
            ,
            /* 24 */
            ,
            /* 25 */
            ,
            /* 26 */
            ,
            /* 27 */
            ,
            /* 28 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(442);

              /***/
            },
            /* 29 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(443);

              /***/
            },
            /* 30 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(448);

              /***/
            }
            /******/
          ]);

        /***/
      }),
      /* 439 */
      /***/
      (function (module, exports, __webpack_require__) {

        /**
         * Copyright 2013-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         *
         * @providesModule shallowCompare
         */

        'use strict';

        var shallowEqual = __webpack_require__(440);

        /**
         * Does a shallow comparison for props and state.
         * See ReactComponentWithPureRenderMixin
         * See also https://facebook.github.io/react/docs/shallow-compare.html
         */
        function shallowCompare(instance, nextProps, nextState) {
          return (!shallowEqual(instance.props, nextProps) ||
            !shallowEqual(instance.state, nextState)
          );
        }

        module.exports = shallowCompare;


        /***/
      }),
      /* 440 */
      /***/
      (function (module, exports) {

        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         *
         * @typechecks
         * 
         */

        /*eslint-disable no-self-compare */

        'use strict';

        var hasOwnProperty = Object.prototype.hasOwnProperty;

        /**
         * inlined Object.is polyfill to avoid requiring consumers ship their own
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
         */
        function is(x, y) {
          // SameValue algorithm
          if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            // Added the nonzero y check to make Flow happy, but it is redundant
            return x !== 0 || y !== 0 || 1 / x === 1 / y;
          } else {
            // Step 6.a: NaN == NaN
            return x !== x && y !== y;
          }
        }

        /**
         * Performs equality by iterating through keys on an object and returning false
         * when any key has values which are not strictly equal between the arguments.
         * Returns true when the values of all keys are strictly equal.
         */
        function shallowEqual(objA, objB) {
          if (is(objA, objB)) {
            return true;
          }

          if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
            return false;
          }

          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);

          if (keysA.length !== keysB.length) {
            return false;
          }

          // Test for A's keys different from B.
          for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
              return false;
            }
          }

          return true;
        }

        module.exports = shallowEqual;

        /***/
      }),
      /* 441 */
      /***/
      (function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports["default"] = getTransformStyles;

        function getTransformStyles(transformValue) {
          return {
            transform: transformValue,
            msTransform: transformValue,
            MozTransform: transformValue,
            WebkitTransform: transformValue
          };
        }

        /***/
      }),
      /* 442 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports =
          /******/
          (function (modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

              /******/ // Check if module is in cache
              /******/
              if (installedModules[moduleId])
              /******/
                return installedModules[moduleId].exports;

              /******/ // Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                  /******/
              };

              /******/ // Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

              /******/ // Flag the module as loaded
              /******/
              module.loaded = true;

              /******/ // Return the exports of the module
              /******/
              return module.exports;
              /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
          })
          /************************************************************************/
          /******/
          ({

            /***/
            0:
            /***/
              function (module, exports, __webpack_require__) {

              var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _createClass = function () {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function (Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps);
                  if (staticProps) defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              var _reactDom = __webpack_require__(10);

              var _reactDom2 = _interopRequireDefault(_reactDom);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _possibleConstructorReturn(self, call) {
                if (!self) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              }

              var propTypes = {
                children: _react.PropTypes.node,
                onOutsideClick: _react.PropTypes.func
              };

              var defaultProps = {
                children: _react2['default'].createElement('span', null),
                onOutsideClick: function () {
                  function onOutsideClick() {}

                  return onOutsideClick;
                }()
              };

              var OutsideClickHandler = function (_React$Component) {
                _inherits(OutsideClickHandler, _React$Component);

                function OutsideClickHandler(props) {
                  _classCallCheck(this, OutsideClickHandler);

                  var _this = _possibleConstructorReturn(this, (OutsideClickHandler.__proto__ || Object.getPrototypeOf(OutsideClickHandler)).call(this, props));

                  _this.onOutsideClick = _this.onOutsideClick.bind(_this);
                  return _this;
                }

                _createClass(OutsideClickHandler, [{
                  key: 'componentDidMount',
                  value: function () {
                    function componentDidMount() {
                      if (document.addEventListener) {
                        // `useCapture` flag is set to true so that a `stopPropagation` in the children will
                        // not prevent all outside click handlers from firing - maja
                        document.addEventListener('click', this.onOutsideClick, true);
                      } else {
                        document.attachEvent('onclick', this.onOutsideClick);
                      }
                    }

                    return componentDidMount;
                  }()
                }, {
                  key: 'componentWillUnmount',
                  value: function () {
                    function componentWillUnmount() {
                      if (document.removeEventListener) {
                        document.removeEventListener('click', this.onOutsideClick, true);
                      } else {
                        document.detachEvent('onclick', this.onOutsideClick);
                      }
                    }

                    return componentWillUnmount;
                  }()
                }, {
                  key: 'onOutsideClick',
                  value: function () {
                    function onOutsideClick(e) {
                      var isDescendantOfRoot = _reactDom2['default'].findDOMNode(this.refs.childNode).contains(e.target);
                      if (!isDescendantOfRoot) {
                        this.props.onOutsideClick(e);
                      }
                    }

                    return onOutsideClick;
                  }()
                }, {
                  key: 'render',
                  value: function () {
                    function render() {
                      return _react2['default'].createElement('div', { ref: 'childNode' }, this.props.children);
                    }

                    return render;
                  }()
                }]);

                return OutsideClickHandler;
              }(_react2['default'].Component);

              exports['default'] = OutsideClickHandler;

              OutsideClickHandler.propTypes = propTypes;
              OutsideClickHandler.defaultProps = defaultProps;

              /***/
            },

            /***/
            1:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(3);

              /***/
            },

            /***/
            10:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(30);

              /***/
            }

            /******/
          });

        /***/
      }),
      /* 443 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports =
          /******/
          (function (modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

              /******/ // Check if module is in cache
              /******/
              if (installedModules[moduleId])
              /******/
                return installedModules[moduleId].exports;

              /******/ // Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                  /******/
              };

              /******/ // Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

              /******/ // Flag the module as loaded
              /******/
              module.loaded = true;

              /******/ // Return the exports of the module
              /******/
              return module.exports;
              /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
          })
          /************************************************************************/
          /******/
          ([
            /* 0 */
            /***/
            function (module, exports, __webpack_require__) {

              var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _createClass = function () {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function (Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps);
                  if (staticProps) defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              var _reactDom = __webpack_require__(10);

              var _reactDom2 = _interopRequireDefault(_reactDom);

              var _reactAddonsShallowCompare = __webpack_require__(2);

              var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);

              var _reactMomentProptypes = __webpack_require__(3);

              var _reactMomentProptypes2 = _interopRequireDefault(_reactMomentProptypes);

              var _moment = __webpack_require__(4);

              var _moment2 = _interopRequireDefault(_moment);

              var _classnames = __webpack_require__(5);

              var _classnames2 = _interopRequireDefault(_classnames);

              var _CalendarMonth = __webpack_require__(11);

              var _CalendarMonth2 = _interopRequireDefault(_CalendarMonth);

              var _isTransitionEndSupported = __webpack_require__(12);

              var _isTransitionEndSupported2 = _interopRequireDefault(_isTransitionEndSupported);

              var _getTransformStyles = __webpack_require__(13);

              var _getTransformStyles2 = _interopRequireDefault(_getTransformStyles);

              var _OrientationShape = __webpack_require__(8);

              var _OrientationShape2 = _interopRequireDefault(_OrientationShape);

              var _constants = __webpack_require__(9);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _possibleConstructorReturn(self, call) {
                if (!self) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              }

              var propTypes = {
                enableOutsideDays: _react.PropTypes.bool,
                firstVisibleMonthIndex: _react.PropTypes.number,
                initialMonth: _reactMomentProptypes2['default'].momentObj,
                isAnimating: _react.PropTypes.bool,
                numberOfMonths: _react.PropTypes.number,
                modifiers: _react.PropTypes.object,
                orientation: _OrientationShape2['default'],
                onDayClick: _react.PropTypes.func,
                onDayMouseDown: _react.PropTypes.func,
                onDayMouseUp: _react.PropTypes.func,
                onDayMouseEnter: _react.PropTypes.func,
                onDayMouseLeave: _react.PropTypes.func,
                onDayTouchStart: _react.PropTypes.func,
                onDayTouchEnd: _react.PropTypes.func,
                onDayTouchTap: _react.PropTypes.func,
                onMonthTransitionEnd: _react.PropTypes.func,
                transformValue: _react.PropTypes.string,

                // i18n
                monthFormat: _react.PropTypes.string
              };

              var defaultProps = {
                enableOutsideDays: false,
                firstVisibleMonthIndex: 0,
                initialMonth: (0, _moment2['default'])(),
                isAnimating: false,
                numberOfMonths: 1,
                modifiers: {},
                orientation: _constants.HORIZONTAL_ORIENTATION,
                onDayClick: function () {
                  function onDayClick() {}

                  return onDayClick;
                }(),
                onDayMouseDown: function () {
                  function onDayMouseDown() {}

                  return onDayMouseDown;
                }(),
                onDayMouseUp: function () {
                  function onDayMouseUp() {}

                  return onDayMouseUp;
                }(),
                onDayMouseEnter: function () {
                  function onDayMouseEnter() {}

                  return onDayMouseEnter;
                }(),
                onDayMouseLeave: function () {
                  function onDayMouseLeave() {}

                  return onDayMouseLeave;
                }(),
                onDayTouchStart: function () {
                  function onDayTouchStart() {}

                  return onDayTouchStart;
                }(),
                onDayTouchEnd: function () {
                  function onDayTouchEnd() {}

                  return onDayTouchEnd;
                }(),
                onDayTouchTap: function () {
                  function onDayTouchTap() {}

                  return onDayTouchTap;
                }(),
                onMonthTransitionEnd: function () {
                  function onMonthTransitionEnd() {}

                  return onMonthTransitionEnd;
                }(),

                transformValue: 'none',

                // i18n
                monthFormat: 'MMMM YYYY'
              };

              var CalendarMonthGrid = function (_React$Component) {
                _inherits(CalendarMonthGrid, _React$Component);

                function CalendarMonthGrid(props) {
                  _classCallCheck(this, CalendarMonthGrid);

                  var _this = _possibleConstructorReturn(this, (CalendarMonthGrid.__proto__ || Object.getPrototypeOf(CalendarMonthGrid)).call(this, props));

                  _this.isTransitionEndSupported = (0, _isTransitionEndSupported2['default'])();
                  _this.onTransitionEnd = _this.onTransitionEnd.bind(_this);
                  return _this;
                }

                _createClass(CalendarMonthGrid, [{
                  key: 'componentDidMount',
                  value: function () {
                    function componentDidMount() {
                      this.container = _reactDom2['default'].findDOMNode(this.containerRef);
                      this.container.addEventListener('transitionend', this.onTransitionEnd);
                    }

                    return componentDidMount;
                  }()
                }, {
                  key: 'shouldComponentUpdate',
                  value: function () {
                    function shouldComponentUpdate(nextProps, nextState) {
                      return (0, _reactAddonsShallowCompare2['default'])(this, nextProps, nextState);
                    }

                    return shouldComponentUpdate;
                  }()
                }, {
                  key: 'componentDidUpdate',
                  value: function () {
                    function componentDidUpdate() {
                      var _props = this.props;
                      var isAnimating = _props.isAnimating;
                      var onMonthTransitionEnd = _props.onMonthTransitionEnd;

                      // For IE9, immediately call onMonthTransitionEnd instead of
                      // waiting for the animation to complete

                      if (!this.isTransitionEndSupported && isAnimating) {
                        onMonthTransitionEnd();
                      }
                    }

                    return componentDidUpdate;
                  }()
                }, {
                  key: 'componentWillUnmount',
                  value: function () {
                    function componentWillUnmount() {
                      this.container.removeEventListener('transitionend', this.onTransitionEnd);
                    }

                    return componentWillUnmount;
                  }()
                }, {
                  key: 'onTransitionEnd',
                  value: function () {
                    function onTransitionEnd() {
                      this.props.onMonthTransitionEnd();
                    }

                    return onTransitionEnd;
                  }()
                }, {
                  key: 'render',
                  value: function () {
                    function render() {
                      var _this2 = this;

                      var _props2 = this.props;
                      var enableOutsideDays = _props2.enableOutsideDays;
                      var firstVisibleMonthIndex = _props2.firstVisibleMonthIndex;
                      var initialMonth = _props2.initialMonth;
                      var isAnimating = _props2.isAnimating;
                      var modifiers = _props2.modifiers;
                      var numberOfMonths = _props2.numberOfMonths;
                      var monthFormat = _props2.monthFormat;
                      var orientation = _props2.orientation;
                      var transformValue = _props2.transformValue;
                      var onDayMouseEnter = _props2.onDayMouseEnter;
                      var onDayMouseLeave = _props2.onDayMouseLeave;
                      var onDayMouseDown = _props2.onDayMouseDown;
                      var onDayMouseUp = _props2.onDayMouseUp;
                      var onDayClick = _props2.onDayClick;
                      var onDayTouchStart = _props2.onDayTouchStart;
                      var onDayTouchEnd = _props2.onDayTouchEnd;
                      var onDayTouchTap = _props2.onDayTouchTap;
                      var onMonthTransitionEnd = _props2.onMonthTransitionEnd;

                      var month = initialMonth.clone().subtract(1, 'month');

                      var months = [];
                      for (var i = 0; i < numberOfMonths + 2; i++) {
                        var isVisible = i >= firstVisibleMonthIndex && i < firstVisibleMonthIndex + numberOfMonths;

                        months.push(_react2['default'].createElement(_CalendarMonth2['default'], {
                          key: month.format('MM-YY'),
                          month: month,
                          isVisible: isVisible,
                          enableOutsideDays: enableOutsideDays,
                          modifiers: modifiers,
                          monthFormat: monthFormat,
                          orientation: orientation,
                          onDayMouseEnter: onDayMouseEnter,
                          onDayMouseLeave: onDayMouseLeave,
                          onDayMouseDown: onDayMouseDown,
                          onDayMouseUp: onDayMouseUp,
                          onDayClick: onDayClick,
                          onDayTouchStart: onDayTouchStart,
                          onDayTouchEnd: onDayTouchEnd,
                          onDayTouchTap: onDayTouchTap
                        }));
                        month = month.clone().add(1, 'month');
                      }

                      var className = (0, _classnames2['default'])('CalendarMonthGrid', {
                        'CalendarMonthGrid--horizontal': orientation === _constants.HORIZONTAL_ORIENTATION,
                        'CalendarMonthGrid--vertical': orientation === _constants.VERTICAL_ORIENTATION,
                        'CalendarMonthGrid--animating': isAnimating
                      });

                      return _react2['default'].createElement('div', {
                        ref: function () {
                          function ref(_ref) {
                            _this2.containerRef = _ref;
                          }

                          return ref;
                        }(),
                        className: className,
                        style: (0, _getTransformStyles2['default'])(transformValue),
                        onTransitionEnd: onMonthTransitionEnd
                      }, months);
                    }

                    return render;
                  }()
                }]);

                return CalendarMonthGrid;
              }(_react2['default'].Component);

              exports['default'] = CalendarMonthGrid;

              CalendarMonthGrid.propTypes = propTypes;
              CalendarMonthGrid.defaultProps = defaultProps;

              /***/
            },
            /* 1 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(3);

              /***/
            },
            /* 2 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(439);

              /***/
            },
            /* 3 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(401);

              /***/
            },
            /* 4 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(277);

              /***/
            },
            /* 5 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(56);

              /***/
            },
            /* 6 */
            ,
            /* 7 */
            ,
            /* 8 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(409);

              /***/
            },
            /* 9 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(394);

              /***/
            },
            /* 10 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(30);

              /***/
            },
            /* 11 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(444);

              /***/
            },
            /* 12 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(447);

              /***/
            },
            /* 13 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(441);

              /***/
            }
            /******/
          ]);

        /***/
      }),
      /* 444 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports =
          /******/
          (function (modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

              /******/ // Check if module is in cache
              /******/
              if (installedModules[moduleId])
              /******/
                return installedModules[moduleId].exports;

              /******/ // Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                  /******/
              };

              /******/ // Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

              /******/ // Flag the module as loaded
              /******/
              module.loaded = true;

              /******/ // Return the exports of the module
              /******/
              return module.exports;
              /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
          })
          /************************************************************************/
          /******/
          ([
            /* 0 */
            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              exports.getModifiersForDay = getModifiersForDay;
              exports['default'] = CalendarMonth;

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              var _reactMomentProptypes = __webpack_require__(3);

              var _reactMomentProptypes2 = _interopRequireDefault(_reactMomentProptypes);

              var _moment = __webpack_require__(4);

              var _moment2 = _interopRequireDefault(_moment);

              var _classnames = __webpack_require__(5);

              var _classnames2 = _interopRequireDefault(_classnames);

              var _CalendarDay = __webpack_require__(6);

              var _CalendarDay2 = _interopRequireDefault(_CalendarDay);

              var _getCalendarMonthWeeks = __webpack_require__(7);

              var _getCalendarMonthWeeks2 = _interopRequireDefault(_getCalendarMonthWeeks);

              var _OrientationShape = __webpack_require__(8);

              var _OrientationShape2 = _interopRequireDefault(_OrientationShape);

              var _constants = __webpack_require__(9);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
              }

              /* eslint react/no-array-index-key: 0 */

              var propTypes = {
                month: _reactMomentProptypes2['default'].momentObj,
                isVisible: _react.PropTypes.bool,
                enableOutsideDays: _react.PropTypes.bool,
                modifiers: _react.PropTypes.object,
                orientation: _OrientationShape2['default'],
                onDayClick: _react.PropTypes.func,
                onDayMouseDown: _react.PropTypes.func,
                onDayMouseUp: _react.PropTypes.func,
                onDayMouseEnter: _react.PropTypes.func,
                onDayMouseLeave: _react.PropTypes.func,
                onDayTouchStart: _react.PropTypes.func,
                onDayTouchEnd: _react.PropTypes.func,
                onDayTouchTap: _react.PropTypes.func,

                // i18n
                monthFormat: _react.PropTypes.string
              };

              var defaultProps = {
                month: (0, _moment2['default'])(),
                isVisible: true,
                enableOutsideDays: false,
                modifiers: {},
                orientation: _constants.HORIZONTAL_ORIENTATION,
                onDayClick: function () {
                  function onDayClick() {}

                  return onDayClick;
                }(),
                onDayMouseDown: function () {
                  function onDayMouseDown() {}

                  return onDayMouseDown;
                }(),
                onDayMouseUp: function () {
                  function onDayMouseUp() {}

                  return onDayMouseUp;
                }(),
                onDayMouseEnter: function () {
                  function onDayMouseEnter() {}

                  return onDayMouseEnter;
                }(),
                onDayMouseLeave: function () {
                  function onDayMouseLeave() {}

                  return onDayMouseLeave;
                }(),
                onDayTouchStart: function () {
                  function onDayTouchStart() {}

                  return onDayTouchStart;
                }(),
                onDayTouchEnd: function () {
                  function onDayTouchEnd() {}

                  return onDayTouchEnd;
                }(),
                onDayTouchTap: function () {
                  function onDayTouchTap() {}

                  return onDayTouchTap;
                }(),

                // i18n
                monthFormat: 'MMMM YYYY'
              };

              function getModifiersForDay(modifiers, day) {
                return day ? Object.keys(modifiers).filter(function (key) {
                  return modifiers[key](day);
                }) : [];
              }

              function CalendarMonth(props) {
                var month = props.month;
                var monthFormat = props.monthFormat;
                var orientation = props.orientation;
                var isVisible = props.isVisible;
                var modifiers = props.modifiers;
                var enableOutsideDays = props.enableOutsideDays;
                var onDayClick = props.onDayClick;
                var onDayMouseDown = props.onDayMouseDown;
                var onDayMouseUp = props.onDayMouseUp;
                var onDayMouseEnter = props.onDayMouseEnter;
                var onDayMouseLeave = props.onDayMouseLeave;
                var onDayTouchStart = props.onDayTouchStart;
                var onDayTouchEnd = props.onDayTouchEnd;
                var onDayTouchTap = props.onDayTouchTap;

                var monthTitle = month.format(monthFormat);

                var calendarMonthClasses = (0, _classnames2['default'])('CalendarMonth', {
                  'CalendarMonth--horizontal': orientation === _constants.HORIZONTAL_ORIENTATION,
                  'CalendarMonth--vertical': orientation === _constants.VERTICAL_ORIENTATION
                });

                return _react2['default'].createElement('div', { className: calendarMonthClasses, 'data-visible': isVisible }, _react2['default'].createElement('table', null, _react2['default'].createElement('caption', { className: 'CalendarMonth__caption js-CalendarMonth__caption' }, _react2['default'].createElement('strong', null, monthTitle)), _react2['default'].createElement('tbody', { className: 'js-CalendarMonth__grid' }, (0, _getCalendarMonthWeeks2['default'])(month, enableOutsideDays).map(function (week, i) {
                  return _react2['default'].createElement('tr', { key: i }, week.map(function (day, j) {
                    var modifiersForDay = getModifiersForDay(modifiers, day);
                    var className = (0, _classnames2['default'])('CalendarMonth__day', {
                      'CalendarMonth__day--outside': !day || day.month() !== month.month()
                    }, modifiersForDay.map(function (mod) {
                      return 'CalendarMonth__day--' + String(mod);
                    }));

                    return _react2['default'].createElement('td', { className: className, key: j }, day && _react2['default'].createElement(_CalendarDay2['default'], {
                      day: day,
                      modifiers: modifiersForDay,
                      onDayMouseEnter: onDayMouseEnter,
                      onDayMouseLeave: onDayMouseLeave,
                      onDayMouseDown: onDayMouseDown,
                      onDayMouseUp: onDayMouseUp,
                      onDayClick: onDayClick,
                      onDayTouchStart: onDayTouchStart,
                      onDayTouchEnd: onDayTouchEnd,
                      onDayTouchTap: onDayTouchTap
                    }));
                  }));
                }))));
              }

              CalendarMonth.propTypes = propTypes;
              CalendarMonth.defaultProps = defaultProps;

              /***/
            },
            /* 1 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(3);

              /***/
            },
            /* 2 */
            ,
            /* 3 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(401);

              /***/
            },
            /* 4 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(277);

              /***/
            },
            /* 5 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(56);

              /***/
            },
            /* 6 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(445);

              /***/
            },
            /* 7 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(446);

              /***/
            },
            /* 8 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(409);

              /***/
            },
            /* 9 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(394);

              /***/
            }
            /******/
          ]);

        /***/
      }),
      /* 445 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports =
          /******/
          (function (modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

              /******/ // Check if module is in cache
              /******/
              if (installedModules[moduleId])
              /******/
                return installedModules[moduleId].exports;

              /******/ // Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                  /******/
              };

              /******/ // Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

              /******/ // Flag the module as loaded
              /******/
              module.loaded = true;

              /******/ // Return the exports of the module
              /******/
              return module.exports;
              /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
          })
          /************************************************************************/
          /******/
          ([
            /* 0 */
            /***/
            function (module, exports, __webpack_require__) {

              var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              exports.TOUCHSTART_TIMEOUT = undefined;

              var _createClass = function () {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function (Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps);
                  if (staticProps) defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              var _reactAddonsShallowCompare = __webpack_require__(2);

              var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);

              var _reactMomentProptypes = __webpack_require__(3);

              var _reactMomentProptypes2 = _interopRequireDefault(_reactMomentProptypes);

              var _moment = __webpack_require__(4);

              var _moment2 = _interopRequireDefault(_moment);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _possibleConstructorReturn(self, call) {
                if (!self) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              }

              var TOUCHSTART_TIMEOUT = exports.TOUCHSTART_TIMEOUT = 200;

              var propTypes = {
                day: _reactMomentProptypes2['default'].momentObj,
                modifiers: _react.PropTypes.arrayOf(_react.PropTypes.string),
                onDayClick: _react.PropTypes.func,
                onDayMouseDown: _react.PropTypes.func,
                onDayMouseUp: _react.PropTypes.func,
                onDayMouseEnter: _react.PropTypes.func,
                onDayMouseLeave: _react.PropTypes.func,
                onDayTouchStart: _react.PropTypes.func,
                onDayTouchEnd: _react.PropTypes.func,
                onDayTouchTap: _react.PropTypes.func
              };

              var defaultProps = {
                day: (0, _moment2['default'])(),
                modifiers: [],
                onDayClick: function () {
                  function onDayClick() {}

                  return onDayClick;
                }(),
                onDayMouseDown: function () {
                  function onDayMouseDown() {}

                  return onDayMouseDown;
                }(),
                onDayMouseUp: function () {
                  function onDayMouseUp() {}

                  return onDayMouseUp;
                }(),
                onDayMouseEnter: function () {
                  function onDayMouseEnter() {}

                  return onDayMouseEnter;
                }(),
                onDayMouseLeave: function () {
                  function onDayMouseLeave() {}

                  return onDayMouseLeave;
                }(),
                onDayTouchStart: function () {
                  function onDayTouchStart() {}

                  return onDayTouchStart;
                }(),
                onDayTouchEnd: function () {
                  function onDayTouchEnd() {}

                  return onDayTouchEnd;
                }(),
                onDayTouchTap: function () {
                  function onDayTouchTap() {}

                  return onDayTouchTap;
                }()
              };

              var CalendarDay = function (_React$Component) {
                _inherits(CalendarDay, _React$Component);

                function CalendarDay(props) {
                  _classCallCheck(this, CalendarDay);

                  var _this = _possibleConstructorReturn(this, (CalendarDay.__proto__ || Object.getPrototypeOf(CalendarDay)).call(this, props));

                  _this.hasActiveTouchStart = false;
                  return _this;
                }

                _createClass(CalendarDay, [{
                  key: 'shouldComponentUpdate',
                  value: function () {
                    function shouldComponentUpdate(nextProps, nextState) {
                      return (0, _reactAddonsShallowCompare2['default'])(this, nextProps, nextState);
                    }

                    return shouldComponentUpdate;
                  }()
                }, {
                  key: 'handleDayClick',
                  value: function () {
                    function handleDayClick(day, modifiers, e) {
                      this.props.onDayClick(day, modifiers, e);
                    }

                    return handleDayClick;
                  }()
                }, {
                  key: 'handleDayMouseDown',
                  value: function () {
                    function handleDayMouseDown(day, modifiers, e) {
                      this.props.onDayMouseDown(day, modifiers, e);
                    }

                    return handleDayMouseDown;
                  }()
                }, {
                  key: 'handleDayMouseUp',
                  value: function () {
                    function handleDayMouseUp(day, modifiers, e) {
                      this.props.onDayMouseUp(day, modifiers, e);
                    }

                    return handleDayMouseUp;
                  }()
                }, {
                  key: 'handleDayMouseEnter',
                  value: function () {
                    function handleDayMouseEnter(day, modifiers, e) {
                      this.props.onDayMouseEnter(day, modifiers, e);
                    }

                    return handleDayMouseEnter;
                  }()
                }, {
                  key: 'handleDayMouseLeave',
                  value: function () {
                    function handleDayMouseLeave(day, modifiers, e) {
                      this.props.onDayMouseLeave(day, modifiers, e);
                    }

                    return handleDayMouseLeave;
                  }()
                }, {
                  key: 'handleDayTouchStart',
                  value: function () {
                    function handleDayTouchStart(day, modifiers, e) {
                      var _this2 = this;

                      this.hasActiveTouchStart = true;
                      setTimeout(function () {
                        _this2.hasActiveTouchStart = false;
                      }, TOUCHSTART_TIMEOUT);

                      this.props.onDayTouchStart(day, modifiers, e);
                    }

                    return handleDayTouchStart;
                  }()
                }, {
                  key: 'handleDayTouchEnd',
                  value: function () {
                    function handleDayTouchEnd(day, modifiers, e) {
                      if (this.hasActiveTouchStart) {
                        this.hasActiveTouchStart = false;
                        this.handleDayTouchTap(day, modifiers, e);
                      }

                      this.props.onDayTouchEnd(day, modifiers, e);
                    }

                    return handleDayTouchEnd;
                  }()
                }, {
                  key: 'handleDayTouchTap',
                  value: function () {
                    function handleDayTouchTap(day, modifiers, e) {
                      this.props.onDayTouchTap(day, modifiers, e);
                    }

                    return handleDayTouchTap;
                  }()
                }, {
                  key: 'render',
                  value: function () {
                    function render() {
                      var _this3 = this;

                      var _props = this.props;
                      var day = _props.day;
                      var modifiers = _props.modifiers;

                      return _react2['default'].createElement('div', {
                        className: 'CalendarDay',
                        onMouseEnter: function () {
                          function onMouseEnter(e) {
                            _this3.handleDayMouseEnter(day, modifiers, e);
                          }

                          return onMouseEnter;
                        }(),
                        onMouseLeave: function () {
                          function onMouseLeave(e) {
                            _this3.handleDayMouseLeave(day, modifiers, e);
                          }

                          return onMouseLeave;
                        }(),
                        onMouseDown: function () {
                          function onMouseDown(e) {
                            _this3.handleDayMouseDown(day, modifiers, e);
                          }

                          return onMouseDown;
                        }(),
                        onMouseUp: function () {
                          function onMouseUp(e) {
                            _this3.handleDayMouseUp(day, modifiers, e);
                          }

                          return onMouseUp;
                        }(),
                        onClick: function () {
                          function onClick(e) {
                            _this3.handleDayClick(day, modifiers, e);
                          }

                          return onClick;
                        }(),
                        onTouchStart: function () {
                          function onTouchStart(e) {
                            _this3.handleDayTouchStart(day, modifiers, e);
                          }

                          return onTouchStart;
                        }(),
                        onTouchEnd: function () {
                          function onTouchEnd(e) {
                            _this3.handleDayTouchEnd(day, modifiers, e);
                          }

                          return onTouchEnd;
                        }()
                      }, _react2['default'].createElement('span', { className: 'CalendarDay__day' }, day.format('D')));
                    }

                    return render;
                  }()
                }]);

                return CalendarDay;
              }(_react2['default'].Component);

              exports['default'] = CalendarDay;

              CalendarDay.propTypes = propTypes;
              CalendarDay.defaultProps = defaultProps;

              /***/
            },
            /* 1 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(3);

              /***/
            },
            /* 2 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(439);

              /***/
            },
            /* 3 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(401);

              /***/
            },
            /* 4 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(277);

              /***/
            }
            /******/
          ]);

        /***/
      }),
      /* 446 */
      /***/
      (function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports['default'] = getCalendarMonthWeeks;

        function getCalendarMonthWeeks(month, enableOutsideDays) {
          // set utc offset to get correct dates in future (when timezone changes)
          var baseDate = month.clone();
          var firstOfMonth = baseDate.clone().startOf('month').hour(12);
          var lastOfMonth = baseDate.clone().endOf('month').hour(12);

          var currentDay = firstOfMonth.clone();
          var currentWeek = [];
          var weeksInMonth = [];

          // days belonging to the previous month
          for (var i = 0; i < currentDay.weekday(); i++) {
            var prevDay = enableOutsideDays && currentDay.clone().subtract(i + 1, 'day');
            currentWeek.unshift(prevDay);
          }

          while (currentDay < lastOfMonth) {
            currentWeek.push(currentDay.clone());
            currentDay.add(1, 'd');

            if (currentDay.weekday() === 0) {
              weeksInMonth.push(currentWeek);
              currentWeek = [];
            }
          }

          // weekday() returns the index of the day of the week according to the locale
          // this means if the week starts on Monday, weekday() will return 0 for a Monday date, not 1
          if (currentDay.weekday() !== 0) {
            // days belonging to the next month
            for (var k = currentDay.weekday(), count = 0; k < 7; k++, count++) {
              var nextDay = enableOutsideDays && currentDay.clone().add(count, 'day');
              currentWeek.push(nextDay);
            }

            weeksInMonth.push(currentWeek);
          }

          return weeksInMonth;
        }

        /***/
      }),
      /* 447 */
      /***/
      (function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports['default'] = isTransitionEndSupported;

        function isTransitionEndSupported() {
          return !!(typeof window !== 'undefined' && 'TransitionEvent' in window);
        }

        /***/
      }),
      /* 448 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports =
          /******/
          (function (modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

              /******/ // Check if module is in cache
              /******/
              if (installedModules[moduleId])
              /******/
                return installedModules[moduleId].exports;

              /******/ // Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                  /******/
              };

              /******/ // Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

              /******/ // Flag the module as loaded
              /******/
              module.loaded = true;

              /******/ // Return the exports of the module
              /******/
              return module.exports;
              /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
          })
          /************************************************************************/
          /******/
          ({

            /***/
            0:
            /***/
              function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              exports['default'] = DayPickerNavigation;

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              var _classnames = __webpack_require__(5);

              var _classnames2 = _interopRequireDefault(_classnames);

              var _arrowLeft = __webpack_require__(31);

              var _arrowLeft2 = _interopRequireDefault(_arrowLeft);

              var _arrowRight = __webpack_require__(23);

              var _arrowRight2 = _interopRequireDefault(_arrowRight);

              var _chevronUp = __webpack_require__(32);

              var _chevronUp2 = _interopRequireDefault(_chevronUp);

              var _chevronDown = __webpack_require__(33);

              var _chevronDown2 = _interopRequireDefault(_chevronDown);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
              }

              var propTypes = {
                navPrev: _react.PropTypes.node,
                navNext: _react.PropTypes.node,
                isVertical: _react.PropTypes.bool,

                onPrevMonthClick: _react.PropTypes.func,
                onNextMonthClick: _react.PropTypes.func
              };
              var defaultProps = {
                navPrev: null,
                navNext: null,
                isVertical: false,

                onPrevMonthClick: function () {
                  function onPrevMonthClick() {}

                  return onPrevMonthClick;
                }(),
                onNextMonthClick: function () {
                  function onNextMonthClick() {}

                  return onNextMonthClick;
                }()
              };

              function DayPickerNavigation(props) {
                var navPrev = props.navPrev;
                var navNext = props.navNext;
                var isVertical = props.isVertical;
                var onPrevMonthClick = props.onPrevMonthClick;
                var onNextMonthClick = props.onNextMonthClick;

                var navPrevIcon = navPrev;
                var navNextIcon = navNext;
                var isDefaultNavPrev = false;
                var isDefaultNavNext = false;
                if (!navPrevIcon) {
                  isDefaultNavPrev = true;
                  navPrevIcon = isVertical ? _react2['default'].createElement(_chevronUp2['default'], null) : _react2['default'].createElement(_arrowLeft2['default'], null);
                }
                if (!navNextIcon) {
                  isDefaultNavNext = true;
                  navNextIcon = isVertical ? _react2['default'].createElement(_chevronDown2['default'], null) : _react2['default'].createElement(_arrowRight2['default'], null);
                }

                var navClassNames = (0, _classnames2['default'])('DayPickerNavigation', {
                  'DayPickerNavigation--horizontal': !isVertical,
                  'DayPickerNavigation--vertical': isVertical
                });
                var prevClassNames = (0, _classnames2['default'])('DayPickerNavigation__prev', {
                  'DayPickerNavigation__prev--default': isDefaultNavPrev
                });
                var nextClassNames = (0, _classnames2['default'])('DayPickerNavigation__next', {
                  'DayPickerNavigation__next--default': isDefaultNavNext
                });

                return _react2['default'].createElement('div', { className: navClassNames }, _react2['default'].createElement('span', {
                  className: prevClassNames,
                  onClick: onPrevMonthClick
                }, navPrevIcon), _react2['default'].createElement('span', {
                  className: nextClassNames,
                  onClick: onNextMonthClick
                }, navNextIcon));
              }

              DayPickerNavigation.propTypes = propTypes;
              DayPickerNavigation.defaultProps = defaultProps;

              /***/
            },

            /***/
            1:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(3);

              /***/
            },

            /***/
            5:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(56);

              /***/
            },

            /***/
            23:
            /***/
              function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

              var _createClass = function () {
                function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

              function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

              function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

              function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

              var SVG = function (_React$Component) {
                _inherits(SVG, _React$Component);

                function SVG() {
                  _classCallCheck(this, SVG);

                  return _possibleConstructorReturn(this, (SVG.__proto__ || Object.getPrototypeOf(SVG)).apply(this, arguments));
                }

                _createClass(SVG, [{
                  key: "render",
                  value: function () {
                    function render() {
                      return _react2["default"].createElement(
                        "svg",
                        _extends({ viewBox: "0 0 1000 1000" }, this.props),
                        _react2["default"].createElement("path", { d: "M694.4 242.4l249.1 249.1c11 11 11 21 0 32L694.4 772.7c-5 5-10 7-16 7s-11-2-16-7c-11-11-11-21 0-32l210.1-210.1H67.1c-13 0-23-10-23-23s10-23 23-23h805.4L662.4 274.5c-21-21.1 11-53.1 32-32.1z" })
                      );
                    }

                    return render;
                  }()
                }]);

                return SVG;
              }(_react2["default"].Component);

              exports["default"] = SVG;

              /***/
            },

            /***/
            31:
            /***/
              function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

              var _createClass = function () {
                function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

              function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

              function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

              function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

              var SVG = function (_React$Component) {
                _inherits(SVG, _React$Component);

                function SVG() {
                  _classCallCheck(this, SVG);

                  return _possibleConstructorReturn(this, (SVG.__proto__ || Object.getPrototypeOf(SVG)).apply(this, arguments));
                }

                _createClass(SVG, [{
                  key: "render",
                  value: function () {
                    function render() {
                      return _react2["default"].createElement(
                        "svg",
                        _extends({ viewBox: "0 0 1000 1000" }, this.props),
                        _react2["default"].createElement("path", { d: "M336.2 274.5l-210.1 210h805.4c13 0 23 10 23 23s-10 23-23 23H126.1l210.1 210.1c11 11 11 21 0 32-5 5-10 7-16 7s-11-2-16-7l-249.1-249c-11-11-11-21 0-32l249.1-249.1c21-21.1 53 10.9 32 32z" })
                      );
                    }

                    return render;
                  }()
                }]);

                return SVG;
              }(_react2["default"].Component);

              exports["default"] = SVG;

              /***/
            },

            /***/
            32:
            /***/
              function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

              var _createClass = function () {
                function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

              function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

              function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

              function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

              var SVG = function (_React$Component) {
                _inherits(SVG, _React$Component);

                function SVG() {
                  _classCallCheck(this, SVG);

                  return _possibleConstructorReturn(this, (SVG.__proto__ || Object.getPrototypeOf(SVG)).apply(this, arguments));
                }

                _createClass(SVG, [{
                  key: "render",
                  value: function () {
                    function render() {
                      return _react2["default"].createElement(
                        "svg",
                        _extends({ viewBox: "0 0 1000 1000" }, this.props),
                        _react2["default"].createElement("path", { d: "M32.1 712.6l453.2-452.2c11-11 21-11 32 0l453.2 452.2c4 5 6 10 6 16 0 13-10 23-22 23-7 0-12-2-16-7L501.3 308.5 64.1 744.7c-4 5-9 7-15 7-7 0-12-2-17-7-9-11-9-21 0-32.1z" })
                      );
                    }

                    return render;
                  }()
                }]);

                return SVG;
              }(_react2["default"].Component);

              exports["default"] = SVG;

              /***/
            },

            /***/
            33:
            /***/
              function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

              var _createClass = function () {
                function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

              function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

              function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

              function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

              var SVG = function (_React$Component) {
                _inherits(SVG, _React$Component);

                function SVG() {
                  _classCallCheck(this, SVG);

                  return _possibleConstructorReturn(this, (SVG.__proto__ || Object.getPrototypeOf(SVG)).apply(this, arguments));
                }

                _createClass(SVG, [{
                  key: "render",
                  value: function () {
                    function render() {
                      return _react2["default"].createElement(
                        "svg",
                        _extends({ viewBox: "0 0 1000 1000" }, this.props),
                        _react2["default"].createElement("path", { d: "M967.5 288.5L514.3 740.7c-11 11-21 11-32 0L29.1 288.5c-4-5-6-11-6-16 0-13 10-23 23-23 6 0 11 2 15 7l437.2 436.2 437.2-436.2c4-5 9-7 16-7 6 0 11 2 16 7 9 10.9 9 21 0 32z" })
                      );
                    }

                    return render;
                  }()
                }]);

                return SVG;
              }(_react2["default"].Component);

              exports["default"] = SVG;

              /***/
            }

            /******/
          });

        /***/
      }),
      /* 449 */
      /***/
      (function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _react = __webpack_require__(3);

        var _reactMomentProptypes = __webpack_require__(401);

        var _reactMomentProptypes2 = _interopRequireDefault(_reactMomentProptypes);

        var _FocusedInputShape = __webpack_require__(437);

        var _FocusedInputShape2 = _interopRequireDefault(_FocusedInputShape);

        var _OrientationShape = __webpack_require__(409);

        var _OrientationShape2 = _interopRequireDefault(_OrientationShape);

        var _AnchorDirectionShape = __webpack_require__(450);

        var _AnchorDirectionShape2 = _interopRequireDefault(_AnchorDirectionShape);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        exports['default'] = {
          startDate: _reactMomentProptypes2['default'].momentObj,
          endDate: _reactMomentProptypes2['default'].momentObj,
          focusedInput: _FocusedInputShape2['default'],
          minimumNights: _react.PropTypes.number,
          isDayBlocked: _react.PropTypes.func,
          isOutsideRange: _react.PropTypes.func,
          enableOutsideDays: _react.PropTypes.bool,
          reopenPickerOnClearDates: _react.PropTypes.bool,
          keepOpenOnDateSelect: _react.PropTypes.bool,
          numberOfMonths: _react.PropTypes.number,
          showClearDates: _react.PropTypes.bool,
          disabled: _react.PropTypes.bool,
          required: _react.PropTypes.bool,

          orientation: _OrientationShape2['default'],
          anchorDirection: _AnchorDirectionShape2['default'],
          horizontalMargin: _react.PropTypes.number,
          // portal options
          withPortal: _react.PropTypes.bool,
          withFullScreenPortal: _react.PropTypes.bool,

          startDateId: _react.PropTypes.string,
          startDatePlaceholderText: _react.PropTypes.string,
          endDateId: _react.PropTypes.string,
          endDatePlaceholderText: _react.PropTypes.string,

          initialVisibleMonth: _react.PropTypes.func,
          onDatesChange: _react.PropTypes.func,
          onFocusChange: _react.PropTypes.func,
          onPrevMonthClick: _react.PropTypes.func,
          onNextMonthClick: _react.PropTypes.func,

          // i18n
          displayFormat: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
          monthFormat: _react.PropTypes.string,
          phrases: _react.PropTypes.shape({
            closeDatePicker: _react.PropTypes.node,
            clearDates: _react.PropTypes.node
          })
        };

        /***/
      }),
      /* 450 */
      /***/
      (function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _react = __webpack_require__(3);

        var _constants = __webpack_require__(394);

        exports['default'] = _react.PropTypes.oneOf([_constants.ANCHOR_LEFT, _constants.ANCHOR_RIGHT]);

        /***/
      }),
      /* 451 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports =
          /******/
          (function (modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

              /******/ // Check if module is in cache
              /******/
              if (installedModules[moduleId])
              /******/
                return installedModules[moduleId].exports;

              /******/ // Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                  /******/
              };

              /******/ // Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

              /******/ // Flag the module as loaded
              /******/
              module.loaded = true;

              /******/ // Return the exports of the module
              /******/
              return module.exports;
              /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
          })
          /************************************************************************/
          /******/
          ([
            /* 0 */
            /***/
            function (module, exports, __webpack_require__) {

              var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _createClass = function () {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function (Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps);
                  if (staticProps) defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              var _moment = __webpack_require__(4);

              var _moment2 = _interopRequireDefault(_moment);

              var _classnames = __webpack_require__(5);

              var _classnames2 = _interopRequireDefault(_classnames);

              var _reactPortal = __webpack_require__(15);

              var _reactPortal2 = _interopRequireDefault(_reactPortal);

              var _arrayIncludes = __webpack_require__(34);

              var _arrayIncludes2 = _interopRequireDefault(_arrayIncludes);

              var _toMomentObject = __webpack_require__(25);

              var _toMomentObject2 = _interopRequireDefault(_toMomentObject);

              var _toLocalizedDateString = __webpack_require__(26);

              var _toLocalizedDateString2 = _interopRequireDefault(_toLocalizedDateString);

              var _getResponsiveContainerStyles = __webpack_require__(16);

              var _getResponsiveContainerStyles2 = _interopRequireDefault(_getResponsiveContainerStyles);

              var _SingleDatePickerInput = __webpack_require__(39);

              var _SingleDatePickerInput2 = _interopRequireDefault(_SingleDatePickerInput);

              var _DayPicker = __webpack_require__(38);

              var _DayPicker2 = _interopRequireDefault(_DayPicker);

              var _close = __webpack_require__(20);

              var _close2 = _interopRequireDefault(_close);

              var _isInclusivelyAfterDay = __webpack_require__(17);

              var _isInclusivelyAfterDay2 = _interopRequireDefault(_isInclusivelyAfterDay);

              var _isSameDay = __webpack_require__(36);

              var _isSameDay2 = _interopRequireDefault(_isSameDay);

              var _SingleDatePickerShape = __webpack_require__(40);

              var _SingleDatePickerShape2 = _interopRequireDefault(_SingleDatePickerShape);

              var _constants = __webpack_require__(9);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _possibleConstructorReturn(self, call) {
                if (!self) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              }

              var propTypes = _SingleDatePickerShape2['default'];

              var defaultProps = {
                date: null,
                focused: false,
                disabled: false,
                required: false,
                showClearDate: false,
                reopenPickerOnClearDate: false,
                keepOpenOnDateSelect: false,

                navPrev: null,
                navNext: null,

                onDateChange: function () {
                  function onDateChange() {}

                  return onDateChange;
                }(),
                onFocusChange: function () {
                  function onFocusChange() {}

                  return onFocusChange;
                }(),

                isDayBlocked: function () {
                  function isDayBlocked() {
                    return false;
                  }

                  return isDayBlocked;
                }(),
                isDayHighlighted: function () {
                  function isDayHighlighted() {
                    return false;
                  }

                  return isDayHighlighted;
                }(),
                disabledDays: [],
                isOutsideRange: function () {
                  function isOutsideRange(day) {
                    return !(0, _isInclusivelyAfterDay2['default'])(day, (0, _moment2['default'])());
                  }

                  return isOutsideRange;
                }(),
                enableOutsideDays: false,
                numberOfMonths: 2,
                orientation: _constants.HORIZONTAL_ORIENTATION,
                anchorDirection: _constants.ANCHOR_LEFT,
                horizontalMargin: 0,
                withPortal: false,
                withFullScreenPortal: false,
                initialVisibleMonth: function () {
                  function initialVisibleMonth() {
                    return (0, _moment2['default'])();
                  }

                  return initialVisibleMonth;
                }(),

                onPrevMonthClick: function () {
                  function onPrevMonthClick() {}

                  return onPrevMonthClick;
                }(),
                onNextMonthClick: function () {
                  function onNextMonthClick() {}

                  return onNextMonthClick;
                }(),

                // i18n
                displayFormat: function () {
                  function displayFormat() {
                    return _moment2['default'].localeData().longDateFormat('L');
                  }

                  return displayFormat;
                }(),
                monthFormat: 'MMMM YYYY',
                phrases: {
                  closeDatePicker: 'Close',
                  clearDate: 'Clear Date'
                }
              };

              var SingleDatePicker = function (_React$Component) {
                _inherits(SingleDatePicker, _React$Component);

                function SingleDatePicker(props) {
                  _classCallCheck(this, SingleDatePicker);

                  var _this = _possibleConstructorReturn(this, (SingleDatePicker.__proto__ || Object.getPrototypeOf(SingleDatePicker)).call(this, props));

                  _this.state = {
                    dayPickerContainerStyles: {},
                    hoverDate: null
                  };

                  _this.today = (0, _moment2['default'])();

                  _this.onDayMouseEnter = _this.onDayMouseEnter.bind(_this);
                  _this.onDayMouseLeave = _this.onDayMouseLeave.bind(_this);
                  _this.onDayClick = _this.onDayClick.bind(_this);

                  _this.onChange = _this.onChange.bind(_this);
                  _this.onFocus = _this.onFocus.bind(_this);
                  _this.onClearFocus = _this.onClearFocus.bind(_this);
                  _this.clearDate = _this.clearDate.bind(_this);

                  _this.responsivizePickerPosition = _this.responsivizePickerPosition.bind(_this);
                  return _this;
                }

                /* istanbul ignore next */

                _createClass(SingleDatePicker, [{
                  key: 'componentDidMount',
                  value: function () {
                    function componentDidMount() {
                      window.addEventListener('resize', this.responsivizePickerPosition);
                      this.responsivizePickerPosition();
                    }

                    return componentDidMount;
                  }()
                }, {
                  key: 'componentWillUpdate',
                  value: function () {
                    function componentWillUpdate() {
                      this.today = (0, _moment2['default'])();
                    }

                    return componentWillUpdate;
                  }()

                  /* istanbul ignore next */

                }, {
                  key: 'componentWillUnmount',
                  value: function () {
                    function componentWillUnmount() {
                      window.removeEventListener('resize', this.responsivizePickerPosition);
                    }

                    return componentWillUnmount;
                  }()
                }, {
                  key: 'onChange',
                  value: function () {
                    function onChange(dateString) {
                      var _props = this.props;
                      var isOutsideRange = _props.isOutsideRange;
                      var keepOpenOnDateSelect = _props.keepOpenOnDateSelect;
                      var onDateChange = _props.onDateChange;
                      var onFocusChange = _props.onFocusChange;

                      var date = (0, _toMomentObject2['default'])(dateString, this.getDisplayFormat());

                      var isValid = date && !isOutsideRange(date);
                      if (isValid) {
                        onDateChange(date);
                        if (!keepOpenOnDateSelect) onFocusChange({ focused: false });
                      } else {
                        onDateChange(null);
                      }
                    }

                    return onChange;
                  }()
                }, {
                  key: 'onDayClick',
                  value: function () {
                    function onDayClick(day, modifiers, e) {
                      if (e) e.preventDefault();
                      if ((0, _arrayIncludes2['default'])(modifiers, 'blocked')) return;

                      this.props.onDateChange(day);
                      if (!this.props.keepOpenOnDateSelect) this.props.onFocusChange({ focused: null });
                    }

                    return onDayClick;
                  }()
                }, {
                  key: 'onDayMouseEnter',
                  value: function () {
                    function onDayMouseEnter(day) {
                      this.setState({
                        hoverDate: day
                      });
                    }

                    return onDayMouseEnter;
                  }()
                }, {
                  key: 'onDayMouseLeave',
                  value: function () {
                    function onDayMouseLeave() {
                      this.setState({
                        hoverDate: null
                      });
                    }

                    return onDayMouseLeave;
                  }()
                }, {
                  key: 'onFocus',
                  value: function () {
                    function onFocus() {
                      if (!this.props.disabled) {
                        this.props.onFocusChange({ focused: true });
                      }
                    }

                    return onFocus;
                  }()
                }, {
                  key: 'onClearFocus',
                  value: function () {
                    function onClearFocus() {
                      var _props2 = this.props;
                      var focused = _props2.focused;
                      var onFocusChange = _props2.onFocusChange;

                      if (!focused) return;

                      onFocusChange({ focused: false });
                    }

                    return onClearFocus;
                  }()
                }, {
                  key: 'getDateString',
                  value: function () {
                    function getDateString(date) {
                      var displayFormat = this.getDisplayFormat();
                      if (date && displayFormat) {
                        return date && date.format(displayFormat);
                      }
                      return (0, _toLocalizedDateString2['default'])(date);
                    }

                    return getDateString;
                  }()
                }, {
                  key: 'getDayPickerContainerClasses',
                  value: function () {
                    function getDayPickerContainerClasses() {
                      var _props3 = this.props;
                      var orientation = _props3.orientation;
                      var withPortal = _props3.withPortal;
                      var withFullScreenPortal = _props3.withFullScreenPortal;
                      var anchorDirection = _props3.anchorDirection;
                      var focused = _props3.focused;
                      var hoverDate = this.state.hoverDate;

                      var dayPickerClassName = (0, _classnames2['default'])('SingleDatePicker__picker', {
                        'SingleDatePicker__picker--show': focused,
                        'SingleDatePicker__picker--invisible': !focused,
                        'SingleDatePicker__picker--direction-left': anchorDirection === _constants.ANCHOR_LEFT,
                        'SingleDatePicker__picker--direction-right': anchorDirection === _constants.ANCHOR_RIGHT,
                        'SingleDatePicker__picker--horizontal': orientation === _constants.HORIZONTAL_ORIENTATION,
                        'SingleDatePicker__picker--vertical': orientation === _constants.VERTICAL_ORIENTATION,
                        'SingleDatePicker__picker--portal': withPortal || withFullScreenPortal,
                        'SingleDatePicker__picker--full-screen-portal': withFullScreenPortal,
                        'SingleDatePicker__picker--valid-date-hovered': hoverDate && !this.isBlocked(hoverDate)
                      });

                      return dayPickerClassName;
                    }

                    return getDayPickerContainerClasses;
                  }()
                }, {
                  key: 'getDisplayFormat',
                  value: function () {
                    function getDisplayFormat() {
                      var displayFormat = this.props.displayFormat;

                      return typeof displayFormat === 'string' ? displayFormat : displayFormat();
                    }

                    return getDisplayFormat;
                  }()
                }, {
                  key: 'clearDate',
                  value: function () {
                    function clearDate() {
                      var _props4 = this.props;
                      var onDateChange = _props4.onDateChange;
                      var reopenPickerOnClearDate = _props4.reopenPickerOnClearDate;
                      var onFocusChange = _props4.onFocusChange;

                      onDateChange(null);
                      if (reopenPickerOnClearDate) {
                        onFocusChange({ focused: true });
                      }
                    }

                    return clearDate;
                  }()

                  /* istanbul ignore next */

                }, {
                  key: 'responsivizePickerPosition',
                  value: function () {
                    function responsivizePickerPosition() {
                      var _props5 = this.props;
                      var anchorDirection = _props5.anchorDirection;
                      var horizontalMargin = _props5.horizontalMargin;
                      var withPortal = _props5.withPortal;
                      var withFullScreenPortal = _props5.withFullScreenPortal;
                      var dayPickerContainerStyles = this.state.dayPickerContainerStyles;

                      var isAnchoredLeft = anchorDirection === _constants.ANCHOR_LEFT;

                      if (!withPortal && !withFullScreenPortal) {
                        var containerRect = this.dayPickerContainer.getBoundingClientRect();
                        var currentOffset = dayPickerContainerStyles[anchorDirection] || 0;
                        var containerEdge = isAnchoredLeft ? containerRect[_constants.ANCHOR_RIGHT] : containerRect[_constants.ANCHOR_LEFT];

                        this.setState({
                          dayPickerContainerStyles: (0, _getResponsiveContainerStyles2['default'])(anchorDirection, currentOffset, containerEdge, horizontalMargin)
                        });
                      }
                    }

                    return responsivizePickerPosition;
                  }()
                }, {
                  key: 'isBlocked',
                  value: function () {
                    function isBlocked(day) {
                      var _props6 = this.props;
                      var isDayBlocked = _props6.isDayBlocked;
                      var isOutsideRange = _props6.isOutsideRange;

                      return isDayBlocked(day) || isOutsideRange(day);
                    }

                    return isBlocked;
                  }()
                }, {
                  key: 'isHovered',
                  value: function () {
                    function isHovered(day) {
                      return (0, _isSameDay2['default'])(day, this.state.hoverDate);
                    }

                    return isHovered;
                  }()
                }, {
                  key: 'isSelected',
                  value: function () {
                    function isSelected(day) {
                      return (0, _isSameDay2['default'])(day, this.props.date);
                    }

                    return isSelected;
                  }()
                }, {
                  key: 'isToday',
                  value: function () {
                    function isToday(day) {
                      return (0, _isSameDay2['default'])(day, this.today);
                    }

                    return isToday;
                  }()
                }, {
                  key: 'maybeRenderDayPickerWithPortal',
                  value: function () {
                    function maybeRenderDayPickerWithPortal() {
                      var _props7 = this.props;
                      var focused = _props7.focused;
                      var withPortal = _props7.withPortal;
                      var withFullScreenPortal = _props7.withFullScreenPortal;

                      if (withPortal || withFullScreenPortal) {
                        return _react2['default'].createElement(_reactPortal2['default'], { isOpened: focused }, this.renderDayPicker());
                      }

                      return this.renderDayPicker();
                    }

                    return maybeRenderDayPickerWithPortal;
                  }()
                }, {
                  key: 'renderDayPicker',
                  value: function () {
                    function renderDayPicker() {
                      var _this2 = this;

                      var _props8 = this.props;
                      var isDayBlocked = _props8.isDayBlocked;
                      var isDayHighlighted = _props8.isDayHighlighted;
                      var isOutsideRange = _props8.isOutsideRange;
                      var enableOutsideDays = _props8.enableOutsideDays;
                      var numberOfMonths = _props8.numberOfMonths;
                      var orientation = _props8.orientation;
                      var monthFormat = _props8.monthFormat;
                      var navPrev = _props8.navPrev;
                      var navNext = _props8.navNext;
                      var onPrevMonthClick = _props8.onPrevMonthClick;
                      var onNextMonthClick = _props8.onNextMonthClick;
                      var withPortal = _props8.withPortal;
                      var withFullScreenPortal = _props8.withFullScreenPortal;
                      var focused = _props8.focused;
                      var initialVisibleMonth = _props8.initialVisibleMonth;
                      var dayPickerContainerStyles = this.state.dayPickerContainerStyles;

                      var modifiers = {
                        today: function () {
                          function today(day) {
                            return _this2.isToday(day);
                          }

                          return today;
                        }(),
                        blocked: function () {
                          function blocked(day) {
                            return _this2.isBlocked(day);
                          }

                          return blocked;
                        }(),
                        'blocked-calendar': function () {
                          function blockedCalendar(day) {
                            return isDayBlocked(day);
                          }

                          return blockedCalendar;
                        }(),
                        'blocked-out-of-range': function () {
                          function blockedOutOfRange(day) {
                            return isOutsideRange(day);
                          }

                          return blockedOutOfRange;
                        }(),
                        'highlighted-calendar': function () {
                          function highlightedCalendar(day) {
                            return isDayHighlighted(day);
                          }

                          return highlightedCalendar;
                        }(),
                        valid: function () {
                          function valid(day) {
                            return !_this2.isBlocked(day);
                          }

                          return valid;
                        }(),
                        hovered: function () {
                          function hovered(day) {
                            return _this2.isHovered(day);
                          }

                          return hovered;
                        }(),
                        selected: function () {
                          function selected(day) {
                            return _this2.isSelected(day);
                          }

                          return selected;
                        }()
                      };

                      var onOutsideClick = !withFullScreenPortal ? this.onClearFocus : undefined;

                      return _react2['default'].createElement('div', {
                        ref: function () {
                          function ref(_ref) {
                            _this2.dayPickerContainer = _ref;
                          }

                          return ref;
                        }(),
                        className: this.getDayPickerContainerClasses(),
                        style: dayPickerContainerStyles
                      }, _react2['default'].createElement(_DayPicker2['default'], {
                        orientation: orientation,
                        enableOutsideDays: enableOutsideDays,
                        modifiers: modifiers,
                        numberOfMonths: numberOfMonths,
                        onDayMouseEnter: this.onDayMouseEnter,
                        onDayMouseLeave: this.onDayMouseLeave,
                        onDayMouseDown: this.onDayClick,
                        onDayTouchTap: this.onDayClick,
                        onPrevMonthClick: onPrevMonthClick,
                        onNextMonthClick: onNextMonthClick,
                        monthFormat: monthFormat,
                        withPortal: withPortal || withFullScreenPortal,
                        hidden: !focused,
                        initialVisibleMonth: initialVisibleMonth,
                        onOutsideClick: onOutsideClick,
                        navPrev: navPrev,
                        navNext: navNext
                      }), withFullScreenPortal && _react2['default'].createElement('button', {
                        className: 'SingleDatePicker__close',
                        type: 'button',
                        onClick: this.onClearFocus
                      }, _react2['default'].createElement('span', { className: 'screen-reader-only' }, this.props.phrases.closeDatePicker), _react2['default'].createElement(_close2['default'], null)));
                    }

                    return renderDayPicker;
                  }()
                }, {
                  key: 'render',
                  value: function () {
                    function render() {
                      var _props9 = this.props;
                      var id = _props9.id;
                      var placeholder = _props9.placeholder;
                      var focused = _props9.focused;
                      var disabled = _props9.disabled;
                      var required = _props9.required;
                      var showClearDate = _props9.showClearDate;
                      var date = _props9.date;
                      var phrases = _props9.phrases;
                      var withPortal = _props9.withPortal;
                      var withFullScreenPortal = _props9.withFullScreenPortal;

                      var dateString = this.getDateString(date);

                      return _react2['default'].createElement('div', { className: 'SingleDatePicker' }, _react2['default'].createElement(_SingleDatePickerInput2['default'], {
                        id: id,
                        placeholder: placeholder,
                        focused: focused,
                        disabled: disabled,
                        required: required,
                        showCaret: !withPortal && !withFullScreenPortal,
                        phrases: phrases,
                        onClearDate: this.clearDate,
                        showClearDate: showClearDate,
                        dateValue: dateString,
                        onChange: this.onChange,
                        onFocus: this.onFocus,
                        onKeyDownShiftTab: this.onClearFocus,
                        onKeyDownTab: this.onClearFocus,
                        border: true
                      }), this.maybeRenderDayPickerWithPortal());
                    }

                    return render;
                  }()
                }]);

                return SingleDatePicker;
              }(_react2['default'].Component);

              exports['default'] = SingleDatePicker;

              SingleDatePicker.propTypes = propTypes;
              SingleDatePicker.defaultProps = defaultProps;

              /***/
            },
            /* 1 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(3);

              /***/
            },
            /* 2 */
            ,
            /* 3 */
            ,
            /* 4 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(277);

              /***/
            },
            /* 5 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(56);

              /***/
            },
            /* 6 */
            ,
            /* 7 */
            ,
            /* 8 */
            ,
            /* 9 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(394);

              /***/
            },
            /* 10 */
            ,
            /* 11 */
            ,
            /* 12 */
            ,
            /* 13 */
            ,
            /* 14 */
            ,
            /* 15 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(396);

              /***/
            },
            /* 16 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(397);

              /***/
            },
            /* 17 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(398);

              /***/
            },
            /* 18 */
            ,
            /* 19 */
            ,
            /* 20 */
            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

              var _createClass = function () {
                function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

              function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

              function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

              function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

              var SVG = function (_React$Component) {
                _inherits(SVG, _React$Component);

                function SVG() {
                  _classCallCheck(this, SVG);

                  return _possibleConstructorReturn(this, (SVG.__proto__ || Object.getPrototypeOf(SVG)).apply(this, arguments));
                }

                _createClass(SVG, [{
                  key: "render",
                  value: function () {
                    function render() {
                      return _react2["default"].createElement(
                        "svg",
                        _extends({ viewBox: "0 0 12 12" }, this.props),
                        _react2["default"].createElement("path", { fillRule: "evenodd", d: "M11.53.47a.75.75 0 0 0-1.061 0l-4.47 4.47L1.529.47A.75.75 0 1 0 .468 1.531l4.47 4.47-4.47 4.47a.75.75 0 1 0 1.061 1.061l4.47-4.47 4.47 4.47a.75.75 0 1 0 1.061-1.061l-4.47-4.47 4.47-4.47a.75.75 0 0 0 0-1.061z" })
                      );
                    }

                    return render;
                  }()
                }]);

                return SVG;
              }(_react2["default"].Component);

              exports["default"] = SVG;

              /***/
            },
            /* 21 */
            ,
            /* 22 */
            ,
            /* 23 */
            ,
            /* 24 */
            ,
            /* 25 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(405);

              /***/
            },
            /* 26 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(406);

              /***/
            },
            /* 27 */
            ,
            /* 28 */
            ,
            /* 29 */
            ,
            /* 30 */
            ,
            /* 31 */
            ,
            /* 32 */
            ,
            /* 33 */
            ,
            /* 34 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(410);

              /***/
            },
            /* 35 */
            ,
            /* 36 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(399);

              /***/
            },
            /* 37 */
            ,
            /* 38 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(438);

              /***/
            },
            /* 39 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(452);

              /***/
            },
            /* 40 */
            /***/
            function (module, exports) {

              module.exports = __webpack_require__(453);

              /***/
            }
            /******/
          ]);

        /***/
      }),
      /* 452 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports =
          /******/
          (function (modules) { // webpackBootstrap
            /******/ // The module cache
            /******/
            var installedModules = {};

            /******/ // The require function
            /******/
            function __webpack_require__(moduleId) {

              /******/ // Check if module is in cache
              /******/
              if (installedModules[moduleId])
              /******/
                return installedModules[moduleId].exports;

              /******/ // Create a new module (and put it into the cache)
              /******/
              var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: false
                  /******/
              };

              /******/ // Execute the module function
              /******/
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

              /******/ // Flag the module as loaded
              /******/
              module.loaded = true;

              /******/ // Return the exports of the module
              /******/
              return module.exports;
              /******/
            }


            /******/ // expose the modules object (__webpack_modules__)
            /******/
            __webpack_require__.m = modules;

            /******/ // expose the module cache
            /******/
            __webpack_require__.c = installedModules;

            /******/ // __webpack_public_path__
            /******/
            __webpack_require__.p = "";

            /******/ // Load entry module and return exports
            /******/
            return __webpack_require__(0);
            /******/
          })
          /************************************************************************/
          /******/
          ({

            /***/
            0:
            /***/
              function (module, exports, __webpack_require__) {

              var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _createClass = function () {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                  }
                }
                return function (Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps);
                  if (staticProps) defineProperties(Constructor, staticProps);
                  return Constructor;
                };
              }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              var _classnames = __webpack_require__(5);

              var _classnames2 = _interopRequireDefault(_classnames);

              var _DateInput = __webpack_require__(22);

              var _DateInput2 = _interopRequireDefault(_DateInput);

              var _close = __webpack_require__(20);

              var _close2 = _interopRequireDefault(_close);

              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _possibleConstructorReturn(self, call) {
                if (!self) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
              }

              var propTypes = {
                id: _react.PropTypes.string.isRequired,
                placeholder: _react.PropTypes.string, // also used as label
                dateValue: _react.PropTypes.string,
                border: _react.PropTypes.bool,
                focused: _react.PropTypes.bool,
                disabled: _react.PropTypes.bool,
                required: _react.PropTypes.bool,
                showCaret: _react.PropTypes.bool,
                showClearDate: _react.PropTypes.bool,

                onChange: _react.PropTypes.func,
                onClearDate: _react.PropTypes.func,
                onFocus: _react.PropTypes.func,
                onKeyDownShiftTab: _react.PropTypes.func,
                onKeyDownTab: _react.PropTypes.func,

                // i18n
                phrases: _react.PropTypes.shape({
                  clearDate: _react.PropTypes.node
                })
              };

              var defaultProps = {
                placeholder: 'Select Date',
                dateValue: '',
                border: false,
                focused: false,
                disabled: false,
                required: false,
                showCaret: false,
                showClearDate: false,

                onChange: function () {
                  function onChange() {}

                  return onChange;
                }(),
                onClearDate: function () {
                  function onClearDate() {}

                  return onClearDate;
                }(),
                onFocus: function () {
                  function onFocus() {}

                  return onFocus;
                }(),
                onKeyDownShiftTab: function () {
                  function onKeyDownShiftTab() {}

                  return onKeyDownShiftTab;
                }(),
                onKeyDownTab: function () {
                  function onKeyDownTab() {}

                  return onKeyDownTab;
                }(),

                // i18n
                phrases: {
                  clearDate: 'Clear Date'
                }
              };

              var SingleDatePickerInput = function (_React$Component) {
                _inherits(SingleDatePickerInput, _React$Component);

                function SingleDatePickerInput(props) {
                  _classCallCheck(this, SingleDatePickerInput);

                  var _this = _possibleConstructorReturn(this, (SingleDatePickerInput.__proto__ || Object.getPrototypeOf(SingleDatePickerInput)).call(this, props));

                  _this.state = {
                    isClearDateHovered: false
                  };

                  _this.onClearDateMouseEnter = _this.onClearDateMouseEnter.bind(_this);
                  _this.onClearDateMouseLeave = _this.onClearDateMouseLeave.bind(_this);
                  return _this;
                }

                _createClass(SingleDatePickerInput, [{
                  key: 'onClearDateMouseEnter',
                  value: function () {
                    function onClearDateMouseEnter() {
                      this.setState({
                        isClearDateHovered: true
                      });
                    }

                    return onClearDateMouseEnter;
                  }()
                }, {
                  key: 'onClearDateMouseLeave',
                  value: function () {
                    function onClearDateMouseLeave() {
                      this.setState({
                        isClearDateHovered: false
                      });
                    }

                    return onClearDateMouseLeave;
                  }()
                }, {
                  key: 'render',
                  value: function () {
                    function render() {
                      var isClearDateHovered = this.state.isClearDateHovered;
                      var _props = this.props;
                      var id = _props.id;
                      var placeholder = _props.placeholder;
                      var dateValue = _props.dateValue;
                      var focused = _props.focused;
                      var disabled = _props.disabled;
                      var required = _props.required;
                      var showCaret = _props.showCaret;
                      var showClearDate = _props.showClearDate;
                      var phrases = _props.phrases;
                      var onClearDate = _props.onClearDate;
                      var onChange = _props.onChange;
                      var onFocus = _props.onFocus;
                      var onKeyDownShiftTab = _props.onKeyDownShiftTab;
                      var onKeyDownTab = _props.onKeyDownTab;

                      return _react2['default'].createElement('div', { className: 'SingleDatePickerInput' }, _react2['default'].createElement(_DateInput2['default'], {
                        id: id,
                        placeholder: placeholder // also used as label
                          ,
                        dateValue: dateValue,
                        focused: focused,
                        disabled: disabled,
                        required: required,
                        showCaret: showCaret,

                        onChange: onChange,
                        onFocus: onFocus,
                        onKeyDownShiftTab: onKeyDownShiftTab,
                        onKeyDownTab: onKeyDownTab
                      }), showClearDate && _react2['default'].createElement('button', {
                        type: 'button',
                        className: (0, _classnames2['default'])('SingleDatePickerInput__clear-date', {
                          'SingleDatePickerInput__clear-date--hide': !dateValue,
                          'SingleDatePickerInput__clear-date--hover': isClearDateHovered
                        }),
                        onMouseEnter: this.onClearDateMouseEnter,
                        onMouseLeave: this.onClearDateMouseLeave,
                        onClick: onClearDate
                      }, _react2['default'].createElement('span', { className: 'screen-reader-only' }, phrases.clearDate), _react2['default'].createElement(_close2['default'], null)));
                    }

                    return render;
                  }()
                }]);

                return SingleDatePickerInput;
              }(_react2['default'].Component);

              exports['default'] = SingleDatePickerInput;

              SingleDatePickerInput.propTypes = propTypes;
              SingleDatePickerInput.defaultProps = defaultProps;

              /***/
            },

            /***/
            1:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(3);

              /***/
            },

            /***/
            5:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(56);

              /***/
            },

            /***/
            20:
            /***/
              function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

              var _createClass = function () {
                function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

              var _react = __webpack_require__(1);

              var _react2 = _interopRequireDefault(_react);

              function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

              function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

              function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

              function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

              var SVG = function (_React$Component) {
                _inherits(SVG, _React$Component);

                function SVG() {
                  _classCallCheck(this, SVG);

                  return _possibleConstructorReturn(this, (SVG.__proto__ || Object.getPrototypeOf(SVG)).apply(this, arguments));
                }

                _createClass(SVG, [{
                  key: "render",
                  value: function () {
                    function render() {
                      return _react2["default"].createElement(
                        "svg",
                        _extends({ viewBox: "0 0 12 12" }, this.props),
                        _react2["default"].createElement("path", { fillRule: "evenodd", d: "M11.53.47a.75.75 0 0 0-1.061 0l-4.47 4.47L1.529.47A.75.75 0 1 0 .468 1.531l4.47 4.47-4.47 4.47a.75.75 0 1 0 1.061 1.061l4.47-4.47 4.47 4.47a.75.75 0 1 0 1.061-1.061l-4.47-4.47 4.47-4.47a.75.75 0 0 0 0-1.061z" })
                      );
                    }

                    return render;
                  }()
                }]);

                return SVG;
              }(_react2["default"].Component);

              exports["default"] = SVG;

              /***/
            },

            /***/
            22:
            /***/
              function (module, exports) {

              module.exports = __webpack_require__(404);

              /***/
            }

            /******/
          });

        /***/
      }),
      /* 453 */
      /***/
      (function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _react = __webpack_require__(3);

        var _reactMomentProptypes = __webpack_require__(401);

        var _reactMomentProptypes2 = _interopRequireDefault(_reactMomentProptypes);

        var _OrientationShape = __webpack_require__(409);

        var _OrientationShape2 = _interopRequireDefault(_OrientationShape);

        var _AnchorDirectionShape = __webpack_require__(450);

        var _AnchorDirectionShape2 = _interopRequireDefault(_AnchorDirectionShape);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        exports['default'] = {
          id: _react.PropTypes.string.isRequired,
          placeholder: _react.PropTypes.string,
          date: _reactMomentProptypes2['default'].momentObj,
          focused: _react.PropTypes.bool,
          showClearDate: _react.PropTypes.bool,
          reopenPickerOnClearDates: _react.PropTypes.bool,
          keepOpenOnDateSelect: _react.PropTypes.bool,
          disabled: _react.PropTypes.bool,
          required: _react.PropTypes.bool,

          onDateChange: _react.PropTypes.func,
          onFocusChange: _react.PropTypes.func,

          isDayBlocked: _react.PropTypes.func,
          isOutsideRange: _react.PropTypes.func,
          enableOutsideDays: _react.PropTypes.bool,
          numberOfMonths: _react.PropTypes.number,
          orientation: _OrientationShape2['default'],
          initialVisibleMonth: _react.PropTypes.func,
          anchorDirection: _AnchorDirectionShape2['default'],
          horizontalMargin: _react.PropTypes.number,

          navPrev: _react.PropTypes.node,
          navNext: _react.PropTypes.node,

          // portal options
          withPortal: _react.PropTypes.bool,
          withFullScreenPortal: _react.PropTypes.bool,

          onPrevMonthClick: _react.PropTypes.func,
          onNextMonthClick: _react.PropTypes.func,

          // i18n
          displayFormat: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
          monthFormat: _react.PropTypes.string,
          phrases: _react.PropTypes.shape({
            closeDatePicker: _react.PropTypes.node
          })
        };

        /***/
      }),
      /* 454 */
      /***/
      (function (module, exports, __webpack_require__) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports['default'] = toLocalizedDateString;

        var _moment = __webpack_require__(277);

        var _moment2 = _interopRequireDefault(_moment);

        var _toMomentObject = __webpack_require__(405);

        var _toMomentObject2 = _interopRequireDefault(_toMomentObject);

        var _constants = __webpack_require__(394);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

        function toLocalizedDateString(date, currentFormat) {
          var dateObj = _moment2['default'].isMoment(date) ? date : (0, _toMomentObject2['default'])(date, currentFormat);
          if (!dateObj) return null;

          return dateObj.format(_constants.ISO_FORMAT);
        }

        /***/
      }),
      /* 455 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactDates = __webpack_require__(275);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        var _moment = __webpack_require__(277);

        var _moment2 = _interopRequireDefault(_moment);

        var _reactMomentProptypes = __webpack_require__(401);

        var _reactMomentProptypes2 = _interopRequireDefault(_reactMomentProptypes);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var DateRange = function (_Component) {
          _inherits(DateRange, _Component);

          function DateRange(props) {
            _classCallCheck(this, DateRange);

            var _this = _possibleConstructorReturn(this, (DateRange.__proto__ || Object.getPrototypeOf(DateRange)).call(this, props));

            _this.state = {
              currentValue: {
                startDate: _this.props.defaultSelected.start,
                endDate: _this.props.defaultSelected.end
              },
              focusedInput: null
            };
            _this.type = "range";
            _this.urlParams = _this.getURLParams();
            _this.handleChange = _this.handleChange.bind(_this);
            _this.customQuery = _this.customQuery.bind(_this);
            _this.onFocusChange = _this.onFocusChange.bind(_this);
            return _this;
          }

          // Set query information


          _createClass(DateRange, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setQueryInfo();
              this.checkDefault();
              this.listenFilter();
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps() {
              this.checkDefault();
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this2 = this;

              this.filterListener = helper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this2.props.componentId) {
                  _this2.startDate = null;
                  _this2.endDate = null;
                  var dateSelectionObj = null;
                  _this2.handleChange(dateSelectionObj);
                }
              });
            }
          }, {
            key: "getURLParams",
            value: function getURLParams() {
              var urlParams = helper.URLParams.get(this.props.componentId, false, true);
              if (urlParams !== null) {
                urlParams = {
                  start: (0, _moment2.default)(urlParams.start),
                  end: (0, _moment2.default)(urlParams.end)
                };
              }
              return urlParams;
            }

            // handle focus

          }, {
            key: "onFocusChange",
            value: function onFocusChange(focusedInput) {
              this.setState({ focusedInput: focusedInput });
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: "DateRange"
                }
              };
              helper.selectedSensor.setSensorInfo(obj);
            }
          }, {
            key: "isDateChange",
            value: function isDateChange() {
              var _this3 = this;

              var flag = false;

              var checkDefault = function checkDefault(defaultSelected) {
                var flag1 = false;
                if (defaultSelected.start && defaultSelected.end) {
                  _this3.startDate = defaultSelected.start;
                  _this3.endDate = defaultSelected.end;
                  flag1 = true;
                }
                return flag1;
              };

              var isChanged = function isChanged(defaultSelected) {
                if ((0, _moment2.default)(_this3.startDate).format(helper.dateFormat[_this3.props.queryFormat]) !== (0, _moment2.default)(defaultSelected.start).format(helper.dateFormat[_this3.props.queryFormat]) && (0, _moment2.default)(_this3.endDate).format(helper.dateFormat[_this3.props.queryFormat]) !== (0, _moment2.default)(defaultSelected.end).format(helper.dateFormat[_this3.props.queryFormat])) {
                  _this3.startDate = defaultSelected.start;
                  _this3.endDate = defaultSelected.end;
                  flag = true;
                }
                return flag;
              };
              var defaultSelected = this.urlParams !== null ? this.urlParams : this.props.defaultSelected;
              try {
                if (this.startDate && this.endDate) {
                  flag = isChanged(defaultSelected);
                } else {
                  flag = checkDefault.call(this, defaultSelected);
                }
              } catch (e) {
                flag = checkDefault.call(this, defaultSelected);
              }
              return flag;
            }
          }, {
            key: "checkDefault",
            value: function checkDefault() {
              if (this.isDateChange()) {
                var dateSelectionObj = {
                  startDate: this.startDate,
                  endDate: this.endDate
                };
                setTimeout(this.handleChange.bind(this, dateSelectionObj), 1000);
              }
            }

            // build query for this sensor only

          }, {
            key: "customQuery",
            value: function customQuery(value) {
              var query = null;
              if (value && value.startDate && value.endDate) {
                query = this.generateQuery(value);
              }
              return query;
            }
          }, {
            key: "generateQuery",
            value: function generateQuery(value) {
              var query = void 0;
              if (_lodash2.default.isArray(this.props.appbaseField) && this.props.appbaseField.length === 2) {
                query = {
                  bool: {
                    must: [{
                      range: _defineProperty({}, this.props.appbaseField[0], {
                        lte: (0, _moment2.default)(value.startDate).format(helper.dateFormat[this.props.queryFormat])
                      })
                    }, {
                      range: _defineProperty({}, this.props.appbaseField[1], {
                        gte: (0, _moment2.default)(value.endDate).format(helper.dateFormat[this.props.queryFormat])
                      })
                    }]
                  }
                };
              } else if (_lodash2.default.isArray(this.props.appbaseField)) {
                query = {
                  range: _defineProperty({}, this.props.appbaseField[0], {
                    gte: (0, _moment2.default)(value.startDate).format(helper.dateFormat[this.props.queryFormat]),
                    lte: (0, _moment2.default)(value.endDate).format(helper.dateFormat[this.props.queryFormat])
                  })
                };
              } else {
                query = {
                  range: _defineProperty({}, this.props.appbaseField, {
                    gte: (0, _moment2.default)(value.startDate).format(helper.dateFormat[this.props.queryFormat]),
                    lte: (0, _moment2.default)(value.endDate).format(helper.dateFormat[this.props.queryFormat])
                  })
                };
              }
              return query;
            }

            // handle the input change and pass the value inside sensor info

          }, {
            key: "handleChange",
            value: function handleChange(inputVal) {
              this.setState({
                currentValue: inputVal
              });
              // if (inputVal.startDate && inputVal.endDate) {
              // 	this.setValue(inputVal);
              // }
              this.setValue(inputVal);
            }
          }, {
            key: "setValue",
            value: function setValue(inputVal) {
              var obj = {
                key: this.props.componentId,
                value: inputVal
              };
              // pass the selected sensor value with componentId as key,
              var isExecuteQuery = true;
              if (this.props.onValueChange) {
                this.props.onValueChange(obj.value);
              }
              helper.URLParams.update(this.props.componentId, this.urlFriendlyValue(inputVal), this.props.URLParams);
              helper.selectedSensor.set(obj, isExecuteQuery);
            }
          }, {
            key: "urlFriendlyValue",
            value: function urlFriendlyValue(value) {
              if (value && value.startDate && value.endDate) {
                value = {
                  start: value.startDate,
                  end: value.endDate
                };
                value = JSON.stringify(value);
              } else {
                value = null;
              }
              return value;
            }

            // allow all dates

          }, {
            key: "allowAllDates",
            value: function allowAllDates() {
              var outsideObj = void 0;
              if (this.props.allowAllDates) {
                outsideObj = {
                  isOutsideRange: function isOutsideRange() {
                    return false;
                  }
                };
              }

              return outsideObj;
            }

            // render

          }, {
            key: "render",
            value: function render() {
              var _this4 = this;

              var title = null;
              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title
              });
              return _react2.default.createElement(
                "div", { className: "rbc rbc-daterange col s12 col-xs-12 card thumbnail " + cx, style: this.props.componentStyle },
                title,
                _react2.default.createElement(
                  "div", { className: "rbc-daterange-component col s12 col-xs-12" },
                  _react2.default.createElement(_reactDates.DateRangePicker, _extends({
                    id: this.props.componentId,
                    startDate: this.state.currentValue ? this.state.currentValue.startDate : null,
                    endDate: this.state.currentValue ? this.state.currentValue.endDate : null,
                    focusedInput: this.state.focusedInput,
                    numberOfMonths: this.props.numberOfMonths
                  }, this.props.extra, this.allowAllDates(), {
                    onDatesChange: function onDatesChange(date) {
                      _this4.handleChange(date);
                    },
                    onFocusChange: this.onFocusChange
                  }))
                )
              );
            }
          }]);

          return DateRange;
        }(_react.Component);

        exports.default = DateRange;


        DateRange.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.array]),
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          defaultSelected: _react2.default.PropTypes.shape({
            start: _reactMomentProptypes2.default.momentObj,
            end: _reactMomentProptypes2.default.momentObj
          }),
          numberOfMonths: _react2.default.PropTypes.number,
          allowAllDates: _react2.default.PropTypes.bool,
          extra: _react2.default.PropTypes.any,
          customQuery: _react2.default.PropTypes.func,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          queryFormat: _react2.default.PropTypes.oneOf(Object.keys(helper.dateFormat)),
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        DateRange.defaultProps = {
          numberOfMonths: 2,
          allowAllDates: true,
          defaultSelected: {
            start: null,
            end: null
          },
          queryFormat: "epoch_millis",
          URLParams: false,
          allowFilter: true
        };

        // context type
        DateRange.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        DateRange.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.ARRAY,
          appbaseFieldType: TYPES.DATE,
          title: TYPES.STRING,
          defaultSelected: TYPES.OBJECT,
          numberOfMonths: TYPES.NUMBER,
          allowAllDates: TYPES.BOOLEAN,
          extra: TYPES.OBJECT,
          customQuery: TYPES.FUNCTION,
          queryFormat: TYPES.STRING,
          URLParams: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 456 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);


        var TitleComponent = function TitleComponent(props) {
          return _react2.default.createElement(
            "h4", { className: "rbc-title col s12 col-xs-12" },
            props.title
          );
        };

        var NumberBoxButtonComponent = function NumberBoxButtonComponent(props) {
          var cx = (0, _classnames2.default)({
            "rbc-btn-active": props.isActive,
            "rbc-btn-inactive": !props.isActive
          });
          var type = props.type;

          var increment = type == "plus" ? 1 : -1;

          return _react2.default.createElement(
            "button", {
              className: "btn rbc-btn " + cx,
              onClick: props.isActive && function () {
                return props.handleChange(increment);
              }
            },
            _react2.default.createElement("span", { className: "fa fa-" + type + " rbc-icon" })
          );
        };

        var NumberComponent = function NumberComponent(props) {
          var label = props.label,
            end = props.end,
            start = props.start,
            handleChange = props.handleChange;

          var value = props.value != undefined ? props.value : start;
          var isPlusActive = end != undefined ? value < end : true;
          var isMinusActive = start != undefined ? value > start : true;

          return _react2.default.createElement(
            "div", { className: "rbc-numberbox-container col s12 col-xs-12" },
            _react2.default.createElement(
              "div", { className: "rbc-label" },
              label
            ),
            _react2.default.createElement(
              "div", { className: "rbc-numberbox-btn-container" },
              _react2.default.createElement(NumberBoxButtonComponent, { isActive: isMinusActive, handleChange: handleChange, type: "minus" }),
              _react2.default.createElement(
                "span", { className: "rbc-numberbox-number" },
                value
              ),
              _react2.default.createElement(NumberBoxButtonComponent, { isActive: isPlusActive, handleChange: handleChange, type: "plus" })
            )
          );
        };

        var NumberBox = function (_Component) {
          _inherits(NumberBox, _Component);

          function NumberBox(props, context) {
            _classCallCheck(this, NumberBox);

            var _this = _possibleConstructorReturn(this, (NumberBox.__proto__ || Object.getPrototypeOf(NumberBox)).call(this, props));

            var focused = _this.props.focused;

            _this.urlParams = helper.URLParams.get(_this.props.componentId);
            var defaultSelected = _this.urlParams !== null ? _this.urlParams : _this.props.defaultSelected;
            _this.state = {
              currentValue: defaultSelected ? defaultSelected : _this.props.data.start,
              focused: focused
            };
            _this.type = "term";
            _this.handleChange = _this.handleChange.bind(_this);
            _this.customQuery = _this.customQuery.bind(_this);
            return _this;
          }

          _createClass(NumberBox, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setQueryInfo();
              if (this.urlParams !== null) {
                this.updateQuery(this.urlParams);
              } else {
                setTimeout(this.handleChange.bind(this), 1000);
              }
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              var _this2 = this;

              setTimeout(function () {
                var defaultValue = _this2.urlParams !== null ? _this2.urlParams : _this2.props.defaultSelected;
                if ((defaultValue || defaultValue === 0) && defaultValue !== _this2.state.currentValue) {
                  _this2.setState({
                    currentValue: defaultValue
                  });
                }
                if (nextProps.queryFormat !== _this2.queryFormat) {
                  _this2.queryFormat = nextProps.queryFormat;
                  _this2.updateQuery();
                }
              }, 300);
            }

            // build query for this sensor only

          }, {
            key: "customQuery",
            value: function customQuery(queryValue) {
              var query = null;
              if (queryValue && (queryValue.value || queryValue.value === 0)) {
                var value = queryValue.value;
                switch (this.props.queryFormat) {
                case "exact":
                  query = this.exactQuery(value);
                  break;
                case "lte":
                  query = this.lteQuery(value);
                  break;
                case "gte":
                default:
                  query = this.gteQuery(value);
                  break;
                }
              }
              return query;
            }
          }, {
            key: "exactQuery",
            value: function exactQuery(value) {
              return _defineProperty({}, this.type, _defineProperty({}, this.props.appbaseField, value));
            }
          }, {
            key: "gteQuery",
            value: function gteQuery(value) {
              return {
                range: _defineProperty({}, this.props.appbaseField, {
                  gte: value,
                  boost: 2.0
                })
              };
            }
          }, {
            key: "lteQuery",
            value: function lteQuery(value) {
              return {
                range: _defineProperty({}, this.props.appbaseField, {
                  lte: value,
                  boost: 2.0
                })
              };
            }
          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var _props = this.props,
                componentId = _props.componentId,
                appbaseField = _props.appbaseField;

              var obj = {
                key: componentId,
                value: {
                  queryType: this.type,
                  inputData: appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery
                }
              };
              helper.selectedSensor.setSensorInfo(obj);
            }

            // handle the input change and pass the value inside sensor info

          }, {
            key: "handleChange",
            value: function handleChange() {
              var increment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
              var _props2 = this.props,
                componentId = _props2.componentId,
                data = _props2.data;
              var start = data.start,
                end = data.end;

              var inputVal = this.state.currentValue;

              start = start != undefined ? start : inputVal - 1;
              end = end != undefined ? end : inputVal + 1;

              if (increment > 0 && inputVal < end) {
                inputVal += 1;
              } else if (increment < 0 && inputVal > start) {
                inputVal -= 1;
              }

              this.setState({
                currentValue: inputVal
              }, this.updateQuery.bind(this));
            }
          }, {
            key: "updateQuery",
            value: function updateQuery() {
              var currentValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.currentValue;

              var obj = {
                key: this.props.componentId,
                value: {
                  value: currentValue,
                  queryFormat: this.props.queryFormat
                }
              };
              if (this.props.onValueChange) {
                this.props.onValueChange(obj.value);
              }
              helper.URLParams.update(this.props.componentId, currentValue, this.props.URLParams);
              helper.selectedSensor.set(obj, true);
            }
          }, {
            key: "render",
            value: function render() {
              var _props3 = this.props,
                title = _props3.title,
                data = _props3.data,
                labelPosition = _props3.labelPosition;
              var currentValue = this.state.currentValue;

              var ComponentTitle = title ? _react2.default.createElement(TitleComponent, { title: title }) : null;
              var cx = (0, _classnames2.default)({
                "rbc-title-active": title,
                "rbc-title-inactive": !title
              });
              return _react2.default.createElement(
                "div", { className: "rbc rbc-numberbox col s12 col-xs-12 card thumbnail " + cx + " rbc-label-" + labelPosition, style: this.props.componentStyle },
                _react2.default.createElement(
                  "div", { className: "row" },
                  ComponentTitle,
                  _react2.default.createElement(NumberComponent, {
                    handleChange: this.handleChange,
                    value: currentValue,
                    label: data.label,
                    start: data.start,
                    end: data.end
                  })
                )
              );
            }
          }]);

          return NumberBox;
        }(_react.Component);

        exports.default = NumberBox;


        NumberBox.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          data: _react2.default.PropTypes.shape({
            start: helper.validateThreshold,
            end: helper.validateThreshold,
            label: _react2.default.PropTypes.string
          }),
          defaultSelected: helper.valueValidation,
          labelPosition: _react2.default.PropTypes.oneOf(["top", "bottom", "left", "right"]),
          customQuery: _react2.default.PropTypes.func,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          queryFormat: _react2.default.PropTypes.oneOf(["exact", "gte", "lte"]),
          URLParams: _react2.default.PropTypes.bool
        };

        NumberBox.defaultProps = {
          componentStyle: {},
          queryFormat: "gte",
          URLParams: false
        };

        // context type
        NumberBox.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired
        };

        NumberBox.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.NUMBER,
          title: TYPES.STRING,
          data: TYPES.OBJECT,
          defaultSelected: TYPES.NUMBER,
          labelPosition: TYPES.STRING,
          customQuery: TYPES.FUNCTION,
          componentStyle: TYPES.OBJECT,
          queryFormat: TYPES.STRING,
          URLParams: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 457 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _ChannelManager = __webpack_require__(63);

        var _ChannelManager2 = _interopRequireDefault(_ChannelManager);

        var _JsonPrint = __webpack_require__(458);

        var _JsonPrint2 = _interopRequireDefault(_JsonPrint);

        var _PoweredBy = __webpack_require__(459);

        var _PoweredBy2 = _interopRequireDefault(_PoweredBy);

        var _InitialLoader = __webpack_require__(80);

        var _InitialLoader2 = _interopRequireDefault(_InitialLoader);

        var _NoResults = __webpack_require__(460);

        var _NoResults2 = _interopRequireDefault(_NoResults);

        var _ResultStats = __webpack_require__(461);

        var _ResultStats2 = _interopRequireDefault(_ResultStats);

        var _Pagination = __webpack_require__(462);

        var _Pagination2 = _interopRequireDefault(_Pagination);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint max-lines: 0 */


        var helper = __webpack_require__(65);
        var $ = __webpack_require__(67);

        var ReactiveList = function (_Component) {
          _inherits(ReactiveList, _Component);

          function ReactiveList(props) {
            _classCallCheck(this, ReactiveList);

            var _this = _possibleConstructorReturn(this, (ReactiveList.__proto__ || Object.getPrototypeOf(ReactiveList)).call(this, props));

            _this.state = {
              markers: [],
              query: {},
              currentData: [],
              resultMarkup: [],
              isLoading: false,
              queryStart: false,
              resultStats: {
                resultFound: false,
                total: 0,
                took: 0
              },
              showPlaceholder: true,
              showInitialLoader: false,
              requestOnScroll: !_this.props.pagination
            };
            if (_this.props.sortOptions) {
              var obj = _this.props.sortOptions[0];
              _this.sortObj = _defineProperty({}, obj.appbaseField, {
                order: obj.sortBy
              });
            } else if (_this.props.sortBy) {
              _this.sortObj = _defineProperty({}, _this.props.appbaseField, {
                order: _this.props.sortBy
              });
            }
            _this.resultSortKey = "ResultSort";
            _this.channelId = null;
            _this.channelListener = null;
            _this.queryStartTime = 0;
            _this.handleSortSelect = _this.handleSortSelect.bind(_this);
            _this.nextPage = _this.nextPage.bind(_this);
            _this.appliedQuery = {};
            return _this;
          }

          _createClass(ReactiveList, [{
            key: "componentWillMount",
            value: function componentWillMount() {
              this.streamProp = this.props.stream;
              this.size = this.props.size;
              this.initialize();
            }
          }, {
            key: "componentWillUpdate",
            value: function componentWillUpdate() {
              var _this2 = this;

              setTimeout(function () {
                if (_this2.streamProp !== _this2.props.stream) {
                  _this2.streamProp = _this2.props.stream;
                  _this2.removeChannel();
                  _this2.initialize(true);
                }
                if (_this2.size !== _this2.props.size) {
                  _this2.size = _this2.props.size;
                  _this2.setState({
                    currentData: []
                  });
                  _this2.removeChannel();
                  _this2.initialize(true);
                }
                if (_this2.props.pagination && _this2.paginationAtVal !== _this2.props.paginationAt) {
                  _this2.paginationAtVal = _this2.props.paginationAt;
                  _this2.executePaginationUpdate();
                }
              }, 300);
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              var _this3 = this;

              if (nextProps.pagination !== this.pagination) {
                this.pagination = nextProps.pagination;
                this.setState({
                  requestOnScroll: !nextProps.pagination
                }, function () {
                  _this3.removeChannel();
                  _this3.initialize(true);
                });
              }
            }

            // check the height and set scroll if scroll not exists

          }, {
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
              if (!this.state.showPlaceholder && !this.props.scrollOnTarget) {
                this.applyScroll();
              }
            }

            // stop streaming request and remove listener when component will unmount

          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              this.removeChannel();
            }
          }, {
            key: "applyScroll",
            value: function applyScroll() {
              var _this4 = this;

              var resultElement = $(this.listParentElement);
              var scrollElement = $(this.listChildElement);
              var padding = 45;

              var getHeight = function getHeight(item) {
                return item.height() ? item.height() : 0;
              };

              var checkHeight = function checkHeight() {
                var flag = resultElement.get(0).scrollHeight - padding > resultElement.height();
                var scrollFlag = scrollElement.get(0).scrollHeight > scrollElement.height();
                if (!flag && !scrollFlag && scrollElement.length && !_this4.props.pagination) {
                  var headerHeight = getHeight(resultElement.find(".rbc-title")) + getHeight(resultElement.find(".rbc-pagination")) * resultElement.find(".rbc-pagination").length;
                  var finalHeight = resultElement.height() - 60 - headerHeight;
                  if (finalHeight > 0) {
                    scrollElement.css({
                      height: scrollElement.height() + 15,
                      "padding-bottom": 20
                    });
                  }
                }
              };

              if (resultElement && resultElement.length && scrollElement && scrollElement.length) {
                scrollElement.css({
                  "height": "auto",
                  "padding-bottom": 0
                });
                setTimeout(checkHeight.bind(this), 1000);
              }
            }
          }, {
            key: "removeChannel",
            value: function removeChannel() {
              if (this.channelId) {
                _ChannelManager2.default.stopStream(this.channelId);
                this.channelId = null;
              }
              if (this.channelListener) {
                this.channelListener.remove();
              }
              if (this.loadListener) {
                this.loadListener.remove();
              }
            }

            // Create a channel which passes the react and receive results whenever react changes

          }, {
            key: "createChannel",
            value: function createChannel() {
              var _this5 = this;

              var executeChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              // Set the react - add self aggs query as well with react
              var react = this.props.react ? this.props.react : {};
              var reactAnd = ["streamChanges"];
              if (this.props.pagination) {
                reactAnd.push("paginationChanges");
                react.pagination = null;
              }
              if (this.sortObj) {
                this.enableSort(reactAnd);
              }
              react = helper.setupReact(react, reactAnd);
              // create a channel and listen the changes
              var channelObj = _ChannelManager2.default.create(this.context.appbaseRef, this.context.type, react, this.props.size, this.props.from, this.props.stream, this.props.componentId, this.context.appbaseCrdentials);
              this.channelId = channelObj.channelId;

              this.channelListener = channelObj.emitter.addListener(channelObj.channelId, function (res) {
                // implementation to prevent initialize query issue if old query response is late then the newer query
                // then we will consider the response of new query and prevent to apply changes for old query response.
                // if queryStartTime of channel response is greater than the previous one only then apply changes
                if (res.error && res.startTime > _this5.queryStartTime) {
                  _this5.setState({
                    queryStart: false,
                    showPlaceholder: false
                  });
                  if (_this5.props.onAllData) {
                    var modifiedData = helper.prepareResultData(res);
                    _this5.props.onAllData(modifiedData.res, modifiedData.err);
                  }
                }
                if (res.appliedQuery) {
                  if (res.mode === "historic" && res.startTime > _this5.queryStartTime) {
                    var visibleNoResults = res.appliedQuery && Object.keys(res.appliedQuery).length && res.data && !res.data.error ? !(res.data.hits && res.data.hits.total) : false;
                    var resultStats = {
                      resultFound: !!(res.appliedQuery && res.data && !res.data.error && res.data.hits && res.data.hits.total)
                    };
                    if (res.appliedQuery && res.data && !res.data.error) {
                      resultStats.total = res.data.hits.total;
                      resultStats.took = res.data.took;
                    }
                    _this5.setState({
                      queryStart: false,
                      visibleNoResults: visibleNoResults,
                      resultStats: resultStats,
                      showPlaceholder: false
                    });
                    _this5.afterChannelResponse(res);
                  } else if (res.mode === "streaming") {
                    _this5.afterChannelResponse(res);
                    _this5.updateResultStats(res.data);
                  }
                } else {
                  _this5.setState({
                    showPlaceholder: true
                  });
                }
              });
              this.listenLoadingChannel(channelObj);
              if (executeChannel) {
                setTimeout(function () {
                  var obj = {
                    key: "streamChanges",
                    value: ""
                  };
                  helper.selectedSensor.set(obj, true);
                }, 100);
              }
            }
          }, {
            key: "updateResultStats",
            value: function updateResultStats(newData) {
              var resultStats = this.state.resultStats;
              resultStats.total = helper.updateStats(resultStats.total, newData);
              this.setState({
                resultStats: resultStats
              });
            }
          }, {
            key: "listenLoadingChannel",
            value: function listenLoadingChannel(channelObj) {
              var _this6 = this;

              this.loadListener = channelObj.emitter.addListener(channelObj.channelId + "-query", function (res) {
                if (res.appliedQuery) {
                  var showInitialLoader = !(_this6.state.requestOnScroll && res.appliedQuery.body && res.appliedQuery.body.from);
                  _this6.setState({
                    queryStart: res.queryState,
                    showInitialLoader: showInitialLoader
                  });
                }
              });
            }
          }, {
            key: "afterChannelResponse",
            value: function afterChannelResponse(res) {
              var _this7 = this;

              var data = res.data;
              var rawData = void 0,
                markersData = void 0,
                newData = [],
                currentData = [];
              this.streamFlag = false;
              if (res.mode === "streaming") {
                this.channelMethod = "streaming";
                newData = data;
                newData.stream = true;
                currentData = this.state.currentData;
                this.streamFlag = true;
                markersData = this.setMarkersData(rawData);
              } else if (res.mode === "historic") {
                this.queryStartTime = res.startTime;
                this.channelMethod = "historic";
                newData = data.hits && data.hits.hits ? data.hits.hits : [];
                var normalizeCurrentData = this.normalizeCurrentData(res, this.state.currentData, newData);
                newData = normalizeCurrentData.newData;
                currentData = normalizeCurrentData.currentData;
              }
              this.setState({
                rawData: rawData,
                newData: newData,
                currentData: currentData,
                markersData: markersData,
                isLoading: false
              }, function () {
                // Pass the historic or streaming data in index method
                res.allMarkers = rawData;
                var modifiedData = JSON.parse(JSON.stringify(res));
                modifiedData.newData = _this7.state.newData;
                modifiedData.currentData = _this7.state.currentData;
                delete modifiedData.data;
                modifiedData = helper.prepareResultData(modifiedData, data);
                var generatedData = _this7.props.onAllData ? _this7.props.onAllData(modifiedData.res, modifiedData.err) : _this7.defaultonAllData(modifiedData.res, modifiedData.err);
                _this7.setState({
                  resultMarkup: _this7.wrapMarkup(generatedData),
                  currentData: _this7.combineCurrentData(newData)
                });
              });
            }
          }, {
            key: "wrapMarkup",
            value: function wrapMarkup(generatedData) {
              var markup = null;
              if (_lodash2.default.isArray(generatedData)) {
                markup = generatedData.map(function (item, index) {
                  return _react2.default.createElement(
                    "div", { key: index, className: "rbc-list-item" },
                    item
                  );
                });
              } else {
                markup = generatedData;
              }
              return markup;
            }

            // normalize current data

          }, {
            key: "normalizeCurrentData",
            value: function normalizeCurrentData(res, rawData, newData) {
              var appliedQuery = JSON.parse(JSON.stringify(res.appliedQuery));
              if (this.state.requestOnScroll && appliedQuery && appliedQuery.body) {
                delete appliedQuery.body.from;
                delete appliedQuery.body.size;
              }
              var isSameQuery = JSON.stringify(appliedQuery) === JSON.stringify(this.appliedQuery);
              var currentData = isSameQuery ? rawData || [] : [];
              if (!currentData.length) {
                this.appliedQuery = appliedQuery;
              } else {
                newData = newData.filter(function (newRecord) {
                  var notExits = true;
                  currentData.forEach(function (oldRecord) {
                    if (newRecord._id + "-" + newRecord._type === oldRecord._id + "-" + oldRecord._type) {
                      notExits = false;
                    }
                  });
                  return notExits;
                });
              }
              if (!isSameQuery) {
                $(".rbc.rbc-reactivelist").animate({
                  scrollTop: 0
                }, 100);
              }
              return {
                currentData: currentData,
                newData: newData
              };
            }
          }, {
            key: "combineCurrentData",
            value: function combineCurrentData(newData) {
              if (_lodash2.default.isArray(newData)) {
                newData = newData.map(function (item) {
                  item.stream = false;
                  return item;
                });
                return this.state.currentData.concat(newData);
              }
              return this.streamDataModify(this.state.currentData, newData, false);
            }

            // enable sort

          }, {
            key: "enableSort",
            value: function enableSort(reactAnd) {
              reactAnd.push(this.resultSortKey);
              var sortObj = {
                key: this.resultSortKey,
                value: this.sortObj
              };
              helper.selectedSensor.setSortInfo(sortObj);
            }

            // append data if pagination is applied

          }, {
            key: "appendData",
            value: function appendData(data) {
              var rawData = this.state.rawData;
              var hits = rawData.hits.hits.concat(data.hits.hits);
              rawData.hits.hits = _lodash2.default.uniqBy(hits, "_id");
              return rawData;
            }

            // append stream boolean flag and also start time of stream

          }, {
            key: "streamDataModify",
            value: function streamDataModify(rawData, data) {
              var streamFlag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

              if (data) {
                data.stream = streamFlag;
                data.streamStart = new Date();
                if (data._deleted) {
                  var hits = rawData.filter(function (hit) {
                    return hit._id !== data._id;
                  });
                  rawData = hits;
                } else {
                  var _hits = rawData.filter(function (hit) {
                    return hit._id !== data._id;
                  });
                  rawData = _hits;
                  rawData.unshift(data);
                }
              }
              return rawData;
            }

            // tranform the raw data to marker data

          }, {
            key: "setMarkersData",
            value: function setMarkersData(hits) {
              if (hits) {
                return hits;
              }
              return [];
            }
          }, {
            key: "initialize",
            value: function initialize() {
              var executeChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              this.createChannel(executeChannel);
              if (this.state.requestOnScroll) {
                this.listComponent();
              } else {
                this.setQueryForPagination();
              }
            }
          }, {
            key: "setQueryForPagination",
            value: function setQueryForPagination() {
              var valObj = {
                queryType: "match",
                inputData: this.props.appbaseField,
                customQuery: function customQuery() {
                  return null;
                }
              };
              var obj = {
                key: "paginationChanges",
                value: valObj
              };
              helper.selectedSensor.setSensorInfo(obj);
            }
          }, {
            key: "executePaginationUpdate",
            value: function executePaginationUpdate() {
              setTimeout(function () {
                var obj = {
                  key: "paginationChanges",
                  value: Math.random()
                };
                helper.selectedSensor.set(obj, true);
              }, 100);
            }
          }, {
            key: "paginationAt",
            value: function paginationAt(method) {
              var pageinationComp = void 0;
              if (this.props.pagination && (this.props.paginationAt === method || this.props.paginationAt === "both")) {
                pageinationComp = _react2.default.createElement(
                  "div", { className: "rbc-pagination-container col s12 col-xs-12" },
                  _react2.default.createElement(_Pagination2.default, {
                    className: "rbc-pagination-" + method,
                    componentId: "pagination",
                    onPageChange: this.props.onPageChange,
                    title: this.props.paginationTitle,
                    pages: this.props.pages
                  })
                );
              }
              return pageinationComp;
            }
          }, {
            key: "defaultonAllData",
            value: function defaultonAllData(res) {
              var _this8 = this;

              var result = null;
              if (res) {
                var combineData = res.currentData;
                if (res.mode === "historic") {
                  combineData = res.currentData.concat(res.newData);
                } else if (res.mode === "streaming") {
                  combineData = helper.combineStreamData(res.currentData, res.newData);
                }
                if (combineData) {
                  result = combineData.map(function (markerData) {
                    var marker = markerData._source;
                    return _this8.props.onData ? _this8.props.onData(markerData) : _react2.default.createElement(
                      "div", { className: "row", style: { marginTop: "20px" } },
                      _this8.itemMarkup(marker, markerData)
                    );
                  });
                }
              }
              return result;
            }
          }, {
            key: "itemMarkup",
            value: function itemMarkup(marker, markerData) {
              return _react2.default.createElement(
                "div", {
                  key: markerData._id,
                  style: { padding: "12px", fontSize: "12px" },
                  className: "makerInfo"
                },
                _react2.default.createElement(_JsonPrint2.default, { data: marker })
              );
            }
          }, {
            key: "nextPage",
            value: function nextPage() {
              function start() {
                this.setState({
                  isLoading: true
                });
                _ChannelManager2.default.nextPage(this.channelId);
              }

              if (this.state.resultStats.total > this.state.currentData.length && !this.state.queryStart) {
                start.call(this);
              }
            }
          }, {
            key: "listComponent",
            value: function listComponent() {
              function setScroll(node) {
                var _this9 = this;

                if (node) {
                  node.addEventListener("scroll", function () {
                    var scrollHeight = node.scrollHeight || node.scrollHeight === 0 ? node.scrollHeight : $(node).height();
                    if (_this9.state.requestOnScroll && $(node).scrollTop() + $(node).innerHeight() >= scrollHeight && _this9.state.resultStats.total > _this9.state.currentData.length && !_this9.state.queryStart) {
                      _this9.nextPage();
                    }
                  });
                }
              }
              if (this.props.scrollOnTarget) {
                setScroll.call(this, this.props.scrollOnTarget);
              } else {
                setScroll.call(this, this.listParentElement);
                setScroll.call(this, this.listChildElement);
              }
            }
          }, {
            key: "handleSortSelect",
            value: function handleSortSelect(event) {
              var index = event.target.value;
              this.sortObj = _defineProperty({}, this.props.sortOptions[index].appbaseField, {
                order: this.props.sortOptions[index].sortBy
              });
              var obj = {
                key: this.resultSortKey,
                value: this.sortObj
              };
              helper.selectedSensor.set(obj, true, "sortChange");
            }
          }, {
            key: "getComponentStyle",
            value: function getComponentStyle() {
              var componentStyle = {};
              if (this.props.scrollOnTarget) {
                componentStyle.maxHeight = "none";
                componentStyle.height = "auto";
              }
              componentStyle = Object.assign(componentStyle, this.props.componentStyle);
              return componentStyle;
            }
          }, {
            key: "render",
            value: function render() {
              var _this10 = this;

              var title = null,
                placeholder = null,
                sortOptions = null;
              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-sort-active": this.props.sortOptions,
                "rbc-sort-inactive": !this.props.sortOptions,
                "rbc-stream-active": this.props.stream,
                "rbc-stream-inactive": !this.props.stream,
                "rbc-placeholder-active": this.props.placeholder,
                "rbc-placeholder-inactive": !this.props.placeholder,
                "rbc-initialloader-active": this.props.initialLoader,
                "rbc-initialloader-inactive": !this.props.initialLoader,
                "rbc-resultstats-active": this.props.showResultStats,
                "rbc-resultstats-inactive": !this.props.showResultStats,
                "rbc-noresults-active": this.props.noResults,
                "rbc-noresults-inactive": !this.props.noResults,
                "rbc-pagination-active": this.props.pagination,
                "rbc-pagination-inactive": !this.props.pagination
              });

              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }
              if (this.props.placeholder) {
                placeholder = _react2.default.createElement(
                  "div", { className: "rbc-placeholder col s12 col-xs-12" },
                  this.props.placeholder
                );
              }

              if (this.props.sortOptions) {
                var options = this.props.sortOptions.map(function (item, index) {
                  return _react2.default.createElement(
                    "option", { value: index, key: item.label },
                    item.label
                  );
                });

                sortOptions = _react2.default.createElement(
                  "div", { className: "rbc-sortoptions input-field col" },
                  _react2.default.createElement(
                    "select", { className: "browser-default form-control", onChange: this.handleSortSelect },
                    options
                  )
                );
              }

              return _react2.default.createElement(
                "div", { className: "rbc-reactivelist-container" },
                _react2.default.createElement(
                  "div", {
                    ref: function ref(div) {
                      _this10.listParentElement = div;
                    },
                    className: "rbc rbc-reactivelist card thumbnail " + cx,
                    style: this.getComponentStyle()
                  },
                  title,
                  sortOptions,
                  this.props.showResultStats && this.state.resultStats.resultFound ? _react2.default.createElement(_ResultStats2.default, { onResultStats: this.props.onResultStats, took: this.state.resultStats.took, total: this.state.resultStats.total }) : null,
                  this.paginationAt("top"),
                  _react2.default.createElement(
                    "div", {
                      ref: function ref(div) {
                        _this10.listChildElement = div;
                      },
                      className: "rbc-reactivelist-scroll-container col s12 col-xs-12"
                    },
                    this.state.resultMarkup
                  ),
                  this.state.isLoading ? _react2.default.createElement("div", { className: "rbc-loader" }) : null,
                  this.state.showPlaceholder ? placeholder : null,
                  this.paginationAt("bottom")
                ),
                this.props.noResults && this.state.visibleNoResults ? _react2.default.createElement(_NoResults2.default, { defaultText: this.props.noResults }) : null,
                this.props.initialLoader && this.state.queryStart && this.state.showInitialLoader ? _react2.default.createElement(_InitialLoader2.default, { defaultText: this.props.initialLoader }) : null,
                _react2.default.createElement(_PoweredBy2.default, { container: "rbc-reactivelist-container" })
              );
            }
          }]);

          return ReactiveList;
        }(_react.Component);

        exports.default = ReactiveList;


        ReactiveList.propTypes = {
          componentId: _react2.default.PropTypes.string,
          appbaseField: _react2.default.PropTypes.string,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          sortBy: _react2.default.PropTypes.oneOf(["asc", "desc", "default"]),
          sortOptions: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
            label: _react2.default.PropTypes.string,
            appbaseField: _react2.default.PropTypes.string,
            sortBy: _react2.default.PropTypes.string
          })),
          from: helper.validation.resultListFrom,
          onAllData: _react2.default.PropTypes.func,
          size: helper.sizeValidation,
          stream: _react2.default.PropTypes.bool,
          componentStyle: _react2.default.PropTypes.object,
          initialLoader: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          noResults: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          showResultStats: _react2.default.PropTypes.bool,
          onResultStats: _react2.default.PropTypes.func,
          placeholder: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          react: _react2.default.PropTypes.object,
          paginationAt: _react2.default.PropTypes.string,
          pagination: _react2.default.PropTypes.bool,
          pages: _react2.default.PropTypes.number,
          scrollOnTarget: _react2.default.PropTypes.object
        };

        ReactiveList.defaultProps = {
          from: 0,
          size: 20,
          stream: false,
          componentStyle: {},
          showResultStats: true,
          pagination: false,
          paginationAt: "bottom",
          pages: 5
        };

        // context type
        ReactiveList.contextTypes = {
					appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          app: _react2.default.PropTypes.any.isRequired,
          appbaseCrdentials: _react2.default.PropTypes.any.isRequired
        };

        ReactiveList.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          title: TYPES.STRING,
          react: TYPES.OBJECT,
          sortBy: TYPES.STRING,
          sortOptions: TYPES.OBJECT,
          from: TYPES.NUMBER,
          onAllData: TYPES.FUNCTION,
          onData: TYPES.FUNCTION,
          size: TYPES.NUMBER,
          stream: TYPES.BOOLEAN,
          componentStyle: TYPES.OBJECT,
          initialLoader: TYPES.STRING,
          noResults: TYPES.FUNCTION,
          showResultStats: TYPES.BOOLEAN,
          onResultStats: TYPES.FUNCTION,
          placeholder: TYPES.STRING,
          pagination: TYPES.BOOLEAN,
          paginationAt: TYPES.STRING,
          pages: TYPES.NUMBER,
          scrollOnTarget: TYPES.OBJECT
        };

        /***/
      }),
      /* 458 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var JsonPrint = function (_Component) {
          _inherits(JsonPrint, _Component);

          function JsonPrint(props) {
            _classCallCheck(this, JsonPrint);

            var _this = _possibleConstructorReturn(this, (JsonPrint.__proto__ || Object.getPrototypeOf(JsonPrint)).call(this, props));

            _this.state = {
              open: false
            };
            return _this;
          }

          _createClass(JsonPrint, [{
            key: "render",
            value: function render() {
              var _this2 = this;

              var tree = null;
              if (this.state.open) {
                tree = JSON.stringify(this.props.data, null, 2);
              } else {
                tree = JSON.stringify(this.props.data);
              }
              return _react2.default.createElement(
                "div", { className: "row rbc-json-print" },
                _react2.default.createElement(
                  "span", {
                    className: "head " + (this.state.open ? null : "collapsed"),
                    onClick: function onClick() {
                      return _this2.setState({ open: !_this2.state.open });
                    }
                  },
                  "Object"
                ),
                _react2.default.createElement(
                  "pre",
                  null,
                  tree
                )
              );
            }
          }]);

          return JsonPrint;
        }(_react.Component);

        exports.default = JsonPrint;

        /***/
      }),
      /* 459 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = Poweredby;

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        var $ = __webpack_require__(67);

        function Poweredby(props) {
          var showMarkup = true;
          var markup = _react2.default.createElement(
            "a", { href: "https://appbase.io/", target: "_blank", rel: "noopener noreferrer", className: "rbc rbc-poweredby" },
            _react2.default.createElement("img", { className: "rbc-img-responsive rbc-poweredby-dark", src: "https://cdn.rawgit.com/appbaseio/cdn/master/appbase/logos/rbc-dark-logo.svg", alt: "Appbase dark" }),
            _react2.default.createElement("img", { className: "rbc-img-responsive rbc-poweredby-light", src: "https://cdn.rawgit.com/appbaseio/cdn/master/appbase/logos/rbc-logo.svg", alt: "Poweredby appbase" })
          );
          if (props.container) {
            var height = $("." + props.container).height() || 0;
            showMarkup = height > 300;
          }
          return showMarkup ? markup : null;
        }

        /***/
      }),
      /* 460 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = NoResults;

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function NoResults(props) {
          return _react2.default.createElement(
            "div", { className: "rbc rbc-noresults" },
            props.defaultText
          );
        }

        NoResults.propTypes = {
          defaultText: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element])
        };

        // Default props value
        NoResults.defaultProps = {
          defaultText: "No results found."
        };

        /***/
      }),
      /* 461 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = ResultStats;

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function ResultStats(props) {
          if (props.onResultStats) {
            return _react2.default.createElement(
              "div", { className: "rbc rbc-resultstats col s12 col-xs-12" },
              props.onResultStats(props.total, props.took)
            );
          }
          return _react2.default.createElement(
            "div", { className: "rbc rbc-resultstats col s12 col-xs-12" },
            props.total,
            " results found in ",
            props.took,
            " ms"
          );
        }

        ResultStats.propTypes = {
          onResultStats: _react2.default.PropTypes.func
        };

        /***/
      }),
      /* 462 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _ChannelManager = __webpack_require__(63);

        var _ChannelManager2 = _interopRequireDefault(_ChannelManager);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var Pagination = function (_Component) {
          _inherits(Pagination, _Component);

          function Pagination(props, context) {
            _classCallCheck(this, Pagination);

            var _this = _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this, props));

            _this.state = {
              currentValue: 1,
              maxPageNumber: 1
            };
            _this.handleChange = _this.handleChange.bind(_this);
            _this.prePage = _this.prePage.bind(_this);
            _this.nextPage = _this.nextPage.bind(_this);
            _this.firstPage = _this.firstPage.bind(_this);
            _this.lastPage = _this.lastPage.bind(_this);
            return _this;
          }

          // Set query information


          _createClass(Pagination, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setQueryInfo();
              this.listenGlobal();
            }

            // stop streaming request and remove listener when component will unmount

          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.globalListener) {
                this.globalListener.remove();
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: this.state.currentValue
              };
              helper.selectedSensor.setPaginationInfo(obj);
            }

            // listen all results

          }, {
            key: "listenGlobal",
            value: function listenGlobal() {
              var _this2 = this;

              this.globalListener = _ChannelManager2.default.emitter.addListener("global", function (res) {
                if (res.react && Object.keys(res.react).indexOf(_this2.props.componentId) > -1) {
                  var totalHits = res.channelResponse && res.channelResponse.data && res.channelResponse.data.hits ? res.channelResponse.data.hits.total : 0;
                  var maxPageNumber = Math.ceil(totalHits / res.queryOptions.size) < 1 ? 1 : Math.ceil(totalHits / res.queryOptions.size);
                  var size = res.queryOptions.size ? res.queryOptions.size : 20;
                  var currentPage = Math.round(res.queryOptions.from / size) + 1;
                  _this2.setState({
                    totalHits: totalHits,
                    size: size,
                    maxPageNumber: maxPageNumber,
                    currentValue: currentPage
                  });
                }
              });
            }

            // handle the input change and pass the value inside sensor info

          }, {
            key: "handleChange",
            value: function handleChange(inputVal) {
              this.setState({
                currentValue: inputVal
              });
              var obj = {
                key: this.props.componentId,
                value: inputVal
              };

              // pass the selected sensor value with componentId as key,
              var isExecuteQuery = true;
              helper.selectedSensor.set(obj, isExecuteQuery, "paginationChange");
              if (this.props.onPageChange) {
                this.props.onPageChange(inputVal);
              }
            }

            // first page

          }, {
            key: "firstPage",
            value: function firstPage() {
              if (this.state.currentValue !== 1) {
                this.handleChange.call(this, 1);
              }
            }

            // last page

          }, {
            key: "lastPage",
            value: function lastPage() {
              if (this.state.currentValue !== this.state.maxPageNumber) {
                this.handleChange.call(this, this.state.maxPageNumber);
              }
            }

            // pre page

          }, {
            key: "prePage",
            value: function prePage() {
              var currentValue = this.state.currentValue > 1 ? this.state.currentValue - 1 : 1;
              if (this.state.currentValue !== currentValue) {
                this.handleChange.call(this, currentValue);
              }
            }

            // next page

          }, {
            key: "nextPage",
            value: function nextPage() {
              var currentValue = this.state.currentValue < this.state.maxPageNumber ? this.state.currentValue + 1 : this.state.maxPageNumber;
              if (this.state.currentValue !== currentValue) {
                this.handleChange.call(this, currentValue);
              }
            }
          }, {
            key: "getStart",
            value: function getStart() {
              var midValue = parseInt(this.props.pages / 2, 10);
              var start = this.state.currentValue - midValue;
              return start > 1 ? start : 1;
            }
          }, {
            key: "renderPageNumber",
            value: function renderPageNumber() {
              var _this3 = this;

              var start = this.getStart(),
                numbers = [];

              var _loop = function _loop(i) {
                var singleItem = _react2.default.createElement(
                  "li", { key: i, className: "rbc-page-number " + (_this3.state.currentValue === i ? "active rbc-pagination-active" : "waves-effect") },
                  _react2.default.createElement(
                    "a", {
                      onClick: function onClick() {
                        return _this3.handleChange(i);
                      }
                    },
                    i
                  )
                );
                if (i <= _this3.state.maxPageNumber) {
                  numbers.push(singleItem);
                }
              };

              for (var i = start; i < start + this.props.pages; i++) {
                _loop(i);
              }
              return _react2.default.createElement(
                "ul", { className: "pagination" },
                _react2.default.createElement(
                  "li", { className: this.state.currentValue === 1 ? "disabled" : "waves-effect" },
                  _react2.default.createElement(
                    "a", { className: "rbc-page-previous", onClick: this.prePage },
                    _react2.default.createElement("i", { className: "fa fa-angle-left" })
                  )
                ),
                start !== 1 ? _react2.default.createElement(
                  "li", { className: "rbc-page-one " + (this.state.currentValue === 1 ? "disabled" : "waves-effect") },
                  _react2.default.createElement(
                    "a", { className: "rbc-page-previous", onClick: this.firstPage },
                    "1"
                  )
                ) : null,
                numbers,
                _react2.default.createElement(
                  "li", { className: this.state.currentValue === this.state.maxPageNumber ? "disabled" : "waves-effect" },
                  _react2.default.createElement(
                    "a", { className: "rbc-page-next", onClick: this.nextPage },
                    _react2.default.createElement("i", { className: "fa fa-angle-right" })
                  )
                )
              );
            }

            // render

          }, {
            key: "render",
            value: function render() {
              var title = null;
              var titleExists = false;
              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title
              });

              return _react2.default.createElement(
                "div", { className: "rbc rbc-pagination col s12 col-xs-12 " + cx + " " + this.props.className },
                title,
                _react2.default.createElement(
                  "div", { className: "col s12 col-xs-12" },
                  this.renderPageNumber()
                )
              );
            }
          }]);

          return Pagination;
        }(_react.Component);

        exports.default = Pagination;


        Pagination.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.string,
          onPageChange: _react2.default.PropTypes.func,
          pages: helper.pagesValidation
        };

        // Default props value
        Pagination.defaultProps = {
          pages: 10
        };

        // context type
        Pagination.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired
        };

        /***/
      }),
      /* 463 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _ChannelManager = __webpack_require__(63);

        var _ChannelManager2 = _interopRequireDefault(_ChannelManager);

        var _PoweredBy = __webpack_require__(459);

        var _PoweredBy2 = _interopRequireDefault(_PoweredBy);

        var _InitialLoader = __webpack_require__(80);

        var _InitialLoader2 = _interopRequireDefault(_InitialLoader);

        var _NoResults = __webpack_require__(460);

        var _NoResults2 = _interopRequireDefault(_NoResults);

        var _ResultStats = __webpack_require__(461);

        var _ResultStats2 = _interopRequireDefault(_ResultStats);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var ReactiveElement = function (_Component) {
          _inherits(ReactiveElement, _Component);

          function ReactiveElement(props) {
            _classCallCheck(this, ReactiveElement);

            var _this = _possibleConstructorReturn(this, (ReactiveElement.__proto__ || Object.getPrototypeOf(ReactiveElement)).call(this, props));

            _this.state = {
              markers: [],
              query: {},
              rawData: [],
              resultMarkup: [],
              isLoading: false,
              queryStart: false,
              resultStats: {
                resultFound: false,
                total: 0,
                took: 0
              },
              showPlaceholder: true
            };
            _this.channelId = null;
            _this.channelListener = null;
            _this.queryStartTime = 0;
            _this.appliedQuery = {};
            return _this;
          }

          // tranform the raw data to marker data


          _createClass(ReactiveElement, [{
            key: "setMarkersData",
            value: function setMarkersData(hits) {
              if (hits) {
                return hits;
              }
              return [];
            }

            // append stream boolean flag and also start time of stream

          }, {
            key: "streamDataModify",
            value: function streamDataModify(rawData, data) {
              if (data) {
                data.stream = true;
                data.streamStart = new Date();
                if (data._deleted) {
                  var hits = rawData.filter(function (hit) {
                    return hit._id !== data._id;
                  });
                  rawData = hits;
                } else {
                  var _hits = rawData.filter(function (hit) {
                    return hit._id !== data._id;
                  });
                  rawData = _hits;
                  rawData.unshift(data);
                }
              }
              return rawData;
            }

            // default markup

          }, {
            key: "defaultonAllData",
            value: function defaultonAllData(res) {
              var result = null;
              if (res && res.appliedQuery) {
                result = _react2.default.createElement(
                  "div", { className: "row", style: { marginTop: "60px" } },
                  _react2.default.createElement(
                    "pre", { className: "pull-left" },
                    JSON.stringify(res.newData, null, 4)
                  )
                );
              }
              return result;
            }
          }, {
            key: "componentWillMount",
            value: function componentWillMount() {
              this.streamProp = this.props.stream;
              this.initialize();
            }
          }, {
            key: "componentWillUpdate",
            value: function componentWillUpdate() {
              var _this2 = this;

              setTimeout(function () {
                if (_this2.streamProp !== _this2.props.stream) {
                  _this2.streamProp = _this2.props.stream;
                  _this2.removeChannel();
                  _this2.initialize(true);
                }
                if (_this2.size !== _this2.props.size) {
                  _this2.size = _this2.props.size;
                  _this2.removeChannel();
                  _this2.initialize(true);
                }
              }, 300);
            }

            // stop streaming request and remove listener when component will unmount

          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              this.removeChannel();
            }

            // Create a channel which passes the react and receive results whenever react changes

          }, {
            key: "createChannel",
            value: function createChannel() {
              var _this3 = this;

              var executeChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              // Set the react - add self aggs query as well with react
              var react = this.props.react ? this.props.react : {};
              var reactAnd = ["streamChanges"];
              react = helper.setupReact(react, reactAnd);

              // create a channel and listen the changes
              var channelObj = _ChannelManager2.default.create(this.context.appbaseRef, this.context.type, react, this.props.size, this.props.from, this.props.stream, this.props.componentId);
              this.channelId = channelObj.channelId;

              this.channelListener = channelObj.emitter.addListener(channelObj.channelId, function (res) {
                // implementation to prevent initialize query issue if old query response is late then the newer query
                // then we will consider the response of new query and prevent to apply changes for old query response.
                // if queryStartTime of channel response is greater than the previous one only then apply changes
                if (res.error && res.startTime > _this3.queryStartTime) {
                  _this3.setState({
                    queryStart: false,
                    showPlaceholder: false
                  });
                  if (_this3.props.onAllData) {
                    var modifiedData = helper.prepareResultData(res);
                    _this3.props.onAllData(modifiedData.res, modifiedData.err);
                  }
                }
                if (res.appliedQuery) {
                  if (res.mode === "historic" && res.startTime > _this3.queryStartTime) {
                    var visibleNoResults = res.appliedQuery && res.data && !res.data.error ? !(res.data.hits && res.data.hits.total) : false;
                    var resultStats = {
                      resultFound: !!(res.appliedQuery && res.data && !res.data.error && res.data.hits && res.data.hits.total)
                    };
                    if (res.appliedQuery && res.data && !res.data.error) {
                      resultStats.total = res.data.hits.total;
                      resultStats.took = res.data.took;
                    }
                    _this3.setState({
                      queryStart: false,
                      visibleNoResults: visibleNoResults,
                      resultStats: resultStats,
                      showPlaceholder: false
                    });
                    _this3.afterChannelResponse(res);
                  } else if (res.mode === "streaming") {
                    _this3.afterChannelResponse(res);
                    _this3.updateResultStats(res.data);
                  }
                } else {
                  _this3.setState({
                    showPlaceholder: true
                  });
                }
              });
              this.listenLoadingChannel(channelObj);
              if (executeChannel) {
                var obj = {
                  key: "streamChanges",
                  value: ""
                };
                helper.selectedSensor.set(obj, true);
              }
            }
          }, {
            key: "updateResultStats",
            value: function updateResultStats(newData) {
              var resultStats = this.state.resultStats;
              resultStats.total = helper.updateStats(resultStats.total, newData);
              this.setState({
                resultStats: resultStats
              });
            }
          }, {
            key: "listenLoadingChannel",
            value: function listenLoadingChannel(channelObj) {
              var _this4 = this;

              this.loadListener = channelObj.emitter.addListener(channelObj.channelId + "-query", function (res) {
                if (res.appliedQuery) {
                  _this4.setState({
                    queryStart: res.queryState
                  });
                }
              });
            }
          }, {
            key: "afterChannelResponse",
            value: function afterChannelResponse(res) {
              var _this5 = this;

              var data = res.data;
              var rawData = void 0,
                markersData = void 0,
                newData = [],
                currentData = [];
              this.streamFlag = false;
              if (res.mode === "streaming") {
                this.channelMethod = "streaming";
                newData = data;
                newData.stream = true;
                currentData = this.state.currentData;
                this.streamFlag = true;
                markersData = this.setMarkersData(rawData);
              } else if (res.mode === "historic") {
                this.queryStartTime = res.startTime;
                this.channelMethod = "historic";
                newData = data.hits && data.hits.hits ? data.hits.hits : [];
                var normalizeCurrentData = this.normalizeCurrentData(res, this.state.currentData, newData);
                newData = normalizeCurrentData.newData;
                currentData = normalizeCurrentData.currentData;
              }
              this.setState({
                rawData: rawData,
                newData: newData,
                currentData: currentData,
                markersData: markersData,
                isLoading: false
              }, function () {
                // Pass the historic or streaming data in index method
                res.allMarkers = rawData;
                var modifiedData = JSON.parse(JSON.stringify(res));
                modifiedData.newData = _this5.state.newData;
                modifiedData.currentData = _this5.state.currentData;
                delete modifiedData.data;
                modifiedData = helper.prepareResultData(modifiedData, res.data);
                var generatedData = _this5.props.onAllData ? _this5.props.onAllData(modifiedData.res, modifiedData.err) : _this5.defaultonAllData(modifiedData.res, modifiedData.err);
                _this5.setState({
                  resultMarkup: generatedData,
                  currentData: _this5.combineCurrentData(newData)
                });
              });
            }

            // normalize current data

          }, {
            key: "normalizeCurrentData",
            value: function normalizeCurrentData(res, rawData, newData) {
              var appliedQuery = JSON.parse(JSON.stringify(res.appliedQuery));
              var currentData = JSON.stringify(appliedQuery) === JSON.stringify(this.appliedQuery) ? rawData || [] : [];
              if (!currentData.length) {
                this.appliedQuery = appliedQuery;
              } else {
                newData = newData.filter(function (newRecord) {
                  var notExits = true;
                  currentData.forEach(function (oldRecord) {
                    if (newRecord._id + "-" + newRecord._type === oldRecord._id + "-" + oldRecord._type) {
                      notExits = false;
                    }
                  });
                  return notExits;
                });
              }
              return {
                currentData: currentData,
                newData: newData
              };
            }
          }, {
            key: "combineCurrentData",
            value: function combineCurrentData(newData) {
              if (_lodash2.default.isArray(newData)) {
                return this.state.currentData.concat(newData);
              }
              return this.streamDataModify(this.state.currentData, newData);
            }
          }, {
            key: "initialize",
            value: function initialize() {
              var executeChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              this.createChannel(executeChannel);
            }
          }, {
            key: "removeChannel",
            value: function removeChannel() {
              if (this.channelId) {
                _ChannelManager2.default.stopStream(this.channelId);
                this.channelId = null;
              }
              if (this.channelListener) {
                this.channelListener.remove();
              }
              if (this.loadListener) {
                this.loadListener.remove();
              }
            }
          }, {
            key: "render",
            value: function render() {
              var title = null,
                placeholder = null;
              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-placeholder-active": this.props.placeholder,
                "rbc-placeholder-inactive": !this.props.placeholder,
                "rbc-stream-active": this.props.stream,
                "rbc-stream-inactive": !this.props.stream,
                "rbc-initialloader-active": this.props.initialLoader,
                "rbc-initialloader-inactive": !this.props.initialLoader,
                "rbc-resultstats-active": this.props.showResultStats,
                "rbc-resultstats-inactive": !this.props.showResultStats,
                "rbc-noresults-active": this.props.noResults,
                "rbc-noresults-inactive": !this.props.noResults
              });

              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }
              if (this.props.placeholder) {
                placeholder = _react2.default.createElement(
                  "div", { className: "rbc-placeholder col s12 col-xs-12" },
                  this.props.placeholder
                );
              }

              return _react2.default.createElement(
                "div", { className: "rbc-reactiveelement-container" },
                _react2.default.createElement(
                  "div", { className: "rbc rbc-reactiveelement card thumbnail " + cx, style: this.props.componentStyle },
                  title,
                  this.state.resultStats && this.state.resultStats.resultFound && this.props.showResultStats ? _react2.default.createElement(_ResultStats2.default, { onResultStats: this.props.onResultStats, took: this.state.resultStats.took, total: this.state.resultStats.total }) : null,
                  this.state.resultMarkup,
                  this.state.showPlaceholder ? placeholder : null
                ),
                this.props.noResults && this.state.visibleNoResults ? _react2.default.createElement(_NoResults2.default, { defaultText: this.props.noResults.text }) : null,
                this.props.initialLoader && this.state.queryStart ? _react2.default.createElement(_InitialLoader2.default, { defaultText: this.props.initialLoader.text }) : null,
                _react2.default.createElement(_PoweredBy2.default, { container: "rbc-reactiveelement-container" })
              );
            }
          }]);

          return ReactiveElement;
        }(_react.Component);

        exports.default = ReactiveElement;


        ReactiveElement.propTypes = {
          componentId: _react2.default.PropTypes.string,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          from: helper.validation.resultListFrom,
          onAllData: _react2.default.PropTypes.func,
          size: helper.sizeValidation,
          stream: _react2.default.PropTypes.bool,
          componentStyle: _react2.default.PropTypes.object,
          initialLoader: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          noResults: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          showResultStats: _react2.default.PropTypes.bool,
          onResultStats: _react2.default.PropTypes.func,
          react: _react2.default.PropTypes.object,
          placeholder: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element])
        };

        ReactiveElement.defaultProps = {
          from: 0,
          size: 20,
          stream: false,
          showResultStats: true,
          componentStyle: {}
        };

        // context type
        ReactiveElement.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          app: _react2.default.PropTypes.any.isRequired
        };

        ReactiveElement.types = {
          componentId: TYPES.STRING,
          title: TYPES.STRING,
          react: TYPES.OBJECT,
          from: TYPES.NUMBER,
          size: TYPES.NUMBER,
          onAllData: TYPES.FUNCTION,
          stream: TYPES.BOOLEAN,
          componentStyle: TYPES.OBJECT,
          initialLoader: TYPES.STRING,
          noResults: TYPES.STRING,
          showResultStats: TYPES.BOOLEAN,
          onResultStats: TYPES.FUNCTION,
          placeholder: TYPES.STRING
        };

        /***/
      }),
      /* 464 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _constants = __webpack_require__(81);

        var TYPES = _interopRequireWildcard(_constants);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
            newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var DataController = function (_Component) {
          _inherits(DataController, _Component);

          function DataController(props) {
            _classCallCheck(this, DataController);

            var _this = _possibleConstructorReturn(this, (DataController.__proto__ || Object.getPrototypeOf(DataController)).call(this, props));

            _this.type = "match";
            _this.value = "customValue";
            _this.urlParams = helper.URLParams.get(_this.props.componentId);
            return _this;
          }

          // Set query information


          _createClass(DataController, [{
            key: "componentWillMount",
            value: function componentWillMount() {
              this.setQueryInfo();
              this.checkDefault();
            }
          }, {
            key: "componentWillUpdate",
            value: function componentWillUpdate() {
              this.checkDefault();
            }
          }, {
            key: "checkDefault",
            value: function checkDefault() {
              this.defaultValue = this.urlParams !== null ? this.urlParams : this.props.defaultSelected;
              if (this.defaultValue && this.defaultSelected != this.defaultValue) {
                this.defaultSelected = this.defaultValue;
                setTimeout(this.setValue.bind(this, this.defaultSelected), 100);
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var valObj = {
                queryType: this.type,
                inputData: this.props.appbaseField,
                reactiveId: this.context.reactiveId,
                allowFilter: this.props.allowFilter,
                component: "DataController"
              };
              if (this.props.customQuery) {
                valObj.customQuery = this.props.customQuery;
              }
              var obj = {
                key: this.props.componentId,
                value: valObj
              };
              helper.selectedSensor.setSensorInfo(obj);
            }
          }, {
            key: "setValue",
            value: function setValue(value) {
              var obj = {
                key: this.props.componentId,
                value: value
              };
              if (this.props.onValueChange) {
                this.props.onValueChange(obj.value);
              }
              // pass the selected sensor value with componentId as key,
              var isExecuteQuery = true;
              helper.URLParams.update(this.props.componentId, value, this.props.URLParams);
              helper.selectedSensor.set(obj, isExecuteQuery);
            }

            // render

          }, {
            key: "render",
            value: function render() {
              var title = null,
                dataLabel = null;
              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title col s12 col-xs-12" },
                  this.props.title
                );
              }
              if (this.props.dataLabel) {
                dataLabel = _react2.default.createElement(
                  "span", { className: "rbc-datalabel col s12 col-xs-12" },
                  this.props.dataLabel
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-datalabel-active": this.props.dataLabel,
                "rbc-datalabel-inactive": !this.props.dataLabel,
                "rbc-visible-active": this.props.visible,
                "rbc-visible-inactive": !this.props.visible
              });

              return _react2.default.createElement(
                "div", { className: "rbc rbc-datacontroller card thumbnail " + cx, style: this.props.componentStyle },
                this.props.visible ? _react2.default.createElement(
                  "div",
                  null,
                  title,
                  dataLabel
                ) : null
              );
            }
          }]);

          return DataController;
        }(_react.Component);

        exports.default = DataController;


        DataController.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          visible: _react2.default.PropTypes.bool,
          dataLabel: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          customQuery: _react2.default.PropTypes.func,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          defaultSelected: _react2.default.PropTypes.any,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]);

        // Default props value
        DataController.defaultProps = {
          visible: false,
          defaultSelected: "default",
          componentStyle: {},
          URLParams: false,
          allowFilter: true
        };

        // context type
        DataController.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        DataController.types = {
          componentId: TYPES.STRING,
          appbaseField: TYPES.STRING,
          appbaseFieldType: TYPES.STRING,
          title: TYPES.STRING,
          visible: TYPES.BOOLEAN,
          dataLabel: TYPES.STRING,
          customQuery: TYPES.FUNCTION,
          componentStyle: TYPES.OBJECT,
          URLParams: TYPES.BOOLEAN,
          allowFilter: TYPES.BOOLEAN
        };

        /***/
      }),
      /* 465 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _lodash = __webpack_require__(69);

        var _lodash2 = _interopRequireDefault(_lodash);

        var _moment = __webpack_require__(277);

        var _moment2 = _interopRequireDefault(_moment);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var helper = __webpack_require__(65);

        var SelectedFilters = function (_Component) {
          _inherits(SelectedFilters, _Component);

          function SelectedFilters(props, context) {
            _classCallCheck(this, SelectedFilters);

            var _this = _possibleConstructorReturn(this, (SelectedFilters.__proto__ || Object.getPrototypeOf(SelectedFilters)).call(this, props));

            _this.state = {
              filters: {}
            };
            _this.blacklist = ["NumberBox", "RangeSlider"];
            return _this;
          }

          _createClass(SelectedFilters, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.listenChanges();
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.sensorListener) {
                this.sensorListener.remove();
              }
            }
          }, {
            key: "listenChanges",
            value: function listenChanges() {
              this.sensorListener = helper.sensorEmitter.addListener("sensorChange", this.updateSensors.bind(this));
            }
          }, {
            key: "updateSensors",
            value: function updateSensors(data) {
              var _this2 = this;

              var isanyChange = false;
              var filters = this.state.filters;
              Object.keys(data).forEach(function (item) {
                var selectedFilter = _this2.isSibling(item);
                if (selectedFilter) {
                  if (data[item] && (typeof data[item] === "string" ? data[item].trim() !== "" : true)) {
                    filters[item] = {
                      value: data[item],
                      component: selectedFilter.component
                    };
                  } else {
                    if (item in filters) {
                      delete filters[item];
                    }
                  }
                  isanyChange = true;
                }
              });
              if (!isanyChange) {
                filters = [];
              }
              this.setState({
                filters: filters
              });
            }
          }, {
            key: "isSibling",
            value: function isSibling(siblingComponentId) {
              var filter = null;
              var sensorInfo = helper.selectedSensor.get(siblingComponentId, "sensorInfo");
              if (sensorInfo && sensorInfo.allowFilter && sensorInfo.component && (sensorInfo.reactiveId === 0 || sensorInfo.reactiveId) && this.blacklist.indexOf(sensorInfo.component) < 0 && this.context.reactiveId === sensorInfo.reactiveId) {
                filter = {
                  component: sensorInfo.component
                };
              }
              return filter;
            }
          }, {
            key: "clearFilter",
            value: function clearFilter(item) {
              var filters = this.state.filters;
              delete filters[item];
              this.setState({
                filters: filters
              });
              helper.sensorEmitter.emit("clearFilter", item);
            }
          }, {
            key: "parseValue",
            value: function parseValue(item) {
              var value = item.value;
              if (item.component === "DatePicker") {
                value = (0, _moment2.default)(item.value).format("YYYY-MM-DD");
              } else if (item.component === "DateRange") {
                value = {
                  start: item.value.startDate ? (0, _moment2.default)(item.value.startDate).format("YYYY-MM-DD") : null,
                  end: item.value.endDate ? (0, _moment2.default)(item.value.endDate).format("YYYY-MM-DD") : null
                };
                value = JSON.stringify(value);
              } else if (item.component === "MultiDropdownRange" || item.component === "MultiRange" || item.component === "ToggleButton" || item.component === "ToggleList") {
                value = item.value.map(function (range) {
                  return range.label;
                });
                value = value.join(", ");
              } else if (item.component === "SingleRange" || item.component === "SingleDropdownRange" || item.component === "RatingsFilter") {
                value = item.value.label;
              } else if (item.component === "GeoDistanceSlider") {
                value = item.value.currentValue;
                if (value && item.value.currentDistance) {
                  value += " (" + item.value.currentDistance + ")";
                }
              } else if (item.component === "GeoDistanceDropdown") {
                value = item.value.currentValue;
                if (value && item.value.unit && item.value.end) {
                  value += " (" + item.value.start + item.value.unit + " - " + item.value.end + item.value.unit + ")";
                }
              } else if (item.component === "CategorySearch") {
                value = item && item.value && item.value.value ? item.value.value : null;
                if (item.value.category && value) {
                  value += " in " + item.value.category;
                }
              } else if (item.component === "PlacesSearch") {
                value = item.value.currentValue;
              } else if (item.component === "NestedList") {
                value = item.value.join(" > ");
              } else if (_lodash2.default.isArray(item.value)) {
                value = item.value.join(", ");
              } else if (_lodash2.default.isObject(item.value)) {
                value = JSON.stringify(item.value);
              }
              return value;
            }
          }, {
            key: "render",
            value: function render() {
              var _this3 = this;

              return Object.keys(this.state.filters).length ? _react2.default.createElement(
                "div", { className: "rbc rbc-selectedfilters rbc-tag-container row card thumbnail", style: this.props.componentStyle },
                Object.keys(this.state.filters).map(function (item) {
                  return _react2.default.createElement(
                    "span", { key: item, className: "rbc-tag-item col" },
                    _react2.default.createElement(
                      "button", {
                        className: "close",
                        onClick: function onClick() {
                          return _this3.clearFilter(item);
                        }
                      },
                      "x"
                    ),
                    _react2.default.createElement(
                      "span", { className: "rb-tag-text" },
                      _react2.default.createElement(
                        "strong",
                        null,
                        item
                      ),
                      " : ",
                      _this3.parseValue(_this3.state.filters[item])
                    )
                  );
                })
              ) : null;
            }
          }]);

          return SelectedFilters;
        }(_react.Component);

        exports.default = SelectedFilters;


        SelectedFilters.propTypes = {
          componentStyle: _react2.default.PropTypes.object,
          componentId: _react2.default.PropTypes.string.isRequired
        };

        SelectedFilters.defaultProps = {
          componentStyle: {}
        };

        // context type
        SelectedFilters.contextTypes = {
          reactiveId: _react2.default.PropTypes.number
        };

        /***/
      }),
      /* 466 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _ChannelManager = __webpack_require__(63);

        var _ChannelManager2 = _interopRequireDefault(_ChannelManager);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var Appbase = __webpack_require__(467);
        var helper = __webpack_require__(65);
        var _ = __webpack_require__(69);

        var ReactiveBase = function (_Component) {
          _inherits(ReactiveBase, _Component);

          function ReactiveBase(props, context) {
            _classCallCheck(this, ReactiveBase);

            var _this = _possibleConstructorReturn(this, (ReactiveBase.__proto__ || Object.getPrototypeOf(ReactiveBase)).call(this, props));

            _this.state = {};
            _this.type = _this.props.type ? _this.props.type : "*";
            _this.appbaseRef = new Appbase({
              url: _this.props.url,
              appname: _this.props.app,
              credentials: _this.props.credentials,
              type: _this.type
            });
            _this.appbaseCrdentials = {
              url: _this.props.url,
              credentials: _this.props.credentials,
              appname: _this.props.app,
              type: _this.type
            };
            _this.reactiveId = helper.RecactivebaseComponents.length;
            helper.RecactivebaseComponents[_this.reactiveId] = [];
            return _this;
          }

          _createClass(ReactiveBase, [{
            key: "componentWillMount",
            value: function componentWillMount() {
              this.setupComponents(this.props.children);
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              this.setupComponents(nextProps.children);
            }
          }, {
            key: "setupComponents",
            value: function setupComponents(children) {
              this.components = [];
              this.getComponents(children);
              helper.RecactivebaseComponents[this.reactiveId] = this.components;
            }
          }, {
            key: "getComponents",
            value: function getComponents(children) {
              var _this2 = this;

              children = _.isArray(children) ? children : [children];
              children.forEach(function (child) {
                if (child && child.props && child.props.componentId && child.props.allowFilter !== false) {
                  _this2.components.push({
                    component: child.type.name,
                    componentId: child.props.componentId
                  });
                }
                if (child && child.props && child.props.children) {
                  _this2.getComponents(child.props.children);
                }
              });
            }
          }, {
            key: "getChildContext",
            value: function getChildContext() {
              return {
                appbaseRef: this.appbaseRef,
                type: this.type,
                app: this.props.app,
                appbaseCrdentials: this.appbaseCrdentials,
                reactiveId: this.reactiveId
              };
            }
          }, {
            key: "render",
            value: function render() {
              return _react2.default.createElement(
                "section", { className: "rbc-base col s12 col-xs-12 " + this.props.theme, style: { padding: 0 } },
                this.props.children
              );
            }
          }]);

          return ReactiveBase;
        }(_react.Component);

        exports.default = ReactiveBase;


        ReactiveBase.propTypes = {
          app: _react2.default.PropTypes.string.isRequired,
          credentials: helper.reactiveBaseValidation,
          type: _react2.default.PropTypes.string,
          theme: _react2.default.PropTypes.string
        };

        // Default props value
        ReactiveBase.defaultProps = {
          theme: "rbc-blue"
        };

        ReactiveBase.childContextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          app: _react2.default.PropTypes.any,
          appbaseCrdentials: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        /***/
      }),
      /* 467 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var URL = __webpack_require__(468);

        var betterWs = __webpack_require__(474);
        var streamingRequest = __webpack_require__(477);
        var wsRequest = __webpack_require__(537);

        var indexService = __webpack_require__(539);
        var getService = __webpack_require__(541);
        var updateService = __webpack_require__(542);
        var deleteService = __webpack_require__(543);
        var bulkService = __webpack_require__(544);
        var searchService = __webpack_require__(545);
        var getTypesService = __webpack_require__(546);
        var addWebhookService = __webpack_require__(547);

        var streamDocumentService = __webpack_require__(552);
        var streamSearchService = __webpack_require__(553);

        var appbaseClient = function appbaseClient(args) {
          if (!(this instanceof appbaseClient)) {
            return new appbaseClient(args);
          }

          if (typeof args.url !== 'string' || args.url === '') {
            throw new Error('URL not present in options.');
          }

          var parsedUrl = URL.parse(args.url);

          this.url = parsedUrl.host;
          this.protocol = parsedUrl.protocol;
          this.credentials = parsedUrl.auth;
          this.appname = args.appname || args.app;

          if (typeof this.appname !== 'string' || this.appname === '') {
            throw new Error('App name is not present in options.');
          }

          if (typeof this.protocol !== 'string' || this.protocol === '') {
            throw new Error('Protocol is not present in url. URL should be of the form https://scalr.api.appbase.io');
          }

          if (typeof args.username === 'string' && args.username !== '' && typeof args.password === 'string' && args.password !== '') {
            this.credentials = args.username + ':' + args.password;
          }

          // credentials can be provided as a part of the URL, as username, password args or
          // as a credentials argument directly
          if (typeof args.credentials === 'string' && args.credentials !== '') {
            this.credentials = args.credentials;
          }

          if (typeof this.credentials !== 'string' || this.credentials === '') {
            throw new Error('Authentication information is not present. Did you add credentials?');
          }

          if (parsedUrl.protocol === 'https:') {
            this.ws = new betterWs('wss://' + parsedUrl.host + '/' + this.appname);
          } else {
            this.ws = new betterWs('ws://' + parsedUrl.host + '/' + this.appname);
          }

          if (this.url.slice(-1) === "/") {
            this.url = this.url.slice(0, -1);
          }

          var client = {};

          client.index = this.index.bind(this);
          client.get = this.get.bind(this);
          client.update = this.update.bind(this);
          client['delete'] = this['delete'].bind(this);
          client.bulk = this.bulk.bind(this);
          client.search = this.search.bind(this);
          client.getStream = this.getStream.bind(this);
          client.searchStream = this.searchStream.bind(this);
          client.searchStreamToURL = this.searchStreamToURL.bind(this);
          client.getTypes = this.getTypes.bind(this);

          return client;
        };

        appbaseClient.prototype.performWsRequest = function performWsRequest(args) {
          return new wsRequest(this, JSON.parse(JSON.stringify(args)));
        };

        appbaseClient.prototype.performStreamingRequest = function performStreamingRequest(args) {
          return new streamingRequest(this, JSON.parse(JSON.stringify(args)));
        };

        appbaseClient.prototype.index = function index(args) {
          return new indexService(this, JSON.parse(JSON.stringify(args)));
        };

        appbaseClient.prototype.get = function get(args) {
          return new getService(this, JSON.parse(JSON.stringify(args)));
        };

        appbaseClient.prototype.update = function update(args) {
          return new updateService(this, JSON.parse(JSON.stringify(args)));
        };

        appbaseClient.prototype['delete'] = function deleteDocument(args) {
          return new deleteService(this, JSON.parse(JSON.stringify(args)));
        };

        appbaseClient.prototype.bulk = function bulk(args) {
          return new bulkService(this, JSON.parse(JSON.stringify(args)));
        };

        appbaseClient.prototype.search = function search(args) {
          return new searchService(this, JSON.parse(JSON.stringify(args)));
        };

        appbaseClient.prototype.getStream = function getStream(args) {
          return new streamDocumentService(this, JSON.parse(JSON.stringify(args)));
        };

        appbaseClient.prototype.searchStream = function searchStream(args) {
          return new streamSearchService(this, JSON.parse(JSON.stringify(args)));
        };

        appbaseClient.prototype.searchStreamToURL = function searchStreamToURL(args, webhook) {
          return new addWebhookService(this, JSON.parse(JSON.stringify(args)), JSON.parse(JSON.stringify(webhook)));
        };

        appbaseClient.prototype.getTypes = function getTypes() {
          return new getTypesService(this);
        };

        if (typeof window !== 'undefined') {
          window.Appbase = appbaseClient;
        }

        module.exports = appbaseClient;


        /***/
      }),
      /* 468 */
      /***/
      (function (module, exports, __webpack_require__) {

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        'use strict';

        var punycode = __webpack_require__(469);
        var util = __webpack_require__(470);

        exports.parse = urlParse;
        exports.resolve = urlResolve;
        exports.resolveObject = urlResolveObject;
        exports.format = urlFormat;

        exports.Url = Url;

        function Url() {
          this.protocol = null;
          this.slashes = null;
          this.auth = null;
          this.host = null;
          this.port = null;
          this.hostname = null;
          this.hash = null;
          this.search = null;
          this.query = null;
          this.pathname = null;
          this.path = null;
          this.href = null;
        }

        // Reference: RFC 3986, RFC 1808, RFC 2396

        // define these here so at least they only have to be
        // compiled once on the first module load.
        var protocolPattern = /^([a-z0-9.+-]+:)/i,
          portPattern = /:[0-9]*$/,

          // Special case for a simple path URL
          simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

          // RFC 2396: characters reserved for delimiting URLs.
          // We actually just auto-escape these.
          delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

          // RFC 2396: characters not allowed for various reasons.
          unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

          // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
          autoEscape = ['\''].concat(unwise),
          // Characters that are never ever allowed in a hostname.
          // Note that any invalid chars are also handled, but these
          // are the ones that are *expected* to be seen, so we fast-path
          // them.
          nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
          hostEndingChars = ['/', '?', '#'],
          hostnameMaxLen = 255,
          hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
          hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
          // protocols that can allow "unsafe" and "unwise" chars.
          unsafeProtocol = {
            'javascript': true,
            'javascript:': true
          },
          // protocols that never have a hostname.
          hostlessProtocol = {
            'javascript': true,
            'javascript:': true
          },
          // protocols that always contain a // bit.
          slashedProtocol = {
            'http': true,
            'https': true,
            'ftp': true,
            'gopher': true,
            'file': true,
            'http:': true,
            'https:': true,
            'ftp:': true,
            'gopher:': true,
            'file:': true
          },
          querystring = __webpack_require__(471);

        function urlParse(url, parseQueryString, slashesDenoteHost) {
          if (url && util.isObject(url) && url instanceof Url) return url;

          var u = new Url;
          u.parse(url, parseQueryString, slashesDenoteHost);
          return u;
        }

        Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
          if (!util.isString(url)) {
            throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
          }

          // Copy chrome, IE, opera backslash-handling behavior.
          // Back slashes before the query string get converted to forward slashes
          // See: https://code.google.com/p/chromium/issues/detail?id=25916
          var queryIndex = url.indexOf('?'),
            splitter =
            (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
            uSplit = url.split(splitter),
            slashRegex = /\\/g;
          uSplit[0] = uSplit[0].replace(slashRegex, '/');
          url = uSplit.join(splitter);

          var rest = url;

          // trim before proceeding.
          // This is to support parse stuff like "  http://foo.com  \n"
          rest = rest.trim();

          if (!slashesDenoteHost && url.split('#').length === 1) {
            // Try fast path regexp
            var simplePath = simplePathPattern.exec(rest);
            if (simplePath) {
              this.path = rest;
              this.href = rest;
              this.pathname = simplePath[1];
              if (simplePath[2]) {
                this.search = simplePath[2];
                if (parseQueryString) {
                  this.query = querystring.parse(this.search.substr(1));
                } else {
                  this.query = this.search.substr(1);
                }
              } else if (parseQueryString) {
                this.search = '';
                this.query = {};
              }
              return this;
            }
          }

          var proto = protocolPattern.exec(rest);
          if (proto) {
            proto = proto[0];
            var lowerProto = proto.toLowerCase();
            this.protocol = lowerProto;
            rest = rest.substr(proto.length);
          }

          // figure out if it's got a host
          // user@server is *always* interpreted as a hostname, and url
          // resolution will treat //foo/bar as host=foo,path=bar because that's
          // how the browser resolves relative URLs.
          if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
            var slashes = rest.substr(0, 2) === '//';
            if (slashes && !(proto && hostlessProtocol[proto])) {
              rest = rest.substr(2);
              this.slashes = true;
            }
          }

          if (!hostlessProtocol[proto] &&
            (slashes || (proto && !slashedProtocol[proto]))) {

            // there's a hostname.
            // the first instance of /, ?, ;, or # ends the host.
            //
            // If there is an @ in the hostname, then non-host chars *are* allowed
            // to the left of the last @ sign, unless some host-ending character
            // comes *before* the @-sign.
            // URLs are obnoxious.
            //
            // ex:
            // http://a@b@c/ => user:a@b host:c
            // http://a@b?@c => user:a host:c path:/?@c

            // v0.12 TODO(isaacs): This is not quite how Chrome does things.
            // Review our test case against browsers more comprehensively.

            // find the first instance of any hostEndingChars
            var hostEnd = -1;
            for (var i = 0; i < hostEndingChars.length; i++) {
              var hec = rest.indexOf(hostEndingChars[i]);
              if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                hostEnd = hec;
            }

            // at this point, either we have an explicit point where the
            // auth portion cannot go past, or the last @ char is the decider.
            var auth, atSign;
            if (hostEnd === -1) {
              // atSign can be anywhere.
              atSign = rest.lastIndexOf('@');
            } else {
              // atSign must be in auth portion.
              // http://a@b/c@d => host:b auth:a path:/c@d
              atSign = rest.lastIndexOf('@', hostEnd);
            }

            // Now we have a portion which is definitely the auth.
            // Pull that off.
            if (atSign !== -1) {
              auth = rest.slice(0, atSign);
              rest = rest.slice(atSign + 1);
              this.auth = decodeURIComponent(auth);
            }

            // the host is the remaining to the left of the first non-host char
            hostEnd = -1;
            for (var i = 0; i < nonHostChars.length; i++) {
              var hec = rest.indexOf(nonHostChars[i]);
              if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                hostEnd = hec;
            }
            // if we still have not hit it, then the entire thing is a host.
            if (hostEnd === -1)
              hostEnd = rest.length;

            this.host = rest.slice(0, hostEnd);
            rest = rest.slice(hostEnd);

            // pull out port.
            this.parseHost();

            // we've indicated that there is a hostname,
            // so even if it's empty, it has to be present.
            this.hostname = this.hostname || '';

            // if hostname begins with [ and ends with ]
            // assume that it's an IPv6 address.
            var ipv6Hostname = this.hostname[0] === '[' &&
              this.hostname[this.hostname.length - 1] === ']';

            // validate a little.
            if (!ipv6Hostname) {
              var hostparts = this.hostname.split(/\./);
              for (var i = 0, l = hostparts.length; i < l; i++) {
                var part = hostparts[i];
                if (!part) continue;
                if (!part.match(hostnamePartPattern)) {
                  var newpart = '';
                  for (var j = 0, k = part.length; j < k; j++) {
                    if (part.charCodeAt(j) > 127) {
                      // we replace non-ASCII char with a temporary placeholder
                      // we need this to make sure size of hostname is not
                      // broken by replacing non-ASCII by nothing
                      newpart += 'x';
                    } else {
                      newpart += part[j];
                    }
                  }
                  // we test again with ASCII char only
                  if (!newpart.match(hostnamePartPattern)) {
                    var validParts = hostparts.slice(0, i);
                    var notHost = hostparts.slice(i + 1);
                    var bit = part.match(hostnamePartStart);
                    if (bit) {
                      validParts.push(bit[1]);
                      notHost.unshift(bit[2]);
                    }
                    if (notHost.length) {
                      rest = '/' + notHost.join('.') + rest;
                    }
                    this.hostname = validParts.join('.');
                    break;
                  }
                }
              }
            }

            if (this.hostname.length > hostnameMaxLen) {
              this.hostname = '';
            } else {
              // hostnames are always lower case.
              this.hostname = this.hostname.toLowerCase();
            }

            if (!ipv6Hostname) {
              // IDNA Support: Returns a punycoded representation of "domain".
              // It only converts parts of the domain name that
              // have non-ASCII characters, i.e. it doesn't matter if
              // you call it with a domain that already is ASCII-only.
              this.hostname = punycode.toASCII(this.hostname);
            }

            var p = this.port ? ':' + this.port : '';
            var h = this.hostname || '';
            this.host = h + p;
            this.href += this.host;

            // strip [ and ] from the hostname
            // the host field still retains them, though
            if (ipv6Hostname) {
              this.hostname = this.hostname.substr(1, this.hostname.length - 2);
              if (rest[0] !== '/') {
                rest = '/' + rest;
              }
            }
          }

          // now rest is set to the post-host stuff.
          // chop off any delim chars.
          if (!unsafeProtocol[lowerProto]) {

            // First, make 100% sure that any "autoEscape" chars get
            // escaped, even if encodeURIComponent doesn't think they
            // need to be.
            for (var i = 0, l = autoEscape.length; i < l; i++) {
              var ae = autoEscape[i];
              if (rest.indexOf(ae) === -1)
                continue;
              var esc = encodeURIComponent(ae);
              if (esc === ae) {
                esc = escape(ae);
              }
              rest = rest.split(ae).join(esc);
            }
          }


          // chop off from the tail first.
          var hash = rest.indexOf('#');
          if (hash !== -1) {
            // got a fragment string.
            this.hash = rest.substr(hash);
            rest = rest.slice(0, hash);
          }
          var qm = rest.indexOf('?');
          if (qm !== -1) {
            this.search = rest.substr(qm);
            this.query = rest.substr(qm + 1);
            if (parseQueryString) {
              this.query = querystring.parse(this.query);
            }
            rest = rest.slice(0, qm);
          } else if (parseQueryString) {
            // no query string, but parseQueryString still requested
            this.search = '';
            this.query = {};
          }
          if (rest) this.pathname = rest;
          if (slashedProtocol[lowerProto] &&
            this.hostname && !this.pathname) {
            this.pathname = '/';
          }

          //to support http.request
          if (this.pathname || this.search) {
            var p = this.pathname || '';
            var s = this.search || '';
            this.path = p + s;
          }

          // finally, reconstruct the href based on what has been validated.
          this.href = this.format();
          return this;
        };

        // format a parsed object into a url string
        function urlFormat(obj) {
          // ensure it's an object, and not a string url.
          // If it's an obj, this is a no-op.
          // this way, you can call url_format() on strings
          // to clean up potentially wonky urls.
          if (util.isString(obj)) obj = urlParse(obj);
          if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
          return obj.format();
        }

        Url.prototype.format = function () {
          var auth = this.auth || '';
          if (auth) {
            auth = encodeURIComponent(auth);
            auth = auth.replace(/%3A/i, ':');
            auth += '@';
          }

          var protocol = this.protocol || '',
            pathname = this.pathname || '',
            hash = this.hash || '',
            host = false,
            query = '';

          if (this.host) {
            host = auth + this.host;
          } else if (this.hostname) {
            host = auth + (this.hostname.indexOf(':') === -1 ?
              this.hostname :
              '[' + this.hostname + ']');
            if (this.port) {
              host += ':' + this.port;
            }
          }

          if (this.query &&
            util.isObject(this.query) &&
            Object.keys(this.query).length) {
            query = querystring.stringify(this.query);
          }

          var search = this.search || (query && ('?' + query)) || '';

          if (protocol && protocol.substr(-1) !== ':') protocol += ':';

          // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
          // unless they had them to begin with.
          if (this.slashes ||
            (!protocol || slashedProtocol[protocol]) && host !== false) {
            host = '//' + (host || '');
            if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
          } else if (!host) {
            host = '';
          }

          if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
          if (search && search.charAt(0) !== '?') search = '?' + search;

          pathname = pathname.replace(/[?#]/g, function (match) {
            return encodeURIComponent(match);
          });
          search = search.replace('#', '%23');

          return protocol + host + pathname + search + hash;
        };

        function urlResolve(source, relative) {
          return urlParse(source, false, true).resolve(relative);
        }

        Url.prototype.resolve = function (relative) {
          return this.resolveObject(urlParse(relative, false, true)).format();
        };

        function urlResolveObject(source, relative) {
          if (!source) return relative;
          return urlParse(source, false, true).resolveObject(relative);
        }

        Url.prototype.resolveObject = function (relative) {
          if (util.isString(relative)) {
            var rel = new Url();
            rel.parse(relative, false, true);
            relative = rel;
          }

          var result = new Url();
          var tkeys = Object.keys(this);
          for (var tk = 0; tk < tkeys.length; tk++) {
            var tkey = tkeys[tk];
            result[tkey] = this[tkey];
          }

          // hash is always overridden, no matter what.
          // even href="" will remove it.
          result.hash = relative.hash;

          // if the relative url is empty, then there's nothing left to do here.
          if (relative.href === '') {
            result.href = result.format();
            return result;
          }

          // hrefs like //foo/bar always cut to the protocol.
          if (relative.slashes && !relative.protocol) {
            // take everything except the protocol from relative
            var rkeys = Object.keys(relative);
            for (var rk = 0; rk < rkeys.length; rk++) {
              var rkey = rkeys[rk];
              if (rkey !== 'protocol')
                result[rkey] = relative[rkey];
            }

            //urlParse appends trailing / to urls like http://www.example.com
            if (slashedProtocol[result.protocol] &&
              result.hostname && !result.pathname) {
              result.path = result.pathname = '/';
            }

            result.href = result.format();
            return result;
          }

          if (relative.protocol && relative.protocol !== result.protocol) {
            // if it's a known url protocol, then changing
            // the protocol does weird things
            // first, if it's not file:, then we MUST have a host,
            // and if there was a path
            // to begin with, then we MUST have a path.
            // if it is file:, then the host is dropped,
            // because that's known to be hostless.
            // anything else is assumed to be absolute.
            if (!slashedProtocol[relative.protocol]) {
              var keys = Object.keys(relative);
              for (var v = 0; v < keys.length; v++) {
                var k = keys[v];
                result[k] = relative[k];
              }
              result.href = result.format();
              return result;
            }

            result.protocol = relative.protocol;
            if (!relative.host && !hostlessProtocol[relative.protocol]) {
              var relPath = (relative.pathname || '').split('/');
              while (relPath.length && !(relative.host = relPath.shift()));
              if (!relative.host) relative.host = '';
              if (!relative.hostname) relative.hostname = '';
              if (relPath[0] !== '') relPath.unshift('');
              if (relPath.length < 2) relPath.unshift('');
              result.pathname = relPath.join('/');
            } else {
              result.pathname = relative.pathname;
            }
            result.search = relative.search;
            result.query = relative.query;
            result.host = relative.host || '';
            result.auth = relative.auth;
            result.hostname = relative.hostname || relative.host;
            result.port = relative.port;
            // to support http.request
            if (result.pathname || result.search) {
              var p = result.pathname || '';
              var s = result.search || '';
              result.path = p + s;
            }
            result.slashes = result.slashes || relative.slashes;
            result.href = result.format();
            return result;
          }

          var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
            isRelAbs = (
              relative.host ||
              relative.pathname && relative.pathname.charAt(0) === '/'
            ),
            mustEndAbs = (isRelAbs || isSourceAbs ||
              (result.host && relative.pathname)),
            removeAllDots = mustEndAbs,
            srcPath = result.pathname && result.pathname.split('/') || [],
            relPath = relative.pathname && relative.pathname.split('/') || [],
            psychotic = result.protocol && !slashedProtocol[result.protocol];

          // if the url is a non-slashed url, then relative
          // links like ../.. should be able
          // to crawl up to the hostname, as well.  This is strange.
          // result.protocol has already been set by now.
          // Later on, put the first path part into the host field.
          if (psychotic) {
            result.hostname = '';
            result.port = null;
            if (result.host) {
              if (srcPath[0] === '') srcPath[0] = result.host;
              else srcPath.unshift(result.host);
            }
            result.host = '';
            if (relative.protocol) {
              relative.hostname = null;
              relative.port = null;
              if (relative.host) {
                if (relPath[0] === '') relPath[0] = relative.host;
                else relPath.unshift(relative.host);
              }
              relative.host = null;
            }
            mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
          }

          if (isRelAbs) {
            // it's absolute.
            result.host = (relative.host || relative.host === '') ?
              relative.host : result.host;
            result.hostname = (relative.hostname || relative.hostname === '') ?
              relative.hostname : result.hostname;
            result.search = relative.search;
            result.query = relative.query;
            srcPath = relPath;
            // fall through to the dot-handling below.
          } else if (relPath.length) {
            // it's relative
            // throw away the existing file, and take the new path instead.
            if (!srcPath) srcPath = [];
            srcPath.pop();
            srcPath = srcPath.concat(relPath);
            result.search = relative.search;
            result.query = relative.query;
          } else if (!util.isNullOrUndefined(relative.search)) {
            // just pull out the search.
            // like href='?foo'.
            // Put this after the other two cases because it simplifies the booleans
            if (psychotic) {
              result.hostname = result.host = srcPath.shift();
              //occationaly the auth can get stuck only in host
              //this especially happens in cases like
              //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
              var authInHost = result.host && result.host.indexOf('@') > 0 ?
                result.host.split('@') : false;
              if (authInHost) {
                result.auth = authInHost.shift();
                result.host = result.hostname = authInHost.shift();
              }
            }
            result.search = relative.search;
            result.query = relative.query;
            //to support http.request
            if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
              result.path = (result.pathname ? result.pathname : '') +
                (result.search ? result.search : '');
            }
            result.href = result.format();
            return result;
          }

          if (!srcPath.length) {
            // no path at all.  easy.
            // we've already handled the other stuff above.
            result.pathname = null;
            //to support http.request
            if (result.search) {
              result.path = '/' + result.search;
            } else {
              result.path = null;
            }
            result.href = result.format();
            return result;
          }

          // if a url ENDs in . or .., then it must get a trailing slash.
          // however, if it ends in anything else non-slashy,
          // then it must NOT get a trailing slash.
          var last = srcPath.slice(-1)[0];
          var hasTrailingSlash = (
            (result.host || relative.host || srcPath.length > 1) &&
            (last === '.' || last === '..') || last === '');

          // strip single dots, resolve double dots to parent dir
          // if the path tries to go above the root, `up` ends up > 0
          var up = 0;
          for (var i = srcPath.length; i >= 0; i--) {
            last = srcPath[i];
            if (last === '.') {
              srcPath.splice(i, 1);
            } else if (last === '..') {
              srcPath.splice(i, 1);
              up++;
            } else if (up) {
              srcPath.splice(i, 1);
              up--;
            }
          }

          // if the path is allowed to go above the root, restore leading ..s
          if (!mustEndAbs && !removeAllDots) {
            for (; up--; up) {
              srcPath.unshift('..');
            }
          }

          if (mustEndAbs && srcPath[0] !== '' &&
            (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
            srcPath.unshift('');
          }

          if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
            srcPath.push('');
          }

          var isAbsolute = srcPath[0] === '' ||
            (srcPath[0] && srcPath[0].charAt(0) === '/');

          // put the host back
          if (psychotic) {
            result.hostname = result.host = isAbsolute ? '' :
              srcPath.length ? srcPath.shift() : '';
            //occationaly the auth can get stuck only in host
            //this especially happens in cases like
            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
            var authInHost = result.host && result.host.indexOf('@') > 0 ?
              result.host.split('@') : false;
            if (authInHost) {
              result.auth = authInHost.shift();
              result.host = result.hostname = authInHost.shift();
            }
          }

          mustEndAbs = mustEndAbs || (result.host && srcPath.length);

          if (mustEndAbs && !isAbsolute) {
            srcPath.unshift('');
          }

          if (!srcPath.length) {
            result.pathname = null;
            result.path = null;
          } else {
            result.pathname = srcPath.join('/');
          }

          //to support request.http
          if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
            result.path = (result.pathname ? result.pathname : '') +
              (result.search ? result.search : '');
          }
          result.auth = relative.auth || result.auth;
          result.slashes = result.slashes || relative.slashes;
          result.href = result.format();
          return result;
        };

        Url.prototype.parseHost = function () {
          var host = this.host;
          var port = portPattern.exec(host);
          if (port) {
            port = port[0];
            if (port !== ':') {
              this.port = port.substr(1);
            }
            host = host.substr(0, host.length - port.length);
          }
          if (host) this.hostname = host;
        };


        /***/
      }),
      /* 469 */
      /***/
      (function (module, exports, __webpack_require__) {

        var __WEBPACK_AMD_DEFINE_RESULT__; /* WEBPACK VAR INJECTION */
        (function (module, global) { /*! https://mths.be/punycode v1.3.2 by @mathias */ ;
          (function (root) {

            /** Detect free variables */
            var freeExports = typeof exports == 'object' && exports &&
              !exports.nodeType && exports;
            var freeModule = typeof module == 'object' && module &&
              !module.nodeType && module;
            var freeGlobal = typeof global == 'object' && global;
            if (
              freeGlobal.global === freeGlobal ||
              freeGlobal.window === freeGlobal ||
              freeGlobal.self === freeGlobal
            ) {
              root = freeGlobal;
            }

            /**
             * The `punycode` object.
             * @name punycode
             * @type Object
             */
            var punycode,

              /** Highest positive signed 32-bit float value */
              maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

              /** Bootstring parameters */
              base = 36,
              tMin = 1,
              tMax = 26,
              skew = 38,
              damp = 700,
              initialBias = 72,
              initialN = 128, // 0x80
              delimiter = '-', // '\x2D'

              /** Regular expressions */
              regexPunycode = /^xn--/,
              regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
              regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

              /** Error messages */
              errors = {
                'overflow': 'Overflow: input needs wider integers to process',
                'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
                'invalid-input': 'Invalid input'
              },

              /** Convenience shortcuts */
              baseMinusTMin = base - tMin,
              floor = Math.floor,
              stringFromCharCode = String.fromCharCode,

              /** Temporary variable */
              key;

            /*--------------------------------------------------------------------------*/

            /**
             * A generic error utility function.
             * @private
             * @param {String} type The error type.
             * @returns {Error} Throws a `RangeError` with the applicable error message.
             */
            function error(type) {
              throw RangeError(errors[type]);
            }

            /**
             * A generic `Array#map` utility function.
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} callback The function that gets called for every array
             * item.
             * @returns {Array} A new array of values returned by the callback function.
             */
            function map(array, fn) {
              var length = array.length;
              var result = [];
              while (length--) {
                result[length] = fn(array[length]);
              }
              return result;
            }

            /**
             * A simple `Array#map`-like wrapper to work with domain name strings or email
             * addresses.
             * @private
             * @param {String} domain The domain name or email address.
             * @param {Function} callback The function that gets called for every
             * character.
             * @returns {Array} A new string of characters returned by the callback
             * function.
             */
            function mapDomain(string, fn) {
              var parts = string.split('@');
              var result = '';
              if (parts.length > 1) {
                // In email addresses, only the domain name should be punycoded. Leave
                // the local part (i.e. everything up to `@`) intact.
                result = parts[0] + '@';
                string = parts[1];
              }
              // Avoid `split(regex)` for IE8 compatibility. See #17.
              string = string.replace(regexSeparators, '\x2E');
              var labels = string.split('.');
              var encoded = map(labels, fn).join('.');
              return result + encoded;
            }

            /**
             * Creates an array containing the numeric code points of each Unicode
             * character in the string. While JavaScript uses UCS-2 internally,
             * this function will convert a pair of surrogate halves (each of which
             * UCS-2 exposes as separate characters) into a single code point,
             * matching UTF-16.
             * @see `punycode.ucs2.encode`
             * @see <https://mathiasbynens.be/notes/javascript-encoding>
             * @memberOf punycode.ucs2
             * @name decode
             * @param {String} string The Unicode input string (UCS-2).
             * @returns {Array} The new array of code points.
             */
            function ucs2decode(string) {
              var output = [],
                counter = 0,
                length = string.length,
                value,
                extra;
              while (counter < length) {
                value = string.charCodeAt(counter++);
                if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                  // high surrogate, and there is a next character
                  extra = string.charCodeAt(counter++);
                  if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                  } else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                  }
                } else {
                  output.push(value);
                }
              }
              return output;
            }

            /**
             * Creates a string based on an array of numeric code points.
             * @see `punycode.ucs2.decode`
             * @memberOf punycode.ucs2
             * @name encode
             * @param {Array} codePoints The array of numeric code points.
             * @returns {String} The new Unicode string (UCS-2).
             */
            function ucs2encode(array) {
              return map(array, function (value) {
                var output = '';
                if (value > 0xFFFF) {
                  value -= 0x10000;
                  output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                  value = 0xDC00 | value & 0x3FF;
                }
                output += stringFromCharCode(value);
                return output;
              }).join('');
            }

            /**
             * Converts a basic code point into a digit/integer.
             * @see `digitToBasic()`
             * @private
             * @param {Number} codePoint The basic numeric code point value.
             * @returns {Number} The numeric value of a basic code point (for use in
             * representing integers) in the range `0` to `base - 1`, or `base` if
             * the code point does not represent a value.
             */
            function basicToDigit(codePoint) {
              if (codePoint - 48 < 10) {
                return codePoint - 22;
              }
              if (codePoint - 65 < 26) {
                return codePoint - 65;
              }
              if (codePoint - 97 < 26) {
                return codePoint - 97;
              }
              return base;
            }

            /**
             * Converts a digit/integer into a basic code point.
             * @see `basicToDigit()`
             * @private
             * @param {Number} digit The numeric value of a basic code point.
             * @returns {Number} The basic code point whose value (when used for
             * representing integers) is `digit`, which needs to be in the range
             * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
             * used; else, the lowercase form is used. The behavior is undefined
             * if `flag` is non-zero and `digit` has no uppercase form.
             */
            function digitToBasic(digit, flag) {
              //  0..25 map to ASCII a..z or A..Z
              // 26..35 map to ASCII 0..9
              return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
            }

            /**
             * Bias adaptation function as per section 3.4 of RFC 3492.
             * http://tools.ietf.org/html/rfc3492#section-3.4
             * @private
             */
            function adapt(delta, numPoints, firstTime) {
              var k = 0;
              delta = firstTime ? floor(delta / damp) : delta >> 1;
              delta += floor(delta / numPoints);
              for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {
                delta = floor(delta / baseMinusTMin);
              }
              return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
            }

            /**
             * Converts a Punycode string of ASCII-only symbols to a string of Unicode
             * symbols.
             * @memberOf punycode
             * @param {String} input The Punycode string of ASCII-only symbols.
             * @returns {String} The resulting string of Unicode symbols.
             */
            function decode(input) {
              // Don't use UCS-2
              var output = [],
                inputLength = input.length,
                out,
                i = 0,
                n = initialN,
                bias = initialBias,
                basic,
                j,
                index,
                oldi,
                w,
                k,
                digit,
                t,
                /** Cached calculation results */
                baseMinusT;

              // Handle the basic code points: let `basic` be the number of input code
              // points before the last delimiter, or `0` if there is none, then copy
              // the first basic code points to the output.

              basic = input.lastIndexOf(delimiter);
              if (basic < 0) {
                basic = 0;
              }

              for (j = 0; j < basic; ++j) {
                // if it's not a basic code point
                if (input.charCodeAt(j) >= 0x80) {
                  error('not-basic');
                }
                output.push(input.charCodeAt(j));
              }

              // Main decoding loop: start just after the last delimiter if any basic code
              // points were copied; start at the beginning otherwise.

              for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */ ) {

                // `index` is the index of the next character to be consumed.
                // Decode a generalized variable-length integer into `delta`,
                // which gets added to `i`. The overflow checking is easier
                // if we increase `i` as we go, then subtract off its starting
                // value at the end to obtain `delta`.
                for (oldi = i, w = 1, k = base; /* no condition */ ; k += base) {

                  if (index >= inputLength) {
                    error('invalid-input');
                  }

                  digit = basicToDigit(input.charCodeAt(index++));

                  if (digit >= base || digit > floor((maxInt - i) / w)) {
                    error('overflow');
                  }

                  i += digit * w;
                  t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

                  if (digit < t) {
                    break;
                  }

                  baseMinusT = base - t;
                  if (w > floor(maxInt / baseMinusT)) {
                    error('overflow');
                  }

                  w *= baseMinusT;

                }

                out = output.length + 1;
                bias = adapt(i - oldi, out, oldi == 0);

                // `i` was supposed to wrap around from `out` to `0`,
                // incrementing `n` each time, so we'll fix that now:
                if (floor(i / out) > maxInt - n) {
                  error('overflow');
                }

                n += floor(i / out);
                i %= out;

                // Insert `n` at position `i` of the output
                output.splice(i++, 0, n);

              }

              return ucs2encode(output);
            }

            /**
             * Converts a string of Unicode symbols (e.g. a domain name label) to a
             * Punycode string of ASCII-only symbols.
             * @memberOf punycode
             * @param {String} input The string of Unicode symbols.
             * @returns {String} The resulting Punycode string of ASCII-only symbols.
             */
            function encode(input) {
              var n,
                delta,
                handledCPCount,
                basicLength,
                bias,
                j,
                m,
                q,
                k,
                t,
                currentValue,
                output = [],
                /** `inputLength` will hold the number of code points in `input`. */
                inputLength,
                /** Cached calculation results */
                handledCPCountPlusOne,
                baseMinusT,
                qMinusT;

              // Convert the input in UCS-2 to Unicode
              input = ucs2decode(input);

              // Cache the length
              inputLength = input.length;

              // Initialize the state
              n = initialN;
              delta = 0;
              bias = initialBias;

              // Handle the basic code points
              for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];
                if (currentValue < 0x80) {
                  output.push(stringFromCharCode(currentValue));
                }
              }

              handledCPCount = basicLength = output.length;

              // `handledCPCount` is the number of code points that have been handled;
              // `basicLength` is the number of basic code points.

              // Finish the basic string - if it is not empty - with a delimiter
              if (basicLength) {
                output.push(delimiter);
              }

              // Main encoding loop:
              while (handledCPCount < inputLength) {

                // All non-basic code points < n have been handled already. Find the next
                // larger one:
                for (m = maxInt, j = 0; j < inputLength; ++j) {
                  currentValue = input[j];
                  if (currentValue >= n && currentValue < m) {
                    m = currentValue;
                  }
                }

                // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                // but guard against overflow
                handledCPCountPlusOne = handledCPCount + 1;
                if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                  error('overflow');
                }

                delta += (m - n) * handledCPCountPlusOne;
                n = m;

                for (j = 0; j < inputLength; ++j) {
                  currentValue = input[j];

                  if (currentValue < n && ++delta > maxInt) {
                    error('overflow');
                  }

                  if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for (q = delta, k = base; /* no condition */ ; k += base) {
                      t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                      if (q < t) {
                        break;
                      }
                      qMinusT = q - t;
                      baseMinusT = base - t;
                      output.push(
                        stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                      );
                      q = floor(qMinusT / baseMinusT);
                    }

                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                  }
                }

                ++delta;
                ++n;

              }
              return output.join('');
            }

            /**
             * Converts a Punycode string representing a domain name or an email address
             * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
             * it doesn't matter if you call it on a string that has already been
             * converted to Unicode.
             * @memberOf punycode
             * @param {String} input The Punycoded domain name or email address to
             * convert to Unicode.
             * @returns {String} The Unicode representation of the given Punycode
             * string.
             */
            function toUnicode(input) {
              return mapDomain(input, function (string) {
                return regexPunycode.test(string) ?
                  decode(string.slice(4).toLowerCase()) :
                  string;
              });
            }

            /**
             * Converts a Unicode string representing a domain name or an email address to
             * Punycode. Only the non-ASCII parts of the domain name will be converted,
             * i.e. it doesn't matter if you call it with a domain that's already in
             * ASCII.
             * @memberOf punycode
             * @param {String} input The domain name or email address to convert, as a
             * Unicode string.
             * @returns {String} The Punycode representation of the given domain name or
             * email address.
             */
            function toASCII(input) {
              return mapDomain(input, function (string) {
                return regexNonASCII.test(string) ?
                  'xn--' + encode(string) :
                  string;
              });
            }

            /*--------------------------------------------------------------------------*/

            /** Define the public API */
            punycode = {
              /**
               * A string representing the current Punycode.js version number.
               * @memberOf punycode
               * @type String
               */
              'version': '1.3.2',
              /**
               * An object of methods to convert from JavaScript's internal character
               * representation (UCS-2) to Unicode code points, and back.
               * @see <https://mathiasbynens.be/notes/javascript-encoding>
               * @memberOf punycode
               * @type Object
               */
              'ucs2': {
                'decode': ucs2decode,
                'encode': ucs2encode
              },
              'decode': decode,
              'encode': encode,
              'toASCII': toASCII,
              'toUnicode': toUnicode
            };

            /** Expose `punycode` */
            // Some AMD build optimizers, like r.js, check for specific condition patterns
            // like the following:
            if (
              true
            ) {
              !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
                return punycode;
              }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            } else if (freeExports && freeModule) {
              if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
                freeModule.exports = punycode;
              } else { // in Narwhal or RingoJS v0.7.0-
                for (key in punycode) {
                  punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
                }
              }
            } else { // in Rhino or a web browser
              root.punycode = punycode;
            }

          }(this));

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(70)(module), (function () { return this; }())))

        /***/
      }),
      /* 470 */
      /***/
      (function (module, exports) {

        'use strict';

        module.exports = {
          isString: function (arg) {
            return typeof (arg) === 'string';
          },
          isObject: function (arg) {
            return typeof (arg) === 'object' && arg !== null;
          },
          isNull: function (arg) {
            return arg === null;
          },
          isNullOrUndefined: function (arg) {
            return arg == null;
          }
        };


        /***/
      }),
      /* 471 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        exports.decode = exports.parse = __webpack_require__(472);
        exports.encode = exports.stringify = __webpack_require__(473);


        /***/
      }),
      /* 472 */
      /***/
      (function (module, exports) {

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        'use strict';

        // If obj.hasOwnProperty has been overridden, then calling
        // obj.hasOwnProperty(prop) will break.
        // See: https://github.com/joyent/node/issues/1707
        function hasOwnProperty(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        }

        module.exports = function (qs, sep, eq, options) {
          sep = sep || '&';
          eq = eq || '=';
          var obj = {};

          if (typeof qs !== 'string' || qs.length === 0) {
            return obj;
          }

          var regexp = /\+/g;
          qs = qs.split(sep);

          var maxKeys = 1000;
          if (options && typeof options.maxKeys === 'number') {
            maxKeys = options.maxKeys;
          }

          var len = qs.length;
          // maxKeys <= 0 means that we should not limit keys count
          if (maxKeys > 0 && len > maxKeys) {
            len = maxKeys;
          }

          for (var i = 0; i < len; ++i) {
            var x = qs[i].replace(regexp, '%20'),
              idx = x.indexOf(eq),
              kstr, vstr, k, v;

            if (idx >= 0) {
              kstr = x.substr(0, idx);
              vstr = x.substr(idx + 1);
            } else {
              kstr = x;
              vstr = '';
            }

            k = decodeURIComponent(kstr);
            v = decodeURIComponent(vstr);

            if (!hasOwnProperty(obj, k)) {
              obj[k] = v;
            } else if (Array.isArray(obj[k])) {
              obj[k].push(v);
            } else {
              obj[k] = [obj[k], v];
            }
          }

          return obj;
        };


        /***/
      }),
      /* 473 */
      /***/
      (function (module, exports) {

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        'use strict';

        var stringifyPrimitive = function (v) {
          switch (typeof v) {
          case 'string':
            return v;

          case 'boolean':
            return v ? 'true' : 'false';

          case 'number':
            return isFinite(v) ? v : '';

          default:
            return '';
          }
        };

        module.exports = function (obj, sep, eq, name) {
          sep = sep || '&';
          eq = eq || '=';
          if (obj === null) {
            obj = undefined;
          }

          if (typeof obj === 'object') {
            return Object.keys(obj).map(function (k) {
              var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
              if (Array.isArray(obj[k])) {
                return obj[k].map(function (v) {
                  return ks + encodeURIComponent(stringifyPrimitive(v));
                }).join(sep);
              } else {
                return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
              }
            }).join(sep);

          }

          if (!name) return '';
          return encodeURIComponent(stringifyPrimitive(name)) + eq +
            encodeURIComponent(stringifyPrimitive(obj));
        };


        /***/
      }),
      /* 474 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var WebSocket = typeof window !== 'undefined' ? window.WebSocket : __webpack_require__(475);
        var EventEmitter = __webpack_require__(476).EventEmitter;

        var betterWs = function betterWs(url) {
          var conn = new WebSocket(url);
          var ee = new EventEmitter();

          ee.setMaxListeners(0);

          ee.send = function (dataObj) {
            if (conn.readyState !== 1) {
              ee.on('open', function sender() {
                conn.send(JSON.stringify(dataObj));
                ee.removeListener('open', sender);
              });
            } else {
              conn.send(JSON.stringify(dataObj));
              return this;
            }
          };

          conn.onopen = function () {
            ee.emit('open');
          };

          conn.onmessage = function (message) {
            var dataObj = JSON.parse(message.data);
            ee.emit('message', dataObj);
          };

          conn.onerror = function (err) {
            ee.emit('error', err);
          };

          conn.onclose = function (close) {
            ee.emit('close', close);
          };

          return ee;
        };

        module.exports = betterWs;


        /***/
      }),
      /* 475 */
      /***/
      (function (module, exports) {

        module.exports = __WEBPACK_EXTERNAL_MODULE_475__;

        /***/
      }),
      /* 476 */
      /***/
      (function (module, exports) {

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        function EventEmitter() {
          this._events = this._events || {};
          this._maxListeners = this._maxListeners || undefined;
        }
        module.exports = EventEmitter;

        // Backwards-compat with node 0.10.x
        EventEmitter.EventEmitter = EventEmitter;

        EventEmitter.prototype._events = undefined;
        EventEmitter.prototype._maxListeners = undefined;

        // By default EventEmitters will print a warning if more than 10 listeners are
        // added to it. This is a useful default which helps finding memory leaks.
        EventEmitter.defaultMaxListeners = 10;

        // Obviously not all Emitters should be limited to 10. This function allows
        // that to be increased. Set to zero for unlimited.
        EventEmitter.prototype.setMaxListeners = function (n) {
          if (!isNumber(n) || n < 0 || isNaN(n))
            throw TypeError('n must be a positive number');
          this._maxListeners = n;
          return this;
        };

        EventEmitter.prototype.emit = function (type) {
          var er, handler, len, args, i, listeners;

          if (!this._events)
            this._events = {};

          // If there is no 'error' event listener then throw.
          if (type === 'error') {
            if (!this._events.error ||
              (isObject(this._events.error) && !this._events.error.length)) {
              er = arguments[1];
              if (er instanceof Error) {
                throw er; // Unhandled 'error' event
              } else {
                // At least give some kind of context to the user
                var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
                err.context = er;
                throw err;
              }
            }
          }

          handler = this._events[type];

          if (isUndefined(handler))
            return false;

          if (isFunction(handler)) {
            switch (arguments.length) {
              // fast cases
            case 1:
              handler.call(this);
              break;
            case 2:
              handler.call(this, arguments[1]);
              break;
            case 3:
              handler.call(this, arguments[1], arguments[2]);
              break;
              // slower
            default:
              args = Array.prototype.slice.call(arguments, 1);
              handler.apply(this, args);
            }
          } else if (isObject(handler)) {
            args = Array.prototype.slice.call(arguments, 1);
            listeners = handler.slice();
            len = listeners.length;
            for (i = 0; i < len; i++)
              listeners[i].apply(this, args);
          }

          return true;
        };

        EventEmitter.prototype.addListener = function (type, listener) {
          var m;

          if (!isFunction(listener))
            throw TypeError('listener must be a function');

          if (!this._events)
            this._events = {};

          // To avoid recursion in the case that type === "newListener"! Before
          // adding it to the listeners, first emit "newListener".
          if (this._events.newListener)
            this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

          if (!this._events[type])
          // Optimize the case of one listener. Don't need the extra array object.
            this._events[type] = listener;
          else if (isObject(this._events[type]))
          // If we've already got an array, just append.
            this._events[type].push(listener);
          else
          // Adding the second element, need to change to array.
            this._events[type] = [this._events[type], listener];

          // Check for listener leak
          if (isObject(this._events[type]) && !this._events[type].warned) {
            if (!isUndefined(this._maxListeners)) {
              m = this._maxListeners;
            } else {
              m = EventEmitter.defaultMaxListeners;
            }

            if (m && m > 0 && this._events[type].length > m) {
              this._events[type].warned = true;
              console.error('(node) warning: possible EventEmitter memory ' +
                'leak detected. %d listeners added. ' +
                'Use emitter.setMaxListeners() to increase limit.',
                this._events[type].length);
              if (typeof console.trace === 'function') {
                // not supported in IE 10
                console.trace();
              }
            }
          }

          return this;
        };

        EventEmitter.prototype.on = EventEmitter.prototype.addListener;

        EventEmitter.prototype.once = function (type, listener) {
          if (!isFunction(listener))
            throw TypeError('listener must be a function');

          var fired = false;

          function g() {
            this.removeListener(type, g);

            if (!fired) {
              fired = true;
              listener.apply(this, arguments);
            }
          }

          g.listener = listener;
          this.on(type, g);

          return this;
        };

        // emits a 'removeListener' event iff the listener was removed
        EventEmitter.prototype.removeListener = function (type, listener) {
          var list, position, length, i;

          if (!isFunction(listener))
            throw TypeError('listener must be a function');

          if (!this._events || !this._events[type])
            return this;

          list = this._events[type];
          length = list.length;
          position = -1;

          if (list === listener ||
            (isFunction(list.listener) && list.listener === listener)) {
            delete this._events[type];
            if (this._events.removeListener)
              this.emit('removeListener', type, listener);

          } else if (isObject(list)) {
            for (i = length; i-- > 0;) {
              if (list[i] === listener ||
                (list[i].listener && list[i].listener === listener)) {
                position = i;
                break;
              }
            }

            if (position < 0)
              return this;

            if (list.length === 1) {
              list.length = 0;
              delete this._events[type];
            } else {
              list.splice(position, 1);
            }

            if (this._events.removeListener)
              this.emit('removeListener', type, listener);
          }

          return this;
        };

        EventEmitter.prototype.removeAllListeners = function (type) {
          var key, listeners;

          if (!this._events)
            return this;

          // not listening for removeListener, no need to emit
          if (!this._events.removeListener) {
            if (arguments.length === 0)
              this._events = {};
            else if (this._events[type])
              delete this._events[type];
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            for (key in this._events) {
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = {};
            return this;
          }

          listeners = this._events[type];

          if (isFunction(listeners)) {
            this.removeListener(type, listeners);
          } else if (listeners) {
            // LIFO order
            while (listeners.length)
              this.removeListener(type, listeners[listeners.length - 1]);
          }
          delete this._events[type];

          return this;
        };

        EventEmitter.prototype.listeners = function (type) {
          var ret;
          if (!this._events || !this._events[type])
            ret = [];
          else if (isFunction(this._events[type]))
            ret = [this._events[type]];
          else
            ret = this._events[type].slice();
          return ret;
        };

        EventEmitter.prototype.listenerCount = function (type) {
          if (this._events) {
            var evlistener = this._events[type];

            if (isFunction(evlistener))
              return 1;
            else if (evlistener)
              return evlistener.length;
          }
          return 0;
        };

        EventEmitter.listenerCount = function (emitter, type) {
          return emitter.listenerCount(type);
        };

        function isFunction(arg) {
          return typeof arg === 'function';
        }

        function isNumber(arg) {
          return typeof arg === 'number';
        }

        function isObject(arg) {
          return typeof arg === 'object' && arg !== null;
        }

        function isUndefined(arg) {
          return arg === void 0;
        }


        /***/
      }),
      /* 477 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) {
          'use strict';

          var hyperquest = __webpack_require__(479);
          var JSONStream = __webpack_require__(533);
          var querystring = __webpack_require__(471);
          var through2 = __webpack_require__(536);

          var streamingRequest = function streamingRequest(client, args) {
            this.client = client;
            this.args = args;

            this.method = args.method;
            this.path = args.path;
            this.params = args.params;
            this.body = args.body;
            if (!this.body || !(typeof this.body === 'object' || this.body.constructor === Array)) {
              this.body = {};
            }
            if (this.body.constructor === Array) {
              var arrayBody = this.body;
              this.body = '';
              for (var i = 0; i < arrayBody.length; i++) {
                this.body += JSON.stringify(arrayBody[i]);
                this.body += '\n';
              }
            }

            var resultStream = this.init();

            return resultStream;
          };

          streamingRequest.prototype.init = function init() {
            var that = this;

            this.requestStream = hyperquest({
              method: this.method,
              uri: this.client.protocol + '//' + this.client.url + '/' + this.client.appname + '/' + this.path + '?' + querystring.stringify(this.params),
              auth: this.client.credentials
            });
            this.requestStream.on('response', function (res) {
              that.response = res;
            });
            this.requestStream.on('request', function (req) {
              that.request = req;
            });

            var resultStream = this.requestStream.pipe(JSONStream.parse()).pipe(through2.obj());

            this.requestStream.on('end', function () {
              that.stop.apply(that);
            });

            resultStream.on('end', function () {
              that.stop.apply(that);
            });

            this.requestStream.on('error', function (err) {
              that.stop.apply(that);
              process.nextTick(function () {
                resultStream.emit('error', err);
              });
            });

            resultStream.stop = this.stop.bind(this);
            //resultStream.getId = this.getId.bind(this)
            resultStream.reconnect = this.reconnect.bind(this);
            if (this.requestStream.writable) {
              if (typeof this.body === 'string') {
                this.requestStream.end(this.body);
              } else {
                this.requestStream.end(JSON.stringify(this.body));
              }
            }

            return resultStream;
          };

          streamingRequest.prototype.getId = function getId(callback) {
            if (this.response) {
              callback(this.response.headers['query-id']);
            } else {
              this.requestStream.on('response', function (res) {
                callback(res.headers['query-id']);
              });
            }
          };

          streamingRequest.prototype.stop = function stop() {
            if (this.request) {
              this.request.destroy();
            } else {
              this.requestStream.on('request', function (req) {
                req.destroy();
              });
            }
          };

          streamingRequest.prototype.reconnect = function reconnect() {
            this.stop();
            return new streamingRequest(this.client, this.args);
          };

          module.exports = streamingRequest;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 478 */
      /***/
      (function (module, exports) {

        // shim for using process in browser
        var process = module.exports = {};

        // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
          throw new Error('setTimeout has not been defined');
        }

        function defaultClearTimeout() {
          throw new Error('clearTimeout has not been defined');
        }
        (function () {
          try {
            if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        }())

        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
          }
          // if setTimeout wasn't available but was latter defined
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
            }
          }


        }

        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
          }
          // if clearTimeout wasn't available but was latter defined
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
            }
          }



        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }

        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;

          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }

        process.nextTick = function (fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };

        // v8 likes predictible objects
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function () {
          this.fun.apply(null, this.array);
        };
        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ''; // empty string to avoid regexp issues
        process.versions = {};

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;

        process.binding = function (name) {
          throw new Error('process.binding is not supported');
        };

        process.cwd = function () { return '/' };
        process.chdir = function (dir) {
          throw new Error('process.chdir is not supported');
        };
        process.umask = function () { return 0; };


        /***/
      }),
      /* 479 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process, Buffer) {
          var url = __webpack_require__(468);
          var http = __webpack_require__(484);
          var https = __webpack_require__(508);
          var through = __webpack_require__(509);
          var duplexer = __webpack_require__(525);

          module.exports = hyperquest;

          function bind(obj, fn) {
            var args = Array.prototype.slice.call(arguments, 2);
            return function () {
              var argv = args.concat(Array.prototype.slice.call(arguments));
              return fn.apply(obj, argv);
            }
          }

          function hyperquest(uri, opts, cb, extra) {
            if (typeof uri === 'object') {
              cb = opts;
              opts = uri;
              uri = undefined;
            }
            if (typeof opts === 'function') {
              cb = opts;
              opts = undefined;
            }
            if (!opts) opts = {};
            if (uri !== undefined) opts.uri = uri;
            if (extra) opts.method = extra.method;

            var req = new Req(opts);
            var ws = req.duplex && through();
            var rs = through();

            var dup = req.duplex ? duplexer(ws, rs) : rs;
            if (!req.duplex) {
              rs.writable = false;
            }
            dup.request = req;
            dup.setHeader = bind(req, req.setHeader);
            dup.setLocation = bind(req, req.setLocation);

            var closed = false;
            dup.on('close', function () { closed = true });

            process.nextTick(function () {
              if (closed) return;
              dup.on('close', function () { r.destroy() });

              var r = req._send();
              r.on('error', bind(dup, dup.emit, 'error'));
              dup.emit('request', r);

              r.on('response', function (res) {
                dup.response = res;
                dup.emit('response', res);
                if (req.duplex) res.pipe(rs)
                else {
                  res.on('data', function (buf) { rs.push(buf) });
                  res.on('end', function () { rs.push(null) });
                }
              });

              if (req.duplex) {
                ws.pipe(r);
              } else r.end();
            });

            if (cb) {
              dup.on('error', cb);
              dup.on('response', bind(dup, cb, null));
            }
            return dup;
          }

          hyperquest.get = hyperquest;

          hyperquest.post = function (uri, opts, cb) {
            return hyperquest(uri, opts, cb, { method: 'POST' });
          };

          hyperquest.put = function (uri, opts, cb) {
            return hyperquest(uri, opts, cb, { method: 'PUT' });
          };

          hyperquest['delete'] = function (uri, opts, cb) {
            return hyperquest(uri, opts, cb, { method: 'DELETE' });
          };

          function Req(opts) {
            this.headers = opts.headers || {};

            var method = (opts.method || 'GET').toUpperCase();
            this.method = method;
            this.duplex = !(method === 'GET' || method === 'DELETE' ||
              method === 'HEAD');
            this.auth = opts.auth;

            this.options = opts;

            if (opts.uri) this.setLocation(opts.uri);
          }

          Req.prototype._send = function () {
            this._sent = true;

            var headers = this.headers || {};
            var u = url.parse(this.uri);
            var au = u.auth || this.auth;
            if (au) {
              headers.authorization = 'Basic ' + Buffer(au).toString('base64');
            }

            var protocol = u.protocol || '';
            var iface = protocol === 'https:' ? https : http;
            var opts = {
              scheme: protocol.replace(/:$/, ''),
              method: this.method,
              host: u.hostname,
              port: Number(u.port) || (protocol === 'https:' ? 443 : 80),
              path: u.path,
              agent: this.options.agent || false,
              headers: headers,
              withCredentials: this.options.withCredentials
            };
            if (protocol === 'https:') {
              opts.pfx = this.options.pfx;
              opts.key = this.options.key;
              opts.cert = this.options.cert;
              opts.ca = this.options.ca;
              opts.ciphers = this.options.ciphers;
              opts.rejectUnauthorized = this.options.rejectUnauthorized;
              opts.secureProtocol = this.options.secureProtocol;
            }
            var req = iface.request(opts);

            var timeout = this.options.timeout || Math.pow(2, 32) * 1000;
            if (req.setTimeout) req.setTimeout(timeout);
            return req;
          };

          Req.prototype.setHeader = function (key, value) {
            if (this._sent) throw new Error('request already sent');
            this.headers[key] = value;
            return this;
          };

          Req.prototype.setLocation = function (uri) {
            this.uri = uri;
            return this;
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478), __webpack_require__(480).Buffer))

        /***/
      }),
      /* 480 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (global) {
          /*!
           * The buffer module from node.js, for the browser.
           *
           * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
           * @license  MIT
           */
          /* eslint-disable no-proto */

          'use strict'

          var base64 = __webpack_require__(481)
          var ieee754 = __webpack_require__(482)
          var isArray = __webpack_require__(483)

          exports.Buffer = Buffer
          exports.SlowBuffer = SlowBuffer
          exports.INSPECT_MAX_BYTES = 50

          /**
           * If `Buffer.TYPED_ARRAY_SUPPORT`:
           *   === true    Use Uint8Array implementation (fastest)
           *   === false   Use Object implementation (most compatible, even IE6)
           *
           * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
           * Opera 11.6+, iOS 4.2+.
           *
           * Due to various browser bugs, sometimes the Object implementation will be used even
           * when the browser supports typed arrays.
           *
           * Note:
           *
           *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
           *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
           *
           *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
           *
           *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
           *     incorrect length in some situations.

           * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
           * get the Object implementation, which is slower but behaves correctly.
           */
          Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ?
            global.TYPED_ARRAY_SUPPORT :
            typedArraySupport()

          /*
           * Export kMaxLength after typed array support is determined.
           */
          exports.kMaxLength = kMaxLength()

          function typedArraySupport() {
            try {
              var arr = new Uint8Array(1)
              arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
              return arr.foo() === 42 && // typed array instances can be augmented
                typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
                arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
            } catch (e) {
              return false
            }
          }

          function kMaxLength() {
            return Buffer.TYPED_ARRAY_SUPPORT ?
              0x7fffffff :
              0x3fffffff
          }

          function createBuffer(that, length) {
            if (kMaxLength() < length) {
              throw new RangeError('Invalid typed array length')
            }
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              // Return an augmented `Uint8Array` instance, for best performance
              that = new Uint8Array(length)
              that.__proto__ = Buffer.prototype
            } else {
              // Fallback: Return an object instance of the Buffer class
              if (that === null) {
                that = new Buffer(length)
              }
              that.length = length
            }

            return that
          }

          /**
           * The Buffer constructor returns instances of `Uint8Array` that have their
           * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
           * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
           * and the `Uint8Array` methods. Square bracket notation works as expected -- it
           * returns a single octet.
           *
           * The `Uint8Array` prototype remains unmodified.
           */

          function Buffer(arg, encodingOrOffset, length) {
            if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
              return new Buffer(arg, encodingOrOffset, length)
            }

            // Common case.
            if (typeof arg === 'number') {
              if (typeof encodingOrOffset === 'string') {
                throw new Error(
                  'If encoding is specified then the first argument must be a string'
                )
              }
              return allocUnsafe(this, arg)
            }
            return from(this, arg, encodingOrOffset, length)
          }

          Buffer.poolSize = 8192 // not used by this implementation

          // TODO: Legacy, not needed anymore. Remove in next major version.
          Buffer._augment = function (arr) {
            arr.__proto__ = Buffer.prototype
            return arr
          }

          function from(that, value, encodingOrOffset, length) {
            if (typeof value === 'number') {
              throw new TypeError('"value" argument must not be a number')
            }

            if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
              return fromArrayBuffer(that, value, encodingOrOffset, length)
            }

            if (typeof value === 'string') {
              return fromString(that, value, encodingOrOffset)
            }

            return fromObject(that, value)
          }

          /**
           * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
           * if value is a number.
           * Buffer.from(str[, encoding])
           * Buffer.from(array)
           * Buffer.from(buffer)
           * Buffer.from(arrayBuffer[, byteOffset[, length]])
           **/
          Buffer.from = function (value, encodingOrOffset, length) {
            return from(null, value, encodingOrOffset, length)
          }

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            Buffer.prototype.__proto__ = Uint8Array.prototype
            Buffer.__proto__ = Uint8Array
            if (typeof Symbol !== 'undefined' && Symbol.species &&
              Buffer[Symbol.species] === Buffer) {
              // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
              Object.defineProperty(Buffer, Symbol.species, {
                value: null,
                configurable: true
              })
            }
          }

          function assertSize(size) {
            if (typeof size !== 'number') {
              throw new TypeError('"size" argument must be a number')
            } else if (size < 0) {
              throw new RangeError('"size" argument must not be negative')
            }
          }

          function alloc(that, size, fill, encoding) {
            assertSize(size)
            if (size <= 0) {
              return createBuffer(that, size)
            }
            if (fill !== undefined) {
              // Only pay attention to encoding if it's a string. This
              // prevents accidentally sending in a number that would
              // be interpretted as a start offset.
              return typeof encoding === 'string' ?
                createBuffer(that, size).fill(fill, encoding) :
                createBuffer(that, size).fill(fill)
            }
            return createBuffer(that, size)
          }

          /**
           * Creates a new filled Buffer instance.
           * alloc(size[, fill[, encoding]])
           **/
          Buffer.alloc = function (size, fill, encoding) {
            return alloc(null, size, fill, encoding)
          }

          function allocUnsafe(that, size) {
            assertSize(size)
            that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
            if (!Buffer.TYPED_ARRAY_SUPPORT) {
              for (var i = 0; i < size; ++i) {
                that[i] = 0
              }
            }
            return that
          }

          /**
           * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
           * */
          Buffer.allocUnsafe = function (size) {
              return allocUnsafe(null, size)
            }
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */
          Buffer.allocUnsafeSlow = function (size) {
            return allocUnsafe(null, size)
          }

          function fromString(that, string, encoding) {
            if (typeof encoding !== 'string' || encoding === '') {
              encoding = 'utf8'
            }

            if (!Buffer.isEncoding(encoding)) {
              throw new TypeError('"encoding" must be a valid string encoding')
            }

            var length = byteLength(string, encoding) | 0
            that = createBuffer(that, length)

            var actual = that.write(string, encoding)

            if (actual !== length) {
              // Writing a hex string, for example, that contains invalid characters will
              // cause everything after the first invalid character to be ignored. (e.g.
              // 'abxxcd' will be treated as 'ab')
              that = that.slice(0, actual)
            }

            return that
          }

          function fromArrayLike(that, array) {
            var length = array.length < 0 ? 0 : checked(array.length) | 0
            that = createBuffer(that, length)
            for (var i = 0; i < length; i += 1) {
              that[i] = array[i] & 255
            }
            return that
          }

          function fromArrayBuffer(that, array, byteOffset, length) {
            array.byteLength // this throws if `array` is not a valid ArrayBuffer

            if (byteOffset < 0 || array.byteLength < byteOffset) {
              throw new RangeError('\'offset\' is out of bounds')
            }

            if (array.byteLength < byteOffset + (length || 0)) {
              throw new RangeError('\'length\' is out of bounds')
            }

            if (byteOffset === undefined && length === undefined) {
              array = new Uint8Array(array)
            } else if (length === undefined) {
              array = new Uint8Array(array, byteOffset)
            } else {
              array = new Uint8Array(array, byteOffset, length)
            }

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              // Return an augmented `Uint8Array` instance, for best performance
              that = array
              that.__proto__ = Buffer.prototype
            } else {
              // Fallback: Return an object instance of the Buffer class
              that = fromArrayLike(that, array)
            }
            return that
          }

          function fromObject(that, obj) {
            if (Buffer.isBuffer(obj)) {
              var len = checked(obj.length) | 0
              that = createBuffer(that, len)

              if (that.length === 0) {
                return that
              }

              obj.copy(that, 0, 0, len)
              return that
            }

            if (obj) {
              if ((typeof ArrayBuffer !== 'undefined' &&
                  obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
                if (typeof obj.length !== 'number' || isnan(obj.length)) {
                  return createBuffer(that, 0)
                }
                return fromArrayLike(that, obj)
              }

              if (obj.type === 'Buffer' && isArray(obj.data)) {
                return fromArrayLike(that, obj.data)
              }
            }

            throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
          }

          function checked(length) {
            // Note: cannot use `length < kMaxLength()` here because that fails when
            // length is NaN (which is otherwise coerced to zero.)
            if (length >= kMaxLength()) {
              throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                'size: 0x' + kMaxLength().toString(16) + ' bytes')
            }
            return length | 0
          }

          function SlowBuffer(length) {
            if (+length != length) { // eslint-disable-line eqeqeq
              length = 0
            }
            return Buffer.alloc(+length)
          }

          Buffer.isBuffer = function isBuffer(b) {
            return !!(b != null && b._isBuffer)
          }

          Buffer.compare = function compare(a, b) {
            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
              throw new TypeError('Arguments must be Buffers')
            }

            if (a === b) return 0

            var x = a.length
            var y = b.length

            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
              if (a[i] !== b[i]) {
                x = a[i]
                y = b[i]
                break
              }
            }

            if (x < y) return -1
            if (y < x) return 1
            return 0
          }

          Buffer.isEncoding = function isEncoding(encoding) {
            switch (String(encoding).toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'latin1':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return true
            default:
              return false
            }
          }

          Buffer.concat = function concat(list, length) {
            if (!isArray(list)) {
              throw new TypeError('"list" argument must be an Array of Buffers')
            }

            if (list.length === 0) {
              return Buffer.alloc(0)
            }

            var i
            if (length === undefined) {
              length = 0
              for (i = 0; i < list.length; ++i) {
                length += list[i].length
              }
            }

            var buffer = Buffer.allocUnsafe(length)
            var pos = 0
            for (i = 0; i < list.length; ++i) {
              var buf = list[i]
              if (!Buffer.isBuffer(buf)) {
                throw new TypeError('"list" argument must be an Array of Buffers')
              }
              buf.copy(buffer, pos)
              pos += buf.length
            }
            return buffer
          }

          function byteLength(string, encoding) {
            if (Buffer.isBuffer(string)) {
              return string.length
            }
            if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
              (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
              return string.byteLength
            }
            if (typeof string !== 'string') {
              string = '' + string
            }

            var len = string.length
            if (len === 0) return 0

            // Use a for loop to avoid recursion
            var loweredCase = false
            for (;;) {
              switch (encoding) {
              case 'ascii':
              case 'latin1':
              case 'binary':
                return len
              case 'utf8':
              case 'utf-8':
              case undefined:
                return utf8ToBytes(string).length
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return len * 2
              case 'hex':
                return len >>> 1
              case 'base64':
                return base64ToBytes(string).length
              default:
                if (loweredCase) return utf8ToBytes(string).length // assume utf8
                encoding = ('' + encoding).toLowerCase()
                loweredCase = true
              }
            }
          }
          Buffer.byteLength = byteLength

          function slowToString(encoding, start, end) {
            var loweredCase = false

            // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
            // property of a typed array.

            // This behaves neither like String nor Uint8Array in that we set start/end
            // to their upper/lower bounds if the value passed is out of range.
            // undefined is handled specially as per ECMA-262 6th Edition,
            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
            if (start === undefined || start < 0) {
              start = 0
            }
            // Return early if start > this.length. Done here to prevent potential uint32
            // coercion fail below.
            if (start > this.length) {
              return ''
            }

            if (end === undefined || end > this.length) {
              end = this.length
            }

            if (end <= 0) {
              return ''
            }

            // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
            end >>>= 0
            start >>>= 0

            if (end <= start) {
              return ''
            }

            if (!encoding) encoding = 'utf8'

            while (true) {
              switch (encoding) {
              case 'hex':
                return hexSlice(this, start, end)

              case 'utf8':
              case 'utf-8':
                return utf8Slice(this, start, end)

              case 'ascii':
                return asciiSlice(this, start, end)

              case 'latin1':
              case 'binary':
                return latin1Slice(this, start, end)

              case 'base64':
                return base64Slice(this, start, end)

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return utf16leSlice(this, start, end)

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                encoding = (encoding + '').toLowerCase()
                loweredCase = true
              }
            }
          }

          // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
          // Buffer instances.
          Buffer.prototype._isBuffer = true

          function swap(b, n, m) {
            var i = b[n]
            b[n] = b[m]
            b[m] = i
          }

          Buffer.prototype.swap16 = function swap16() {
            var len = this.length
            if (len % 2 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 16-bits')
            }
            for (var i = 0; i < len; i += 2) {
              swap(this, i, i + 1)
            }
            return this
          }

          Buffer.prototype.swap32 = function swap32() {
            var len = this.length
            if (len % 4 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 32-bits')
            }
            for (var i = 0; i < len; i += 4) {
              swap(this, i, i + 3)
              swap(this, i + 1, i + 2)
            }
            return this
          }

          Buffer.prototype.swap64 = function swap64() {
            var len = this.length
            if (len % 8 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 64-bits')
            }
            for (var i = 0; i < len; i += 8) {
              swap(this, i, i + 7)
              swap(this, i + 1, i + 6)
              swap(this, i + 2, i + 5)
              swap(this, i + 3, i + 4)
            }
            return this
          }

          Buffer.prototype.toString = function toString() {
            var length = this.length | 0
            if (length === 0) return ''
            if (arguments.length === 0) return utf8Slice(this, 0, length)
            return slowToString.apply(this, arguments)
          }

          Buffer.prototype.equals = function equals(b) {
            if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
            if (this === b) return true
            return Buffer.compare(this, b) === 0
          }

          Buffer.prototype.inspect = function inspect() {
            var str = ''
            var max = exports.INSPECT_MAX_BYTES
            if (this.length > 0) {
              str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
              if (this.length > max) str += ' ... '
            }
            return '<Buffer ' + str + '>'
          }

          Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
            if (!Buffer.isBuffer(target)) {
              throw new TypeError('Argument must be a Buffer')
            }

            if (start === undefined) {
              start = 0
            }
            if (end === undefined) {
              end = target ? target.length : 0
            }
            if (thisStart === undefined) {
              thisStart = 0
            }
            if (thisEnd === undefined) {
              thisEnd = this.length
            }

            if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
              throw new RangeError('out of range index')
            }

            if (thisStart >= thisEnd && start >= end) {
              return 0
            }
            if (thisStart >= thisEnd) {
              return -1
            }
            if (start >= end) {
              return 1
            }

            start >>>= 0
            end >>>= 0
            thisStart >>>= 0
            thisEnd >>>= 0

            if (this === target) return 0

            var x = thisEnd - thisStart
            var y = end - start
            var len = Math.min(x, y)

            var thisCopy = this.slice(thisStart, thisEnd)
            var targetCopy = target.slice(start, end)

            for (var i = 0; i < len; ++i) {
              if (thisCopy[i] !== targetCopy[i]) {
                x = thisCopy[i]
                y = targetCopy[i]
                break
              }
            }

            if (x < y) return -1
            if (y < x) return 1
            return 0
          }

          // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
          // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
          //
          // Arguments:
          // - buffer - a Buffer to search
          // - val - a string, Buffer, or number
          // - byteOffset - an index into `buffer`; will be clamped to an int32
          // - encoding - an optional encoding, relevant is val is a string
          // - dir - true for indexOf, false for lastIndexOf
          function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
            // Empty buffer means no match
            if (buffer.length === 0) return -1

            // Normalize byteOffset
            if (typeof byteOffset === 'string') {
              encoding = byteOffset
              byteOffset = 0
            } else if (byteOffset > 0x7fffffff) {
              byteOffset = 0x7fffffff
            } else if (byteOffset < -0x80000000) {
              byteOffset = -0x80000000
            }
            byteOffset = +byteOffset // Coerce to Number.
            if (isNaN(byteOffset)) {
              // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
              byteOffset = dir ? 0 : (buffer.length - 1)
            }

            // Normalize byteOffset: negative offsets start from the end of the buffer
            if (byteOffset < 0) byteOffset = buffer.length + byteOffset
            if (byteOffset >= buffer.length) {
              if (dir) return -1
              else byteOffset = buffer.length - 1
            } else if (byteOffset < 0) {
              if (dir) byteOffset = 0
              else return -1
            }

            // Normalize val
            if (typeof val === 'string') {
              val = Buffer.from(val, encoding)
            }

            // Finally, search either indexOf (if dir is true) or lastIndexOf
            if (Buffer.isBuffer(val)) {
              // Special case: looking for empty string/buffer always fails
              if (val.length === 0) {
                return -1
              }
              return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
            } else if (typeof val === 'number') {
              val = val & 0xFF // Search for a byte value [0-255]
              if (Buffer.TYPED_ARRAY_SUPPORT &&
                typeof Uint8Array.prototype.indexOf === 'function') {
                if (dir) {
                  return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                } else {
                  return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                }
              }
              return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
            }

            throw new TypeError('val must be string, number or Buffer')
          }

          function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
            var indexSize = 1
            var arrLength = arr.length
            var valLength = val.length

            if (encoding !== undefined) {
              encoding = String(encoding).toLowerCase()
              if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                encoding === 'utf16le' || encoding === 'utf-16le') {
                if (arr.length < 2 || val.length < 2) {
                  return -1
                }
                indexSize = 2
                arrLength /= 2
                valLength /= 2
                byteOffset /= 2
              }
            }

            function read(buf, i) {
              if (indexSize === 1) {
                return buf[i]
              } else {
                return buf.readUInt16BE(i * indexSize)
              }
            }

            var i
            if (dir) {
              var foundIndex = -1
              for (i = byteOffset; i < arrLength; i++) {
                if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                  if (foundIndex === -1) foundIndex = i
                  if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                } else {
                  if (foundIndex !== -1) i -= i - foundIndex
                  foundIndex = -1
                }
              }
            } else {
              if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
              for (i = byteOffset; i >= 0; i--) {
                var found = true
                for (var j = 0; j < valLength; j++) {
                  if (read(arr, i + j) !== read(val, j)) {
                    found = false
                    break
                  }
                }
                if (found) return i
              }
            }

            return -1
          }

          Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
            return this.indexOf(val, byteOffset, encoding) !== -1
          }

          Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
          }

          Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
          }

          function hexWrite(buf, string, offset, length) {
            offset = Number(offset) || 0
            var remaining = buf.length - offset
            if (!length) {
              length = remaining
            } else {
              length = Number(length)
              if (length > remaining) {
                length = remaining
              }
            }

            // must be an even number of digits
            var strLen = string.length
            if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

            if (length > strLen / 2) {
              length = strLen / 2
            }
            for (var i = 0; i < length; ++i) {
              var parsed = parseInt(string.substr(i * 2, 2), 16)
              if (isNaN(parsed)) return i
              buf[offset + i] = parsed
            }
            return i
          }

          function utf8Write(buf, string, offset, length) {
            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
          }

          function asciiWrite(buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length)
          }

          function latin1Write(buf, string, offset, length) {
            return asciiWrite(buf, string, offset, length)
          }

          function base64Write(buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length)
          }

          function ucs2Write(buf, string, offset, length) {
            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
          }

          Buffer.prototype.write = function write(string, offset, length, encoding) {
            // Buffer#write(string)
            if (offset === undefined) {
              encoding = 'utf8'
              length = this.length
              offset = 0
                // Buffer#write(string, encoding)
            } else if (length === undefined && typeof offset === 'string') {
              encoding = offset
              length = this.length
              offset = 0
                // Buffer#write(string, offset[, length][, encoding])
            } else if (isFinite(offset)) {
              offset = offset | 0
              if (isFinite(length)) {
                length = length | 0
                if (encoding === undefined) encoding = 'utf8'
              } else {
                encoding = length
                length = undefined
              }
              // legacy write(string, encoding, offset, length) - remove in v0.13
            } else {
              throw new Error(
                'Buffer.write(string, encoding, offset[, length]) is no longer supported'
              )
            }

            var remaining = this.length - offset
            if (length === undefined || length > remaining) length = remaining

            if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
              throw new RangeError('Attempt to write outside buffer bounds')
            }

            if (!encoding) encoding = 'utf8'

            var loweredCase = false
            for (;;) {
              switch (encoding) {
              case 'hex':
                return hexWrite(this, string, offset, length)

              case 'utf8':
              case 'utf-8':
                return utf8Write(this, string, offset, length)

              case 'ascii':
                return asciiWrite(this, string, offset, length)

              case 'latin1':
              case 'binary':
                return latin1Write(this, string, offset, length)

              case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length)

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return ucs2Write(this, string, offset, length)

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                encoding = ('' + encoding).toLowerCase()
                loweredCase = true
              }
            }
          }

          Buffer.prototype.toJSON = function toJSON() {
            return {
              type: 'Buffer',
              data: Array.prototype.slice.call(this._arr || this, 0)
            }
          }

          function base64Slice(buf, start, end) {
            if (start === 0 && end === buf.length) {
              return base64.fromByteArray(buf)
            } else {
              return base64.fromByteArray(buf.slice(start, end))
            }
          }

          function utf8Slice(buf, start, end) {
            end = Math.min(buf.length, end)
            var res = []

            var i = start
            while (i < end) {
              var firstByte = buf[i]
              var codePoint = null
              var bytesPerSequence = (firstByte > 0xEF) ? 4 :
                (firstByte > 0xDF) ? 3 :
                (firstByte > 0xBF) ? 2 :
                1

              if (i + bytesPerSequence <= end) {
                var secondByte, thirdByte, fourthByte, tempCodePoint

                switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 0x80) {
                    codePoint = firstByte
                  }
                  break
                case 2:
                  secondByte = buf[i + 1]
                  if ((secondByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                    if (tempCodePoint > 0x7F) {
                      codePoint = tempCodePoint
                    }
                  }
                  break
                case 3:
                  secondByte = buf[i + 1]
                  thirdByte = buf[i + 2]
                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                      codePoint = tempCodePoint
                    }
                  }
                  break
                case 4:
                  secondByte = buf[i + 1]
                  thirdByte = buf[i + 2]
                  fourthByte = buf[i + 3]
                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                      codePoint = tempCodePoint
                    }
                  }
                }
              }

              if (codePoint === null) {
                // we did not generate a valid codePoint so insert a
                // replacement char (U+FFFD) and advance only 1 byte
                codePoint = 0xFFFD
                bytesPerSequence = 1
              } else if (codePoint > 0xFFFF) {
                // encode to utf16 (surrogate pair dance)
                codePoint -= 0x10000
                res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                codePoint = 0xDC00 | codePoint & 0x3FF
              }

              res.push(codePoint)
              i += bytesPerSequence
            }

            return decodeCodePointsArray(res)
          }

          // Based on http://stackoverflow.com/a/22747272/680742, the browser with
          // the lowest limit is Chrome, with 0x10000 args.
          // We go 1 magnitude less, for safety
          var MAX_ARGUMENTS_LENGTH = 0x1000

          function decodeCodePointsArray(codePoints) {
            var len = codePoints.length
            if (len <= MAX_ARGUMENTS_LENGTH) {
              return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
            }

            // Decode in chunks to avoid "call stack size exceeded".
            var res = ''
            var i = 0
            while (i < len) {
              res += String.fromCharCode.apply(
                String,
                codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
              )
            }
            return res
          }

          function asciiSlice(buf, start, end) {
            var ret = ''
            end = Math.min(buf.length, end)

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i] & 0x7F)
            }
            return ret
          }

          function latin1Slice(buf, start, end) {
            var ret = ''
            end = Math.min(buf.length, end)

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i])
            }
            return ret
          }

          function hexSlice(buf, start, end) {
            var len = buf.length

            if (!start || start < 0) start = 0
            if (!end || end < 0 || end > len) end = len

            var out = ''
            for (var i = start; i < end; ++i) {
              out += toHex(buf[i])
            }
            return out
          }

          function utf16leSlice(buf, start, end) {
            var bytes = buf.slice(start, end)
            var res = ''
            for (var i = 0; i < bytes.length; i += 2) {
              res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
            }
            return res
          }

          Buffer.prototype.slice = function slice(start, end) {
            var len = this.length
            start = ~~start
            end = end === undefined ? len : ~~end

            if (start < 0) {
              start += len
              if (start < 0) start = 0
            } else if (start > len) {
              start = len
            }

            if (end < 0) {
              end += len
              if (end < 0) end = 0
            } else if (end > len) {
              end = len
            }

            if (end < start) end = start

            var newBuf
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              newBuf = this.subarray(start, end)
              newBuf.__proto__ = Buffer.prototype
            } else {
              var sliceLen = end - start
              newBuf = new Buffer(sliceLen, undefined)
              for (var i = 0; i < sliceLen; ++i) {
                newBuf[i] = this[i + start]
              }
            }

            return newBuf
          }

          /*
           * Need to make sure that buffer isn't trying to write out of bounds.
           */
          function checkOffset(offset, ext, length) {
            if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
            if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
          }

          Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var val = this[offset]
            var mul = 1
            var i = 0
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul
            }

            return val
          }

          Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) {
              checkOffset(offset, byteLength, this.length)
            }

            var val = this[offset + --byteLength]
            var mul = 1
            while (byteLength > 0 && (mul *= 0x100)) {
              val += this[offset + --byteLength] * mul
            }

            return val
          }

          Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length)
            return this[offset]
          }

          Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length)
            return this[offset] | (this[offset + 1] << 8)
          }

          Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length)
            return (this[offset] << 8) | this[offset + 1]
          }

          Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)

            return ((this[offset]) |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16)) +
              (this[offset + 3] * 0x1000000)
          }

          Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset] * 0x1000000) +
              ((this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3])
          }

          Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var val = this[offset]
            var mul = 1
            var i = 0
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul
            }
            mul *= 0x80

            if (val >= mul) val -= Math.pow(2, 8 * byteLength)

            return val
          }

          Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var i = byteLength
            var mul = 1
            var val = this[offset + --i]
            while (i > 0 && (mul *= 0x100)) {
              val += this[offset + --i] * mul
            }
            mul *= 0x80

            if (val >= mul) val -= Math.pow(2, 8 * byteLength)

            return val
          }

          Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length)
            if (!(this[offset] & 0x80)) return (this[offset])
            return ((0xff - this[offset] + 1) * -1)
          }

          Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length)
            var val = this[offset] | (this[offset + 1] << 8)
            return (val & 0x8000) ? val | 0xFFFF0000 : val
          }

          Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length)
            var val = this[offset + 1] | (this[offset] << 8)
            return (val & 0x8000) ? val | 0xFFFF0000 : val
          }

          Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset]) |
              (this[offset + 1] << 8) |
              (this[offset + 2] << 16) |
              (this[offset + 3] << 24)
          }

          Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset] << 24) |
              (this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              (this[offset + 3])
          }

          Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)
            return ieee754.read(this, offset, true, 23, 4)
          }

          Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)
            return ieee754.read(this, offset, false, 23, 4)
          }

          Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 8, this.length)
            return ieee754.read(this, offset, true, 52, 8)
          }

          Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 8, this.length)
            return ieee754.read(this, offset, false, 52, 8)
          }

          function checkInt(buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
            if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
            if (offset + ext > buf.length) throw new RangeError('Index out of range')
          }

          Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
            value = +value
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1
              checkInt(this, value, offset, byteLength, maxBytes, 0)
            }

            var mul = 1
            var i = 0
            this[offset] = value & 0xFF
            while (++i < byteLength && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xFF
            }

            return offset + byteLength
          }

          Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
            value = +value
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1
              checkInt(this, value, offset, byteLength, maxBytes, 0)
            }

            var i = byteLength - 1
            var mul = 1
            this[offset + i] = value & 0xFF
            while (--i >= 0 && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xFF
            }

            return offset + byteLength
          }

          Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
            this[offset] = (value & 0xff)
            return offset + 1
          }

          function objectWriteUInt16(buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffff + value + 1
            for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
              buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
                (littleEndian ? i : 1 - i) * 8
            }
          }

          Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value & 0xff)
              this[offset + 1] = (value >>> 8)
            } else {
              objectWriteUInt16(this, value, offset, true)
            }
            return offset + 2
          }

          Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value >>> 8)
              this[offset + 1] = (value & 0xff)
            } else {
              objectWriteUInt16(this, value, offset, false)
            }
            return offset + 2
          }

          function objectWriteUInt32(buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffffffff + value + 1
            for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
              buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
            }
          }

          Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset + 3] = (value >>> 24)
              this[offset + 2] = (value >>> 16)
              this[offset + 1] = (value >>> 8)
              this[offset] = (value & 0xff)
            } else {
              objectWriteUInt32(this, value, offset, true)
            }
            return offset + 4
          }

          Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value >>> 24)
              this[offset + 1] = (value >>> 16)
              this[offset + 2] = (value >>> 8)
              this[offset + 3] = (value & 0xff)
            } else {
              objectWriteUInt32(this, value, offset, false)
            }
            return offset + 4
          }

          Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1)

              checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }

            var i = 0
            var mul = 1
            var sub = 0
            this[offset] = value & 0xFF
            while (++i < byteLength && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                sub = 1
              }
              this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
            }

            return offset + byteLength
          }

          Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1)

              checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }

            var i = byteLength - 1
            var mul = 1
            var sub = 0
            this[offset + i] = value & 0xFF
            while (--i >= 0 && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                sub = 1
              }
              this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
            }

            return offset + byteLength
          }

          Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
            if (value < 0) value = 0xff + value + 1
            this[offset] = (value & 0xff)
            return offset + 1
          }

          Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value & 0xff)
              this[offset + 1] = (value >>> 8)
            } else {
              objectWriteUInt16(this, value, offset, true)
            }
            return offset + 2
          }

          Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value >>> 8)
              this[offset + 1] = (value & 0xff)
            } else {
              objectWriteUInt16(this, value, offset, false)
            }
            return offset + 2
          }

          Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value & 0xff)
              this[offset + 1] = (value >>> 8)
              this[offset + 2] = (value >>> 16)
              this[offset + 3] = (value >>> 24)
            } else {
              objectWriteUInt32(this, value, offset, true)
            }
            return offset + 4
          }

          Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
            if (value < 0) value = 0xffffffff + value + 1
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value >>> 24)
              this[offset + 1] = (value >>> 16)
              this[offset + 2] = (value >>> 8)
              this[offset + 3] = (value & 0xff)
            } else {
              objectWriteUInt32(this, value, offset, false)
            }
            return offset + 4
          }

          function checkIEEE754(buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length) throw new RangeError('Index out of range')
            if (offset < 0) throw new RangeError('Index out of range')
          }

          function writeFloat(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
              checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
            }
            ieee754.write(buf, value, offset, littleEndian, 23, 4)
            return offset + 4
          }

          Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
            return writeFloat(this, value, offset, true, noAssert)
          }

          Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
            return writeFloat(this, value, offset, false, noAssert)
          }

          function writeDouble(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
              checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
            }
            ieee754.write(buf, value, offset, littleEndian, 52, 8)
            return offset + 8
          }

          Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
            return writeDouble(this, value, offset, true, noAssert)
          }

          Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
            return writeDouble(this, value, offset, false, noAssert)
          }

          // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
          Buffer.prototype.copy = function copy(target, targetStart, start, end) {
            if (!start) start = 0
            if (!end && end !== 0) end = this.length
            if (targetStart >= target.length) targetStart = target.length
            if (!targetStart) targetStart = 0
            if (end > 0 && end < start) end = start

            // Copy 0 bytes; we're done
            if (end === start) return 0
            if (target.length === 0 || this.length === 0) return 0

            // Fatal error conditions
            if (targetStart < 0) {
              throw new RangeError('targetStart out of bounds')
            }
            if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
            if (end < 0) throw new RangeError('sourceEnd out of bounds')

            // Are we oob?
            if (end > this.length) end = this.length
            if (target.length - targetStart < end - start) {
              end = target.length - targetStart + start
            }

            var len = end - start
            var i

            if (this === target && start < targetStart && targetStart < end) {
              // descending copy from end
              for (i = len - 1; i >= 0; --i) {
                target[i + targetStart] = this[i + start]
              }
            } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
              // ascending copy from start
              for (i = 0; i < len; ++i) {
                target[i + targetStart] = this[i + start]
              }
            } else {
              Uint8Array.prototype.set.call(
                target,
                this.subarray(start, start + len),
                targetStart
              )
            }

            return len
          }

          // Usage:
          //    buffer.fill(number[, offset[, end]])
          //    buffer.fill(buffer[, offset[, end]])
          //    buffer.fill(string[, offset[, end]][, encoding])
          Buffer.prototype.fill = function fill(val, start, end, encoding) {
            // Handle string cases:
            if (typeof val === 'string') {
              if (typeof start === 'string') {
                encoding = start
                start = 0
                end = this.length
              } else if (typeof end === 'string') {
                encoding = end
                end = this.length
              }
              if (val.length === 1) {
                var code = val.charCodeAt(0)
                if (code < 256) {
                  val = code
                }
              }
              if (encoding !== undefined && typeof encoding !== 'string') {
                throw new TypeError('encoding must be a string')
              }
              if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                throw new TypeError('Unknown encoding: ' + encoding)
              }
            } else if (typeof val === 'number') {
              val = val & 255
            }

            // Invalid ranges are not set to a default, so can range check early.
            if (start < 0 || this.length < start || this.length < end) {
              throw new RangeError('Out of range index')
            }

            if (end <= start) {
              return this
            }

            start = start >>> 0
            end = end === undefined ? this.length : end >>> 0

            if (!val) val = 0

            var i
            if (typeof val === 'number') {
              for (i = start; i < end; ++i) {
                this[i] = val
              }
            } else {
              var bytes = Buffer.isBuffer(val) ?
                val :
                utf8ToBytes(new Buffer(val, encoding).toString())
              var len = bytes.length
              for (i = 0; i < end - start; ++i) {
                this[i + start] = bytes[i % len]
              }
            }

            return this
          }

          // HELPER FUNCTIONS
          // ================

          var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

          function base64clean(str) {
            // Node strips out invalid characters like \n and \t from the string, base64-js does not
            str = stringtrim(str).replace(INVALID_BASE64_RE, '')
              // Node converts strings with length < 2 to ''
            if (str.length < 2) return ''
              // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
            while (str.length % 4 !== 0) {
              str = str + '='
            }
            return str
          }

          function stringtrim(str) {
            if (str.trim) return str.trim()
            return str.replace(/^\s+|\s+$/g, '')
          }

          function toHex(n) {
            if (n < 16) return '0' + n.toString(16)
            return n.toString(16)
          }

          function utf8ToBytes(string, units) {
            units = units || Infinity
            var codePoint
            var length = string.length
            var leadSurrogate = null
            var bytes = []

            for (var i = 0; i < length; ++i) {
              codePoint = string.charCodeAt(i)

              // is surrogate component
              if (codePoint > 0xD7FF && codePoint < 0xE000) {
                // last char was a lead
                if (!leadSurrogate) {
                  // no lead yet
                  if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    continue
                  } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    continue
                  }

                  // valid lead
                  leadSurrogate = codePoint

                  continue
                }

                // 2 leads in a row
                if (codePoint < 0xDC00) {
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                  leadSurrogate = codePoint
                  continue
                }

                // valid surrogate pair
                codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
              } else if (leadSurrogate) {
                // valid bmp char, but last char was a lead
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
              }

              leadSurrogate = null

              // encode utf8
              if (codePoint < 0x80) {
                if ((units -= 1) < 0) break
                bytes.push(codePoint)
              } else if (codePoint < 0x800) {
                if ((units -= 2) < 0) break
                bytes.push(
                  codePoint >> 0x6 | 0xC0,
                  codePoint & 0x3F | 0x80
                )
              } else if (codePoint < 0x10000) {
                if ((units -= 3) < 0) break
                bytes.push(
                  codePoint >> 0xC | 0xE0,
                  codePoint >> 0x6 & 0x3F | 0x80,
                  codePoint & 0x3F | 0x80
                )
              } else if (codePoint < 0x110000) {
                if ((units -= 4) < 0) break
                bytes.push(
                  codePoint >> 0x12 | 0xF0,
                  codePoint >> 0xC & 0x3F | 0x80,
                  codePoint >> 0x6 & 0x3F | 0x80,
                  codePoint & 0x3F | 0x80
                )
              } else {
                throw new Error('Invalid code point')
              }
            }

            return bytes
          }

          function asciiToBytes(str) {
            var byteArray = []
            for (var i = 0; i < str.length; ++i) {
              // Node's code seems to be doing this and not & 0x7F..
              byteArray.push(str.charCodeAt(i) & 0xFF)
            }
            return byteArray
          }

          function utf16leToBytes(str, units) {
            var c, hi, lo
            var byteArray = []
            for (var i = 0; i < str.length; ++i) {
              if ((units -= 2) < 0) break

              c = str.charCodeAt(i)
              hi = c >> 8
              lo = c % 256
              byteArray.push(lo)
              byteArray.push(hi)
            }

            return byteArray
          }

          function base64ToBytes(str) {
            return base64.toByteArray(base64clean(str))
          }

          function blitBuffer(src, dst, offset, length) {
            for (var i = 0; i < length; ++i) {
              if ((i + offset >= dst.length) || (i >= src.length)) break
              dst[i + offset] = src[i]
            }
            return i
          }

          function isnan(val) {
            return val !== val // eslint-disable-line no-self-compare
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, (function () { return this; }())))

        /***/
      }),
      /* 481 */
      /***/
      (function (module, exports) {

        'use strict'

        exports.byteLength = byteLength
        exports.toByteArray = toByteArray
        exports.fromByteArray = fromByteArray

        var lookup = []
        var revLookup = []
        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
        for (var i = 0, len = code.length; i < len; ++i) {
          lookup[i] = code[i]
          revLookup[code.charCodeAt(i)] = i
        }

        revLookup['-'.charCodeAt(0)] = 62
        revLookup['_'.charCodeAt(0)] = 63

        function placeHoldersCount(b64) {
          var len = b64.length
          if (len % 4 > 0) {
            throw new Error('Invalid string. Length must be a multiple of 4')
          }

          // the number of equal signs (place holders)
          // if there are two placeholders, than the two characters before it
          // represent one byte
          // if there is only one, then the three characters before it represent 2 bytes
          // this is just a cheap hack to not do indexOf twice
          return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
        }

        function byteLength(b64) {
          // base64 is 4/3 + up to two characters of the original data
          return b64.length * 3 / 4 - placeHoldersCount(b64)
        }

        function toByteArray(b64) {
          var i, j, l, tmp, placeHolders, arr
          var len = b64.length
          placeHolders = placeHoldersCount(b64)

          arr = new Arr(len * 3 / 4 - placeHolders)

          // if there are placeholders, only get up to the last complete 4 chars
          l = placeHolders > 0 ? len - 4 : len

          var L = 0

          for (i = 0, j = 0; i < l; i += 4, j += 3) {
            tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
            arr[L++] = (tmp >> 16) & 0xFF
            arr[L++] = (tmp >> 8) & 0xFF
            arr[L++] = tmp & 0xFF
          }

          if (placeHolders === 2) {
            tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
            arr[L++] = tmp & 0xFF
          } else if (placeHolders === 1) {
            tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
            arr[L++] = (tmp >> 8) & 0xFF
            arr[L++] = tmp & 0xFF
          }

          return arr
        }

        function tripletToBase64(num) {
          return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
        }

        function encodeChunk(uint8, start, end) {
          var tmp
          var output = []
          for (var i = start; i < end; i += 3) {
            tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
            output.push(tripletToBase64(tmp))
          }
          return output.join('')
        }

        function fromByteArray(uint8) {
          var tmp
          var len = uint8.length
          var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
          var output = ''
          var parts = []
          var maxChunkLength = 16383 // must be multiple of 3

          // go through the array every three bytes, we'll deal with trailing stuff later
          for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
            parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
          }

          // pad the end with zeros, but make sure to not forget the extra bytes
          if (extraBytes === 1) {
            tmp = uint8[len - 1]
            output += lookup[tmp >> 2]
            output += lookup[(tmp << 4) & 0x3F]
            output += '=='
          } else if (extraBytes === 2) {
            tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
            output += lookup[tmp >> 10]
            output += lookup[(tmp >> 4) & 0x3F]
            output += lookup[(tmp << 2) & 0x3F]
            output += '='
          }

          parts.push(output)

          return parts.join('')
        }


        /***/
      }),
      /* 482 */
      /***/
      (function (module, exports) {

        exports.read = function (buffer, offset, isLE, mLen, nBytes) {
          var e, m
          var eLen = nBytes * 8 - mLen - 1
          var eMax = (1 << eLen) - 1
          var eBias = eMax >> 1
          var nBits = -7
          var i = isLE ? (nBytes - 1) : 0
          var d = isLE ? -1 : 1
          var s = buffer[offset + i]

          i += d

          e = s & ((1 << (-nBits)) - 1)
          s >>= (-nBits)
          nBits += eLen
          for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

          m = e & ((1 << (-nBits)) - 1)
          e >>= (-nBits)
          nBits += mLen
          for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

          if (e === 0) {
            e = 1 - eBias
          } else if (e === eMax) {
            return m ? NaN : ((s ? -1 : 1) * Infinity)
          } else {
            m = m + Math.pow(2, mLen)
            e = e - eBias
          }
          return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
        }

        exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
          var e, m, c
          var eLen = nBytes * 8 - mLen - 1
          var eMax = (1 << eLen) - 1
          var eBias = eMax >> 1
          var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
          var i = isLE ? 0 : (nBytes - 1)
          var d = isLE ? 1 : -1
          var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

          value = Math.abs(value)

          if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0
            e = eMax
          } else {
            e = Math.floor(Math.log(value) / Math.LN2)
            if (value * (c = Math.pow(2, -e)) < 1) {
              e--
              c *= 2
            }
            if (e + eBias >= 1) {
              value += rt / c
            } else {
              value += rt * Math.pow(2, 1 - eBias)
            }
            if (value * c >= 2) {
              e++
              c /= 2
            }

            if (e + eBias >= eMax) {
              m = 0
              e = eMax
            } else if (e + eBias >= 1) {
              m = (value * c - 1) * Math.pow(2, mLen)
              e = e + eBias
            } else {
              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
              e = 0
            }
          }

          for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

          e = (e << mLen) | m
          eLen += mLen
          for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

          buffer[offset + i - d] |= s * 128
        }


        /***/
      }),
      /* 483 */
      /***/
      (function (module, exports) {

        var toString = {}.toString;

        module.exports = Array.isArray || function (arr) {
          return toString.call(arr) == '[object Array]';
        };


        /***/
      }),
      /* 484 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (global) {
          var ClientRequest = __webpack_require__(485)
          var extend = __webpack_require__(506)
          var statusCodes = __webpack_require__(507)
          var url = __webpack_require__(468)

          var http = exports

          http.request = function (opts, cb) {
            if (typeof opts === 'string')
              opts = url.parse(opts)
            else
              opts = extend(opts)

            // Normally, the page is loaded from http or https, so not specifying a protocol
            // will result in a (valid) protocol-relative url. However, this won't work if
            // the protocol is something else, like 'file:'
            var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''

            var protocol = opts.protocol || defaultProtocol
            var host = opts.hostname || opts.host
            var port = opts.port
            var path = opts.path || '/'

            // Necessary for IPv6 addresses
            if (host && host.indexOf(':') !== -1)
              host = '[' + host + ']'

            // This may be a relative url. The browser should always be able to interpret it correctly.
            opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
            opts.method = (opts.method || 'GET').toUpperCase()
            opts.headers = opts.headers || {}

            // Also valid opts.auth, opts.mode

            var req = new ClientRequest(opts)
            if (cb)
              req.on('response', cb)
            return req
          }

          http.get = function get(opts, cb) {
            var req = http.request(opts, cb)
            req.end()
            return req
          }

          http.Agent = function () {}
          http.Agent.defaultMaxSockets = 4

          http.STATUS_CODES = statusCodes

          http.METHODS = [
              'CHECKOUT',
              'CONNECT',
              'COPY',
              'DELETE',
              'GET',
              'HEAD',
              'LOCK',
              'M-SEARCH',
              'MERGE',
              'MKACTIVITY',
              'MKCOL',
              'MOVE',
              'NOTIFY',
              'OPTIONS',
              'PATCH',
              'POST',
              'PROPFIND',
              'PROPPATCH',
              'PURGE',
              'PUT',
              'REPORT',
              'SEARCH',
              'SUBSCRIBE',
              'TRACE',
              'UNLOCK',
              'UNSUBSCRIBE'
            ]
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function () { return this; }())))

        /***/
      }),
      /* 485 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (Buffer, global, process) {
          var capability = __webpack_require__(486)
          var inherits = __webpack_require__(487)
          var response = __webpack_require__(488)
          var stream = __webpack_require__(489)
          var toArrayBuffer = __webpack_require__(505)

          var IncomingMessage = response.IncomingMessage
          var rStates = response.readyStates

          function decideMode(preferBinary, useFetch) {
            if (capability.fetch && useFetch) {
              return 'fetch'
            } else if (capability.mozchunkedarraybuffer) {
              return 'moz-chunked-arraybuffer'
            } else if (capability.msstream) {
              return 'ms-stream'
            } else if (capability.arraybuffer && preferBinary) {
              return 'arraybuffer'
            } else if (capability.vbArray && preferBinary) {
              return 'text:vbarray'
            } else {
              return 'text'
            }
          }

          var ClientRequest = module.exports = function (opts) {
            var self = this
            stream.Writable.call(self)

            self._opts = opts
            self._body = []
            self._headers = {}
            if (opts.auth)
              self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
            Object.keys(opts.headers).forEach(function (name) {
              self.setHeader(name, opts.headers[name])
            })

            var preferBinary
            var useFetch = true
            if (opts.mode === 'disable-fetch' || 'timeout' in opts) {
              // If the use of XHR should be preferred and includes preserving the 'content-type' header.
              // Force XHR to be used since the Fetch API does not yet support timeouts.
              useFetch = false
              preferBinary = true
            } else if (opts.mode === 'prefer-streaming') {
              // If streaming is a high priority but binary compatibility and
              // the accuracy of the 'content-type' header aren't
              preferBinary = false
            } else if (opts.mode === 'allow-wrong-content-type') {
              // If streaming is more important than preserving the 'content-type' header
              preferBinary = !capability.overrideMimeType
            } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
              // Use binary if text streaming may corrupt data or the content-type header, or for speed
              preferBinary = true
            } else {
              throw new Error('Invalid value for opts.mode')
            }
            self._mode = decideMode(preferBinary, useFetch)

            self.on('finish', function () {
              self._onFinish()
            })
          }

          inherits(ClientRequest, stream.Writable)

          ClientRequest.prototype.setHeader = function (name, value) {
            var self = this
            var lowerName = name.toLowerCase()
              // This check is not necessary, but it prevents warnings from browsers about setting unsafe
              // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
              // http-browserify did it, so I will too.
            if (unsafeHeaders.indexOf(lowerName) !== -1)
              return

            self._headers[lowerName] = {
              name: name,
              value: value
            }
          }

          ClientRequest.prototype.getHeader = function (name) {
            var self = this
            return self._headers[name.toLowerCase()].value
          }

          ClientRequest.prototype.removeHeader = function (name) {
            var self = this
            delete self._headers[name.toLowerCase()]
          }

          ClientRequest.prototype._onFinish = function () {
            var self = this

            if (self._destroyed)
              return
            var opts = self._opts

            var headersObj = self._headers
            var body = null
            if (opts.method !== 'GET' && opts.method !== 'HEAD') {
              if (capability.blobConstructor) {
                body = new global.Blob(self._body.map(function (buffer) {
                  return toArrayBuffer(buffer)
                }), {
                  type: (headersObj['content-type'] || {}).value || ''
                })
              } else {
                // get utf8 string
                body = Buffer.concat(self._body).toString()
              }
            }

            // create flattened list of headers
            var headersList = []
            Object.keys(headersObj).forEach(function (keyName) {
              var name = headersObj[keyName].name
              var value = headersObj[keyName].value
              if (Array.isArray(value)) {
                value.forEach(function (v) {
                  headersList.push([name, v])
                })
              } else {
                headersList.push([name, value])
              }
            })

            if (self._mode === 'fetch') {
              global.fetch(self._opts.url, {
                method: self._opts.method,
                headers: headersList,
                body: body || undefined,
                mode: 'cors',
                credentials: opts.withCredentials ? 'include' : 'same-origin'
              }).then(function (response) {
                self._fetchResponse = response
                self._connect()
              }, function (reason) {
                self.emit('error', reason)
              })
            } else {
              var xhr = self._xhr = new global.XMLHttpRequest()
              try {
                xhr.open(self._opts.method, self._opts.url, true)
              } catch (err) {
                process.nextTick(function () {
                  self.emit('error', err)
                })
                return
              }

              // Can't set responseType on really old browsers
              if ('responseType' in xhr)
                xhr.responseType = self._mode.split(':')[0]

              if ('withCredentials' in xhr)
                xhr.withCredentials = !!opts.withCredentials

              if (self._mode === 'text' && 'overrideMimeType' in xhr)
                xhr.overrideMimeType('text/plain; charset=x-user-defined')

              if ('timeout' in opts) {
                xhr.timeout = opts.timeout
                xhr.ontimeout = function () {
                  self.emit('timeout')
                }
              }

              headersList.forEach(function (header) {
                xhr.setRequestHeader(header[0], header[1])
              })

              self._response = null
              xhr.onreadystatechange = function () {
                  switch (xhr.readyState) {
                  case rStates.LOADING:
                  case rStates.DONE:
                    self._onXHRProgress()
                    break
                  }
                }
                // Necessary for streaming in Firefox, since xhr.response is ONLY defined
                // in onprogress, not in onreadystatechange with xhr.readyState = 3
              if (self._mode === 'moz-chunked-arraybuffer') {
                xhr.onprogress = function () {
                  self._onXHRProgress()
                }
              }

              xhr.onerror = function () {
                if (self._destroyed)
                  return
                self.emit('error', new Error('XHR error'))
              }

              try {
                xhr.send(body)
              } catch (err) {
                process.nextTick(function () {
                  self.emit('error', err)
                })
                return
              }
            }
          }

          /**
           * Checks if xhr.status is readable and non-zero, indicating no error.
           * Even though the spec says it should be available in readyState 3,
           * accessing it throws an exception in IE8
           */
          function statusValid(xhr) {
            try {
              var status = xhr.status
              return (status !== null && status !== 0)
            } catch (e) {
              return false
            }
          }

          ClientRequest.prototype._onXHRProgress = function () {
            var self = this

            if (!statusValid(self._xhr) || self._destroyed)
              return

            if (!self._response)
              self._connect()

            self._response._onXHRProgress()
          }

          ClientRequest.prototype._connect = function () {
            var self = this

            if (self._destroyed)
              return

            self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)
            self._response.on('error', function (err) {
              self.emit('error', err)
            })

            self.emit('response', self._response)
          }

          ClientRequest.prototype._write = function (chunk, encoding, cb) {
            var self = this

            self._body.push(chunk)
            cb()
          }

          ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
            var self = this
            self._destroyed = true
            if (self._response)
              self._response._destroyed = true
            if (self._xhr)
              self._xhr.abort()
              // Currently, there isn't a way to truly abort a fetch.
              // If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
          }

          ClientRequest.prototype.end = function (data, encoding, cb) {
            var self = this
            if (typeof data === 'function') {
              cb = data
              data = undefined
            }

            stream.Writable.prototype.end.call(self, data, encoding, cb)
          }

          ClientRequest.prototype.flushHeaders = function () {}
          ClientRequest.prototype.setTimeout = function () {}
          ClientRequest.prototype.setNoDelay = function () {}
          ClientRequest.prototype.setSocketKeepAlive = function () {}

          // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
          var unsafeHeaders = [
            'accept-charset',
            'accept-encoding',
            'access-control-request-headers',
            'access-control-request-method',
            'connection',
            'content-length',
            'cookie',
            'cookie2',
            'date',
            'dnt',
            'expect',
            'host',
            'keep-alive',
            'origin',
            'referer',
            'te',
            'trailer',
            'transfer-encoding',
            'upgrade',
            'user-agent',
            'via'
          ]

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(480).Buffer, (function () { return this; }()), __webpack_require__(478)))

        /***/
      }),
      /* 486 */
      /***/
      (function (module, exports) {

        /* WEBPACK VAR INJECTION */
        (function (global) {
          exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

          exports.blobConstructor = false
          try {
            new Blob([new ArrayBuffer(1)])
            exports.blobConstructor = true
          } catch (e) {}

          // The xhr request to example.com may violate some restrictive CSP configurations,
          // so if we're running in a browser that supports `fetch`, avoid calling getXHR()
          // and assume support for certain features below.
          var xhr

          function getXHR() {
            // Cache the xhr value
            if (xhr !== undefined) return xhr

            if (global.XMLHttpRequest) {
              xhr = new global.XMLHttpRequest()
                // If XDomainRequest is available (ie only, where xhr might not work
                // cross domain), use the page location. Otherwise use example.com
                // Note: this doesn't actually make an http request.
              try {
                xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
              } catch (e) {
                xhr = null
              }
            } else {
              // Service workers don't have XHR
              xhr = null
            }
            return xhr
          }

          function checkTypeSupport(type) {
            var xhr = getXHR()
            if (!xhr) return false
            try {
              xhr.responseType = type
              return xhr.responseType === type
            } catch (e) {}
            return false
          }

          // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
          // Safari 7.1 appears to have fixed this bug.
          var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
          var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)

          // If fetch is supported, then arraybuffer will be supported too. Skip calling
          // checkTypeSupport(), since that calls getXHR().
          exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))

          // These next two tests unavoidably show warnings in Chrome. Since fetch will always
          // be used if it's available, just return false for these to avoid the warnings.
          exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
          exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
            checkTypeSupport('moz-chunked-arraybuffer')

          // If fetch is supported, then overrideMimeType will be supported too. Skip calling
          // getXHR().
          exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

          exports.vbArray = isFunction(global.VBArray)

          function isFunction(value) {
            return typeof value === 'function'
          }

          xhr = null // Help gc

          /* WEBPACK VAR INJECTION */
        }.call(exports, (function () { return this; }())))

        /***/
      }),
      /* 487 */
      /***/
      (function (module, exports) {

        if (typeof Object.create === 'function') {
          // implementation from standard node.js 'util' module
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          };
        } else {
          // old school shim for old browsers
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor
            var TempCtor = function () {}
            TempCtor.prototype = superCtor.prototype
            ctor.prototype = new TempCtor()
            ctor.prototype.constructor = ctor
          }
        }


        /***/
      }),
      /* 488 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process, Buffer, global) {
          var capability = __webpack_require__(486)
          var inherits = __webpack_require__(487)
          var stream = __webpack_require__(489)

          var rStates = exports.readyStates = {
            UNSENT: 0,
            OPENED: 1,
            HEADERS_RECEIVED: 2,
            LOADING: 3,
            DONE: 4
          }

          var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
            var self = this
            stream.Readable.call(self)

            self._mode = mode
            self.headers = {}
            self.rawHeaders = []
            self.trailers = {}
            self.rawTrailers = []

            // Fake the 'close' event, but only once 'end' fires
            self.on('end', function () {
              // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
              process.nextTick(function () {
                self.emit('close')
              })
            })

            if (mode === 'fetch') {
              self._fetchResponse = response

              self.url = response.url
              self.statusCode = response.status
              self.statusMessage = response.statusText

              response.headers.forEach(function (header, key) {
                self.headers[key.toLowerCase()] = header
                self.rawHeaders.push(key, header)
              })


              // TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
              var reader = response.body.getReader()

              function read() {
                reader.read().then(function (result) {
                  if (self._destroyed)
                    return
                  if (result.done) {
                    self.push(null)
                    return
                  }
                  self.push(new Buffer(result.value))
                  read()
                }).catch(function (err) {
                  self.emit('error', err)
                })
              }
              read()

            } else {
              self._xhr = xhr
              self._pos = 0

              self.url = xhr.responseURL
              self.statusCode = xhr.status
              self.statusMessage = xhr.statusText
              var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
              headers.forEach(function (header) {
                var matches = header.match(/^([^:]+):\s*(.*)/)
                if (matches) {
                  var key = matches[1].toLowerCase()
                  if (key === 'set-cookie') {
                    if (self.headers[key] === undefined) {
                      self.headers[key] = []
                    }
                    self.headers[key].push(matches[2])
                  } else if (self.headers[key] !== undefined) {
                    self.headers[key] += ', ' + matches[2]
                  } else {
                    self.headers[key] = matches[2]
                  }
                  self.rawHeaders.push(matches[1], matches[2])
                }
              })

              self._charset = 'x-user-defined'
              if (!capability.overrideMimeType) {
                var mimeType = self.rawHeaders['mime-type']
                if (mimeType) {
                  var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
                  if (charsetMatch) {
                    self._charset = charsetMatch[1].toLowerCase()
                  }
                }
                if (!self._charset)
                  self._charset = 'utf-8' // best guess
              }
            }
          }

          inherits(IncomingMessage, stream.Readable)

          IncomingMessage.prototype._read = function () {}

          IncomingMessage.prototype._onXHRProgress = function () {
            var self = this

            var xhr = self._xhr

            var response = null
            switch (self._mode) {
            case 'text:vbarray': // For IE9
              if (xhr.readyState !== rStates.DONE)
                break
              try {
                // This fails in IE8
                response = new global.VBArray(xhr.responseBody).toArray()
              } catch (e) {}
              if (response !== null) {
                self.push(new Buffer(response))
                break
              }
              // Falls through in IE8	
            case 'text':
              try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
                response = xhr.responseText
              } catch (e) {
                self._mode = 'text:vbarray'
                break
              }
              if (response.length > self._pos) {
                var newData = response.substr(self._pos)
                if (self._charset === 'x-user-defined') {
                  var buffer = new Buffer(newData.length)
                  for (var i = 0; i < newData.length; i++)
                    buffer[i] = newData.charCodeAt(i) & 0xff

                  self.push(buffer)
                } else {
                  self.push(newData, self._charset)
                }
                self._pos = response.length
              }
              break
            case 'arraybuffer':
              if (xhr.readyState !== rStates.DONE || !xhr.response)
                break
              response = xhr.response
              self.push(new Buffer(new Uint8Array(response)))
              break
            case 'moz-chunked-arraybuffer': // take whole
              response = xhr.response
              if (xhr.readyState !== rStates.LOADING || !response)
                break
              self.push(new Buffer(new Uint8Array(response)))
              break
            case 'ms-stream':
              response = xhr.response
              if (xhr.readyState !== rStates.LOADING)
                break
              var reader = new global.MSStreamReader()
              reader.onprogress = function () {
                if (reader.result.byteLength > self._pos) {
                  self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
                  self._pos = reader.result.byteLength
                }
              }
              reader.onload = function () {
                  self.push(null)
                }
                // reader.onerror = ??? // TODO: this
              reader.readAsArrayBuffer(response)
              break
            }

            // The ms-stream case handles end separately in reader.onload()
            if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
              self.push(null)
            }
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478), __webpack_require__(480).Buffer, (function () { return this; }())))

        /***/
      }),
      /* 489 */
      /***/
      (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(490);
        exports.Stream = exports;
        exports.Readable = exports;
        exports.Writable = __webpack_require__(498);
        exports.Duplex = __webpack_require__(497);
        exports.Transform = __webpack_require__(503);
        exports.PassThrough = __webpack_require__(504);


        /***/
      }),
      /* 490 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) {
          'use strict';

          module.exports = Readable;

          /*<replacement>*/
          var processNextTick = __webpack_require__(491);
          /*</replacement>*/

          /*<replacement>*/
          var isArray = __webpack_require__(483);
          /*</replacement>*/

          /*<replacement>*/
          var Duplex;
          /*</replacement>*/

          Readable.ReadableState = ReadableState;

          /*<replacement>*/
          var EE = __webpack_require__(476).EventEmitter;

          var EElistenerCount = function (emitter, type) {
            return emitter.listeners(type).length;
          };
          /*</replacement>*/

          /*<replacement>*/
          var Stream = __webpack_require__(492);
          /*</replacement>*/

          var Buffer = __webpack_require__(480).Buffer;
          /*<replacement>*/
          var bufferShim = __webpack_require__(493);
          /*</replacement>*/

          /*<replacement>*/
          var util = __webpack_require__(494);
          util.inherits = __webpack_require__(487);
          /*</replacement>*/

          /*<replacement>*/
          var debugUtil = __webpack_require__(495);
          var debug = void 0;
          if (debugUtil && debugUtil.debuglog) {
            debug = debugUtil.debuglog('stream');
          } else {
            debug = function () {};
          }
          /*</replacement>*/

          var BufferList = __webpack_require__(496);
          var StringDecoder;

          util.inherits(Readable, Stream);

          var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

          function prependListener(emitter, event, fn) {
            // Sadly this is not cacheable as some libraries bundle their own
            // event emitter implementation with them.
            if (typeof emitter.prependListener === 'function') {
              return emitter.prependListener(event, fn);
            } else {
              // This is a hack to make sure that our error handler is attached before any
              // userland ones.  NEVER DO THIS. This is here only because this code needs
              // to continue to work with older versions of Node.js that do not include
              // the prependListener() method. The goal is to eventually remove this hack.
              if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
              else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);
              else emitter._events[event] = [fn, emitter._events[event]];
            }
          }

          function ReadableState(options, stream) {
            Duplex = Duplex || __webpack_require__(497);

            options = options || {};

            // object stream flag. Used to make read(n) ignore n and to
            // make all the buffer merging and length checks go away
            this.objectMode = !!options.objectMode;

            if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

            // the point at which it stops calling _read() to fill the buffer
            // Note: 0 is a valid value, means "don't call _read preemptively ever"
            var hwm = options.highWaterMark;
            var defaultHwm = this.objectMode ? 16 : 16 * 1024;
            this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

            // cast to ints.
            this.highWaterMark = ~~this.highWaterMark;

            // A linked list is used to store data chunks instead of an array because the
            // linked list can remove elements from the beginning faster than
            // array.shift()
            this.buffer = new BufferList();
            this.length = 0;
            this.pipes = null;
            this.pipesCount = 0;
            this.flowing = null;
            this.ended = false;
            this.endEmitted = false;
            this.reading = false;

            // a flag to be able to tell if the onwrite cb is called immediately,
            // or on a later tick.  We set this to true at first, because any
            // actions that shouldn't happen until "later" should generally also
            // not happen before the first write call.
            this.sync = true;

            // whenever we return null, then we set a flag to say
            // that we're awaiting a 'readable' event emission.
            this.needReadable = false;
            this.emittedReadable = false;
            this.readableListening = false;
            this.resumeScheduled = false;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || 'utf8';

            // when piping, we only care about 'readable' events that happen
            // after read()ing all the bytes and not getting any pushback.
            this.ranOut = false;

            // the number of writers that are awaiting a drain event in .pipe()s
            this.awaitDrain = 0;

            // if true, a maybeReadMore has been scheduled
            this.readingMore = false;

            this.decoder = null;
            this.encoding = null;
            if (options.encoding) {
              if (!StringDecoder) StringDecoder = __webpack_require__(502).StringDecoder;
              this.decoder = new StringDecoder(options.encoding);
              this.encoding = options.encoding;
            }
          }

          function Readable(options) {
            Duplex = Duplex || __webpack_require__(497);

            if (!(this instanceof Readable)) return new Readable(options);

            this._readableState = new ReadableState(options, this);

            // legacy
            this.readable = true;

            if (options && typeof options.read === 'function') this._read = options.read;

            Stream.call(this);
          }

          // Manually shove something into the read() buffer.
          // This returns true if the highWaterMark has not been hit yet,
          // similar to how Writable.write() returns true if you should
          // write() some more.
          Readable.prototype.push = function (chunk, encoding) {
            var state = this._readableState;

            if (!state.objectMode && typeof chunk === 'string') {
              encoding = encoding || state.defaultEncoding;
              if (encoding !== state.encoding) {
                chunk = bufferShim.from(chunk, encoding);
                encoding = '';
              }
            }

            return readableAddChunk(this, state, chunk, encoding, false);
          };

          // Unshift should *always* be something directly out of read()
          Readable.prototype.unshift = function (chunk) {
            var state = this._readableState;
            return readableAddChunk(this, state, chunk, '', true);
          };

          Readable.prototype.isPaused = function () {
            return this._readableState.flowing === false;
          };

          function readableAddChunk(stream, state, chunk, encoding, addToFront) {
            var er = chunkInvalid(state, chunk);
            if (er) {
              stream.emit('error', er);
            } else if (chunk === null) {
              state.reading = false;
              onEofChunk(stream, state);
            } else if (state.objectMode || chunk && chunk.length > 0) {
              if (state.ended && !addToFront) {
                var e = new Error('stream.push() after EOF');
                stream.emit('error', e);
              } else if (state.endEmitted && addToFront) {
                var _e = new Error('stream.unshift() after end event');
                stream.emit('error', _e);
              } else {
                var skipAdd;
                if (state.decoder && !addToFront && !encoding) {
                  chunk = state.decoder.write(chunk);
                  skipAdd = !state.objectMode && chunk.length === 0;
                }

                if (!addToFront) state.reading = false;

                // Don't add to the buffer if we've decoded to an empty string chunk and
                // we're not in object mode
                if (!skipAdd) {
                  // if we want the data now, just emit it.
                  if (state.flowing && state.length === 0 && !state.sync) {
                    stream.emit('data', chunk);
                    stream.read(0);
                  } else {
                    // update the buffer info.
                    state.length += state.objectMode ? 1 : chunk.length;
                    if (addToFront) state.buffer.unshift(chunk);
                    else state.buffer.push(chunk);

                    if (state.needReadable) emitReadable(stream);
                  }
                }

                maybeReadMore(stream, state);
              }
            } else if (!addToFront) {
              state.reading = false;
            }

            return needMoreData(state);
          }

          // if it's past the high water mark, we can push in some more.
          // Also, if we have no data yet, we can stand some
          // more bytes.  This is to work around cases where hwm=0,
          // such as the repl.  Also, if the push() triggered a
          // readable event, and the user called read(largeNumber) such that
          // needReadable was set, then we ought to push more, so that another
          // 'readable' event will be triggered.
          function needMoreData(state) {
            return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
          }

          // backwards compatibility.
          Readable.prototype.setEncoding = function (enc) {
            if (!StringDecoder) StringDecoder = __webpack_require__(502).StringDecoder;
            this._readableState.decoder = new StringDecoder(enc);
            this._readableState.encoding = enc;
            return this;
          };

          // Don't raise the hwm > 8MB
          var MAX_HWM = 0x800000;

          function computeNewHighWaterMark(n) {
            if (n >= MAX_HWM) {
              n = MAX_HWM;
            } else {
              // Get the next highest power of 2 to prevent increasing hwm excessively in
              // tiny amounts
              n--;
              n |= n >>> 1;
              n |= n >>> 2;
              n |= n >>> 4;
              n |= n >>> 8;
              n |= n >>> 16;
              n++;
            }
            return n;
          }

          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function howMuchToRead(n, state) {
            if (n <= 0 || state.length === 0 && state.ended) return 0;
            if (state.objectMode) return 1;
            if (n !== n) {
              // Only flow one buffer at a time
              if (state.flowing && state.length) return state.buffer.head.data.length;
              else return state.length;
            }
            // If we're asking for more than the current hwm, then raise the hwm.
            if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
            if (n <= state.length) return n;
            // Don't have enough
            if (!state.ended) {
              state.needReadable = true;
              return 0;
            }
            return state.length;
          }

          // you can override either this method, or the async _read(n) below.
          Readable.prototype.read = function (n) {
            debug('read', n);
            n = parseInt(n, 10);
            var state = this._readableState;
            var nOrig = n;

            if (n !== 0) state.emittedReadable = false;

            // if we're doing read(0) to trigger a readable event, but we
            // already have a bunch of data in the buffer, then just trigger
            // the 'readable' event and move on.
            if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
              debug('read: emitReadable', state.length, state.ended);
              if (state.length === 0 && state.ended) endReadable(this);
              else emitReadable(this);
              return null;
            }

            n = howMuchToRead(n, state);

            // if we've ended, and we're now clear, then finish it up.
            if (n === 0 && state.ended) {
              if (state.length === 0) endReadable(this);
              return null;
            }

            // All the actual chunk generation logic needs to be
            // *below* the call to _read.  The reason is that in certain
            // synthetic stream cases, such as passthrough streams, _read
            // may be a completely synchronous operation which may change
            // the state of the read buffer, providing enough data when
            // before there was *not* enough.
            //
            // So, the steps are:
            // 1. Figure out what the state of things will be after we do
            // a read from the buffer.
            //
            // 2. If that resulting state will trigger a _read, then call _read.
            // Note that this may be asynchronous, or synchronous.  Yes, it is
            // deeply ugly to write APIs this way, but that still doesn't mean
            // that the Readable class should behave improperly, as streams are
            // designed to be sync/async agnostic.
            // Take note if the _read call is sync or async (ie, if the read call
            // has returned yet), so that we know whether or not it's safe to emit
            // 'readable' etc.
            //
            // 3. Actually pull the requested chunks out of the buffer and return.

            // if we need a readable event, then we need to do some reading.
            var doRead = state.needReadable;
            debug('need readable', doRead);

            // if we currently have less than the highWaterMark, then also read some
            if (state.length === 0 || state.length - n < state.highWaterMark) {
              doRead = true;
              debug('length less than watermark', doRead);
            }

            // however, if we've ended, then there's no point, and if we're already
            // reading, then it's unnecessary.
            if (state.ended || state.reading) {
              doRead = false;
              debug('reading or ended', doRead);
            } else if (doRead) {
              debug('do read');
              state.reading = true;
              state.sync = true;
              // if the length is currently zero, then we *need* a readable event.
              if (state.length === 0) state.needReadable = true;
              // call internal read method
              this._read(state.highWaterMark);
              state.sync = false;
              // If _read pushed data synchronously, then `reading` will be false,
              // and we need to re-evaluate how much data we can return to the user.
              if (!state.reading) n = howMuchToRead(nOrig, state);
            }

            var ret;
            if (n > 0) ret = fromList(n, state);
            else ret = null;

            if (ret === null) {
              state.needReadable = true;
              n = 0;
            } else {
              state.length -= n;
            }

            if (state.length === 0) {
              // If we have nothing in the buffer, then we want to know
              // as soon as we *do* get something into the buffer.
              if (!state.ended) state.needReadable = true;

              // If we tried to read() past the EOF, then emit end on the next tick.
              if (nOrig !== n && state.ended) endReadable(this);
            }

            if (ret !== null) this.emit('data', ret);

            return ret;
          };

          function chunkInvalid(state, chunk) {
            var er = null;
            if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
              er = new TypeError('Invalid non-string/buffer chunk');
            }
            return er;
          }

          function onEofChunk(stream, state) {
            if (state.ended) return;
            if (state.decoder) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) {
                state.buffer.push(chunk);
                state.length += state.objectMode ? 1 : chunk.length;
              }
            }
            state.ended = true;

            // emit 'readable' now to make sure it gets picked up.
            emitReadable(stream);
          }

          // Don't emit readable right away in sync mode, because this can trigger
          // another read() call => stack overflow.  This way, it might trigger
          // a nextTick recursion warning, but that's not so bad.
          function emitReadable(stream) {
            var state = stream._readableState;
            state.needReadable = false;
            if (!state.emittedReadable) {
              debug('emitReadable', state.flowing);
              state.emittedReadable = true;
              if (state.sync) processNextTick(emitReadable_, stream);
              else emitReadable_(stream);
            }
          }

          function emitReadable_(stream) {
            debug('emit readable');
            stream.emit('readable');
            flow(stream);
          }

          // at this point, the user has presumably seen the 'readable' event,
          // and called read() to consume some data.  that may have triggered
          // in turn another _read(n) call, in which case reading = true if
          // it's in progress.
          // However, if we're not ended, or reading, and the length < hwm,
          // then go ahead and try to read some more preemptively.
          function maybeReadMore(stream, state) {
            if (!state.readingMore) {
              state.readingMore = true;
              processNextTick(maybeReadMore_, stream, state);
            }
          }

          function maybeReadMore_(stream, state) {
            var len = state.length;
            while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
              debug('maybeReadMore read 0');
              stream.read(0);
              if (len === state.length)
              // didn't get any data, stop spinning.
                break;
              else len = state.length;
            }
            state.readingMore = false;
          }

          // abstract method.  to be overridden in specific implementation classes.
          // call cb(er, data) where data is <= n in length.
          // for virtual (non-string, non-buffer) streams, "length" is somewhat
          // arbitrary, and perhaps not very meaningful.
          Readable.prototype._read = function (n) {
            this.emit('error', new Error('_read() is not implemented'));
          };

          Readable.prototype.pipe = function (dest, pipeOpts) {
            var src = this;
            var state = this._readableState;

            switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;
            case 1:
              state.pipes = [state.pipes, dest];
              break;
            default:
              state.pipes.push(dest);
              break;
            }
            state.pipesCount += 1;
            debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

            var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

            var endFn = doEnd ? onend : cleanup;
            if (state.endEmitted) processNextTick(endFn);
            else src.once('end', endFn);

            dest.on('unpipe', onunpipe);

            function onunpipe(readable) {
              debug('onunpipe');
              if (readable === src) {
                cleanup();
              }
            }

            function onend() {
              debug('onend');
              dest.end();
            }

            // when the dest drains, it reduces the awaitDrain counter
            // on the source.  This would be more elegant with a .once()
            // handler in flow(), but adding and removing repeatedly is
            // too slow.
            var ondrain = pipeOnDrain(src);
            dest.on('drain', ondrain);

            var cleanedUp = false;

            function cleanup() {
              debug('cleanup');
              // cleanup event handlers once the pipe is broken
              dest.removeListener('close', onclose);
              dest.removeListener('finish', onfinish);
              dest.removeListener('drain', ondrain);
              dest.removeListener('error', onerror);
              dest.removeListener('unpipe', onunpipe);
              src.removeListener('end', onend);
              src.removeListener('end', cleanup);
              src.removeListener('data', ondata);

              cleanedUp = true;

              // if the reader is waiting for a drain event from this
              // specific writer, then it would cause it to never start
              // flowing again.
              // So, if this is awaiting a drain, then we just call it now.
              // If we don't know, then assume that we are waiting for one.
              if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
            }

            // If the user pushes more data while we're writing to dest then we'll end up
            // in ondata again. However, we only want to increase awaitDrain once because
            // dest will only emit one 'drain' event for the multiple writes.
            // => Introduce a guard on increasing awaitDrain.
            var increasedAwaitDrain = false;
            src.on('data', ondata);

            function ondata(chunk) {
              debug('ondata');
              increasedAwaitDrain = false;
              var ret = dest.write(chunk);
              if (false === ret && !increasedAwaitDrain) {
                // If the user unpiped during `dest.write()`, it is possible
                // to get stuck in a permanently paused state if that write
                // also returned false.
                // => Check whether `dest` is still a piping destination.
                if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                  debug('false write response, pause', src._readableState.awaitDrain);
                  src._readableState.awaitDrain++;
                  increasedAwaitDrain = true;
                }
                src.pause();
              }
            }

            // if the dest has an error, then stop piping into it.
            // however, don't suppress the throwing behavior for this.
            function onerror(er) {
              debug('onerror', er);
              unpipe();
              dest.removeListener('error', onerror);
              if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
            }

            // Make sure our error handler is attached before userland ones.
            prependListener(dest, 'error', onerror);

            // Both close and finish should trigger unpipe, but only once.
            function onclose() {
              dest.removeListener('finish', onfinish);
              unpipe();
            }
            dest.once('close', onclose);

            function onfinish() {
              debug('onfinish');
              dest.removeListener('close', onclose);
              unpipe();
            }
            dest.once('finish', onfinish);

            function unpipe() {
              debug('unpipe');
              src.unpipe(dest);
            }

            // tell the dest that it's being piped to
            dest.emit('pipe', src);

            // start the flow if it hasn't been started already.
            if (!state.flowing) {
              debug('pipe resume');
              src.resume();
            }

            return dest;
          };

          function pipeOnDrain(src) {
            return function () {
              var state = src._readableState;
              debug('pipeOnDrain', state.awaitDrain);
              if (state.awaitDrain) state.awaitDrain--;
              if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                state.flowing = true;
                flow(src);
              }
            };
          }

          Readable.prototype.unpipe = function (dest) {
            var state = this._readableState;

            // if we're not piping anywhere, then do nothing.
            if (state.pipesCount === 0) return this;

            // just one destination.  most common case.
            if (state.pipesCount === 1) {
              // passed in one, but it's not the right one.
              if (dest && dest !== state.pipes) return this;

              if (!dest) dest = state.pipes;

              // got a match.
              state.pipes = null;
              state.pipesCount = 0;
              state.flowing = false;
              if (dest) dest.emit('unpipe', this);
              return this;
            }

            // slow case. multiple pipe destinations.

            if (!dest) {
              // remove all.
              var dests = state.pipes;
              var len = state.pipesCount;
              state.pipes = null;
              state.pipesCount = 0;
              state.flowing = false;

              for (var i = 0; i < len; i++) {
                dests[i].emit('unpipe', this);
              }
              return this;
            }

            // try to find the right one.
            var index = indexOf(state.pipes, dest);
            if (index === -1) return this;

            state.pipes.splice(index, 1);
            state.pipesCount -= 1;
            if (state.pipesCount === 1) state.pipes = state.pipes[0];

            dest.emit('unpipe', this);

            return this;
          };

          // set up data events if they are asked for
          // Ensure readable listeners eventually get something
          Readable.prototype.on = function (ev, fn) {
            var res = Stream.prototype.on.call(this, ev, fn);

            if (ev === 'data') {
              // Start flowing on next tick if stream isn't explicitly paused
              if (this._readableState.flowing !== false) this.resume();
            } else if (ev === 'readable') {
              var state = this._readableState;
              if (!state.endEmitted && !state.readableListening) {
                state.readableListening = state.needReadable = true;
                state.emittedReadable = false;
                if (!state.reading) {
                  processNextTick(nReadingNextTick, this);
                } else if (state.length) {
                  emitReadable(this, state);
                }
              }
            }

            return res;
          };
          Readable.prototype.addListener = Readable.prototype.on;

          function nReadingNextTick(self) {
            debug('readable nexttick read 0');
            self.read(0);
          }

          // pause() and resume() are remnants of the legacy readable stream API
          // If the user uses them, then switch into old mode.
          Readable.prototype.resume = function () {
            var state = this._readableState;
            if (!state.flowing) {
              debug('resume');
              state.flowing = true;
              resume(this, state);
            }
            return this;
          };

          function resume(stream, state) {
            if (!state.resumeScheduled) {
              state.resumeScheduled = true;
              processNextTick(resume_, stream, state);
            }
          }

          function resume_(stream, state) {
            if (!state.reading) {
              debug('resume read 0');
              stream.read(0);
            }

            state.resumeScheduled = false;
            state.awaitDrain = 0;
            stream.emit('resume');
            flow(stream);
            if (state.flowing && !state.reading) stream.read(0);
          }

          Readable.prototype.pause = function () {
            debug('call pause flowing=%j', this._readableState.flowing);
            if (false !== this._readableState.flowing) {
              debug('pause');
              this._readableState.flowing = false;
              this.emit('pause');
            }
            return this;
          };

          function flow(stream) {
            var state = stream._readableState;
            debug('flow', state.flowing);
            while (state.flowing && stream.read() !== null) {}
          }

          // wrap an old-style stream as the async data source.
          // This is *not* part of the readable stream interface.
          // It is an ugly unfortunate mess of history.
          Readable.prototype.wrap = function (stream) {
            var state = this._readableState;
            var paused = false;

            var self = this;
            stream.on('end', function () {
              debug('wrapped end');
              if (state.decoder && !state.ended) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) self.push(chunk);
              }

              self.push(null);
            });

            stream.on('data', function (chunk) {
              debug('wrapped data');
              if (state.decoder) chunk = state.decoder.write(chunk);

              // don't skip over falsy values in objectMode
              if (state.objectMode && (chunk === null || chunk === undefined)) return;
              else if (!state.objectMode && (!chunk || !chunk.length)) return;

              var ret = self.push(chunk);
              if (!ret) {
                paused = true;
                stream.pause();
              }
            });

            // proxy all the other methods.
            // important when wrapping filters and duplexes.
            for (var i in stream) {
              if (this[i] === undefined && typeof stream[i] === 'function') {
                this[i] = function (method) {
                  return function () {
                    return stream[method].apply(stream, arguments);
                  };
                }(i);
              }
            }

            // proxy certain important events.
            for (var n = 0; n < kProxyEvents.length; n++) {
              stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
            }

            // when we try to consume some more bytes, simply unpause the
            // underlying stream.
            self._read = function (n) {
              debug('wrapped _read', n);
              if (paused) {
                paused = false;
                stream.resume();
              }
            };

            return self;
          };

          // exposed for testing purposes only.
          Readable._fromList = fromList;

          // Pluck off n bytes from an array of buffers.
          // Length is the combined lengths of all the buffers in the list.
          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function fromList(n, state) {
            // nothing buffered
            if (state.length === 0) return null;

            var ret;
            if (state.objectMode) ret = state.buffer.shift();
            else if (!n || n >= state.length) {
              // read it all, truncate the list
              if (state.decoder) ret = state.buffer.join('');
              else if (state.buffer.length === 1) ret = state.buffer.head.data;
              else ret = state.buffer.concat(state.length);
              state.buffer.clear();
            } else {
              // read part of list
              ret = fromListPartial(n, state.buffer, state.decoder);
            }

            return ret;
          }

          // Extracts only enough buffered data to satisfy the amount requested.
          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function fromListPartial(n, list, hasStrings) {
            var ret;
            if (n < list.head.data.length) {
              // slice is the same for buffers and strings
              ret = list.head.data.slice(0, n);
              list.head.data = list.head.data.slice(n);
            } else if (n === list.head.data.length) {
              // first chunk is a perfect match
              ret = list.shift();
            } else {
              // result spans more than one buffer
              ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
            }
            return ret;
          }

          // Copies a specified amount of characters from the list of buffered data
          // chunks.
          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function copyFromBufferString(n, list) {
            var p = list.head;
            var c = 1;
            var ret = p.data;
            n -= ret.length;
            while (p = p.next) {
              var str = p.data;
              var nb = n > str.length ? str.length : n;
              if (nb === str.length) ret += str;
              else ret += str.slice(0, n);
              n -= nb;
              if (n === 0) {
                if (nb === str.length) {
                  ++c;
                  if (p.next) list.head = p.next;
                  else list.head = list.tail = null;
                } else {
                  list.head = p;
                  p.data = str.slice(nb);
                }
                break;
              }
              ++c;
            }
            list.length -= c;
            return ret;
          }

          // Copies a specified amount of bytes from the list of buffered data chunks.
          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function copyFromBuffer(n, list) {
            var ret = bufferShim.allocUnsafe(n);
            var p = list.head;
            var c = 1;
            p.data.copy(ret);
            n -= p.data.length;
            while (p = p.next) {
              var buf = p.data;
              var nb = n > buf.length ? buf.length : n;
              buf.copy(ret, ret.length - n, 0, nb);
              n -= nb;
              if (n === 0) {
                if (nb === buf.length) {
                  ++c;
                  if (p.next) list.head = p.next;
                  else list.head = list.tail = null;
                } else {
                  list.head = p;
                  p.data = buf.slice(nb);
                }
                break;
              }
              ++c;
            }
            list.length -= c;
            return ret;
          }

          function endReadable(stream) {
            var state = stream._readableState;

            // If we get here before consuming all the bytes, then that is a
            // bug in node.  Should never happen.
            if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

            if (!state.endEmitted) {
              state.ended = true;
              processNextTick(endReadableNT, state, stream);
            }
          }

          function endReadableNT(state, stream) {
            // Check that we didn't get one last unshift.
            if (!state.endEmitted && state.length === 0) {
              state.endEmitted = true;
              stream.readable = false;
              stream.emit('end');
            }
          }

          function forEach(xs, f) {
            for (var i = 0, l = xs.length; i < l; i++) {
              f(xs[i], i);
            }
          }

          function indexOf(xs, x) {
            for (var i = 0, l = xs.length; i < l; i++) {
              if (xs[i] === x) return i;
            }
            return -1;
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 491 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) {
          'use strict';

          if (!process.version ||
            process.version.indexOf('v0.') === 0 ||
            process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
            module.exports = nextTick;
          } else {
            module.exports = process.nextTick;
          }

          function nextTick(fn, arg1, arg2, arg3) {
            if (typeof fn !== 'function') {
              throw new TypeError('"callback" argument must be a function');
            }
            var len = arguments.length;
            var args, i;
            switch (len) {
            case 0:
            case 1:
              return process.nextTick(fn);
            case 2:
              return process.nextTick(function afterTickOne() {
                fn.call(null, arg1);
              });
            case 3:
              return process.nextTick(function afterTickTwo() {
                fn.call(null, arg1, arg2);
              });
            case 4:
              return process.nextTick(function afterTickThree() {
                fn.call(null, arg1, arg2, arg3);
              });
            default:
              args = new Array(len - 1);
              i = 0;
              while (i < args.length) {
                args[i++] = arguments[i];
              }
              return process.nextTick(function afterTick() {
                fn.apply(null, args);
              });
            }
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 492 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(476).EventEmitter;


        /***/
      }),
      /* 493 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (global) {
          'use strict';

          var buffer = __webpack_require__(480);
          var Buffer = buffer.Buffer;
          var SlowBuffer = buffer.SlowBuffer;
          var MAX_LEN = buffer.kMaxLength || 2147483647;
          exports.alloc = function alloc(size, fill, encoding) {
            if (typeof Buffer.alloc === 'function') {
              return Buffer.alloc(size, fill, encoding);
            }
            if (typeof encoding === 'number') {
              throw new TypeError('encoding must not be number');
            }
            if (typeof size !== 'number') {
              throw new TypeError('size must be a number');
            }
            if (size > MAX_LEN) {
              throw new RangeError('size is too large');
            }
            var enc = encoding;
            var _fill = fill;
            if (_fill === undefined) {
              enc = undefined;
              _fill = 0;
            }
            var buf = new Buffer(size);
            if (typeof _fill === 'string') {
              var fillBuf = new Buffer(_fill, enc);
              var flen = fillBuf.length;
              var i = -1;
              while (++i < size) {
                buf[i] = fillBuf[i % flen];
              }
            } else {
              buf.fill(_fill);
            }
            return buf;
          }
          exports.allocUnsafe = function allocUnsafe(size) {
            if (typeof Buffer.allocUnsafe === 'function') {
              return Buffer.allocUnsafe(size);
            }
            if (typeof size !== 'number') {
              throw new TypeError('size must be a number');
            }
            if (size > MAX_LEN) {
              throw new RangeError('size is too large');
            }
            return new Buffer(size);
          }
          exports.from = function from(value, encodingOrOffset, length) {
            if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
              return Buffer.from(value, encodingOrOffset, length);
            }
            if (typeof value === 'number') {
              throw new TypeError('"value" argument must not be a number');
            }
            if (typeof value === 'string') {
              return new Buffer(value, encodingOrOffset);
            }
            if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
              var offset = encodingOrOffset;
              if (arguments.length === 1) {
                return new Buffer(value);
              }
              if (typeof offset === 'undefined') {
                offset = 0;
              }
              var len = length;
              if (typeof len === 'undefined') {
                len = value.byteLength - offset;
              }
              if (offset >= value.byteLength) {
                throw new RangeError('\'offset\' is out of bounds');
              }
              if (len > value.byteLength - offset) {
                throw new RangeError('\'length\' is out of bounds');
              }
              return new Buffer(value.slice(offset, offset + len));
            }
            if (Buffer.isBuffer(value)) {
              var out = new Buffer(value.length);
              value.copy(out, 0, 0, value.length);
              return out;
            }
            if (value) {
              if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
                return new Buffer(value);
              }
              if (value.type === 'Buffer' && Array.isArray(value.data)) {
                return new Buffer(value.data);
              }
            }

            throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
          }
          exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
            if (typeof Buffer.allocUnsafeSlow === 'function') {
              return Buffer.allocUnsafeSlow(size);
            }
            if (typeof size !== 'number') {
              throw new TypeError('size must be a number');
            }
            if (size >= MAX_LEN) {
              throw new RangeError('size is too large');
            }
            return new SlowBuffer(size);
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, (function () { return this; }())))

        /***/
      }),
      /* 494 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (Buffer) { // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          // NOTE: These type checking functions intentionally don't use `instanceof`
          // because it is fragile and can be easily faked with `Object.create()`.

          function isArray(arg) {
            if (Array.isArray) {
              return Array.isArray(arg);
            }
            return objectToString(arg) === '[object Array]';
          }
          exports.isArray = isArray;

          function isBoolean(arg) {
            return typeof arg === 'boolean';
          }
          exports.isBoolean = isBoolean;

          function isNull(arg) {
            return arg === null;
          }
          exports.isNull = isNull;

          function isNullOrUndefined(arg) {
            return arg == null;
          }
          exports.isNullOrUndefined = isNullOrUndefined;

          function isNumber(arg) {
            return typeof arg === 'number';
          }
          exports.isNumber = isNumber;

          function isString(arg) {
            return typeof arg === 'string';
          }
          exports.isString = isString;

          function isSymbol(arg) {
            return typeof arg === 'symbol';
          }
          exports.isSymbol = isSymbol;

          function isUndefined(arg) {
            return arg === void 0;
          }
          exports.isUndefined = isUndefined;

          function isRegExp(re) {
            return objectToString(re) === '[object RegExp]';
          }
          exports.isRegExp = isRegExp;

          function isObject(arg) {
            return typeof arg === 'object' && arg !== null;
          }
          exports.isObject = isObject;

          function isDate(d) {
            return objectToString(d) === '[object Date]';
          }
          exports.isDate = isDate;

          function isError(e) {
            return (objectToString(e) === '[object Error]' || e instanceof Error);
          }
          exports.isError = isError;

          function isFunction(arg) {
            return typeof arg === 'function';
          }
          exports.isFunction = isFunction;

          function isPrimitive(arg) {
            return arg === null ||
              typeof arg === 'boolean' ||
              typeof arg === 'number' ||
              typeof arg === 'string' ||
              typeof arg === 'symbol' || // ES6 symbol
              typeof arg === 'undefined';
          }
          exports.isPrimitive = isPrimitive;

          exports.isBuffer = Buffer.isBuffer;

          function objectToString(o) {
            return Object.prototype.toString.call(o);
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(480).Buffer))

        /***/
      }),
      /* 495 */
      /***/
      (function (module, exports) {

        /* (ignored) */

        /***/
      }),
      /* 496 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var Buffer = __webpack_require__(480).Buffer;
        /*<replacement>*/
        var bufferShim = __webpack_require__(493);
        /*</replacement>*/

        module.exports = BufferList;

        function BufferList() {
          this.head = null;
          this.tail = null;
          this.length = 0;
        }

        BufferList.prototype.push = function (v) {
          var entry = { data: v, next: null };
          if (this.length > 0) this.tail.next = entry;
          else this.head = entry;
          this.tail = entry;
          ++this.length;
        };

        BufferList.prototype.unshift = function (v) {
          var entry = { data: v, next: this.head };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        };

        BufferList.prototype.shift = function () {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;
          else this.head = this.head.next;
          --this.length;
          return ret;
        };

        BufferList.prototype.clear = function () {
          this.head = this.tail = null;
          this.length = 0;
        };

        BufferList.prototype.join = function (s) {
          if (this.length === 0) return '';
          var p = this.head;
          var ret = '' + p.data;
          while (p = p.next) {
            ret += s + p.data;
          }
          return ret;
        };

        BufferList.prototype.concat = function (n) {
          if (this.length === 0) return bufferShim.alloc(0);
          if (this.length === 1) return this.head.data;
          var ret = bufferShim.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            p.data.copy(ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        };

        /***/
      }),
      /* 497 */
      /***/
      (function (module, exports, __webpack_require__) {

        // a duplex stream is just a stream that is both readable and writable.
        // Since JS doesn't have multiple prototypal inheritance, this class
        // prototypally inherits from Readable, and then parasitically from
        // Writable.

        'use strict';

        /*<replacement>*/

        var objectKeys = Object.keys || function (obj) {
          var keys = [];
          for (var key in obj) {
            keys.push(key);
          }
          return keys;
        };
        /*</replacement>*/

        module.exports = Duplex;

        /*<replacement>*/
        var processNextTick = __webpack_require__(491);
        /*</replacement>*/

        /*<replacement>*/
        var util = __webpack_require__(494);
        util.inherits = __webpack_require__(487);
        /*</replacement>*/

        var Readable = __webpack_require__(490);
        var Writable = __webpack_require__(498);

        util.inherits(Duplex, Readable);

        var keys = objectKeys(Writable.prototype);
        for (var v = 0; v < keys.length; v++) {
          var method = keys[v];
          if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
        }

        function Duplex(options) {
          if (!(this instanceof Duplex)) return new Duplex(options);

          Readable.call(this, options);
          Writable.call(this, options);

          if (options && options.readable === false) this.readable = false;

          if (options && options.writable === false) this.writable = false;

          this.allowHalfOpen = true;
          if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

          this.once('end', onend);
        }

        // the no-half-open enforcer
        function onend() {
          // if we allow half-open state, or if the writable side ended,
          // then we're ok.
          if (this.allowHalfOpen || this._writableState.ended) return;

          // no more data can be written.
          // But allow more writes to happen in this tick.
          processNextTick(onEndNT, this);
        }

        function onEndNT(self) {
          self.end();
        }

        function forEach(xs, f) {
          for (var i = 0, l = xs.length; i < l; i++) {
            f(xs[i], i);
          }
        }

        /***/
      }),
      /* 498 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process, setImmediate) { // A bit simpler than readable streams.
          // Implement an async ._write(chunk, encoding, cb), and it'll handle all
          // the drain event emission and buffering.

          'use strict';

          module.exports = Writable;

          /*<replacement>*/
          var processNextTick = __webpack_require__(491);
          /*</replacement>*/

          /*<replacement>*/
          var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
          /*</replacement>*/

          /*<replacement>*/
          var Duplex;
          /*</replacement>*/

          Writable.WritableState = WritableState;

          /*<replacement>*/
          var util = __webpack_require__(494);
          util.inherits = __webpack_require__(487);
          /*</replacement>*/

          /*<replacement>*/
          var internalUtil = {
            deprecate: __webpack_require__(501)
          };
          /*</replacement>*/

          /*<replacement>*/
          var Stream = __webpack_require__(492);
          /*</replacement>*/

          var Buffer = __webpack_require__(480).Buffer;
          /*<replacement>*/
          var bufferShim = __webpack_require__(493);
          /*</replacement>*/

          util.inherits(Writable, Stream);

          function nop() {}

          function WriteReq(chunk, encoding, cb) {
            this.chunk = chunk;
            this.encoding = encoding;
            this.callback = cb;
            this.next = null;
          }

          function WritableState(options, stream) {
            Duplex = Duplex || __webpack_require__(497);

            options = options || {};

            // object stream flag to indicate whether or not this stream
            // contains buffers or objects.
            this.objectMode = !!options.objectMode;

            if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

            // the point at which write() starts returning false
            // Note: 0 is a valid value, means that we always return false if
            // the entire buffer is not flushed immediately on write()
            var hwm = options.highWaterMark;
            var defaultHwm = this.objectMode ? 16 : 16 * 1024;
            this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

            // cast to ints.
            this.highWaterMark = ~~this.highWaterMark;

            // drain event flag.
            this.needDrain = false;
            // at the start of calling end()
            this.ending = false;
            // when end() has been called, and returned
            this.ended = false;
            // when 'finish' is emitted
            this.finished = false;

            // should we decode strings into buffers before passing to _write?
            // this is here so that some node-core streams can optimize string
            // handling at a lower level.
            var noDecode = options.decodeStrings === false;
            this.decodeStrings = !noDecode;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || 'utf8';

            // not an actual buffer we keep track of, but a measurement
            // of how much we're waiting to get pushed to some underlying
            // socket or file.
            this.length = 0;

            // a flag to see when we're in the middle of a write.
            this.writing = false;

            // when true all writes will be buffered until .uncork() call
            this.corked = 0;

            // a flag to be able to tell if the onwrite cb is called immediately,
            // or on a later tick.  We set this to true at first, because any
            // actions that shouldn't happen until "later" should generally also
            // not happen before the first write call.
            this.sync = true;

            // a flag to know if we're processing previously buffered items, which
            // may call the _write() callback in the same tick, so that we don't
            // end up in an overlapped onwrite situation.
            this.bufferProcessing = false;

            // the callback that's passed to _write(chunk,cb)
            this.onwrite = function (er) {
              onwrite(stream, er);
            };

            // the callback that the user supplies to write(chunk,encoding,cb)
            this.writecb = null;

            // the amount that is being written when _write is called.
            this.writelen = 0;

            this.bufferedRequest = null;
            this.lastBufferedRequest = null;

            // number of pending user-supplied write callbacks
            // this must be 0 before 'finish' can be emitted
            this.pendingcb = 0;

            // emit prefinish if the only thing we're waiting for is _write cbs
            // This is relevant for synchronous Transform streams
            this.prefinished = false;

            // True if the error was already emitted and should not be thrown again
            this.errorEmitted = false;

            // count buffered requests
            this.bufferedRequestCount = 0;

            // allocate the first CorkedRequest, there is always
            // one allocated and free to use, and we maintain at most two
            this.corkedRequestsFree = new CorkedRequest(this);
          }

          WritableState.prototype.getBuffer = function getBuffer() {
            var current = this.bufferedRequest;
            var out = [];
            while (current) {
              out.push(current);
              current = current.next;
            }
            return out;
          };

          (function () {
            try {
              Object.defineProperty(WritableState.prototype, 'buffer', {
                get: internalUtil.deprecate(function () {
                  return this.getBuffer();
                }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
              });
            } catch (_) {}
          })();

          // Test _writableState for inheritance to account for Duplex streams,
          // whose prototype chain only points to Readable.
          var realHasInstance;
          if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
            realHasInstance = Function.prototype[Symbol.hasInstance];
            Object.defineProperty(Writable, Symbol.hasInstance, {
              value: function (object) {
                if (realHasInstance.call(this, object)) return true;

                return object && object._writableState instanceof WritableState;
              }
            });
          } else {
            realHasInstance = function (object) {
              return object instanceof this;
            };
          }

          function Writable(options) {
            Duplex = Duplex || __webpack_require__(497);

            // Writable ctor is applied to Duplexes, too.
            // `realHasInstance` is necessary because using plain `instanceof`
            // would return false, as no `_writableState` property is attached.

            // Trying to use the custom `instanceof` for Writable here will also break the
            // Node.js LazyTransform implementation, which has a non-trivial getter for
            // `_writableState` that would lead to infinite recursion.
            if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
              return new Writable(options);
            }

            this._writableState = new WritableState(options, this);

            // legacy.
            this.writable = true;

            if (options) {
              if (typeof options.write === 'function') this._write = options.write;

              if (typeof options.writev === 'function') this._writev = options.writev;
            }

            Stream.call(this);
          }

          // Otherwise people can pipe Writable streams, which is just wrong.
          Writable.prototype.pipe = function () {
            this.emit('error', new Error('Cannot pipe, not readable'));
          };

          function writeAfterEnd(stream, cb) {
            var er = new Error('write after end');
            // TODO: defer error events consistently everywhere, not just the cb
            stream.emit('error', er);
            processNextTick(cb, er);
          }

          // Checks that a user-supplied chunk is valid, especially for the particular
          // mode the stream is in. Currently this means that `null` is never accepted
          // and undefined/non-string values are only allowed in object mode.
          function validChunk(stream, state, chunk, cb) {
            var valid = true;
            var er = false;

            if (chunk === null) {
              er = new TypeError('May not write null values to stream');
            } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
              er = new TypeError('Invalid non-string/buffer chunk');
            }
            if (er) {
              stream.emit('error', er);
              processNextTick(cb, er);
              valid = false;
            }
            return valid;
          }

          Writable.prototype.write = function (chunk, encoding, cb) {
            var state = this._writableState;
            var ret = false;
            var isBuf = Buffer.isBuffer(chunk);

            if (typeof encoding === 'function') {
              cb = encoding;
              encoding = null;
            }

            if (isBuf) encoding = 'buffer';
            else if (!encoding) encoding = state.defaultEncoding;

            if (typeof cb !== 'function') cb = nop;

            if (state.ended) writeAfterEnd(this, cb);
            else if (isBuf || validChunk(this, state, chunk, cb)) {
              state.pendingcb++;
              ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
            }

            return ret;
          };

          Writable.prototype.cork = function () {
            var state = this._writableState;

            state.corked++;
          };

          Writable.prototype.uncork = function () {
            var state = this._writableState;

            if (state.corked) {
              state.corked--;

              if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
            }
          };

          Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
            // node::ParseEncoding() requires lower case.
            if (typeof encoding === 'string') encoding = encoding.toLowerCase();
            if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
            this._writableState.defaultEncoding = encoding;
            return this;
          };

          function decodeChunk(state, chunk, encoding) {
            if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
              chunk = bufferShim.from(chunk, encoding);
            }
            return chunk;
          }

          // if we're already writing something, then just put this
          // in the queue, and wait our turn.  Otherwise, call _write
          // If we return false, then we need a drain event, so set that flag.
          function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
            if (!isBuf) {
              chunk = decodeChunk(state, chunk, encoding);
              if (Buffer.isBuffer(chunk)) encoding = 'buffer';
            }
            var len = state.objectMode ? 1 : chunk.length;

            state.length += len;

            var ret = state.length < state.highWaterMark;
            // we must ensure that previous needDrain will not be reset to false.
            if (!ret) state.needDrain = true;

            if (state.writing || state.corked) {
              var last = state.lastBufferedRequest;
              state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
              if (last) {
                last.next = state.lastBufferedRequest;
              } else {
                state.bufferedRequest = state.lastBufferedRequest;
              }
              state.bufferedRequestCount += 1;
            } else {
              doWrite(stream, state, false, len, chunk, encoding, cb);
            }

            return ret;
          }

          function doWrite(stream, state, writev, len, chunk, encoding, cb) {
            state.writelen = len;
            state.writecb = cb;
            state.writing = true;
            state.sync = true;
            if (writev) stream._writev(chunk, state.onwrite);
            else stream._write(chunk, encoding, state.onwrite);
            state.sync = false;
          }

          function onwriteError(stream, state, sync, er, cb) {
            --state.pendingcb;
            if (sync) processNextTick(cb, er);
            else cb(er);

            stream._writableState.errorEmitted = true;
            stream.emit('error', er);
          }

          function onwriteStateUpdate(state) {
            state.writing = false;
            state.writecb = null;
            state.length -= state.writelen;
            state.writelen = 0;
          }

          function onwrite(stream, er) {
            var state = stream._writableState;
            var sync = state.sync;
            var cb = state.writecb;

            onwriteStateUpdate(state);

            if (er) onwriteError(stream, state, sync, er, cb);
            else {
              // Check if we're actually ready to finish, but don't emit yet
              var finished = needFinish(state);

              if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                clearBuffer(stream, state);
              }

              if (sync) {
                /*<replacement>*/
                asyncWrite(afterWrite, stream, state, finished, cb);
                /*</replacement>*/
              } else {
                afterWrite(stream, state, finished, cb);
              }
            }
          }

          function afterWrite(stream, state, finished, cb) {
            if (!finished) onwriteDrain(stream, state);
            state.pendingcb--;
            cb();
            finishMaybe(stream, state);
          }

          // Must force callback to be called on nextTick, so that we don't
          // emit 'drain' before the write() consumer gets the 'false' return
          // value, and has a chance to attach a 'drain' listener.
          function onwriteDrain(stream, state) {
            if (state.length === 0 && state.needDrain) {
              state.needDrain = false;
              stream.emit('drain');
            }
          }

          // if there's something in the buffer waiting, then process it
          function clearBuffer(stream, state) {
            state.bufferProcessing = true;
            var entry = state.bufferedRequest;

            if (stream._writev && entry && entry.next) {
              // Fast case, write everything using _writev()
              var l = state.bufferedRequestCount;
              var buffer = new Array(l);
              var holder = state.corkedRequestsFree;
              holder.entry = entry;

              var count = 0;
              while (entry) {
                buffer[count] = entry;
                entry = entry.next;
                count += 1;
              }

              doWrite(stream, state, true, state.length, buffer, '', holder.finish);

              // doWrite is almost always async, defer these to save a bit of time
              // as the hot path ends with doWrite
              state.pendingcb++;
              state.lastBufferedRequest = null;
              if (holder.next) {
                state.corkedRequestsFree = holder.next;
                holder.next = null;
              } else {
                state.corkedRequestsFree = new CorkedRequest(state);
              }
            } else {
              // Slow case, write chunks one-by-one
              while (entry) {
                var chunk = entry.chunk;
                var encoding = entry.encoding;
                var cb = entry.callback;
                var len = state.objectMode ? 1 : chunk.length;

                doWrite(stream, state, false, len, chunk, encoding, cb);
                entry = entry.next;
                // if we didn't call the onwrite immediately, then
                // it means that we need to wait until it does.
                // also, that means that the chunk and cb are currently
                // being processed, so move the buffer counter past them.
                if (state.writing) {
                  break;
                }
              }

              if (entry === null) state.lastBufferedRequest = null;
            }

            state.bufferedRequestCount = 0;
            state.bufferedRequest = entry;
            state.bufferProcessing = false;
          }

          Writable.prototype._write = function (chunk, encoding, cb) {
            cb(new Error('_write() is not implemented'));
          };

          Writable.prototype._writev = null;

          Writable.prototype.end = function (chunk, encoding, cb) {
            var state = this._writableState;

            if (typeof chunk === 'function') {
              cb = chunk;
              chunk = null;
              encoding = null;
            } else if (typeof encoding === 'function') {
              cb = encoding;
              encoding = null;
            }

            if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

            // .end() fully uncorks
            if (state.corked) {
              state.corked = 1;
              this.uncork();
            }

            // ignore unnecessary end() calls.
            if (!state.ending && !state.finished) endWritable(this, state, cb);
          };

          function needFinish(state) {
            return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
          }

          function prefinish(stream, state) {
            if (!state.prefinished) {
              state.prefinished = true;
              stream.emit('prefinish');
            }
          }

          function finishMaybe(stream, state) {
            var need = needFinish(state);
            if (need) {
              if (state.pendingcb === 0) {
                prefinish(stream, state);
                state.finished = true;
                stream.emit('finish');
              } else {
                prefinish(stream, state);
              }
            }
            return need;
          }

          function endWritable(stream, state, cb) {
            state.ending = true;
            finishMaybe(stream, state);
            if (cb) {
              if (state.finished) processNextTick(cb);
              else stream.once('finish', cb);
            }
            state.ended = true;
            stream.writable = false;
          }

          // It seems a linked list but it is not
          // there will be only 2 of these for each stream
          function CorkedRequest(state) {
            var _this = this;

            this.next = null;
            this.entry = null;
            this.finish = function (err) {
              var entry = _this.entry;
              _this.entry = null;
              while (entry) {
                var cb = entry.callback;
                state.pendingcb--;
                cb(err);
                entry = entry.next;
              }
              if (state.corkedRequestsFree) {
                state.corkedRequestsFree.next = _this;
              } else {
                state.corkedRequestsFree = _this;
              }
            };
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478), __webpack_require__(499).setImmediate))

        /***/
      }),
      /* 499 */
      /***/
      (function (module, exports, __webpack_require__) {

        var apply = Function.prototype.apply;

        // DOM APIs, for completeness

        exports.setTimeout = function () {
          return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
        };
        exports.setInterval = function () {
          return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
        };
        exports.clearTimeout =
          exports.clearInterval = function (timeout) {
            if (timeout) {
              timeout.close();
            }
          };

        function Timeout(id, clearFn) {
          this._id = id;
          this._clearFn = clearFn;
        }
        Timeout.prototype.unref = Timeout.prototype.ref = function () {};
        Timeout.prototype.close = function () {
          this._clearFn.call(window, this._id);
        };

        // Does not start the time, just sets up the members needed.
        exports.enroll = function (item, msecs) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = msecs;
        };

        exports.unenroll = function (item) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = -1;
        };

        exports._unrefActive = exports.active = function (item) {
          clearTimeout(item._idleTimeoutId);

          var msecs = item._idleTimeout;
          if (msecs >= 0) {
            item._idleTimeoutId = setTimeout(function onTimeout() {
              if (item._onTimeout)
                item._onTimeout();
            }, msecs);
          }
        };

        // setimmediate attaches itself to the global object
        __webpack_require__(500);
        exports.setImmediate = setImmediate;
        exports.clearImmediate = clearImmediate;


        /***/
      }),
      /* 500 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (global, process) {
          (function (global, undefined) {
            "use strict";

            if (global.setImmediate) {
              return;
            }

            var nextHandle = 1; // Spec says greater than zero
            var tasksByHandle = {};
            var currentlyRunningATask = false;
            var doc = global.document;
            var registerImmediate;

            function setImmediate(callback) {
              // Callback can either be a function or a string
              if (typeof callback !== "function") {
                callback = new Function("" + callback);
              }
              // Copy function arguments
              var args = new Array(arguments.length - 1);
              for (var i = 0; i < args.length; i++) {
                args[i] = arguments[i + 1];
              }
              // Store and register the task
              var task = { callback: callback, args: args };
              tasksByHandle[nextHandle] = task;
              registerImmediate(nextHandle);
              return nextHandle++;
            }

            function clearImmediate(handle) {
              delete tasksByHandle[handle];
            }

            function run(task) {
              var callback = task.callback;
              var args = task.args;
              switch (args.length) {
              case 0:
                callback();
                break;
              case 1:
                callback(args[0]);
                break;
              case 2:
                callback(args[0], args[1]);
                break;
              case 3:
                callback(args[0], args[1], args[2]);
                break;
              default:
                callback.apply(undefined, args);
                break;
              }
            }

            function runIfPresent(handle) {
              // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
              // So if we're currently running a task, we'll need to delay this invocation.
              if (currentlyRunningATask) {
                // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
                // "too much recursion" error.
                setTimeout(runIfPresent, 0, handle);
              } else {
                var task = tasksByHandle[handle];
                if (task) {
                  currentlyRunningATask = true;
                  try {
                    run(task);
                  } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                  }
                }
              }
            }

            function installNextTickImplementation() {
              registerImmediate = function (handle) {
                process.nextTick(function () { runIfPresent(handle); });
              };
            }

            function canUsePostMessage() {
              // The test against `importScripts` prevents this implementation from being installed inside a web worker,
              // where `global.postMessage` means something completely different and can't be used for this purpose.
              if (global.postMessage && !global.importScripts) {
                var postMessageIsAsynchronous = true;
                var oldOnMessage = global.onmessage;
                global.onmessage = function () {
                  postMessageIsAsynchronous = false;
                };
                global.postMessage("", "*");
                global.onmessage = oldOnMessage;
                return postMessageIsAsynchronous;
              }
            }

            function installPostMessageImplementation() {
              // Installs an event handler on `global` for the `message` event: see
              // * https://developer.mozilla.org/en/DOM/window.postMessage
              // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

              var messagePrefix = "setImmediate$" + Math.random() + "$";
              var onGlobalMessage = function (event) {
                if (event.source === global &&
                  typeof event.data === "string" &&
                  event.data.indexOf(messagePrefix) === 0) {
                  runIfPresent(+event.data.slice(messagePrefix.length));
                }
              };

              if (global.addEventListener) {
                global.addEventListener("message", onGlobalMessage, false);
              } else {
                global.attachEvent("onmessage", onGlobalMessage);
              }

              registerImmediate = function (handle) {
                global.postMessage(messagePrefix + handle, "*");
              };
            }

            function installMessageChannelImplementation() {
              var channel = new MessageChannel();
              channel.port1.onmessage = function (event) {
                var handle = event.data;
                runIfPresent(handle);
              };

              registerImmediate = function (handle) {
                channel.port2.postMessage(handle);
              };
            }

            function installReadyStateChangeImplementation() {
              var html = doc.documentElement;
              registerImmediate = function (handle) {
                // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
                // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
                var script = doc.createElement("script");
                script.onreadystatechange = function () {
                  runIfPresent(handle);
                  script.onreadystatechange = null;
                  html.removeChild(script);
                  script = null;
                };
                html.appendChild(script);
              };
            }

            function installSetTimeoutImplementation() {
              registerImmediate = function (handle) {
                setTimeout(runIfPresent, 0, handle);
              };
            }

            // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
            var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
            attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

            // Don't get fooled by e.g. browserify environments.
            if ({}.toString.call(global.process) === "[object process]") {
              // For Node.js before 0.9
              installNextTickImplementation();

            } else if (canUsePostMessage()) {
              // For non-IE10 modern browsers
              installPostMessageImplementation();

            } else if (global.MessageChannel) {
              // For web workers, where supported
              installMessageChannelImplementation();

            } else if (doc && "onreadystatechange" in doc.createElement("script")) {
              // For IE 6–8
              installReadyStateChangeImplementation();

            } else {
              // For older browsers
              installSetTimeoutImplementation();
            }

            attachTo.setImmediate = setImmediate;
            attachTo.clearImmediate = clearImmediate;
          }(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

          /* WEBPACK VAR INJECTION */
        }.call(exports, (function () { return this; }()), __webpack_require__(478)))

        /***/
      }),
      /* 501 */
      /***/
      (function (module, exports) {

        /* WEBPACK VAR INJECTION */
        (function (global) {
          /**
           * Module exports.
           */

          module.exports = deprecate;

          /**
           * Mark that a method should not be used.
           * Returns a modified function which warns once by default.
           *
           * If `localStorage.noDeprecation = true` is set, then it is a no-op.
           *
           * If `localStorage.throwDeprecation = true` is set, then deprecated functions
           * will throw an Error when invoked.
           *
           * If `localStorage.traceDeprecation = true` is set, then deprecated functions
           * will invoke `console.trace()` instead of `console.error()`.
           *
           * @param {Function} fn - the function to deprecate
           * @param {String} msg - the string to print to the console when `fn` is invoked
           * @returns {Function} a new "deprecated" version of `fn`
           * @api public
           */

          function deprecate(fn, msg) {
            if (config('noDeprecation')) {
              return fn;
            }

            var warned = false;

            function deprecated() {
              if (!warned) {
                if (config('throwDeprecation')) {
                  throw new Error(msg);
                } else if (config('traceDeprecation')) {
                  console.trace(msg);
                } else {
                  console.warn(msg);
                }
                warned = true;
              }
              return fn.apply(this, arguments);
            }

            return deprecated;
          }

          /**
           * Checks `localStorage` for boolean values for the given `name`.
           *
           * @param {String} name
           * @returns {Boolean}
           * @api private
           */

          function config(name) {
            // accessing global.localStorage can trigger a DOMException in sandboxed iframes
            try {
              if (!global.localStorage) return false;
            } catch (_) {
              return false;
            }
            var val = global.localStorage[name];
            if (null == val) return false;
            return String(val).toLowerCase() === 'true';
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, (function () { return this; }())))

        /***/
      }),
      /* 502 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var Buffer = __webpack_require__(480).Buffer;
        var bufferShim = __webpack_require__(493);

        var isEncoding = Buffer.isEncoding || function (encoding) {
          encoding = '' + encoding;
          switch (encoding && encoding.toLowerCase()) {
          case 'hex':
          case 'utf8':
          case 'utf-8':
          case 'ascii':
          case 'binary':
          case 'base64':
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
          case 'raw':
            return true;
          default:
            return false;
          }
        };

        function _normalizeEncoding(enc) {
          if (!enc) return 'utf8';
          var retried;
          while (true) {
            switch (enc) {
            case 'utf8':
            case 'utf-8':
              return 'utf8';
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return 'utf16le';
            case 'latin1':
            case 'binary':
              return 'latin1';
            case 'base64':
            case 'ascii':
            case 'hex':
              return enc;
            default:
              if (retried) return; // undefined
              enc = ('' + enc).toLowerCase();
              retried = true;
            }
          }
        };

        // Do not cache `Buffer.isEncoding` when checking encoding names as some
        // modules monkey-patch it to support additional encodings
        function normalizeEncoding(enc) {
          var nenc = _normalizeEncoding(enc);
          if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
          return nenc || enc;
        }

        // StringDecoder provides an interface for efficiently splitting a series of
        // buffers into a series of JS strings without breaking apart multi-byte
        // characters.
        exports.StringDecoder = StringDecoder;

        function StringDecoder(encoding) {
          this.encoding = normalizeEncoding(encoding);
          var nb;
          switch (this.encoding) {
          case 'utf16le':
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
          case 'utf8':
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
          case 'base64':
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
          }
          this.lastNeed = 0;
          this.lastTotal = 0;
          this.lastChar = bufferShim.allocUnsafe(nb);
        }

        StringDecoder.prototype.write = function (buf) {
          if (buf.length === 0) return '';
          var r;
          var i;
          if (this.lastNeed) {
            r = this.fillLast(buf);
            if (r === undefined) return '';
            i = this.lastNeed;
            this.lastNeed = 0;
          } else {
            i = 0;
          }
          if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
          return r || '';
        };

        StringDecoder.prototype.end = utf8End;

        // Returns only complete characters in a Buffer
        StringDecoder.prototype.text = utf8Text;

        // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
        StringDecoder.prototype.fillLast = function (buf) {
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
          this.lastNeed -= buf.length;
        };

        // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
        // continuation byte.
        function utf8CheckByte(byte) {
          if (byte <= 0x7F) return 0;
          else if (byte >> 5 === 0x06) return 2;
          else if (byte >> 4 === 0x0E) return 3;
          else if (byte >> 3 === 0x1E) return 4;
          return -1;
        }

        // Checks at most 3 bytes at the end of a Buffer in order to detect an
        // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
        // needed to complete the UTF-8 character (if applicable) are returned.
        function utf8CheckIncomplete(self, buf, i) {
          var j = buf.length - 1;
          if (j < i) return 0;
          var nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0) self.lastNeed = nb - 1;
            return nb;
          }
          if (--j < i) return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0) self.lastNeed = nb - 2;
            return nb;
          }
          if (--j < i) return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0) {
              if (nb === 2) nb = 0;
              else self.lastNeed = nb - 3;
            }
            return nb;
          }
          return 0;
        }

        // Validates as many continuation bytes for a multi-byte UTF-8 character as
        // needed or are available. If we see a non-continuation byte where we expect
        // one, we "replace" the validated continuation bytes we've seen so far with
        // UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
        // behavior. The continuation byte check is included three times in the case
        // where all of the continuation bytes for a character exist in the same buffer.
        // It is also done this way as a slight performance increase instead of using a
        // loop.
        function utf8CheckExtraBytes(self, buf, p) {
          if ((buf[0] & 0xC0) !== 0x80) {
            self.lastNeed = 0;
            return '\ufffd'.repeat(p);
          }
          if (self.lastNeed > 1 && buf.length > 1) {
            if ((buf[1] & 0xC0) !== 0x80) {
              self.lastNeed = 1;
              return '\ufffd'.repeat(p + 1);
            }
            if (self.lastNeed > 2 && buf.length > 2) {
              if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return '\ufffd'.repeat(p + 2);
              }
            }
          }
        }

        // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
        function utf8FillLast(buf) {
          var p = this.lastTotal - this.lastNeed;
          var r = utf8CheckExtraBytes(this, buf, p);
          if (r !== undefined) return r;
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, p, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, p, 0, buf.length);
          this.lastNeed -= buf.length;
        }

        // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
        // partial character, the character's bytes are buffered until the required
        // number of bytes are available.
        function utf8Text(buf, i) {
          var total = utf8CheckIncomplete(this, buf, i);
          if (!this.lastNeed) return buf.toString('utf8', i);
          this.lastTotal = total;
          var end = buf.length - (total - this.lastNeed);
          buf.copy(this.lastChar, 0, end);
          return buf.toString('utf8', i, end);
        }

        // For UTF-8, a replacement character for each buffered byte of a (partial)
        // character needs to be added to the output.
        function utf8End(buf) {
          var r = buf && buf.length ? this.write(buf) : '';
          if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
          return r;
        }

        // UTF-16LE typically needs two bytes per character, but even if we have an even
        // number of bytes available, we need to check if we end on a leading/high
        // surrogate. In that case, we need to wait for the next two bytes in order to
        // decode the last character properly.
        function utf16Text(buf, i) {
          if ((buf.length - i) % 2 === 0) {
            var r = buf.toString('utf16le', i);
            if (r) {
              var c = r.charCodeAt(r.length - 1);
              if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
              }
            }
            return r;
          }
          this.lastNeed = 1;
          this.lastTotal = 2;
          this.lastChar[0] = buf[buf.length - 1];
          return buf.toString('utf16le', i, buf.length - 1);
        }

        // For UTF-16LE we do not explicitly append special replacement characters if we
        // end on a partial character, we simply let v8 handle that.
        function utf16End(buf) {
          var r = buf && buf.length ? this.write(buf) : '';
          if (this.lastNeed) {
            var end = this.lastTotal - this.lastNeed;
            return r + this.lastChar.toString('utf16le', 0, end);
          }
          return r;
        }

        function base64Text(buf, i) {
          var n = (buf.length - i) % 3;
          if (n === 0) return buf.toString('base64', i);
          this.lastNeed = 3 - n;
          this.lastTotal = 3;
          if (n === 1) {
            this.lastChar[0] = buf[buf.length - 1];
          } else {
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
          }
          return buf.toString('base64', i, buf.length - n);
        }

        function base64End(buf) {
          var r = buf && buf.length ? this.write(buf) : '';
          if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
          return r;
        }

        // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
        function simpleWrite(buf) {
          return buf.toString(this.encoding);
        }

        function simpleEnd(buf) {
          return buf && buf.length ? this.write(buf) : '';
        }

        /***/
      }),
      /* 503 */
      /***/
      (function (module, exports, __webpack_require__) {

        // a transform stream is a readable/writable stream where you do
        // something with the data.  Sometimes it's called a "filter",
        // but that's not a great name for it, since that implies a thing where
        // some bits pass through, and others are simply ignored.  (That would
        // be a valid example of a transform, of course.)
        //
        // While the output is causally related to the input, it's not a
        // necessarily symmetric or synchronous transformation.  For example,
        // a zlib stream might take multiple plain-text writes(), and then
        // emit a single compressed chunk some time in the future.
        //
        // Here's how this works:
        //
        // The Transform stream has all the aspects of the readable and writable
        // stream classes.  When you write(chunk), that calls _write(chunk,cb)
        // internally, and returns false if there's a lot of pending writes
        // buffered up.  When you call read(), that calls _read(n) until
        // there's enough pending readable data buffered up.
        //
        // In a transform stream, the written data is placed in a buffer.  When
        // _read(n) is called, it transforms the queued up data, calling the
        // buffered _write cb's as it consumes chunks.  If consuming a single
        // written chunk would result in multiple output chunks, then the first
        // outputted bit calls the readcb, and subsequent chunks just go into
        // the read buffer, and will cause it to emit 'readable' if necessary.
        //
        // This way, back-pressure is actually determined by the reading side,
        // since _read has to be called to start processing a new chunk.  However,
        // a pathological inflate type of transform can cause excessive buffering
        // here.  For example, imagine a stream where every byte of input is
        // interpreted as an integer from 0-255, and then results in that many
        // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
        // 1kb of data being output.  In this case, you could write a very small
        // amount of input, and end up with a very large amount of output.  In
        // such a pathological inflating mechanism, there'd be no way to tell
        // the system to stop doing the transform.  A single 4MB write could
        // cause the system to run out of memory.
        //
        // However, even in such a pathological case, only a single written chunk
        // would be consumed, and then the rest would wait (un-transformed) until
        // the results of the previous transformed chunk were consumed.

        'use strict';

        module.exports = Transform;

        var Duplex = __webpack_require__(497);

        /*<replacement>*/
        var util = __webpack_require__(494);
        util.inherits = __webpack_require__(487);
        /*</replacement>*/

        util.inherits(Transform, Duplex);

        function TransformState(stream) {
          this.afterTransform = function (er, data) {
            return afterTransform(stream, er, data);
          };

          this.needTransform = false;
          this.transforming = false;
          this.writecb = null;
          this.writechunk = null;
          this.writeencoding = null;
        }

        function afterTransform(stream, er, data) {
          var ts = stream._transformState;
          ts.transforming = false;

          var cb = ts.writecb;

          if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

          ts.writechunk = null;
          ts.writecb = null;

          if (data !== null && data !== undefined) stream.push(data);

          cb(er);

          var rs = stream._readableState;
          rs.reading = false;
          if (rs.needReadable || rs.length < rs.highWaterMark) {
            stream._read(rs.highWaterMark);
          }
        }

        function Transform(options) {
          if (!(this instanceof Transform)) return new Transform(options);

          Duplex.call(this, options);

          this._transformState = new TransformState(this);

          var stream = this;

          // start out asking for a readable event once data is transformed.
          this._readableState.needReadable = true;

          // we have implemented the _read method, and done the other things
          // that Readable wants before the first _read call, so unset the
          // sync guard flag.
          this._readableState.sync = false;

          if (options) {
            if (typeof options.transform === 'function') this._transform = options.transform;

            if (typeof options.flush === 'function') this._flush = options.flush;
          }

          // When the writable side finishes, then flush out anything remaining.
          this.once('prefinish', function () {
            if (typeof this._flush === 'function') this._flush(function (er, data) {
              done(stream, er, data);
            });
            else done(stream);
          });
        }

        Transform.prototype.push = function (chunk, encoding) {
          this._transformState.needTransform = false;
          return Duplex.prototype.push.call(this, chunk, encoding);
        };

        // This is the part where you do stuff!
        // override this function in implementation classes.
        // 'chunk' is an input chunk.
        //
        // Call `push(newChunk)` to pass along transformed output
        // to the readable side.  You may call 'push' zero or more times.
        //
        // Call `cb(err)` when you are done with this chunk.  If you pass
        // an error, then that'll put the hurt on the whole operation.  If you
        // never call cb(), then you'll never get another chunk.
        Transform.prototype._transform = function (chunk, encoding, cb) {
          throw new Error('_transform() is not implemented');
        };

        Transform.prototype._write = function (chunk, encoding, cb) {
          var ts = this._transformState;
          ts.writecb = cb;
          ts.writechunk = chunk;
          ts.writeencoding = encoding;
          if (!ts.transforming) {
            var rs = this._readableState;
            if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
          }
        };

        // Doesn't matter what the args are here.
        // _transform does all the work.
        // That we got here means that the readable side wants more data.
        Transform.prototype._read = function (n) {
          var ts = this._transformState;

          if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
            ts.transforming = true;
            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
          } else {
            // mark that we need a transform, so that any data that comes in
            // will get processed, now that we've asked for it.
            ts.needTransform = true;
          }
        };

        function done(stream, er, data) {
          if (er) return stream.emit('error', er);

          if (data !== null && data !== undefined) stream.push(data);

          // if there's nothing in the write buffer, then that means
          // that nothing more will ever be provided
          var ws = stream._writableState;
          var ts = stream._transformState;

          if (ws.length) throw new Error('Calling transform done when ws.length != 0');

          if (ts.transforming) throw new Error('Calling transform done when still transforming');

          return stream.push(null);
        }

        /***/
      }),
      /* 504 */
      /***/
      (function (module, exports, __webpack_require__) {

        // a passthrough stream.
        // basically just the most minimal sort of Transform stream.
        // Every written chunk gets output as-is.

        'use strict';

        module.exports = PassThrough;

        var Transform = __webpack_require__(503);

        /*<replacement>*/
        var util = __webpack_require__(494);
        util.inherits = __webpack_require__(487);
        /*</replacement>*/

        util.inherits(PassThrough, Transform);

        function PassThrough(options) {
          if (!(this instanceof PassThrough)) return new PassThrough(options);

          Transform.call(this, options);
        }

        PassThrough.prototype._transform = function (chunk, encoding, cb) {
          cb(null, chunk);
        };

        /***/
      }),
      /* 505 */
      /***/
      (function (module, exports, __webpack_require__) {

        var Buffer = __webpack_require__(480).Buffer

        module.exports = function (buf) {
          // If the buffer is backed by a Uint8Array, a faster version will work
          if (buf instanceof Uint8Array) {
            // If the buffer isn't a subarray, return the underlying ArrayBuffer
            if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
              return buf.buffer
            } else if (typeof buf.buffer.slice === 'function') {
              // Otherwise we need to get a proper copy
              return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
            }
          }

          if (Buffer.isBuffer(buf)) {
            // This is the slow version that will work with any Buffer
            // implementation (even in old browsers)
            var arrayCopy = new Uint8Array(buf.length)
            var len = buf.length
            for (var i = 0; i < len; i++) {
              arrayCopy[i] = buf[i]
            }
            return arrayCopy.buffer
          } else {
            throw new Error('Argument must be a Buffer')
          }
        }


        /***/
      }),
      /* 506 */
      /***/
      (function (module, exports) {

        module.exports = extend

        var hasOwnProperty = Object.prototype.hasOwnProperty;

        function extend() {
          var target = {}

          for (var i = 0; i < arguments.length; i++) {
            var source = arguments[i]

            for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }

          return target
        }


        /***/
      }),
      /* 507 */
      /***/
      (function (module, exports) {

        module.exports = {
          "100": "Continue",
          "101": "Switching Protocols",
          "102": "Processing",
          "200": "OK",
          "201": "Created",
          "202": "Accepted",
          "203": "Non-Authoritative Information",
          "204": "No Content",
          "205": "Reset Content",
          "206": "Partial Content",
          "207": "Multi-Status",
          "208": "Already Reported",
          "226": "IM Used",
          "300": "Multiple Choices",
          "301": "Moved Permanently",
          "302": "Found",
          "303": "See Other",
          "304": "Not Modified",
          "305": "Use Proxy",
          "307": "Temporary Redirect",
          "308": "Permanent Redirect",
          "400": "Bad Request",
          "401": "Unauthorized",
          "402": "Payment Required",
          "403": "Forbidden",
          "404": "Not Found",
          "405": "Method Not Allowed",
          "406": "Not Acceptable",
          "407": "Proxy Authentication Required",
          "408": "Request Timeout",
          "409": "Conflict",
          "410": "Gone",
          "411": "Length Required",
          "412": "Precondition Failed",
          "413": "Payload Too Large",
          "414": "URI Too Long",
          "415": "Unsupported Media Type",
          "416": "Range Not Satisfiable",
          "417": "Expectation Failed",
          "418": "I'm a teapot",
          "421": "Misdirected Request",
          "422": "Unprocessable Entity",
          "423": "Locked",
          "424": "Failed Dependency",
          "425": "Unordered Collection",
          "426": "Upgrade Required",
          "428": "Precondition Required",
          "429": "Too Many Requests",
          "431": "Request Header Fields Too Large",
          "451": "Unavailable For Legal Reasons",
          "500": "Internal Server Error",
          "501": "Not Implemented",
          "502": "Bad Gateway",
          "503": "Service Unavailable",
          "504": "Gateway Timeout",
          "505": "HTTP Version Not Supported",
          "506": "Variant Also Negotiates",
          "507": "Insufficient Storage",
          "508": "Loop Detected",
          "509": "Bandwidth Limit Exceeded",
          "510": "Not Extended",
          "511": "Network Authentication Required"
        }


        /***/
      }),
      /* 508 */
      /***/
      (function (module, exports, __webpack_require__) {

        var http = __webpack_require__(484);

        var https = module.exports;

        for (var key in http) {
          if (http.hasOwnProperty(key)) https[key] = http[key];
        };

        https.request = function (params, cb) {
          if (!params) params = {};
          params.scheme = 'https';
          params.protocol = 'https:';
          return http.request.call(this, params, cb);
        }


        /***/
      }),
      /* 509 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) {
          var Transform = __webpack_require__(510),
            inherits = __webpack_require__(522).inherits,
            xtend = __webpack_require__(506)

          function DestroyableTransform(opts) {
            Transform.call(this, opts)
            this._destroyed = false
          }

          inherits(DestroyableTransform, Transform)

          DestroyableTransform.prototype.destroy = function (err) {
            if (this._destroyed) return
            this._destroyed = true

            var self = this
            process.nextTick(function () {
              if (err)
                self.emit('error', err)
              self.emit('close')
            })
          }

          // a noop _transform function
          function noop(chunk, enc, callback) {
            callback(null, chunk)
          }


          // create a new export function, used by both the main export and
          // the .ctor export, contains common logic for dealing with arguments
          function through2(construct) {
            return function (options, transform, flush) {
              if (typeof options == 'function') {
                flush = transform
                transform = options
                options = {}
              }

              if (typeof transform != 'function')
                transform = noop

              if (typeof flush != 'function')
                flush = null

              return construct(options, transform, flush)
            }
          }


          // main export, just make me a transform stream!
          module.exports = through2(function (options, transform, flush) {
            var t2 = new DestroyableTransform(options)

            t2._transform = transform

            if (flush)
              t2._flush = flush

            return t2
          })


          // make me a reusable prototype that I can `new`, or implicitly `new`
          // with a constructor call
          module.exports.ctor = through2(function (options, transform, flush) {
            function Through2(override) {
              if (!(this instanceof Through2))
                return new Through2(override)

              this.options = xtend(options, override)

              DestroyableTransform.call(this, this.options)
            }

            inherits(Through2, DestroyableTransform)

            Through2.prototype._transform = transform

            if (flush)
              Through2.prototype._flush = flush

            return Through2
          })


          module.exports.obj = through2(function (options, transform, flush) {
            var t2 = new DestroyableTransform(xtend({ objectMode: true, highWaterMark: 16 }, options))

            t2._transform = transform

            if (flush)
              t2._flush = flush

            return t2
          })

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 510 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(511)


        /***/
      }),
      /* 511 */
      /***/
      (function (module, exports, __webpack_require__) {

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.


        // a transform stream is a readable/writable stream where you do
        // something with the data.  Sometimes it's called a "filter",
        // but that's not a great name for it, since that implies a thing where
        // some bits pass through, and others are simply ignored.  (That would
        // be a valid example of a transform, of course.)
        //
        // While the output is causally related to the input, it's not a
        // necessarily symmetric or synchronous transformation.  For example,
        // a zlib stream might take multiple plain-text writes(), and then
        // emit a single compressed chunk some time in the future.
        //
        // Here's how this works:
        //
        // The Transform stream has all the aspects of the readable and writable
        // stream classes.  When you write(chunk), that calls _write(chunk,cb)
        // internally, and returns false if there's a lot of pending writes
        // buffered up.  When you call read(), that calls _read(n) until
        // there's enough pending readable data buffered up.
        //
        // In a transform stream, the written data is placed in a buffer.  When
        // _read(n) is called, it transforms the queued up data, calling the
        // buffered _write cb's as it consumes chunks.  If consuming a single
        // written chunk would result in multiple output chunks, then the first
        // outputted bit calls the readcb, and subsequent chunks just go into
        // the read buffer, and will cause it to emit 'readable' if necessary.
        //
        // This way, back-pressure is actually determined by the reading side,
        // since _read has to be called to start processing a new chunk.  However,
        // a pathological inflate type of transform can cause excessive buffering
        // here.  For example, imagine a stream where every byte of input is
        // interpreted as an integer from 0-255, and then results in that many
        // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
        // 1kb of data being output.  In this case, you could write a very small
        // amount of input, and end up with a very large amount of output.  In
        // such a pathological inflating mechanism, there'd be no way to tell
        // the system to stop doing the transform.  A single 4MB write could
        // cause the system to run out of memory.
        //
        // However, even in such a pathological case, only a single written chunk
        // would be consumed, and then the rest would wait (un-transformed) until
        // the results of the previous transformed chunk were consumed.

        module.exports = Transform;

        var Duplex = __webpack_require__(512);

        /*<replacement>*/
        var util = __webpack_require__(494);
        util.inherits = __webpack_require__(487);
        /*</replacement>*/

        util.inherits(Transform, Duplex);


        function TransformState(options, stream) {
          this.afterTransform = function (er, data) {
            return afterTransform(stream, er, data);
          };

          this.needTransform = false;
          this.transforming = false;
          this.writecb = null;
          this.writechunk = null;
        }

        function afterTransform(stream, er, data) {
          var ts = stream._transformState;
          ts.transforming = false;

          var cb = ts.writecb;

          if (!cb)
            return stream.emit('error', new Error('no writecb in Transform class'));

          ts.writechunk = null;
          ts.writecb = null;

          if (data !== null && data !== undefined)
            stream.push(data);

          if (cb)
            cb(er);

          var rs = stream._readableState;
          rs.reading = false;
          if (rs.needReadable || rs.length < rs.highWaterMark) {
            stream._read(rs.highWaterMark);
          }
        }


        function Transform(options) {
          if (!(this instanceof Transform))
            return new Transform(options);

          Duplex.call(this, options);

          var ts = this._transformState = new TransformState(options, this);

          // when the writable side finishes, then flush out anything remaining.
          var stream = this;

          // start out asking for a readable event once data is transformed.
          this._readableState.needReadable = true;

          // we have implemented the _read method, and done the other things
          // that Readable wants before the first _read call, so unset the
          // sync guard flag.
          this._readableState.sync = false;

          this.once('finish', function () {
            if ('function' === typeof this._flush)
              this._flush(function (er) {
                done(stream, er);
              });
            else
              done(stream);
          });
        }

        Transform.prototype.push = function (chunk, encoding) {
          this._transformState.needTransform = false;
          return Duplex.prototype.push.call(this, chunk, encoding);
        };

        // This is the part where you do stuff!
        // override this function in implementation classes.
        // 'chunk' is an input chunk.
        //
        // Call `push(newChunk)` to pass along transformed output
        // to the readable side.  You may call 'push' zero or more times.
        //
        // Call `cb(err)` when you are done with this chunk.  If you pass
        // an error, then that'll put the hurt on the whole operation.  If you
        // never call cb(), then you'll never get another chunk.
        Transform.prototype._transform = function (chunk, encoding, cb) {
          throw new Error('not implemented');
        };

        Transform.prototype._write = function (chunk, encoding, cb) {
          var ts = this._transformState;
          ts.writecb = cb;
          ts.writechunk = chunk;
          ts.writeencoding = encoding;
          if (!ts.transforming) {
            var rs = this._readableState;
            if (ts.needTransform ||
              rs.needReadable ||
              rs.length < rs.highWaterMark)
              this._read(rs.highWaterMark);
          }
        };

        // Doesn't matter what the args are here.
        // _transform does all the work.
        // That we got here means that the readable side wants more data.
        Transform.prototype._read = function (n) {
          var ts = this._transformState;

          if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
            ts.transforming = true;
            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
          } else {
            // mark that we need a transform, so that any data that comes in
            // will get processed, now that we've asked for it.
            ts.needTransform = true;
          }
        };


        function done(stream, er) {
          if (er)
            return stream.emit('error', er);

          // if there's nothing in the write buffer, then that means
          // that nothing more will ever be provided
          var ws = stream._writableState;
          var rs = stream._readableState;
          var ts = stream._transformState;

          if (ws.length)
            throw new Error('calling transform done when ws.length != 0');

          if (ts.transforming)
            throw new Error('calling transform done when still transforming');

          return stream.push(null);
        }


        /***/
      }),
      /* 512 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) { // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          // a duplex stream is just a stream that is both readable and writable.
          // Since JS doesn't have multiple prototypal inheritance, this class
          // prototypally inherits from Readable, and then parasitically from
          // Writable.

          module.exports = Duplex;

          /*<replacement>*/
          var objectKeys = Object.keys || function (obj) {
              var keys = [];
              for (var key in obj) keys.push(key);
              return keys;
            }
            /*</replacement>*/


          /*<replacement>*/
          var util = __webpack_require__(494);
          util.inherits = __webpack_require__(487);
          /*</replacement>*/

          var Readable = __webpack_require__(513);
          var Writable = __webpack_require__(521);

          util.inherits(Duplex, Readable);

          forEach(objectKeys(Writable.prototype), function (method) {
            if (!Duplex.prototype[method])
              Duplex.prototype[method] = Writable.prototype[method];
          });

          function Duplex(options) {
            if (!(this instanceof Duplex))
              return new Duplex(options);

            Readable.call(this, options);
            Writable.call(this, options);

            if (options && options.readable === false)
              this.readable = false;

            if (options && options.writable === false)
              this.writable = false;

            this.allowHalfOpen = true;
            if (options && options.allowHalfOpen === false)
              this.allowHalfOpen = false;

            this.once('end', onend);
          }

          // the no-half-open enforcer
          function onend() {
            // if we allow half-open state, or if the writable side ended,
            // then we're ok.
            if (this.allowHalfOpen || this._writableState.ended)
              return;

            // no more data can be written.
            // But allow more writes to happen in this tick.
            process.nextTick(this.end.bind(this));
          }

          function forEach(xs, f) {
            for (var i = 0, l = xs.length; i < l; i++) {
              f(xs[i], i);
            }
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 513 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) { // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          module.exports = Readable;

          /*<replacement>*/
          var isArray = __webpack_require__(514);
          /*</replacement>*/


          /*<replacement>*/
          var Buffer = __webpack_require__(480).Buffer;
          /*</replacement>*/

          Readable.ReadableState = ReadableState;

          var EE = __webpack_require__(476).EventEmitter;

          /*<replacement>*/
          if (!EE.listenerCount) EE.listenerCount = function (emitter, type) {
            return emitter.listeners(type).length;
          };
          /*</replacement>*/

          var Stream = __webpack_require__(515);

          /*<replacement>*/
          var util = __webpack_require__(494);
          util.inherits = __webpack_require__(487);
          /*</replacement>*/

          var StringDecoder;

          util.inherits(Readable, Stream);

          function ReadableState(options, stream) {
            options = options || {};

            // the point at which it stops calling _read() to fill the buffer
            // Note: 0 is a valid value, means "don't call _read preemptively ever"
            var hwm = options.highWaterMark;
            this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

            // cast to ints.
            this.highWaterMark = ~~this.highWaterMark;

            this.buffer = [];
            this.length = 0;
            this.pipes = null;
            this.pipesCount = 0;
            this.flowing = false;
            this.ended = false;
            this.endEmitted = false;
            this.reading = false;

            // In streams that never have any data, and do push(null) right away,
            // the consumer can miss the 'end' event if they do some I/O before
            // consuming the stream.  So, we don't emit('end') until some reading
            // happens.
            this.calledRead = false;

            // a flag to be able to tell if the onwrite cb is called immediately,
            // or on a later tick.  We set this to true at first, becuase any
            // actions that shouldn't happen until "later" should generally also
            // not happen before the first write call.
            this.sync = true;

            // whenever we return null, then we set a flag to say
            // that we're awaiting a 'readable' event emission.
            this.needReadable = false;
            this.emittedReadable = false;
            this.readableListening = false;


            // object stream flag. Used to make read(n) ignore n and to
            // make all the buffer merging and length checks go away
            this.objectMode = !!options.objectMode;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || 'utf8';

            // when piping, we only care about 'readable' events that happen
            // after read()ing all the bytes and not getting any pushback.
            this.ranOut = false;

            // the number of writers that are awaiting a drain event in .pipe()s
            this.awaitDrain = 0;

            // if true, a maybeReadMore has been scheduled
            this.readingMore = false;

            this.decoder = null;
            this.encoding = null;
            if (options.encoding) {
              if (!StringDecoder)
                StringDecoder = __webpack_require__(520).StringDecoder;
              this.decoder = new StringDecoder(options.encoding);
              this.encoding = options.encoding;
            }
          }

          function Readable(options) {
            if (!(this instanceof Readable))
              return new Readable(options);

            this._readableState = new ReadableState(options, this);

            // legacy
            this.readable = true;

            Stream.call(this);
          }

          // Manually shove something into the read() buffer.
          // This returns true if the highWaterMark has not been hit yet,
          // similar to how Writable.write() returns true if you should
          // write() some more.
          Readable.prototype.push = function (chunk, encoding) {
            var state = this._readableState;

            if (typeof chunk === 'string' && !state.objectMode) {
              encoding = encoding || state.defaultEncoding;
              if (encoding !== state.encoding) {
                chunk = new Buffer(chunk, encoding);
                encoding = '';
              }
            }

            return readableAddChunk(this, state, chunk, encoding, false);
          };

          // Unshift should *always* be something directly out of read()
          Readable.prototype.unshift = function (chunk) {
            var state = this._readableState;
            return readableAddChunk(this, state, chunk, '', true);
          };

          function readableAddChunk(stream, state, chunk, encoding, addToFront) {
            var er = chunkInvalid(state, chunk);
            if (er) {
              stream.emit('error', er);
            } else if (chunk === null || chunk === undefined) {
              state.reading = false;
              if (!state.ended)
                onEofChunk(stream, state);
            } else if (state.objectMode || chunk && chunk.length > 0) {
              if (state.ended && !addToFront) {
                var e = new Error('stream.push() after EOF');
                stream.emit('error', e);
              } else if (state.endEmitted && addToFront) {
                var e = new Error('stream.unshift() after end event');
                stream.emit('error', e);
              } else {
                if (state.decoder && !addToFront && !encoding)
                  chunk = state.decoder.write(chunk);

                // update the buffer info.
                state.length += state.objectMode ? 1 : chunk.length;
                if (addToFront) {
                  state.buffer.unshift(chunk);
                } else {
                  state.reading = false;
                  state.buffer.push(chunk);
                }

                if (state.needReadable)
                  emitReadable(stream);

                maybeReadMore(stream, state);
              }
            } else if (!addToFront) {
              state.reading = false;
            }

            return needMoreData(state);
          }



          // if it's past the high water mark, we can push in some more.
          // Also, if we have no data yet, we can stand some
          // more bytes.  This is to work around cases where hwm=0,
          // such as the repl.  Also, if the push() triggered a
          // readable event, and the user called read(largeNumber) such that
          // needReadable was set, then we ought to push more, so that another
          // 'readable' event will be triggered.
          function needMoreData(state) {
            return !state.ended &&
              (state.needReadable ||
                state.length < state.highWaterMark ||
                state.length === 0);
          }

          // backwards compatibility.
          Readable.prototype.setEncoding = function (enc) {
            if (!StringDecoder)
              StringDecoder = __webpack_require__(520).StringDecoder;
            this._readableState.decoder = new StringDecoder(enc);
            this._readableState.encoding = enc;
          };

          // Don't raise the hwm > 128MB
          var MAX_HWM = 0x800000;

          function roundUpToNextPowerOf2(n) {
            if (n >= MAX_HWM) {
              n = MAX_HWM;
            } else {
              // Get the next highest power of 2
              n--;
              for (var p = 1; p < 32; p <<= 1) n |= n >> p;
              n++;
            }
            return n;
          }

          function howMuchToRead(n, state) {
            if (state.length === 0 && state.ended)
              return 0;

            if (state.objectMode)
              return n === 0 ? 0 : 1;

            if (n === null || isNaN(n)) {
              // only flow one buffer at a time
              if (state.flowing && state.buffer.length)
                return state.buffer[0].length;
              else
                return state.length;
            }

            if (n <= 0)
              return 0;

            // If we're asking for more than the target buffer level,
            // then raise the water mark.  Bump up to the next highest
            // power of 2, to prevent increasing it excessively in tiny
            // amounts.
            if (n > state.highWaterMark)
              state.highWaterMark = roundUpToNextPowerOf2(n);

            // don't have that much.  return null, unless we've ended.
            if (n > state.length) {
              if (!state.ended) {
                state.needReadable = true;
                return 0;
              } else
                return state.length;
            }

            return n;
          }

          // you can override either this method, or the async _read(n) below.
          Readable.prototype.read = function (n) {
            var state = this._readableState;
            state.calledRead = true;
            var nOrig = n;
            var ret;

            if (typeof n !== 'number' || n > 0)
              state.emittedReadable = false;

            // if we're doing read(0) to trigger a readable event, but we
            // already have a bunch of data in the buffer, then just trigger
            // the 'readable' event and move on.
            if (n === 0 &&
              state.needReadable &&
              (state.length >= state.highWaterMark || state.ended)) {
              emitReadable(this);
              return null;
            }

            n = howMuchToRead(n, state);

            // if we've ended, and we're now clear, then finish it up.
            if (n === 0 && state.ended) {
              ret = null;

              // In cases where the decoder did not receive enough data
              // to produce a full chunk, then immediately received an
              // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].
              // howMuchToRead will see this and coerce the amount to
              // read to zero (because it's looking at the length of the
              // first <Buffer > in state.buffer), and we'll end up here.
              //
              // This can only happen via state.decoder -- no other venue
              // exists for pushing a zero-length chunk into state.buffer
              // and triggering this behavior. In this case, we return our
              // remaining data and end the stream, if appropriate.
              if (state.length > 0 && state.decoder) {
                ret = fromList(n, state);
                state.length -= ret.length;
              }

              if (state.length === 0)
                endReadable(this);

              return ret;
            }

            // All the actual chunk generation logic needs to be
            // *below* the call to _read.  The reason is that in certain
            // synthetic stream cases, such as passthrough streams, _read
            // may be a completely synchronous operation which may change
            // the state of the read buffer, providing enough data when
            // before there was *not* enough.
            //
            // So, the steps are:
            // 1. Figure out what the state of things will be after we do
            // a read from the buffer.
            //
            // 2. If that resulting state will trigger a _read, then call _read.
            // Note that this may be asynchronous, or synchronous.  Yes, it is
            // deeply ugly to write APIs this way, but that still doesn't mean
            // that the Readable class should behave improperly, as streams are
            // designed to be sync/async agnostic.
            // Take note if the _read call is sync or async (ie, if the read call
            // has returned yet), so that we know whether or not it's safe to emit
            // 'readable' etc.
            //
            // 3. Actually pull the requested chunks out of the buffer and return.

            // if we need a readable event, then we need to do some reading.
            var doRead = state.needReadable;

            // if we currently have less than the highWaterMark, then also read some
            if (state.length - n <= state.highWaterMark)
              doRead = true;

            // however, if we've ended, then there's no point, and if we're already
            // reading, then it's unnecessary.
            if (state.ended || state.reading)
              doRead = false;

            if (doRead) {
              state.reading = true;
              state.sync = true;
              // if the length is currently zero, then we *need* a readable event.
              if (state.length === 0)
                state.needReadable = true;
              // call internal read method
              this._read(state.highWaterMark);
              state.sync = false;
            }

            // If _read called its callback synchronously, then `reading`
            // will be false, and we need to re-evaluate how much data we
            // can return to the user.
            if (doRead && !state.reading)
              n = howMuchToRead(nOrig, state);

            if (n > 0)
              ret = fromList(n, state);
            else
              ret = null;

            if (ret === null) {
              state.needReadable = true;
              n = 0;
            }

            state.length -= n;

            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            if (state.length === 0 && !state.ended)
              state.needReadable = true;

            // If we happened to read() exactly the remaining amount in the
            // buffer, and the EOF has been seen at this point, then make sure
            // that we emit 'end' on the very next tick.
            if (state.ended && !state.endEmitted && state.length === 0)
              endReadable(this);

            return ret;
          };

          function chunkInvalid(state, chunk) {
            var er = null;
            if (!Buffer.isBuffer(chunk) &&
              'string' !== typeof chunk &&
              chunk !== null &&
              chunk !== undefined &&
              !state.objectMode) {
              er = new TypeError('Invalid non-string/buffer chunk');
            }
            return er;
          }


          function onEofChunk(stream, state) {
            if (state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) {
                state.buffer.push(chunk);
                state.length += state.objectMode ? 1 : chunk.length;
              }
            }
            state.ended = true;

            // if we've ended and we have some data left, then emit
            // 'readable' now to make sure it gets picked up.
            if (state.length > 0)
              emitReadable(stream);
            else
              endReadable(stream);
          }

          // Don't emit readable right away in sync mode, because this can trigger
          // another read() call => stack overflow.  This way, it might trigger
          // a nextTick recursion warning, but that's not so bad.
          function emitReadable(stream) {
            var state = stream._readableState;
            state.needReadable = false;
            if (state.emittedReadable)
              return;

            state.emittedReadable = true;
            if (state.sync)
              process.nextTick(function () {
                emitReadable_(stream);
              });
            else
              emitReadable_(stream);
          }

          function emitReadable_(stream) {
            stream.emit('readable');
          }


          // at this point, the user has presumably seen the 'readable' event,
          // and called read() to consume some data.  that may have triggered
          // in turn another _read(n) call, in which case reading = true if
          // it's in progress.
          // However, if we're not ended, or reading, and the length < hwm,
          // then go ahead and try to read some more preemptively.
          function maybeReadMore(stream, state) {
            if (!state.readingMore) {
              state.readingMore = true;
              process.nextTick(function () {
                maybeReadMore_(stream, state);
              });
            }
          }

          function maybeReadMore_(stream, state) {
            var len = state.length;
            while (!state.reading && !state.flowing && !state.ended &&
              state.length < state.highWaterMark) {
              stream.read(0);
              if (len === state.length)
              // didn't get any data, stop spinning.
                break;
              else
                len = state.length;
            }
            state.readingMore = false;
          }

          // abstract method.  to be overridden in specific implementation classes.
          // call cb(er, data) where data is <= n in length.
          // for virtual (non-string, non-buffer) streams, "length" is somewhat
          // arbitrary, and perhaps not very meaningful.
          Readable.prototype._read = function (n) {
            this.emit('error', new Error('not implemented'));
          };

          Readable.prototype.pipe = function (dest, pipeOpts) {
            var src = this;
            var state = this._readableState;

            switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;
            case 1:
              state.pipes = [state.pipes, dest];
              break;
            default:
              state.pipes.push(dest);
              break;
            }
            state.pipesCount += 1;

            var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

            var endFn = doEnd ? onend : cleanup;
            if (state.endEmitted)
              process.nextTick(endFn);
            else
              src.once('end', endFn);

            dest.on('unpipe', onunpipe);

            function onunpipe(readable) {
              if (readable !== src) return;
              cleanup();
            }

            function onend() {
              dest.end();
            }

            // when the dest drains, it reduces the awaitDrain counter
            // on the source.  This would be more elegant with a .once()
            // handler in flow(), but adding and removing repeatedly is
            // too slow.
            var ondrain = pipeOnDrain(src);
            dest.on('drain', ondrain);

            function cleanup() {
              // cleanup event handlers once the pipe is broken
              dest.removeListener('close', onclose);
              dest.removeListener('finish', onfinish);
              dest.removeListener('drain', ondrain);
              dest.removeListener('error', onerror);
              dest.removeListener('unpipe', onunpipe);
              src.removeListener('end', onend);
              src.removeListener('end', cleanup);

              // if the reader is waiting for a drain event from this
              // specific writer, then it would cause it to never start
              // flowing again.
              // So, if this is awaiting a drain, then we just call it now.
              // If we don't know, then assume that we are waiting for one.
              if (!dest._writableState || dest._writableState.needDrain)
                ondrain();
            }

            // if the dest has an error, then stop piping into it.
            // however, don't suppress the throwing behavior for this.
            function onerror(er) {
              unpipe();
              dest.removeListener('error', onerror);
              if (EE.listenerCount(dest, 'error') === 0)
                dest.emit('error', er);
            }
            // This is a brutally ugly hack to make sure that our error handler
            // is attached before any userland ones.  NEVER DO THIS.
            if (!dest._events || !dest._events.error)
              dest.on('error', onerror);
            else if (isArray(dest._events.error))
              dest._events.error.unshift(onerror);
            else
              dest._events.error = [onerror, dest._events.error];



            // Both close and finish should trigger unpipe, but only once.
            function onclose() {
              dest.removeListener('finish', onfinish);
              unpipe();
            }
            dest.once('close', onclose);

            function onfinish() {
              dest.removeListener('close', onclose);
              unpipe();
            }
            dest.once('finish', onfinish);

            function unpipe() {
              src.unpipe(dest);
            }

            // tell the dest that it's being piped to
            dest.emit('pipe', src);

            // start the flow if it hasn't been started already.
            if (!state.flowing) {
              // the handler that waits for readable events after all
              // the data gets sucked out in flow.
              // This would be easier to follow with a .once() handler
              // in flow(), but that is too slow.
              this.on('readable', pipeOnReadable);

              state.flowing = true;
              process.nextTick(function () {
                flow(src);
              });
            }

            return dest;
          };

          function pipeOnDrain(src) {
            return function () {
              var dest = this;
              var state = src._readableState;
              state.awaitDrain--;
              if (state.awaitDrain === 0)
                flow(src);
            };
          }

          function flow(src) {
            var state = src._readableState;
            var chunk;
            state.awaitDrain = 0;

            function write(dest, i, list) {
              var written = dest.write(chunk);
              if (false === written) {
                state.awaitDrain++;
              }
            }

            while (state.pipesCount && null !== (chunk = src.read())) {

              if (state.pipesCount === 1)
                write(state.pipes, 0, null);
              else
                forEach(state.pipes, write);

              src.emit('data', chunk);

              // if anyone needs a drain, then we have to wait for that.
              if (state.awaitDrain > 0)
                return;
            }

            // if every destination was unpiped, either before entering this
            // function, or in the while loop, then stop flowing.
            //
            // NB: This is a pretty rare edge case.
            if (state.pipesCount === 0) {
              state.flowing = false;

              // if there were data event listeners added, then switch to old mode.
              if (EE.listenerCount(src, 'data') > 0)
                emitDataEvents(src);
              return;
            }

            // at this point, no one needed a drain, so we just ran out of data
            // on the next readable event, start it over again.
            state.ranOut = true;
          }

          function pipeOnReadable() {
            if (this._readableState.ranOut) {
              this._readableState.ranOut = false;
              flow(this);
            }
          }


          Readable.prototype.unpipe = function (dest) {
            var state = this._readableState;

            // if we're not piping anywhere, then do nothing.
            if (state.pipesCount === 0)
              return this;

            // just one destination.  most common case.
            if (state.pipesCount === 1) {
              // passed in one, but it's not the right one.
              if (dest && dest !== state.pipes)
                return this;

              if (!dest)
                dest = state.pipes;

              // got a match.
              state.pipes = null;
              state.pipesCount = 0;
              this.removeListener('readable', pipeOnReadable);
              state.flowing = false;
              if (dest)
                dest.emit('unpipe', this);
              return this;
            }

            // slow case. multiple pipe destinations.

            if (!dest) {
              // remove all.
              var dests = state.pipes;
              var len = state.pipesCount;
              state.pipes = null;
              state.pipesCount = 0;
              this.removeListener('readable', pipeOnReadable);
              state.flowing = false;

              for (var i = 0; i < len; i++)
                dests[i].emit('unpipe', this);
              return this;
            }

            // try to find the right one.
            var i = indexOf(state.pipes, dest);
            if (i === -1)
              return this;

            state.pipes.splice(i, 1);
            state.pipesCount -= 1;
            if (state.pipesCount === 1)
              state.pipes = state.pipes[0];

            dest.emit('unpipe', this);

            return this;
          };

          // set up data events if they are asked for
          // Ensure readable listeners eventually get something
          Readable.prototype.on = function (ev, fn) {
            var res = Stream.prototype.on.call(this, ev, fn);

            if (ev === 'data' && !this._readableState.flowing)
              emitDataEvents(this);

            if (ev === 'readable' && this.readable) {
              var state = this._readableState;
              if (!state.readableListening) {
                state.readableListening = true;
                state.emittedReadable = false;
                state.needReadable = true;
                if (!state.reading) {
                  this.read(0);
                } else if (state.length) {
                  emitReadable(this, state);
                }
              }
            }

            return res;
          };
          Readable.prototype.addListener = Readable.prototype.on;

          // pause() and resume() are remnants of the legacy readable stream API
          // If the user uses them, then switch into old mode.
          Readable.prototype.resume = function () {
            emitDataEvents(this);
            this.read(0);
            this.emit('resume');
          };

          Readable.prototype.pause = function () {
            emitDataEvents(this, true);
            this.emit('pause');
          };

          function emitDataEvents(stream, startPaused) {
            var state = stream._readableState;

            if (state.flowing) {
              // https://github.com/isaacs/readable-stream/issues/16
              throw new Error('Cannot switch to old mode now.');
            }

            var paused = startPaused || false;
            var readable = false;

            // convert to an old-style stream.
            stream.readable = true;
            stream.pipe = Stream.prototype.pipe;
            stream.on = stream.addListener = Stream.prototype.on;

            stream.on('readable', function () {
              readable = true;

              var c;
              while (!paused && (null !== (c = stream.read())))
                stream.emit('data', c);

              if (c === null) {
                readable = false;
                stream._readableState.needReadable = true;
              }
            });

            stream.pause = function () {
              paused = true;
              this.emit('pause');
            };

            stream.resume = function () {
              paused = false;
              if (readable)
                process.nextTick(function () {
                  stream.emit('readable');
                });
              else
                this.read(0);
              this.emit('resume');
            };

            // now make it start, just in case it hadn't already.
            stream.emit('readable');
          }

          // wrap an old-style stream as the async data source.
          // This is *not* part of the readable stream interface.
          // It is an ugly unfortunate mess of history.
          Readable.prototype.wrap = function (stream) {
            var state = this._readableState;
            var paused = false;

            var self = this;
            stream.on('end', function () {
              if (state.decoder && !state.ended) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length)
                  self.push(chunk);
              }

              self.push(null);
            });

            stream.on('data', function (chunk) {
              if (state.decoder)
                chunk = state.decoder.write(chunk);

              // don't skip over falsy values in objectMode
              //if (state.objectMode && util.isNullOrUndefined(chunk))
              if (state.objectMode && (chunk === null || chunk === undefined))
                return;
              else if (!state.objectMode && (!chunk || !chunk.length))
                return;

              var ret = self.push(chunk);
              if (!ret) {
                paused = true;
                stream.pause();
              }
            });

            // proxy all the other methods.
            // important when wrapping filters and duplexes.
            for (var i in stream) {
              if (typeof stream[i] === 'function' &&
                typeof this[i] === 'undefined') {
                this[i] = function (method) {
                  return function () {
                    return stream[method].apply(stream, arguments);
                  }
                }(i);
              }
            }

            // proxy certain important events.
            var events = ['error', 'close', 'destroy', 'pause', 'resume'];
            forEach(events, function (ev) {
              stream.on(ev, self.emit.bind(self, ev));
            });

            // when we try to consume some more bytes, simply unpause the
            // underlying stream.
            self._read = function (n) {
              if (paused) {
                paused = false;
                stream.resume();
              }
            };

            return self;
          };



          // exposed for testing purposes only.
          Readable._fromList = fromList;

          // Pluck off n bytes from an array of buffers.
          // Length is the combined lengths of all the buffers in the list.
          function fromList(n, state) {
            var list = state.buffer;
            var length = state.length;
            var stringMode = !!state.decoder;
            var objectMode = !!state.objectMode;
            var ret;

            // nothing in the list, definitely empty.
            if (list.length === 0)
              return null;

            if (length === 0)
              ret = null;
            else if (objectMode)
              ret = list.shift();
            else if (!n || n >= length) {
              // read it all, truncate the array.
              if (stringMode)
                ret = list.join('');
              else
                ret = Buffer.concat(list, length);
              list.length = 0;
            } else {
              // read just some of it.
              if (n < list[0].length) {
                // just take a part of the first list item.
                // slice is the same for buffers and strings.
                var buf = list[0];
                ret = buf.slice(0, n);
                list[0] = buf.slice(n);
              } else if (n === list[0].length) {
                // first list is a perfect match
                ret = list.shift();
              } else {
                // complex case.
                // we have enough to cover it, but it spans past the first buffer.
                if (stringMode)
                  ret = '';
                else
                  ret = new Buffer(n);

                var c = 0;
                for (var i = 0, l = list.length; i < l && c < n; i++) {
                  var buf = list[0];
                  var cpy = Math.min(n - c, buf.length);

                  if (stringMode)
                    ret += buf.slice(0, cpy);
                  else
                    buf.copy(ret, c, 0, cpy);

                  if (cpy < buf.length)
                    list[0] = buf.slice(cpy);
                  else
                    list.shift();

                  c += cpy;
                }
              }
            }

            return ret;
          }

          function endReadable(stream) {
            var state = stream._readableState;

            // If we get here before consuming all the bytes, then that is a
            // bug in node.  Should never happen.
            if (state.length > 0)
              throw new Error('endReadable called on non-empty stream');

            if (!state.endEmitted && state.calledRead) {
              state.ended = true;
              process.nextTick(function () {
                // Check that we didn't get one last unshift.
                if (!state.endEmitted && state.length === 0) {
                  state.endEmitted = true;
                  stream.readable = false;
                  stream.emit('end');
                }
              });
            }
          }

          function forEach(xs, f) {
            for (var i = 0, l = xs.length; i < l; i++) {
              f(xs[i], i);
            }
          }

          function indexOf(xs, x) {
            for (var i = 0, l = xs.length; i < l; i++) {
              if (xs[i] === x) return i;
            }
            return -1;
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 514 */
      /***/
      (function (module, exports) {

        module.exports = Array.isArray || function (arr) {
          return Object.prototype.toString.call(arr) == '[object Array]';
        };


        /***/
      }),
      /* 515 */
      /***/
      (function (module, exports, __webpack_require__) {

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        module.exports = Stream;

        var EE = __webpack_require__(476).EventEmitter;
        var inherits = __webpack_require__(487);

        inherits(Stream, EE);
        Stream.Readable = __webpack_require__(489);
        Stream.Writable = __webpack_require__(516);
        Stream.Duplex = __webpack_require__(517);
        Stream.Transform = __webpack_require__(518);
        Stream.PassThrough = __webpack_require__(519);

        // Backwards-compat with node 0.4.x
        Stream.Stream = Stream;



        // old-style streams.  Note that the pipe method (the only relevant
        // part of this class) is overridden in the Readable class.

        function Stream() {
          EE.call(this);
        }

        Stream.prototype.pipe = function (dest, options) {
          var source = this;

          function ondata(chunk) {
            if (dest.writable) {
              if (false === dest.write(chunk) && source.pause) {
                source.pause();
              }
            }
          }

          source.on('data', ondata);

          function ondrain() {
            if (source.readable && source.resume) {
              source.resume();
            }
          }

          dest.on('drain', ondrain);

          // If the 'end' option is not supplied, dest.end() will be called when
          // source gets the 'end' or 'close' events.  Only dest.end() once.
          if (!dest._isStdio && (!options || options.end !== false)) {
            source.on('end', onend);
            source.on('close', onclose);
          }

          var didOnEnd = false;

          function onend() {
            if (didOnEnd) return;
            didOnEnd = true;

            dest.end();
          }


          function onclose() {
            if (didOnEnd) return;
            didOnEnd = true;

            if (typeof dest.destroy === 'function') dest.destroy();
          }

          // don't leave dangling pipes when there are errors.
          function onerror(er) {
            cleanup();
            if (EE.listenerCount(this, 'error') === 0) {
              throw er; // Unhandled stream error in pipe.
            }
          }

          source.on('error', onerror);
          dest.on('error', onerror);

          // remove all the event listeners that were added.
          function cleanup() {
            source.removeListener('data', ondata);
            dest.removeListener('drain', ondrain);

            source.removeListener('end', onend);
            source.removeListener('close', onclose);

            source.removeListener('error', onerror);
            dest.removeListener('error', onerror);

            source.removeListener('end', cleanup);
            source.removeListener('close', cleanup);

            dest.removeListener('close', cleanup);
          }

          source.on('end', cleanup);
          source.on('close', cleanup);

          dest.on('close', cleanup);

          dest.emit('pipe', source);

          // Allow for unix-like usage: A.pipe(B).pipe(C)
          return dest;
        };


        /***/
      }),
      /* 516 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(498);


        /***/
      }),
      /* 517 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(497);


        /***/
      }),
      /* 518 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(489).Transform


        /***/
      }),
      /* 519 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(489).PassThrough


        /***/
      }),
      /* 520 */
      /***/
      (function (module, exports, __webpack_require__) {

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        var Buffer = __webpack_require__(480).Buffer;

        var isBufferEncoding = Buffer.isEncoding ||

          function (encoding) {
            switch (encoding && encoding.toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
            case 'raw':
              return true;
            default:
              return false;
            }
          }


        function assertEncoding(encoding) {
          if (encoding && !isBufferEncoding(encoding)) {
            throw new Error('Unknown encoding: ' + encoding);
          }
        }

        // StringDecoder provides an interface for efficiently splitting a series of
        // buffers into a series of JS strings without breaking apart multi-byte
        // characters. CESU-8 is handled as part of the UTF-8 encoding.
        //
        // @TODO Handling all encodings inside a single object makes it very difficult
        // to reason about this code, so it should be split up in the future.
        // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
        // points as used by CESU-8.
        var StringDecoder = exports.StringDecoder = function (encoding) {
          this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
          assertEncoding(encoding);
          switch (this.encoding) {
          case 'utf8':
            // CESU-8 represents each of Surrogate Pair by 3-bytes
            this.surrogateSize = 3;
            break;
          case 'ucs2':
          case 'utf16le':
            // UTF-16 represents each of Surrogate Pair by 2-bytes
            this.surrogateSize = 2;
            this.detectIncompleteChar = utf16DetectIncompleteChar;
            break;
          case 'base64':
            // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
            this.surrogateSize = 3;
            this.detectIncompleteChar = base64DetectIncompleteChar;
            break;
          default:
            this.write = passThroughWrite;
            return;
          }

          // Enough space to store all bytes of a single character. UTF-8 needs 4
          // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
          this.charBuffer = new Buffer(6);
          // Number of bytes received for the current incomplete multi-byte character.
          this.charReceived = 0;
          // Number of bytes expected for the current incomplete multi-byte character.
          this.charLength = 0;
        };


        // write decodes the given buffer and returns it as JS string that is
        // guaranteed to not contain any partial multi-byte characters. Any partial
        // character found at the end of the buffer is buffered up, and will be
        // returned when calling write again with the remaining bytes.
        //
        // Note: Converting a Buffer containing an orphan surrogate to a String
        // currently works, but converting a String to a Buffer (via `new Buffer`, or
        // Buffer#write) will replace incomplete surrogates with the unicode
        // replacement character. See https://codereview.chromium.org/121173009/ .
        StringDecoder.prototype.write = function (buffer) {
          var charStr = '';
          // if our last write ended with an incomplete multibyte character
          while (this.charLength) {
            // determine how many remaining bytes this buffer has to offer for this char
            var available = (buffer.length >= this.charLength - this.charReceived) ?
              this.charLength - this.charReceived :
              buffer.length;

            // add the new bytes to the char buffer
            buffer.copy(this.charBuffer, this.charReceived, 0, available);
            this.charReceived += available;

            if (this.charReceived < this.charLength) {
              // still not enough chars in this buffer? wait for more ...
              return '';
            }

            // remove bytes belonging to the current character from the buffer
            buffer = buffer.slice(available, buffer.length);

            // get the character that was split
            charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

            // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
            var charCode = charStr.charCodeAt(charStr.length - 1);
            if (charCode >= 0xD800 && charCode <= 0xDBFF) {
              this.charLength += this.surrogateSize;
              charStr = '';
              continue;
            }
            this.charReceived = this.charLength = 0;

            // if there are no more bytes in this buffer, just emit our char
            if (buffer.length === 0) {
              return charStr;
            }
            break;
          }

          // determine and set charLength / charReceived
          this.detectIncompleteChar(buffer);

          var end = buffer.length;
          if (this.charLength) {
            // buffer the incomplete character bytes we got
            buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
            end -= this.charReceived;
          }

          charStr += buffer.toString(this.encoding, 0, end);

          var end = charStr.length - 1;
          var charCode = charStr.charCodeAt(end);
          // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
          if (charCode >= 0xD800 && charCode <= 0xDBFF) {
            var size = this.surrogateSize;
            this.charLength += size;
            this.charReceived += size;
            this.charBuffer.copy(this.charBuffer, size, 0, size);
            buffer.copy(this.charBuffer, 0, 0, size);
            return charStr.substring(0, end);
          }

          // or just emit the charStr
          return charStr;
        };

        // detectIncompleteChar determines if there is an incomplete UTF-8 character at
        // the end of the given buffer. If so, it sets this.charLength to the byte
        // length that character, and sets this.charReceived to the number of bytes
        // that are available for this character.
        StringDecoder.prototype.detectIncompleteChar = function (buffer) {
          // determine how many bytes we have to check at the end of this buffer
          var i = (buffer.length >= 3) ? 3 : buffer.length;

          // Figure out if one of the last i bytes of our buffer announces an
          // incomplete char.
          for (; i > 0; i--) {
            var c = buffer[buffer.length - i];

            // See http://en.wikipedia.org/wiki/UTF-8#Description

            // 110XXXXX
            if (i == 1 && c >> 5 == 0x06) {
              this.charLength = 2;
              break;
            }

            // 1110XXXX
            if (i <= 2 && c >> 4 == 0x0E) {
              this.charLength = 3;
              break;
            }

            // 11110XXX
            if (i <= 3 && c >> 3 == 0x1E) {
              this.charLength = 4;
              break;
            }
          }
          this.charReceived = i;
        };

        StringDecoder.prototype.end = function (buffer) {
          var res = '';
          if (buffer && buffer.length)
            res = this.write(buffer);

          if (this.charReceived) {
            var cr = this.charReceived;
            var buf = this.charBuffer;
            var enc = this.encoding;
            res += buf.slice(0, cr).toString(enc);
          }

          return res;
        };

        function passThroughWrite(buffer) {
          return buffer.toString(this.encoding);
        }

        function utf16DetectIncompleteChar(buffer) {
          this.charReceived = buffer.length % 2;
          this.charLength = this.charReceived ? 2 : 0;
        }

        function base64DetectIncompleteChar(buffer) {
          this.charReceived = buffer.length % 3;
          this.charLength = this.charReceived ? 3 : 0;
        }


        /***/
      }),
      /* 521 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) { // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          // A bit simpler than readable streams.
          // Implement an async ._write(chunk, cb), and it'll handle all
          // the drain event emission and buffering.

          module.exports = Writable;

          /*<replacement>*/
          var Buffer = __webpack_require__(480).Buffer;
          /*</replacement>*/

          Writable.WritableState = WritableState;


          /*<replacement>*/
          var util = __webpack_require__(494);
          util.inherits = __webpack_require__(487);
          /*</replacement>*/

          var Stream = __webpack_require__(515);

          util.inherits(Writable, Stream);

          function WriteReq(chunk, encoding, cb) {
            this.chunk = chunk;
            this.encoding = encoding;
            this.callback = cb;
          }

          function WritableState(options, stream) {
            options = options || {};

            // the point at which write() starts returning false
            // Note: 0 is a valid value, means that we always return false if
            // the entire buffer is not flushed immediately on write()
            var hwm = options.highWaterMark;
            this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

            // object stream flag to indicate whether or not this stream
            // contains buffers or objects.
            this.objectMode = !!options.objectMode;

            // cast to ints.
            this.highWaterMark = ~~this.highWaterMark;

            this.needDrain = false;
            // at the start of calling end()
            this.ending = false;
            // when end() has been called, and returned
            this.ended = false;
            // when 'finish' is emitted
            this.finished = false;

            // should we decode strings into buffers before passing to _write?
            // this is here so that some node-core streams can optimize string
            // handling at a lower level.
            var noDecode = options.decodeStrings === false;
            this.decodeStrings = !noDecode;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || 'utf8';

            // not an actual buffer we keep track of, but a measurement
            // of how much we're waiting to get pushed to some underlying
            // socket or file.
            this.length = 0;

            // a flag to see when we're in the middle of a write.
            this.writing = false;

            // a flag to be able to tell if the onwrite cb is called immediately,
            // or on a later tick.  We set this to true at first, becuase any
            // actions that shouldn't happen until "later" should generally also
            // not happen before the first write call.
            this.sync = true;

            // a flag to know if we're processing previously buffered items, which
            // may call the _write() callback in the same tick, so that we don't
            // end up in an overlapped onwrite situation.
            this.bufferProcessing = false;

            // the callback that's passed to _write(chunk,cb)
            this.onwrite = function (er) {
              onwrite(stream, er);
            };

            // the callback that the user supplies to write(chunk,encoding,cb)
            this.writecb = null;

            // the amount that is being written when _write is called.
            this.writelen = 0;

            this.buffer = [];

            // True if the error was already emitted and should not be thrown again
            this.errorEmitted = false;
          }

          function Writable(options) {
            var Duplex = __webpack_require__(512);

            // Writable ctor is applied to Duplexes, though they're not
            // instanceof Writable, they're instanceof Readable.
            if (!(this instanceof Writable) && !(this instanceof Duplex))
              return new Writable(options);

            this._writableState = new WritableState(options, this);

            // legacy.
            this.writable = true;

            Stream.call(this);
          }

          // Otherwise people can pipe Writable streams, which is just wrong.
          Writable.prototype.pipe = function () {
            this.emit('error', new Error('Cannot pipe. Not readable.'));
          };


          function writeAfterEnd(stream, state, cb) {
            var er = new Error('write after end');
            // TODO: defer error events consistently everywhere, not just the cb
            stream.emit('error', er);
            process.nextTick(function () {
              cb(er);
            });
          }

          // If we get something that is not a buffer, string, null, or undefined,
          // and we're not in objectMode, then that's an error.
          // Otherwise stream chunks are all considered to be of length=1, and the
          // watermarks determine how many objects to keep in the buffer, rather than
          // how many bytes or characters.
          function validChunk(stream, state, chunk, cb) {
            var valid = true;
            if (!Buffer.isBuffer(chunk) &&
              'string' !== typeof chunk &&
              chunk !== null &&
              chunk !== undefined &&
              !state.objectMode) {
              var er = new TypeError('Invalid non-string/buffer chunk');
              stream.emit('error', er);
              process.nextTick(function () {
                cb(er);
              });
              valid = false;
            }
            return valid;
          }

          Writable.prototype.write = function (chunk, encoding, cb) {
            var state = this._writableState;
            var ret = false;

            if (typeof encoding === 'function') {
              cb = encoding;
              encoding = null;
            }

            if (Buffer.isBuffer(chunk))
              encoding = 'buffer';
            else if (!encoding)
              encoding = state.defaultEncoding;

            if (typeof cb !== 'function')
              cb = function () {};

            if (state.ended)
              writeAfterEnd(this, state, cb);
            else if (validChunk(this, state, chunk, cb))
              ret = writeOrBuffer(this, state, chunk, encoding, cb);

            return ret;
          };

          function decodeChunk(state, chunk, encoding) {
            if (!state.objectMode &&
              state.decodeStrings !== false &&
              typeof chunk === 'string') {
              chunk = new Buffer(chunk, encoding);
            }
            return chunk;
          }

          // if we're already writing something, then just put this
          // in the queue, and wait our turn.  Otherwise, call _write
          // If we return false, then we need a drain event, so set that flag.
          function writeOrBuffer(stream, state, chunk, encoding, cb) {
            chunk = decodeChunk(state, chunk, encoding);
            if (Buffer.isBuffer(chunk))
              encoding = 'buffer';
            var len = state.objectMode ? 1 : chunk.length;

            state.length += len;

            var ret = state.length < state.highWaterMark;
            // we must ensure that previous needDrain will not be reset to false.
            if (!ret)
              state.needDrain = true;

            if (state.writing)
              state.buffer.push(new WriteReq(chunk, encoding, cb));
            else
              doWrite(stream, state, len, chunk, encoding, cb);

            return ret;
          }

          function doWrite(stream, state, len, chunk, encoding, cb) {
            state.writelen = len;
            state.writecb = cb;
            state.writing = true;
            state.sync = true;
            stream._write(chunk, encoding, state.onwrite);
            state.sync = false;
          }

          function onwriteError(stream, state, sync, er, cb) {
            if (sync)
              process.nextTick(function () {
                cb(er);
              });
            else
              cb(er);

            stream._writableState.errorEmitted = true;
            stream.emit('error', er);
          }

          function onwriteStateUpdate(state) {
            state.writing = false;
            state.writecb = null;
            state.length -= state.writelen;
            state.writelen = 0;
          }

          function onwrite(stream, er) {
            var state = stream._writableState;
            var sync = state.sync;
            var cb = state.writecb;

            onwriteStateUpdate(state);

            if (er)
              onwriteError(stream, state, sync, er, cb);
            else {
              // Check if we're actually ready to finish, but don't emit yet
              var finished = needFinish(stream, state);

              if (!finished && !state.bufferProcessing && state.buffer.length)
                clearBuffer(stream, state);

              if (sync) {
                process.nextTick(function () {
                  afterWrite(stream, state, finished, cb);
                });
              } else {
                afterWrite(stream, state, finished, cb);
              }
            }
          }

          function afterWrite(stream, state, finished, cb) {
            if (!finished)
              onwriteDrain(stream, state);
            cb();
            if (finished)
              finishMaybe(stream, state);
          }

          // Must force callback to be called on nextTick, so that we don't
          // emit 'drain' before the write() consumer gets the 'false' return
          // value, and has a chance to attach a 'drain' listener.
          function onwriteDrain(stream, state) {
            if (state.length === 0 && state.needDrain) {
              state.needDrain = false;
              stream.emit('drain');
            }
          }


          // if there's something in the buffer waiting, then process it
          function clearBuffer(stream, state) {
            state.bufferProcessing = true;

            for (var c = 0; c < state.buffer.length; c++) {
              var entry = state.buffer[c];
              var chunk = entry.chunk;
              var encoding = entry.encoding;
              var cb = entry.callback;
              var len = state.objectMode ? 1 : chunk.length;

              doWrite(stream, state, len, chunk, encoding, cb);

              // if we didn't call the onwrite immediately, then
              // it means that we need to wait until it does.
              // also, that means that the chunk and cb are currently
              // being processed, so move the buffer counter past them.
              if (state.writing) {
                c++;
                break;
              }
            }

            state.bufferProcessing = false;
            if (c < state.buffer.length)
              state.buffer = state.buffer.slice(c);
            else
              state.buffer.length = 0;
          }

          Writable.prototype._write = function (chunk, encoding, cb) {
            cb(new Error('not implemented'));
          };

          Writable.prototype.end = function (chunk, encoding, cb) {
            var state = this._writableState;

            if (typeof chunk === 'function') {
              cb = chunk;
              chunk = null;
              encoding = null;
            } else if (typeof encoding === 'function') {
              cb = encoding;
              encoding = null;
            }

            if (typeof chunk !== 'undefined' && chunk !== null)
              this.write(chunk, encoding);

            // ignore unnecessary end() calls.
            if (!state.ending && !state.finished)
              endWritable(this, state, cb);
          };


          function needFinish(stream, state) {
            return (state.ending &&
              state.length === 0 &&
              !state.finished &&
              !state.writing);
          }

          function finishMaybe(stream, state) {
            var need = needFinish(stream, state);
            if (need) {
              state.finished = true;
              stream.emit('finish');
            }
            return need;
          }

          function endWritable(stream, state, cb) {
            state.ending = true;
            finishMaybe(stream, state);
            if (cb) {
              if (state.finished)
                process.nextTick(cb);
              else
                stream.once('finish', cb);
            }
            state.ended = true;
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 522 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (global, process) { // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          var formatRegExp = /%[sdj%]/g;
          exports.format = function (f) {
            if (!isString(f)) {
              var objects = [];
              for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
              }
              return objects.join(' ');
            }

            var i = 1;
            var args = arguments;
            var len = args.length;
            var str = String(f).replace(formatRegExp, function (x) {
              if (x === '%%') return '%';
              if (i >= len) return x;
              switch (x) {
              case '%s':
                return String(args[i++]);
              case '%d':
                return Number(args[i++]);
              case '%j':
                try {
                  return JSON.stringify(args[i++]);
                } catch (_) {
                  return '[Circular]';
                }
              default:
                return x;
              }
            });
            for (var x = args[i]; i < len; x = args[++i]) {
              if (isNull(x) || !isObject(x)) {
                str += ' ' + x;
              } else {
                str += ' ' + inspect(x);
              }
            }
            return str;
          };


          // Mark that a method should not be used.
          // Returns a modified function which warns once by default.
          // If --no-deprecation is set, then it is a no-op.
          exports.deprecate = function (fn, msg) {
            // Allow for deprecating things in the process of starting up.
            if (isUndefined(global.process)) {
              return function () {
                return exports.deprecate(fn, msg).apply(this, arguments);
              };
            }

            if (process.noDeprecation === true) {
              return fn;
            }

            var warned = false;

            function deprecated() {
              if (!warned) {
                if (process.throwDeprecation) {
                  throw new Error(msg);
                } else if (process.traceDeprecation) {
                  console.trace(msg);
                } else {
                  console.error(msg);
                }
                warned = true;
              }
              return fn.apply(this, arguments);
            }

            return deprecated;
          };


          var debugs = {};
          var debugEnviron;
          exports.debuglog = function (set) {
            if (isUndefined(debugEnviron))
              debugEnviron = process.env.NODE_DEBUG || '';
            set = set.toUpperCase();
            if (!debugs[set]) {
              if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                var pid = process.pid;
                debugs[set] = function () {
                  var msg = exports.format.apply(exports, arguments);
                  console.error('%s %d: %s', set, pid, msg);
                };
              } else {
                debugs[set] = function () {};
              }
            }
            return debugs[set];
          };


          /**
           * Echos the value of a value. Trys to print the value out
           * in the best way possible given the different types.
           *
           * @param {Object} obj The object to print out.
           * @param {Object} opts Optional options object that alters the output.
           */
          /* legacy: obj, showHidden, depth, colors*/
          function inspect(obj, opts) {
            // default options
            var ctx = {
              seen: [],
              stylize: stylizeNoColor
            };
            // legacy...
            if (arguments.length >= 3) ctx.depth = arguments[2];
            if (arguments.length >= 4) ctx.colors = arguments[3];
            if (isBoolean(opts)) {
              // legacy...
              ctx.showHidden = opts;
            } else if (opts) {
              // got an "options" object
              exports._extend(ctx, opts);
            }
            // set default options
            if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
            if (isUndefined(ctx.depth)) ctx.depth = 2;
            if (isUndefined(ctx.colors)) ctx.colors = false;
            if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
            if (ctx.colors) ctx.stylize = stylizeWithColor;
            return formatValue(ctx, obj, ctx.depth);
          }
          exports.inspect = inspect;


          // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
          inspect.colors = {
            'bold': [1, 22],
            'italic': [3, 23],
            'underline': [4, 24],
            'inverse': [7, 27],
            'white': [37, 39],
            'grey': [90, 39],
            'black': [30, 39],
            'blue': [34, 39],
            'cyan': [36, 39],
            'green': [32, 39],
            'magenta': [35, 39],
            'red': [31, 39],
            'yellow': [33, 39]
          };

          // Don't use 'blue' not visible on cmd.exe
          inspect.styles = {
            'special': 'cyan',
            'number': 'yellow',
            'boolean': 'yellow',
            'undefined': 'grey',
            'null': 'bold',
            'string': 'green',
            'date': 'magenta',
            // "name": intentionally not styling
            'regexp': 'red'
          };


          function stylizeWithColor(str, styleType) {
            var style = inspect.styles[styleType];

            if (style) {
              return '\u001b[' + inspect.colors[style][0] + 'm' + str +
                '\u001b[' + inspect.colors[style][1] + 'm';
            } else {
              return str;
            }
          }


          function stylizeNoColor(str, styleType) {
            return str;
          }


          function arrayToHash(array) {
            var hash = {};

            array.forEach(function (val, idx) {
              hash[val] = true;
            });

            return hash;
          }


          function formatValue(ctx, value, recurseTimes) {
            // Provide a hook for user-specified inspect functions.
            // Check that value is an object with an inspect function on it
            if (ctx.customInspect &&
              value &&
              isFunction(value.inspect) &&
              // Filter out the util module, it's inspect function is special
              value.inspect !== exports.inspect &&
              // Also filter out any prototype objects using the circular check.
              !(value.constructor && value.constructor.prototype === value)) {
              var ret = value.inspect(recurseTimes, ctx);
              if (!isString(ret)) {
                ret = formatValue(ctx, ret, recurseTimes);
              }
              return ret;
            }

            // Primitive types cannot have properties
            var primitive = formatPrimitive(ctx, value);
            if (primitive) {
              return primitive;
            }

            // Look up the keys of the object.
            var keys = Object.keys(value);
            var visibleKeys = arrayToHash(keys);

            if (ctx.showHidden) {
              keys = Object.getOwnPropertyNames(value);
            }

            // IE doesn't make error fields non-enumerable
            // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
            if (isError(value) &&
              (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
              return formatError(value);
            }

            // Some type of object without properties can be shortcutted.
            if (keys.length === 0) {
              if (isFunction(value)) {
                var name = value.name ? ': ' + value.name : '';
                return ctx.stylize('[Function' + name + ']', 'special');
              }
              if (isRegExp(value)) {
                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
              }
              if (isDate(value)) {
                return ctx.stylize(Date.prototype.toString.call(value), 'date');
              }
              if (isError(value)) {
                return formatError(value);
              }
            }

            var base = '',
              array = false,
              braces = ['{', '}'];

            // Make Array say that they are Array
            if (isArray(value)) {
              array = true;
              braces = ['[', ']'];
            }

            // Make functions say that they are functions
            if (isFunction(value)) {
              var n = value.name ? ': ' + value.name : '';
              base = ' [Function' + n + ']';
            }

            // Make RegExps say that they are RegExps
            if (isRegExp(value)) {
              base = ' ' + RegExp.prototype.toString.call(value);
            }

            // Make dates with properties first say the date
            if (isDate(value)) {
              base = ' ' + Date.prototype.toUTCString.call(value);
            }

            // Make error with message first say the error
            if (isError(value)) {
              base = ' ' + formatError(value);
            }

            if (keys.length === 0 && (!array || value.length == 0)) {
              return braces[0] + base + braces[1];
            }

            if (recurseTimes < 0) {
              if (isRegExp(value)) {
                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
              } else {
                return ctx.stylize('[Object]', 'special');
              }
            }

            ctx.seen.push(value);

            var output;
            if (array) {
              output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
            } else {
              output = keys.map(function (key) {
                return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
              });
            }

            ctx.seen.pop();

            return reduceToSingleString(output, base, braces);
          }


          function formatPrimitive(ctx, value) {
            if (isUndefined(value))
              return ctx.stylize('undefined', 'undefined');
            if (isString(value)) {
              var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                .replace(/'/g, "\\'")
                .replace(/\\"/g, '"') + '\'';
              return ctx.stylize(simple, 'string');
            }
            if (isNumber(value))
              return ctx.stylize('' + value, 'number');
            if (isBoolean(value))
              return ctx.stylize('' + value, 'boolean');
            // For some reason typeof null is "object", so special case here.
            if (isNull(value))
              return ctx.stylize('null', 'null');
          }


          function formatError(value) {
            return '[' + Error.prototype.toString.call(value) + ']';
          }


          function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
            var output = [];
            for (var i = 0, l = value.length; i < l; ++i) {
              if (hasOwnProperty(value, String(i))) {
                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                  String(i), true));
              } else {
                output.push('');
              }
            }
            keys.forEach(function (key) {
              if (!key.match(/^\d+$/)) {
                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                  key, true));
              }
            });
            return output;
          }


          function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
            var name, str, desc;
            desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
            if (desc.get) {
              if (desc.set) {
                str = ctx.stylize('[Getter/Setter]', 'special');
              } else {
                str = ctx.stylize('[Getter]', 'special');
              }
            } else {
              if (desc.set) {
                str = ctx.stylize('[Setter]', 'special');
              }
            }
            if (!hasOwnProperty(visibleKeys, key)) {
              name = '[' + key + ']';
            }
            if (!str) {
              if (ctx.seen.indexOf(desc.value) < 0) {
                if (isNull(recurseTimes)) {
                  str = formatValue(ctx, desc.value, null);
                } else {
                  str = formatValue(ctx, desc.value, recurseTimes - 1);
                }
                if (str.indexOf('\n') > -1) {
                  if (array) {
                    str = str.split('\n').map(function (line) {
                      return '  ' + line;
                    }).join('\n').substr(2);
                  } else {
                    str = '\n' + str.split('\n').map(function (line) {
                      return '   ' + line;
                    }).join('\n');
                  }
                }
              } else {
                str = ctx.stylize('[Circular]', 'special');
              }
            }
            if (isUndefined(name)) {
              if (array && key.match(/^\d+$/)) {
                return str;
              }
              name = JSON.stringify('' + key);
              if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                name = name.substr(1, name.length - 2);
                name = ctx.stylize(name, 'name');
              } else {
                name = name.replace(/'/g, "\\'")
                  .replace(/\\"/g, '"')
                  .replace(/(^"|"$)/g, "'");
                name = ctx.stylize(name, 'string');
              }
            }

            return name + ': ' + str;
          }


          function reduceToSingleString(output, base, braces) {
            var numLinesEst = 0;
            var length = output.reduce(function (prev, cur) {
              numLinesEst++;
              if (cur.indexOf('\n') >= 0) numLinesEst++;
              return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
            }, 0);

            if (length > 60) {
              return braces[0] +
                (base === '' ? '' : base + '\n ') +
                ' ' +
                output.join(',\n  ') +
                ' ' +
                braces[1];
            }

            return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
          }


          // NOTE: These type checking functions intentionally don't use `instanceof`
          // because it is fragile and can be easily faked with `Object.create()`.
          function isArray(ar) {
            return Array.isArray(ar);
          }
          exports.isArray = isArray;

          function isBoolean(arg) {
            return typeof arg === 'boolean';
          }
          exports.isBoolean = isBoolean;

          function isNull(arg) {
            return arg === null;
          }
          exports.isNull = isNull;

          function isNullOrUndefined(arg) {
            return arg == null;
          }
          exports.isNullOrUndefined = isNullOrUndefined;

          function isNumber(arg) {
            return typeof arg === 'number';
          }
          exports.isNumber = isNumber;

          function isString(arg) {
            return typeof arg === 'string';
          }
          exports.isString = isString;

          function isSymbol(arg) {
            return typeof arg === 'symbol';
          }
          exports.isSymbol = isSymbol;

          function isUndefined(arg) {
            return arg === void 0;
          }
          exports.isUndefined = isUndefined;

          function isRegExp(re) {
            return isObject(re) && objectToString(re) === '[object RegExp]';
          }
          exports.isRegExp = isRegExp;

          function isObject(arg) {
            return typeof arg === 'object' && arg !== null;
          }
          exports.isObject = isObject;

          function isDate(d) {
            return isObject(d) && objectToString(d) === '[object Date]';
          }
          exports.isDate = isDate;

          function isError(e) {
            return isObject(e) &&
              (objectToString(e) === '[object Error]' || e instanceof Error);
          }
          exports.isError = isError;

          function isFunction(arg) {
            return typeof arg === 'function';
          }
          exports.isFunction = isFunction;

          function isPrimitive(arg) {
            return arg === null ||
              typeof arg === 'boolean' ||
              typeof arg === 'number' ||
              typeof arg === 'string' ||
              typeof arg === 'symbol' || // ES6 symbol
              typeof arg === 'undefined';
          }
          exports.isPrimitive = isPrimitive;

          exports.isBuffer = __webpack_require__(523);

          function objectToString(o) {
            return Object.prototype.toString.call(o);
          }


          function pad(n) {
            return n < 10 ? '0' + n.toString(10) : n.toString(10);
          }


          var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
            'Oct', 'Nov', 'Dec'
          ];

          // 26 Feb 16:19:34
          function timestamp() {
            var d = new Date();
            var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())
            ].join(':');
            return [d.getDate(), months[d.getMonth()], time].join(' ');
          }


          // log is just a thin wrapper to console.log that prepends a timestamp
          exports.log = function () {
            console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
          };


          /**
           * Inherit the prototype methods from one constructor into another.
           *
           * The Function.prototype.inherits from lang.js rewritten as a standalone
           * function (not on Function.prototype). NOTE: If this file is to be loaded
           * during bootstrapping this function needs to be rewritten using some native
           * functions as prototype setup using normal JavaScript does not work as
           * expected during bootstrapping (see mirror.js in r114903).
           *
           * @param {function} ctor Constructor function which needs to inherit the
           *     prototype.
           * @param {function} superCtor Constructor function to inherit prototype from.
           */
          exports.inherits = __webpack_require__(524);

          exports._extend = function (origin, add) {
            // Don't do anything if add isn't an object
            if (!add || !isObject(add)) return origin;

            var keys = Object.keys(add);
            var i = keys.length;
            while (i--) {
              origin[keys[i]] = add[keys[i]];
            }
            return origin;
          };

          function hasOwnProperty(obj, prop) {
            return Object.prototype.hasOwnProperty.call(obj, prop);
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, (function () { return this; }()), __webpack_require__(478)))

        /***/
      }),
      /* 523 */
      /***/
      (function (module, exports) {

        module.exports = function isBuffer(arg) {
          return arg && typeof arg === 'object' &&
            typeof arg.copy === 'function' &&
            typeof arg.fill === 'function' &&
            typeof arg.readUInt8 === 'function';
        }

        /***/
      }),
      /* 524 */
      /***/
      (function (module, exports) {

        if (typeof Object.create === 'function') {
          // implementation from standard node.js 'util' module
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          };
        } else {
          // old school shim for old browsers
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor
            var TempCtor = function () {}
            TempCtor.prototype = superCtor.prototype
            ctor.prototype = new TempCtor()
            ctor.prototype.constructor = ctor
          }
        }


        /***/
      }),
      /* 525 */
      /***/
      (function (module, exports, __webpack_require__) {

        var stream = __webpack_require__(526);

        var duplex2 = module.exports = function duplex2(options, writable, readable) {
          return new DuplexWrapper(options, writable, readable);
        };

        var DuplexWrapper = exports.DuplexWrapper = function DuplexWrapper(options, writable, readable) {
          if (typeof readable === "undefined") {
            readable = writable;
            writable = options;
            options = null;
          }

          options = options || {};
          options.objectMode = true;

          stream.Duplex.call(this, options);

          this._bubbleErrors = (typeof options.bubbleErrors === "undefined") || !!options.bubbleErrors;

          this._writable = writable;
          this._readable = readable;

          var self = this;

          writable.once("finish", function () {
            self.end();
          });

          this.once("finish", function () {
            writable.end();
          });

          readable.on("data", function (e) {
            if (!self.push(e)) {
              readable.pause();
            }
          });

          readable.once("end", function () {
            return self.push(null);
          });

          if (this._bubbleErrors) {
            writable.on("error", function (err) {
              return self.emit("error", err);
            });

            readable.on("error", function (err) {
              return self.emit("error", err);
            });
          }
        };
        DuplexWrapper.prototype = Object.create(stream.Duplex.prototype, { constructor: { value: DuplexWrapper } });

        DuplexWrapper.prototype._write = function _write(input, encoding, done) {
          this._writable.write(input, encoding, done);
        };

        DuplexWrapper.prototype._read = function _read(n) {
          this._readable.resume();
        };


        /***/
      }),
      /* 526 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) {
          exports = module.exports = __webpack_require__(527);
          exports.Stream = __webpack_require__(515);
          exports.Readable = exports;
          exports.Writable = __webpack_require__(530);
          exports.Duplex = __webpack_require__(529);
          exports.Transform = __webpack_require__(531);
          exports.PassThrough = __webpack_require__(532);
          if (!process.browser && process.env.READABLE_STREAM === 'disable') {
            module.exports = __webpack_require__(515);
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 527 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) { // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          module.exports = Readable;

          /*<replacement>*/
          var isArray = __webpack_require__(514);
          /*</replacement>*/


          /*<replacement>*/
          var Buffer = __webpack_require__(480).Buffer;
          /*</replacement>*/

          Readable.ReadableState = ReadableState;

          var EE = __webpack_require__(476).EventEmitter;

          /*<replacement>*/
          if (!EE.listenerCount) EE.listenerCount = function (emitter, type) {
            return emitter.listeners(type).length;
          };
          /*</replacement>*/

          var Stream = __webpack_require__(515);

          /*<replacement>*/
          var util = __webpack_require__(494);
          util.inherits = __webpack_require__(487);
          /*</replacement>*/

          var StringDecoder;


          /*<replacement>*/
          var debug = __webpack_require__(528);
          if (debug && debug.debuglog) {
            debug = debug.debuglog('stream');
          } else {
            debug = function () {};
          }
          /*</replacement>*/


          util.inherits(Readable, Stream);

          function ReadableState(options, stream) {
            var Duplex = __webpack_require__(529);

            options = options || {};

            // the point at which it stops calling _read() to fill the buffer
            // Note: 0 is a valid value, means "don't call _read preemptively ever"
            var hwm = options.highWaterMark;
            var defaultHwm = options.objectMode ? 16 : 16 * 1024;
            this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

            // cast to ints.
            this.highWaterMark = ~~this.highWaterMark;

            this.buffer = [];
            this.length = 0;
            this.pipes = null;
            this.pipesCount = 0;
            this.flowing = null;
            this.ended = false;
            this.endEmitted = false;
            this.reading = false;

            // a flag to be able to tell if the onwrite cb is called immediately,
            // or on a later tick.  We set this to true at first, because any
            // actions that shouldn't happen until "later" should generally also
            // not happen before the first write call.
            this.sync = true;

            // whenever we return null, then we set a flag to say
            // that we're awaiting a 'readable' event emission.
            this.needReadable = false;
            this.emittedReadable = false;
            this.readableListening = false;


            // object stream flag. Used to make read(n) ignore n and to
            // make all the buffer merging and length checks go away
            this.objectMode = !!options.objectMode;

            if (stream instanceof Duplex)
              this.objectMode = this.objectMode || !!options.readableObjectMode;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || 'utf8';

            // when piping, we only care about 'readable' events that happen
            // after read()ing all the bytes and not getting any pushback.
            this.ranOut = false;

            // the number of writers that are awaiting a drain event in .pipe()s
            this.awaitDrain = 0;

            // if true, a maybeReadMore has been scheduled
            this.readingMore = false;

            this.decoder = null;
            this.encoding = null;
            if (options.encoding) {
              if (!StringDecoder)
                StringDecoder = __webpack_require__(520).StringDecoder;
              this.decoder = new StringDecoder(options.encoding);
              this.encoding = options.encoding;
            }
          }

          function Readable(options) {
            var Duplex = __webpack_require__(529);

            if (!(this instanceof Readable))
              return new Readable(options);

            this._readableState = new ReadableState(options, this);

            // legacy
            this.readable = true;

            Stream.call(this);
          }

          // Manually shove something into the read() buffer.
          // This returns true if the highWaterMark has not been hit yet,
          // similar to how Writable.write() returns true if you should
          // write() some more.
          Readable.prototype.push = function (chunk, encoding) {
            var state = this._readableState;

            if (util.isString(chunk) && !state.objectMode) {
              encoding = encoding || state.defaultEncoding;
              if (encoding !== state.encoding) {
                chunk = new Buffer(chunk, encoding);
                encoding = '';
              }
            }

            return readableAddChunk(this, state, chunk, encoding, false);
          };

          // Unshift should *always* be something directly out of read()
          Readable.prototype.unshift = function (chunk) {
            var state = this._readableState;
            return readableAddChunk(this, state, chunk, '', true);
          };

          function readableAddChunk(stream, state, chunk, encoding, addToFront) {
            var er = chunkInvalid(state, chunk);
            if (er) {
              stream.emit('error', er);
            } else if (util.isNullOrUndefined(chunk)) {
              state.reading = false;
              if (!state.ended)
                onEofChunk(stream, state);
            } else if (state.objectMode || chunk && chunk.length > 0) {
              if (state.ended && !addToFront) {
                var e = new Error('stream.push() after EOF');
                stream.emit('error', e);
              } else if (state.endEmitted && addToFront) {
                var e = new Error('stream.unshift() after end event');
                stream.emit('error', e);
              } else {
                if (state.decoder && !addToFront && !encoding)
                  chunk = state.decoder.write(chunk);

                if (!addToFront)
                  state.reading = false;

                // if we want the data now, just emit it.
                if (state.flowing && state.length === 0 && !state.sync) {
                  stream.emit('data', chunk);
                  stream.read(0);
                } else {
                  // update the buffer info.
                  state.length += state.objectMode ? 1 : chunk.length;
                  if (addToFront)
                    state.buffer.unshift(chunk);
                  else
                    state.buffer.push(chunk);

                  if (state.needReadable)
                    emitReadable(stream);
                }

                maybeReadMore(stream, state);
              }
            } else if (!addToFront) {
              state.reading = false;
            }

            return needMoreData(state);
          }



          // if it's past the high water mark, we can push in some more.
          // Also, if we have no data yet, we can stand some
          // more bytes.  This is to work around cases where hwm=0,
          // such as the repl.  Also, if the push() triggered a
          // readable event, and the user called read(largeNumber) such that
          // needReadable was set, then we ought to push more, so that another
          // 'readable' event will be triggered.
          function needMoreData(state) {
            return !state.ended &&
              (state.needReadable ||
                state.length < state.highWaterMark ||
                state.length === 0);
          }

          // backwards compatibility.
          Readable.prototype.setEncoding = function (enc) {
            if (!StringDecoder)
              StringDecoder = __webpack_require__(520).StringDecoder;
            this._readableState.decoder = new StringDecoder(enc);
            this._readableState.encoding = enc;
            return this;
          };

          // Don't raise the hwm > 128MB
          var MAX_HWM = 0x800000;

          function roundUpToNextPowerOf2(n) {
            if (n >= MAX_HWM) {
              n = MAX_HWM;
            } else {
              // Get the next highest power of 2
              n--;
              for (var p = 1; p < 32; p <<= 1) n |= n >> p;
              n++;
            }
            return n;
          }

          function howMuchToRead(n, state) {
            if (state.length === 0 && state.ended)
              return 0;

            if (state.objectMode)
              return n === 0 ? 0 : 1;

            if (isNaN(n) || util.isNull(n)) {
              // only flow one buffer at a time
              if (state.flowing && state.buffer.length)
                return state.buffer[0].length;
              else
                return state.length;
            }

            if (n <= 0)
              return 0;

            // If we're asking for more than the target buffer level,
            // then raise the water mark.  Bump up to the next highest
            // power of 2, to prevent increasing it excessively in tiny
            // amounts.
            if (n > state.highWaterMark)
              state.highWaterMark = roundUpToNextPowerOf2(n);

            // don't have that much.  return null, unless we've ended.
            if (n > state.length) {
              if (!state.ended) {
                state.needReadable = true;
                return 0;
              } else
                return state.length;
            }

            return n;
          }

          // you can override either this method, or the async _read(n) below.
          Readable.prototype.read = function (n) {
            debug('read', n);
            var state = this._readableState;
            var nOrig = n;

            if (!util.isNumber(n) || n > 0)
              state.emittedReadable = false;

            // if we're doing read(0) to trigger a readable event, but we
            // already have a bunch of data in the buffer, then just trigger
            // the 'readable' event and move on.
            if (n === 0 &&
              state.needReadable &&
              (state.length >= state.highWaterMark || state.ended)) {
              debug('read: emitReadable', state.length, state.ended);
              if (state.length === 0 && state.ended)
                endReadable(this);
              else
                emitReadable(this);
              return null;
            }

            n = howMuchToRead(n, state);

            // if we've ended, and we're now clear, then finish it up.
            if (n === 0 && state.ended) {
              if (state.length === 0)
                endReadable(this);
              return null;
            }

            // All the actual chunk generation logic needs to be
            // *below* the call to _read.  The reason is that in certain
            // synthetic stream cases, such as passthrough streams, _read
            // may be a completely synchronous operation which may change
            // the state of the read buffer, providing enough data when
            // before there was *not* enough.
            //
            // So, the steps are:
            // 1. Figure out what the state of things will be after we do
            // a read from the buffer.
            //
            // 2. If that resulting state will trigger a _read, then call _read.
            // Note that this may be asynchronous, or synchronous.  Yes, it is
            // deeply ugly to write APIs this way, but that still doesn't mean
            // that the Readable class should behave improperly, as streams are
            // designed to be sync/async agnostic.
            // Take note if the _read call is sync or async (ie, if the read call
            // has returned yet), so that we know whether or not it's safe to emit
            // 'readable' etc.
            //
            // 3. Actually pull the requested chunks out of the buffer and return.

            // if we need a readable event, then we need to do some reading.
            var doRead = state.needReadable;
            debug('need readable', doRead);

            // if we currently have less than the highWaterMark, then also read some
            if (state.length === 0 || state.length - n < state.highWaterMark) {
              doRead = true;
              debug('length less than watermark', doRead);
            }

            // however, if we've ended, then there's no point, and if we're already
            // reading, then it's unnecessary.
            if (state.ended || state.reading) {
              doRead = false;
              debug('reading or ended', doRead);
            }

            if (doRead) {
              debug('do read');
              state.reading = true;
              state.sync = true;
              // if the length is currently zero, then we *need* a readable event.
              if (state.length === 0)
                state.needReadable = true;
              // call internal read method
              this._read(state.highWaterMark);
              state.sync = false;
            }

            // If _read pushed data synchronously, then `reading` will be false,
            // and we need to re-evaluate how much data we can return to the user.
            if (doRead && !state.reading)
              n = howMuchToRead(nOrig, state);

            var ret;
            if (n > 0)
              ret = fromList(n, state);
            else
              ret = null;

            if (util.isNull(ret)) {
              state.needReadable = true;
              n = 0;
            }

            state.length -= n;

            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            if (state.length === 0 && !state.ended)
              state.needReadable = true;

            // If we tried to read() past the EOF, then emit end on the next tick.
            if (nOrig !== n && state.ended && state.length === 0)
              endReadable(this);

            if (!util.isNull(ret))
              this.emit('data', ret);

            return ret;
          };

          function chunkInvalid(state, chunk) {
            var er = null;
            if (!util.isBuffer(chunk) &&
              !util.isString(chunk) &&
              !util.isNullOrUndefined(chunk) &&
              !state.objectMode) {
              er = new TypeError('Invalid non-string/buffer chunk');
            }
            return er;
          }


          function onEofChunk(stream, state) {
            if (state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) {
                state.buffer.push(chunk);
                state.length += state.objectMode ? 1 : chunk.length;
              }
            }
            state.ended = true;

            // emit 'readable' now to make sure it gets picked up.
            emitReadable(stream);
          }

          // Don't emit readable right away in sync mode, because this can trigger
          // another read() call => stack overflow.  This way, it might trigger
          // a nextTick recursion warning, but that's not so bad.
          function emitReadable(stream) {
            var state = stream._readableState;
            state.needReadable = false;
            if (!state.emittedReadable) {
              debug('emitReadable', state.flowing);
              state.emittedReadable = true;
              if (state.sync)
                process.nextTick(function () {
                  emitReadable_(stream);
                });
              else
                emitReadable_(stream);
            }
          }

          function emitReadable_(stream) {
            debug('emit readable');
            stream.emit('readable');
            flow(stream);
          }


          // at this point, the user has presumably seen the 'readable' event,
          // and called read() to consume some data.  that may have triggered
          // in turn another _read(n) call, in which case reading = true if
          // it's in progress.
          // However, if we're not ended, or reading, and the length < hwm,
          // then go ahead and try to read some more preemptively.
          function maybeReadMore(stream, state) {
            if (!state.readingMore) {
              state.readingMore = true;
              process.nextTick(function () {
                maybeReadMore_(stream, state);
              });
            }
          }

          function maybeReadMore_(stream, state) {
            var len = state.length;
            while (!state.reading && !state.flowing && !state.ended &&
              state.length < state.highWaterMark) {
              debug('maybeReadMore read 0');
              stream.read(0);
              if (len === state.length)
              // didn't get any data, stop spinning.
                break;
              else
                len = state.length;
            }
            state.readingMore = false;
          }

          // abstract method.  to be overridden in specific implementation classes.
          // call cb(er, data) where data is <= n in length.
          // for virtual (non-string, non-buffer) streams, "length" is somewhat
          // arbitrary, and perhaps not very meaningful.
          Readable.prototype._read = function (n) {
            this.emit('error', new Error('not implemented'));
          };

          Readable.prototype.pipe = function (dest, pipeOpts) {
            var src = this;
            var state = this._readableState;

            switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;
            case 1:
              state.pipes = [state.pipes, dest];
              break;
            default:
              state.pipes.push(dest);
              break;
            }
            state.pipesCount += 1;
            debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

            var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

            var endFn = doEnd ? onend : cleanup;
            if (state.endEmitted)
              process.nextTick(endFn);
            else
              src.once('end', endFn);

            dest.on('unpipe', onunpipe);

            function onunpipe(readable) {
              debug('onunpipe');
              if (readable === src) {
                cleanup();
              }
            }

            function onend() {
              debug('onend');
              dest.end();
            }

            // when the dest drains, it reduces the awaitDrain counter
            // on the source.  This would be more elegant with a .once()
            // handler in flow(), but adding and removing repeatedly is
            // too slow.
            var ondrain = pipeOnDrain(src);
            dest.on('drain', ondrain);

            function cleanup() {
              debug('cleanup');
              // cleanup event handlers once the pipe is broken
              dest.removeListener('close', onclose);
              dest.removeListener('finish', onfinish);
              dest.removeListener('drain', ondrain);
              dest.removeListener('error', onerror);
              dest.removeListener('unpipe', onunpipe);
              src.removeListener('end', onend);
              src.removeListener('end', cleanup);
              src.removeListener('data', ondata);

              // if the reader is waiting for a drain event from this
              // specific writer, then it would cause it to never start
              // flowing again.
              // So, if this is awaiting a drain, then we just call it now.
              // If we don't know, then assume that we are waiting for one.
              if (state.awaitDrain &&
                (!dest._writableState || dest._writableState.needDrain))
                ondrain();
            }

            src.on('data', ondata);

            function ondata(chunk) {
              debug('ondata');
              var ret = dest.write(chunk);
              if (false === ret) {
                debug('false write response, pause',
                  src._readableState.awaitDrain);
                src._readableState.awaitDrain++;
                src.pause();
              }
            }

            // if the dest has an error, then stop piping into it.
            // however, don't suppress the throwing behavior for this.
            function onerror(er) {
              debug('onerror', er);
              unpipe();
              dest.removeListener('error', onerror);
              if (EE.listenerCount(dest, 'error') === 0)
                dest.emit('error', er);
            }
            // This is a brutally ugly hack to make sure that our error handler
            // is attached before any userland ones.  NEVER DO THIS.
            if (!dest._events || !dest._events.error)
              dest.on('error', onerror);
            else if (isArray(dest._events.error))
              dest._events.error.unshift(onerror);
            else
              dest._events.error = [onerror, dest._events.error];



            // Both close and finish should trigger unpipe, but only once.
            function onclose() {
              dest.removeListener('finish', onfinish);
              unpipe();
            }
            dest.once('close', onclose);

            function onfinish() {
              debug('onfinish');
              dest.removeListener('close', onclose);
              unpipe();
            }
            dest.once('finish', onfinish);

            function unpipe() {
              debug('unpipe');
              src.unpipe(dest);
            }

            // tell the dest that it's being piped to
            dest.emit('pipe', src);

            // start the flow if it hasn't been started already.
            if (!state.flowing) {
              debug('pipe resume');
              src.resume();
            }

            return dest;
          };

          function pipeOnDrain(src) {
            return function () {
              var state = src._readableState;
              debug('pipeOnDrain', state.awaitDrain);
              if (state.awaitDrain)
                state.awaitDrain--;
              if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
                state.flowing = true;
                flow(src);
              }
            };
          }


          Readable.prototype.unpipe = function (dest) {
            var state = this._readableState;

            // if we're not piping anywhere, then do nothing.
            if (state.pipesCount === 0)
              return this;

            // just one destination.  most common case.
            if (state.pipesCount === 1) {
              // passed in one, but it's not the right one.
              if (dest && dest !== state.pipes)
                return this;

              if (!dest)
                dest = state.pipes;

              // got a match.
              state.pipes = null;
              state.pipesCount = 0;
              state.flowing = false;
              if (dest)
                dest.emit('unpipe', this);
              return this;
            }

            // slow case. multiple pipe destinations.

            if (!dest) {
              // remove all.
              var dests = state.pipes;
              var len = state.pipesCount;
              state.pipes = null;
              state.pipesCount = 0;
              state.flowing = false;

              for (var i = 0; i < len; i++)
                dests[i].emit('unpipe', this);
              return this;
            }

            // try to find the right one.
            var i = indexOf(state.pipes, dest);
            if (i === -1)
              return this;

            state.pipes.splice(i, 1);
            state.pipesCount -= 1;
            if (state.pipesCount === 1)
              state.pipes = state.pipes[0];

            dest.emit('unpipe', this);

            return this;
          };

          // set up data events if they are asked for
          // Ensure readable listeners eventually get something
          Readable.prototype.on = function (ev, fn) {
            var res = Stream.prototype.on.call(this, ev, fn);

            // If listening to data, and it has not explicitly been paused,
            // then call resume to start the flow of data on the next tick.
            if (ev === 'data' && false !== this._readableState.flowing) {
              this.resume();
            }

            if (ev === 'readable' && this.readable) {
              var state = this._readableState;
              if (!state.readableListening) {
                state.readableListening = true;
                state.emittedReadable = false;
                state.needReadable = true;
                if (!state.reading) {
                  var self = this;
                  process.nextTick(function () {
                    debug('readable nexttick read 0');
                    self.read(0);
                  });
                } else if (state.length) {
                  emitReadable(this, state);
                }
              }
            }

            return res;
          };
          Readable.prototype.addListener = Readable.prototype.on;

          // pause() and resume() are remnants of the legacy readable stream API
          // If the user uses them, then switch into old mode.
          Readable.prototype.resume = function () {
            var state = this._readableState;
            if (!state.flowing) {
              debug('resume');
              state.flowing = true;
              if (!state.reading) {
                debug('resume read 0');
                this.read(0);
              }
              resume(this, state);
            }
            return this;
          };

          function resume(stream, state) {
            if (!state.resumeScheduled) {
              state.resumeScheduled = true;
              process.nextTick(function () {
                resume_(stream, state);
              });
            }
          }

          function resume_(stream, state) {
            state.resumeScheduled = false;
            stream.emit('resume');
            flow(stream);
            if (state.flowing && !state.reading)
              stream.read(0);
          }

          Readable.prototype.pause = function () {
            debug('call pause flowing=%j', this._readableState.flowing);
            if (false !== this._readableState.flowing) {
              debug('pause');
              this._readableState.flowing = false;
              this.emit('pause');
            }
            return this;
          };

          function flow(stream) {
            var state = stream._readableState;
            debug('flow', state.flowing);
            if (state.flowing) {
              do {
                var chunk = stream.read();
              } while (null !== chunk && state.flowing);
            }
          }

          // wrap an old-style stream as the async data source.
          // This is *not* part of the readable stream interface.
          // It is an ugly unfortunate mess of history.
          Readable.prototype.wrap = function (stream) {
            var state = this._readableState;
            var paused = false;

            var self = this;
            stream.on('end', function () {
              debug('wrapped end');
              if (state.decoder && !state.ended) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length)
                  self.push(chunk);
              }

              self.push(null);
            });

            stream.on('data', function (chunk) {
              debug('wrapped data');
              if (state.decoder)
                chunk = state.decoder.write(chunk);
              if (!chunk || !state.objectMode && !chunk.length)
                return;

              var ret = self.push(chunk);
              if (!ret) {
                paused = true;
                stream.pause();
              }
            });

            // proxy all the other methods.
            // important when wrapping filters and duplexes.
            for (var i in stream) {
              if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
                this[i] = function (method) {
                  return function () {
                    return stream[method].apply(stream, arguments);
                  }
                }(i);
              }
            }

            // proxy certain important events.
            var events = ['error', 'close', 'destroy', 'pause', 'resume'];
            forEach(events, function (ev) {
              stream.on(ev, self.emit.bind(self, ev));
            });

            // when we try to consume some more bytes, simply unpause the
            // underlying stream.
            self._read = function (n) {
              debug('wrapped _read', n);
              if (paused) {
                paused = false;
                stream.resume();
              }
            };

            return self;
          };



          // exposed for testing purposes only.
          Readable._fromList = fromList;

          // Pluck off n bytes from an array of buffers.
          // Length is the combined lengths of all the buffers in the list.
          function fromList(n, state) {
            var list = state.buffer;
            var length = state.length;
            var stringMode = !!state.decoder;
            var objectMode = !!state.objectMode;
            var ret;

            // nothing in the list, definitely empty.
            if (list.length === 0)
              return null;

            if (length === 0)
              ret = null;
            else if (objectMode)
              ret = list.shift();
            else if (!n || n >= length) {
              // read it all, truncate the array.
              if (stringMode)
                ret = list.join('');
              else
                ret = Buffer.concat(list, length);
              list.length = 0;
            } else {
              // read just some of it.
              if (n < list[0].length) {
                // just take a part of the first list item.
                // slice is the same for buffers and strings.
                var buf = list[0];
                ret = buf.slice(0, n);
                list[0] = buf.slice(n);
              } else if (n === list[0].length) {
                // first list is a perfect match
                ret = list.shift();
              } else {
                // complex case.
                // we have enough to cover it, but it spans past the first buffer.
                if (stringMode)
                  ret = '';
                else
                  ret = new Buffer(n);

                var c = 0;
                for (var i = 0, l = list.length; i < l && c < n; i++) {
                  var buf = list[0];
                  var cpy = Math.min(n - c, buf.length);

                  if (stringMode)
                    ret += buf.slice(0, cpy);
                  else
                    buf.copy(ret, c, 0, cpy);

                  if (cpy < buf.length)
                    list[0] = buf.slice(cpy);
                  else
                    list.shift();

                  c += cpy;
                }
              }
            }

            return ret;
          }

          function endReadable(stream) {
            var state = stream._readableState;

            // If we get here before consuming all the bytes, then that is a
            // bug in node.  Should never happen.
            if (state.length > 0)
              throw new Error('endReadable called on non-empty stream');

            if (!state.endEmitted) {
              state.ended = true;
              process.nextTick(function () {
                // Check that we didn't get one last unshift.
                if (!state.endEmitted && state.length === 0) {
                  state.endEmitted = true;
                  stream.readable = false;
                  stream.emit('end');
                }
              });
            }
          }

          function forEach(xs, f) {
            for (var i = 0, l = xs.length; i < l; i++) {
              f(xs[i], i);
            }
          }

          function indexOf(xs, x) {
            for (var i = 0, l = xs.length; i < l; i++) {
              if (xs[i] === x) return i;
            }
            return -1;
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 528 */
      /***/
      (function (module, exports) {

        /* (ignored) */

        /***/
      }),
      /* 529 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) { // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          // a duplex stream is just a stream that is both readable and writable.
          // Since JS doesn't have multiple prototypal inheritance, this class
          // prototypally inherits from Readable, and then parasitically from
          // Writable.

          module.exports = Duplex;

          /*<replacement>*/
          var objectKeys = Object.keys || function (obj) {
              var keys = [];
              for (var key in obj) keys.push(key);
              return keys;
            }
            /*</replacement>*/


          /*<replacement>*/
          var util = __webpack_require__(494);
          util.inherits = __webpack_require__(487);
          /*</replacement>*/

          var Readable = __webpack_require__(527);
          var Writable = __webpack_require__(530);

          util.inherits(Duplex, Readable);

          forEach(objectKeys(Writable.prototype), function (method) {
            if (!Duplex.prototype[method])
              Duplex.prototype[method] = Writable.prototype[method];
          });

          function Duplex(options) {
            if (!(this instanceof Duplex))
              return new Duplex(options);

            Readable.call(this, options);
            Writable.call(this, options);

            if (options && options.readable === false)
              this.readable = false;

            if (options && options.writable === false)
              this.writable = false;

            this.allowHalfOpen = true;
            if (options && options.allowHalfOpen === false)
              this.allowHalfOpen = false;

            this.once('end', onend);
          }

          // the no-half-open enforcer
          function onend() {
            // if we allow half-open state, or if the writable side ended,
            // then we're ok.
            if (this.allowHalfOpen || this._writableState.ended)
              return;

            // no more data can be written.
            // But allow more writes to happen in this tick.
            process.nextTick(this.end.bind(this));
          }

          function forEach(xs, f) {
            for (var i = 0, l = xs.length; i < l; i++) {
              f(xs[i], i);
            }
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 530 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) { // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          // A bit simpler than readable streams.
          // Implement an async ._write(chunk, cb), and it'll handle all
          // the drain event emission and buffering.

          module.exports = Writable;

          /*<replacement>*/
          var Buffer = __webpack_require__(480).Buffer;
          /*</replacement>*/

          Writable.WritableState = WritableState;


          /*<replacement>*/
          var util = __webpack_require__(494);
          util.inherits = __webpack_require__(487);
          /*</replacement>*/

          var Stream = __webpack_require__(515);

          util.inherits(Writable, Stream);

          function WriteReq(chunk, encoding, cb) {
            this.chunk = chunk;
            this.encoding = encoding;
            this.callback = cb;
          }

          function WritableState(options, stream) {
            var Duplex = __webpack_require__(529);

            options = options || {};

            // the point at which write() starts returning false
            // Note: 0 is a valid value, means that we always return false if
            // the entire buffer is not flushed immediately on write()
            var hwm = options.highWaterMark;
            var defaultHwm = options.objectMode ? 16 : 16 * 1024;
            this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

            // object stream flag to indicate whether or not this stream
            // contains buffers or objects.
            this.objectMode = !!options.objectMode;

            if (stream instanceof Duplex)
              this.objectMode = this.objectMode || !!options.writableObjectMode;

            // cast to ints.
            this.highWaterMark = ~~this.highWaterMark;

            this.needDrain = false;
            // at the start of calling end()
            this.ending = false;
            // when end() has been called, and returned
            this.ended = false;
            // when 'finish' is emitted
            this.finished = false;

            // should we decode strings into buffers before passing to _write?
            // this is here so that some node-core streams can optimize string
            // handling at a lower level.
            var noDecode = options.decodeStrings === false;
            this.decodeStrings = !noDecode;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || 'utf8';

            // not an actual buffer we keep track of, but a measurement
            // of how much we're waiting to get pushed to some underlying
            // socket or file.
            this.length = 0;

            // a flag to see when we're in the middle of a write.
            this.writing = false;

            // when true all writes will be buffered until .uncork() call
            this.corked = 0;

            // a flag to be able to tell if the onwrite cb is called immediately,
            // or on a later tick.  We set this to true at first, because any
            // actions that shouldn't happen until "later" should generally also
            // not happen before the first write call.
            this.sync = true;

            // a flag to know if we're processing previously buffered items, which
            // may call the _write() callback in the same tick, so that we don't
            // end up in an overlapped onwrite situation.
            this.bufferProcessing = false;

            // the callback that's passed to _write(chunk,cb)
            this.onwrite = function (er) {
              onwrite(stream, er);
            };

            // the callback that the user supplies to write(chunk,encoding,cb)
            this.writecb = null;

            // the amount that is being written when _write is called.
            this.writelen = 0;

            this.buffer = [];

            // number of pending user-supplied write callbacks
            // this must be 0 before 'finish' can be emitted
            this.pendingcb = 0;

            // emit prefinish if the only thing we're waiting for is _write cbs
            // This is relevant for synchronous Transform streams
            this.prefinished = false;

            // True if the error was already emitted and should not be thrown again
            this.errorEmitted = false;
          }

          function Writable(options) {
            var Duplex = __webpack_require__(529);

            // Writable ctor is applied to Duplexes, though they're not
            // instanceof Writable, they're instanceof Readable.
            if (!(this instanceof Writable) && !(this instanceof Duplex))
              return new Writable(options);

            this._writableState = new WritableState(options, this);

            // legacy.
            this.writable = true;

            Stream.call(this);
          }

          // Otherwise people can pipe Writable streams, which is just wrong.
          Writable.prototype.pipe = function () {
            this.emit('error', new Error('Cannot pipe. Not readable.'));
          };


          function writeAfterEnd(stream, state, cb) {
            var er = new Error('write after end');
            // TODO: defer error events consistently everywhere, not just the cb
            stream.emit('error', er);
            process.nextTick(function () {
              cb(er);
            });
          }

          // If we get something that is not a buffer, string, null, or undefined,
          // and we're not in objectMode, then that's an error.
          // Otherwise stream chunks are all considered to be of length=1, and the
          // watermarks determine how many objects to keep in the buffer, rather than
          // how many bytes or characters.
          function validChunk(stream, state, chunk, cb) {
            var valid = true;
            if (!util.isBuffer(chunk) &&
              !util.isString(chunk) &&
              !util.isNullOrUndefined(chunk) &&
              !state.objectMode) {
              var er = new TypeError('Invalid non-string/buffer chunk');
              stream.emit('error', er);
              process.nextTick(function () {
                cb(er);
              });
              valid = false;
            }
            return valid;
          }

          Writable.prototype.write = function (chunk, encoding, cb) {
            var state = this._writableState;
            var ret = false;

            if (util.isFunction(encoding)) {
              cb = encoding;
              encoding = null;
            }

            if (util.isBuffer(chunk))
              encoding = 'buffer';
            else if (!encoding)
              encoding = state.defaultEncoding;

            if (!util.isFunction(cb))
              cb = function () {};

            if (state.ended)
              writeAfterEnd(this, state, cb);
            else if (validChunk(this, state, chunk, cb)) {
              state.pendingcb++;
              ret = writeOrBuffer(this, state, chunk, encoding, cb);
            }

            return ret;
          };

          Writable.prototype.cork = function () {
            var state = this._writableState;

            state.corked++;
          };

          Writable.prototype.uncork = function () {
            var state = this._writableState;

            if (state.corked) {
              state.corked--;

              if (!state.writing &&
                !state.corked &&
                !state.finished &&
                !state.bufferProcessing &&
                state.buffer.length)
                clearBuffer(this, state);
            }
          };

          function decodeChunk(state, chunk, encoding) {
            if (!state.objectMode &&
              state.decodeStrings !== false &&
              util.isString(chunk)) {
              chunk = new Buffer(chunk, encoding);
            }
            return chunk;
          }

          // if we're already writing something, then just put this
          // in the queue, and wait our turn.  Otherwise, call _write
          // If we return false, then we need a drain event, so set that flag.
          function writeOrBuffer(stream, state, chunk, encoding, cb) {
            chunk = decodeChunk(state, chunk, encoding);
            if (util.isBuffer(chunk))
              encoding = 'buffer';
            var len = state.objectMode ? 1 : chunk.length;

            state.length += len;

            var ret = state.length < state.highWaterMark;
            // we must ensure that previous needDrain will not be reset to false.
            if (!ret)
              state.needDrain = true;

            if (state.writing || state.corked)
              state.buffer.push(new WriteReq(chunk, encoding, cb));
            else
              doWrite(stream, state, false, len, chunk, encoding, cb);

            return ret;
          }

          function doWrite(stream, state, writev, len, chunk, encoding, cb) {
            state.writelen = len;
            state.writecb = cb;
            state.writing = true;
            state.sync = true;
            if (writev)
              stream._writev(chunk, state.onwrite);
            else
              stream._write(chunk, encoding, state.onwrite);
            state.sync = false;
          }

          function onwriteError(stream, state, sync, er, cb) {
            if (sync)
              process.nextTick(function () {
                state.pendingcb--;
                cb(er);
              });
            else {
              state.pendingcb--;
              cb(er);
            }

            stream._writableState.errorEmitted = true;
            stream.emit('error', er);
          }

          function onwriteStateUpdate(state) {
            state.writing = false;
            state.writecb = null;
            state.length -= state.writelen;
            state.writelen = 0;
          }

          function onwrite(stream, er) {
            var state = stream._writableState;
            var sync = state.sync;
            var cb = state.writecb;

            onwriteStateUpdate(state);

            if (er)
              onwriteError(stream, state, sync, er, cb);
            else {
              // Check if we're actually ready to finish, but don't emit yet
              var finished = needFinish(stream, state);

              if (!finished &&
                !state.corked &&
                !state.bufferProcessing &&
                state.buffer.length) {
                clearBuffer(stream, state);
              }

              if (sync) {
                process.nextTick(function () {
                  afterWrite(stream, state, finished, cb);
                });
              } else {
                afterWrite(stream, state, finished, cb);
              }
            }
          }

          function afterWrite(stream, state, finished, cb) {
            if (!finished)
              onwriteDrain(stream, state);
            state.pendingcb--;
            cb();
            finishMaybe(stream, state);
          }

          // Must force callback to be called on nextTick, so that we don't
          // emit 'drain' before the write() consumer gets the 'false' return
          // value, and has a chance to attach a 'drain' listener.
          function onwriteDrain(stream, state) {
            if (state.length === 0 && state.needDrain) {
              state.needDrain = false;
              stream.emit('drain');
            }
          }


          // if there's something in the buffer waiting, then process it
          function clearBuffer(stream, state) {
            state.bufferProcessing = true;

            if (stream._writev && state.buffer.length > 1) {
              // Fast case, write everything using _writev()
              var cbs = [];
              for (var c = 0; c < state.buffer.length; c++)
                cbs.push(state.buffer[c].callback);

              // count the one we are adding, as well.
              // TODO(isaacs) clean this up
              state.pendingcb++;
              doWrite(stream, state, true, state.length, state.buffer, '', function (err) {
                for (var i = 0; i < cbs.length; i++) {
                  state.pendingcb--;
                  cbs[i](err);
                }
              });

              // Clear buffer
              state.buffer = [];
            } else {
              // Slow case, write chunks one-by-one
              for (var c = 0; c < state.buffer.length; c++) {
                var entry = state.buffer[c];
                var chunk = entry.chunk;
                var encoding = entry.encoding;
                var cb = entry.callback;
                var len = state.objectMode ? 1 : chunk.length;

                doWrite(stream, state, false, len, chunk, encoding, cb);

                // if we didn't call the onwrite immediately, then
                // it means that we need to wait until it does.
                // also, that means that the chunk and cb are currently
                // being processed, so move the buffer counter past them.
                if (state.writing) {
                  c++;
                  break;
                }
              }

              if (c < state.buffer.length)
                state.buffer = state.buffer.slice(c);
              else
                state.buffer.length = 0;
            }

            state.bufferProcessing = false;
          }

          Writable.prototype._write = function (chunk, encoding, cb) {
            cb(new Error('not implemented'));

          };

          Writable.prototype._writev = null;

          Writable.prototype.end = function (chunk, encoding, cb) {
            var state = this._writableState;

            if (util.isFunction(chunk)) {
              cb = chunk;
              chunk = null;
              encoding = null;
            } else if (util.isFunction(encoding)) {
              cb = encoding;
              encoding = null;
            }

            if (!util.isNullOrUndefined(chunk))
              this.write(chunk, encoding);

            // .end() fully uncorks
            if (state.corked) {
              state.corked = 1;
              this.uncork();
            }

            // ignore unnecessary end() calls.
            if (!state.ending && !state.finished)
              endWritable(this, state, cb);
          };


          function needFinish(stream, state) {
            return (state.ending &&
              state.length === 0 &&
              !state.finished &&
              !state.writing);
          }

          function prefinish(stream, state) {
            if (!state.prefinished) {
              state.prefinished = true;
              stream.emit('prefinish');
            }
          }

          function finishMaybe(stream, state) {
            var need = needFinish(stream, state);
            if (need) {
              if (state.pendingcb === 0) {
                prefinish(stream, state);
                state.finished = true;
                stream.emit('finish');
              } else
                prefinish(stream, state);
            }
            return need;
          }

          function endWritable(stream, state, cb) {
            state.ending = true;
            finishMaybe(stream, state);
            if (cb) {
              if (state.finished)
                process.nextTick(cb);
              else
                stream.once('finish', cb);
            }
            state.ended = true;
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 531 */
      /***/
      (function (module, exports, __webpack_require__) {

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.


        // a transform stream is a readable/writable stream where you do
        // something with the data.  Sometimes it's called a "filter",
        // but that's not a great name for it, since that implies a thing where
        // some bits pass through, and others are simply ignored.  (That would
        // be a valid example of a transform, of course.)
        //
        // While the output is causally related to the input, it's not a
        // necessarily symmetric or synchronous transformation.  For example,
        // a zlib stream might take multiple plain-text writes(), and then
        // emit a single compressed chunk some time in the future.
        //
        // Here's how this works:
        //
        // The Transform stream has all the aspects of the readable and writable
        // stream classes.  When you write(chunk), that calls _write(chunk,cb)
        // internally, and returns false if there's a lot of pending writes
        // buffered up.  When you call read(), that calls _read(n) until
        // there's enough pending readable data buffered up.
        //
        // In a transform stream, the written data is placed in a buffer.  When
        // _read(n) is called, it transforms the queued up data, calling the
        // buffered _write cb's as it consumes chunks.  If consuming a single
        // written chunk would result in multiple output chunks, then the first
        // outputted bit calls the readcb, and subsequent chunks just go into
        // the read buffer, and will cause it to emit 'readable' if necessary.
        //
        // This way, back-pressure is actually determined by the reading side,
        // since _read has to be called to start processing a new chunk.  However,
        // a pathological inflate type of transform can cause excessive buffering
        // here.  For example, imagine a stream where every byte of input is
        // interpreted as an integer from 0-255, and then results in that many
        // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
        // 1kb of data being output.  In this case, you could write a very small
        // amount of input, and end up with a very large amount of output.  In
        // such a pathological inflating mechanism, there'd be no way to tell
        // the system to stop doing the transform.  A single 4MB write could
        // cause the system to run out of memory.
        //
        // However, even in such a pathological case, only a single written chunk
        // would be consumed, and then the rest would wait (un-transformed) until
        // the results of the previous transformed chunk were consumed.

        module.exports = Transform;

        var Duplex = __webpack_require__(529);

        /*<replacement>*/
        var util = __webpack_require__(494);
        util.inherits = __webpack_require__(487);
        /*</replacement>*/

        util.inherits(Transform, Duplex);


        function TransformState(options, stream) {
          this.afterTransform = function (er, data) {
            return afterTransform(stream, er, data);
          };

          this.needTransform = false;
          this.transforming = false;
          this.writecb = null;
          this.writechunk = null;
        }

        function afterTransform(stream, er, data) {
          var ts = stream._transformState;
          ts.transforming = false;

          var cb = ts.writecb;

          if (!cb)
            return stream.emit('error', new Error('no writecb in Transform class'));

          ts.writechunk = null;
          ts.writecb = null;

          if (!util.isNullOrUndefined(data))
            stream.push(data);

          if (cb)
            cb(er);

          var rs = stream._readableState;
          rs.reading = false;
          if (rs.needReadable || rs.length < rs.highWaterMark) {
            stream._read(rs.highWaterMark);
          }
        }


        function Transform(options) {
          if (!(this instanceof Transform))
            return new Transform(options);

          Duplex.call(this, options);

          this._transformState = new TransformState(options, this);

          // when the writable side finishes, then flush out anything remaining.
          var stream = this;

          // start out asking for a readable event once data is transformed.
          this._readableState.needReadable = true;

          // we have implemented the _read method, and done the other things
          // that Readable wants before the first _read call, so unset the
          // sync guard flag.
          this._readableState.sync = false;

          this.once('prefinish', function () {
            if (util.isFunction(this._flush))
              this._flush(function (er) {
                done(stream, er);
              });
            else
              done(stream);
          });
        }

        Transform.prototype.push = function (chunk, encoding) {
          this._transformState.needTransform = false;
          return Duplex.prototype.push.call(this, chunk, encoding);
        };

        // This is the part where you do stuff!
        // override this function in implementation classes.
        // 'chunk' is an input chunk.
        //
        // Call `push(newChunk)` to pass along transformed output
        // to the readable side.  You may call 'push' zero or more times.
        //
        // Call `cb(err)` when you are done with this chunk.  If you pass
        // an error, then that'll put the hurt on the whole operation.  If you
        // never call cb(), then you'll never get another chunk.
        Transform.prototype._transform = function (chunk, encoding, cb) {
          throw new Error('not implemented');
        };

        Transform.prototype._write = function (chunk, encoding, cb) {
          var ts = this._transformState;
          ts.writecb = cb;
          ts.writechunk = chunk;
          ts.writeencoding = encoding;
          if (!ts.transforming) {
            var rs = this._readableState;
            if (ts.needTransform ||
              rs.needReadable ||
              rs.length < rs.highWaterMark)
              this._read(rs.highWaterMark);
          }
        };

        // Doesn't matter what the args are here.
        // _transform does all the work.
        // That we got here means that the readable side wants more data.
        Transform.prototype._read = function (n) {
          var ts = this._transformState;

          if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
            ts.transforming = true;
            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
          } else {
            // mark that we need a transform, so that any data that comes in
            // will get processed, now that we've asked for it.
            ts.needTransform = true;
          }
        };


        function done(stream, er) {
          if (er)
            return stream.emit('error', er);

          // if there's nothing in the write buffer, then that means
          // that nothing more will ever be provided
          var ws = stream._writableState;
          var ts = stream._transformState;

          if (ws.length)
            throw new Error('calling transform done when ws.length != 0');

          if (ts.transforming)
            throw new Error('calling transform done when still transforming');

          return stream.push(null);
        }


        /***/
      }),
      /* 532 */
      /***/
      (function (module, exports, __webpack_require__) {

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // a passthrough stream.
        // basically just the most minimal sort of Transform stream.
        // Every written chunk gets output as-is.

        module.exports = PassThrough;

        var Transform = __webpack_require__(531);

        /*<replacement>*/
        var util = __webpack_require__(494);
        util.inherits = __webpack_require__(487);
        /*</replacement>*/

        util.inherits(PassThrough, Transform);

        function PassThrough(options) {
          if (!(this instanceof PassThrough))
            return new PassThrough(options);

          Transform.call(this, options);
        }

        PassThrough.prototype._transform = function (chunk, encoding, cb) {
          cb(null, chunk);
        };


        /***/
      }),
      /* 533 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (Buffer, module, process) {

          'use strict';

          var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

          var Parser = __webpack_require__(534),
            through = __webpack_require__(535);

          /*

            the value of this.stack that creationix's jsonparse has is weird.

            it makes this code ugly, but his problem is way harder that mine,
            so i'll forgive him.

          */

          exports.parse = function (path, map) {
            var header, footer;
            var parser = new Parser();
            var stream = through(function (chunk) {
              if ('string' === typeof chunk) chunk = new Buffer(chunk);
              parser.write(chunk);
            }, function (data) {
              if (data) stream.write(data);
              if (header) stream.emit('header', header);
              if (footer) stream.emit('footer', footer);
              stream.queue(null);
            });

            if ('string' === typeof path) path = path.split('.').map(function (e) {
              if (e === '$*') return { emitKey: true };
              else if (e === '*') return true;
              else if (e === '') // '..'.split('.') returns an empty string
                return { recurse: true };
              else return e;
            });

            var count = 0,
              _key;
            if (!path || !path.length) path = null;

            parser.onValue = function (value) {
              if (!this.root) stream.root = value;

              if (!path) return;

              var i = 0; // iterates on path
              var j = 0; // iterates on stack
              var emitKey = false;
              var emitPath = false;
              while (i < path.length) {
                var key = path[i];
                var c;
                j++;

                if (key && !key.recurse) {
                  c = j === this.stack.length ? this : this.stack[j];
                  if (!c) return;
                  if (!check(key, c.key)) {
                    setHeaderFooter(c.key, value);
                    return;
                  }
                  emitKey = !!key.emitKey;
                  emitPath = !!key.emitPath;
                  i++;
                } else {
                  i++;
                  var nextKey = path[i];
                  if (!nextKey) return;
                  while (true) {
                    c = j === this.stack.length ? this : this.stack[j];
                    if (!c) return;
                    if (check(nextKey, c.key)) {
                      i++;
                      if (!Object.isFrozen(this.stack[j])) this.stack[j].value = null;
                      break;
                    } else {
                      setHeaderFooter(c.key, value);
                    }
                    j++;
                  }
                }
              }

              // emit header
              if (header) {
                stream.emit('header', header);
                header = false;
              }
              if (j !== this.stack.length) return;

              count++;
              var actualPath = this.stack.slice(1).map(function (element) {
                return element.key;
              }).concat([this.key]);
              var data = this.value[this.key];
              if (null != data)
                if (null != (data = map ? map(data, actualPath) : data)) {
                  if (emitKey || emitPath) {
                    data = { value: data };
                    if (emitKey) data["key"] = this.key;
                    if (emitPath) data["path"] = actualPath;
                  }

                  stream.queue(data);
                }
              delete this.value[this.key];
              for (var k in this.stack) {
                if (!Object.isFrozen(this.stack[k])) this.stack[k].value = null;
              }
            };
            parser._onToken = parser.onToken;

            parser.onToken = function (token, value) {
              parser._onToken(token, value);
              if (this.stack.length === 0) {
                if (stream.root) {
                  if (!path) stream.queue(stream.root);
                  count = 0;
                  stream.root = null;
                }
              }
            };

            parser.onError = function (err) {
              if (err.message.indexOf("at position") > -1) err.message = "Invalid JSON (" + err.message + ")";
              stream.emit('error', err);
            };

            return stream;

            function setHeaderFooter(key, value) {
              // header has not been emitted yet
              if (header !== false) {
                header = header || {};
                header[key] = value;
              }

              // footer has not been emitted yet but header has
              if (footer !== false && header === false) {
                footer = footer || {};
                footer[key] = value;
              }
            }
          };

          function check(x, y) {
            if ('string' === typeof x) return y == x;
            else if (x && 'function' === typeof x.exec) return x.exec(y);
            else if ('boolean' === typeof x || 'object' === (typeof x === 'undefined' ? 'undefined' : _typeof(x))) return x;
            else if ('function' === typeof x) return x(y);
            return false;
          }

          exports.stringify = function (op, sep, cl, indent) {
            indent = indent || 0;
            if (op === false) {
              op = '';
              sep = '\n';
              cl = '';
            } else if (op == null) {

              op = '[\n';
              sep = '\n,\n';
              cl = '\n]\n';
            }

            //else, what ever you like

            var stream,
              first = true,
              anyData = false;
            stream = through(function (data) {
              anyData = true;
              try {
                var json = JSON.stringify(data, null, indent);
              } catch (err) {
                return stream.emit('error', err);
              }
              if (first) {
                first = false;
                stream.queue(op + json);
              } else stream.queue(sep + json);
            }, function (data) {
              if (!anyData) stream.queue(op);
              stream.queue(cl);
              stream.queue(null);
            });

            return stream;
          };

          exports.stringifyObject = function (op, sep, cl, indent) {
            indent = indent || 0;
            if (op === false) {
              op = '';
              sep = '\n';
              cl = '';
            } else if (op == null) {

              op = '{\n';
              sep = '\n,\n';
              cl = '\n}\n';
            }

            //else, what ever you like

            var first = true;
            var anyData = false;
            var stream = through(function (data) {
              anyData = true;
              var json = JSON.stringify(data[0]) + ':' + JSON.stringify(data[1], null, indent);
              if (first) {
                first = false;
                this.queue(op + json);
              } else this.queue(sep + json);
            }, function (data) {
              if (!anyData) this.queue(op);
              this.queue(cl);

              this.queue(null);
            });

            return stream;
          };

          if (!module.parent && process.title !== 'browser') {
            process.stdin.pipe(exports.parse(process.argv[2])).pipe(exports.stringify('[', ',\n', ']\n', 2)).pipe(process.stdout);
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(480).Buffer, __webpack_require__(70)(module), __webpack_require__(478)))

        /***/
      }),
      /* 534 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (Buffer) { /*global Buffer*/
          // Named constants with unique integer values
          var C = {};
          // Tokens
          var LEFT_BRACE = C.LEFT_BRACE = 0x1;
          var RIGHT_BRACE = C.RIGHT_BRACE = 0x2;
          var LEFT_BRACKET = C.LEFT_BRACKET = 0x3;
          var RIGHT_BRACKET = C.RIGHT_BRACKET = 0x4;
          var COLON = C.COLON = 0x5;
          var COMMA = C.COMMA = 0x6;
          var TRUE = C.TRUE = 0x7;
          var FALSE = C.FALSE = 0x8;
          var NULL = C.NULL = 0x9;
          var STRING = C.STRING = 0xa;
          var NUMBER = C.NUMBER = 0xb;
          // Tokenizer States
          var START = C.START = 0x11;
          var STOP = C.STOP = 0x12;
          var TRUE1 = C.TRUE1 = 0x21;
          var TRUE2 = C.TRUE2 = 0x22;
          var TRUE3 = C.TRUE3 = 0x23;
          var FALSE1 = C.FALSE1 = 0x31;
          var FALSE2 = C.FALSE2 = 0x32;
          var FALSE3 = C.FALSE3 = 0x33;
          var FALSE4 = C.FALSE4 = 0x34;
          var NULL1 = C.NULL1 = 0x41;
          var NULL2 = C.NULL2 = 0x42;
          var NULL3 = C.NULL3 = 0x43;
          var NUMBER1 = C.NUMBER1 = 0x51;
          var NUMBER3 = C.NUMBER3 = 0x53;
          var STRING1 = C.STRING1 = 0x61;
          var STRING2 = C.STRING2 = 0x62;
          var STRING3 = C.STRING3 = 0x63;
          var STRING4 = C.STRING4 = 0x64;
          var STRING5 = C.STRING5 = 0x65;
          var STRING6 = C.STRING6 = 0x66;
          // Parser States
          var VALUE = C.VALUE = 0x71;
          var KEY = C.KEY = 0x72;
          // Parser Modes
          var OBJECT = C.OBJECT = 0x81;
          var ARRAY = C.ARRAY = 0x82;
          // Character constants
          var BACK_SLASH = "\\".charCodeAt(0);
          var FORWARD_SLASH = "\/".charCodeAt(0);
          var BACKSPACE = "\b".charCodeAt(0);
          var FORM_FEED = "\f".charCodeAt(0);
          var NEWLINE = "\n".charCodeAt(0);
          var CARRIAGE_RETURN = "\r".charCodeAt(0);
          var TAB = "\t".charCodeAt(0);

          var STRING_BUFFER_SIZE = 64 * 1024;

          function Parser() {
            this.tState = START;
            this.value = undefined;

            this.string = undefined; // string data
            this.stringBuffer = Buffer.alloc ? Buffer.alloc(STRING_BUFFER_SIZE) : new Buffer(STRING_BUFFER_SIZE);
            this.stringBufferOffset = 0;
            this.unicode = undefined; // unicode escapes

            this.key = undefined;
            this.mode = undefined;
            this.stack = [];
            this.state = VALUE;
            this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary
            this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read
            this.temp_buffs = { "2": new Buffer(2), "3": new Buffer(3), "4": new Buffer(4) }; // for rebuilding chars split before boundary is reached

            // Stream offset
            this.offset = -1;
          }

          // Slow code to string converter (only used when throwing syntax errors)
          Parser.toknam = function (code) {
            var keys = Object.keys(C);
            for (var i = 0, l = keys.length; i < l; i++) {
              var key = keys[i];
              if (C[key] === code) { return key; }
            }
            return code && ("0x" + code.toString(16));
          };

          var proto = Parser.prototype;
          proto.onError = function (err) { throw err; };
          proto.charError = function (buffer, i) {
            this.tState = STOP;
            this.onError(new Error("Unexpected " + JSON.stringify(String.fromCharCode(buffer[i])) + " at position " + i + " in state " + Parser.toknam(this.tState)));
          };
          proto.appendStringChar = function (char) {
            if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {
              this.string += this.stringBuffer.toString('utf8');
              this.stringBufferOffset = 0;
            }

            this.stringBuffer[this.stringBufferOffset++] = char;
          };
          proto.appendStringBuf = function (buf, start, end) {
            var size = buf.length;
            if (typeof start === 'number') {
              if (typeof end === 'number') {
                if (end < 0) {
                  // adding a negative end decreeses the size
                  size = buf.length - start + end;
                } else {
                  size = end - start;
                }
              } else {
                size = buf.length - start;
              }
            }

            if (size < 0) {
              size = 0;
            }

            if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {
              this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);
              this.stringBufferOffset = 0;
            }

            buf.copy(this.stringBuffer, this.stringBufferOffset, start, end);
            this.stringBufferOffset += size;
          };
          proto.write = function (buffer) {
            if (typeof buffer === "string") buffer = new Buffer(buffer);
            var n;
            for (var i = 0, l = buffer.length; i < l; i++) {
              if (this.tState === START) {
                n = buffer[i];
                this.offset++;
                if (n === 0x7b) {
                  this.onToken(LEFT_BRACE, "{"); // {
                } else if (n === 0x7d) {
                  this.onToken(RIGHT_BRACE, "}"); // }
                } else if (n === 0x5b) {
                  this.onToken(LEFT_BRACKET, "["); // [
                } else if (n === 0x5d) {
                  this.onToken(RIGHT_BRACKET, "]"); // ]
                } else if (n === 0x3a) {
                  this.onToken(COLON, ":"); // :
                } else if (n === 0x2c) {
                  this.onToken(COMMA, ","); // ,
                } else if (n === 0x74) {
                  this.tState = TRUE1; // t
                } else if (n === 0x66) {
                  this.tState = FALSE1; // f
                } else if (n === 0x6e) {
                  this.tState = NULL1; // n
                } else if (n === 0x22) { // "
                  this.string = "";
                  this.stringBufferOffset = 0;
                  this.tState = STRING1;
                } else if (n === 0x2d) {
                  this.string = "-";
                  this.tState = NUMBER1; // -
                } else {
                  if (n >= 0x30 && n < 0x40) { // 1-9
                    this.string = String.fromCharCode(n);
                    this.tState = NUMBER3;
                  } else if (n === 0x20 || n === 0x09 || n === 0x0a || n === 0x0d) {
                    // whitespace
                  } else {
                    return this.charError(buffer, i);
                  }
                }
              } else if (this.tState === STRING1) { // After open quote
                n = buffer[i]; // get current byte from buffer
                // check for carry over of a multi byte char split between data chunks
                // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration
                if (this.bytes_remaining > 0) {
                  for (var j = 0; j < this.bytes_remaining; j++) {
                    this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer[j];
                  }

                  this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]);
                  this.bytes_in_sequence = this.bytes_remaining = 0;
                  i = i + j - 1;
                } else if (this.bytes_remaining === 0 && n >= 128) { // else if no remainder bytes carried over, parse multi byte (>=128) chars one at a time
                  if (n <= 193 || n > 244) {
                    return this.onError(new Error("Invalid UTF-8 character at position " + i + " in state " + Parser.toknam(this.tState)));
                  }
                  if ((n >= 194) && (n <= 223)) this.bytes_in_sequence = 2;
                  if ((n >= 224) && (n <= 239)) this.bytes_in_sequence = 3;
                  if ((n >= 240) && (n <= 244)) this.bytes_in_sequence = 4;
                  if ((this.bytes_in_sequence + i) > buffer.length) { // if bytes needed to complete char fall outside buffer length, we have a boundary split
                    for (var k = 0; k <= (buffer.length - 1 - i); k++) {
                      this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k]; // fill temp buffer of correct size with bytes available in this chunk
                    }
                    this.bytes_remaining = (i + this.bytes_in_sequence) - buffer.length;
                    i = buffer.length - 1;
                  } else {
                    this.appendStringBuf(buffer, i, i + this.bytes_in_sequence);
                    i = i + this.bytes_in_sequence - 1;
                  }
                } else if (n === 0x22) {
                  this.tState = START;
                  this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);
                  this.stringBufferOffset = 0;
                  this.onToken(STRING, this.string);
                  this.offset += Buffer.byteLength(this.string, 'utf8') + 1;
                  this.string = undefined;
                } else if (n === 0x5c) {
                  this.tState = STRING2;
                } else if (n >= 0x20) { this.appendStringChar(n); } else {
                  return this.charError(buffer, i);
                }
              } else if (this.tState === STRING2) { // After backslash
                n = buffer[i];
                if (n === 0x22) {
                  this.appendStringChar(n);
                  this.tState = STRING1;
                } else if (n === 0x5c) {
                  this.appendStringChar(BACK_SLASH);
                  this.tState = STRING1;
                } else if (n === 0x2f) {
                  this.appendStringChar(FORWARD_SLASH);
                  this.tState = STRING1;
                } else if (n === 0x62) {
                  this.appendStringChar(BACKSPACE);
                  this.tState = STRING1;
                } else if (n === 0x66) {
                  this.appendStringChar(FORM_FEED);
                  this.tState = STRING1;
                } else if (n === 0x6e) {
                  this.appendStringChar(NEWLINE);
                  this.tState = STRING1;
                } else if (n === 0x72) {
                  this.appendStringChar(CARRIAGE_RETURN);
                  this.tState = STRING1;
                } else if (n === 0x74) {
                  this.appendStringChar(TAB);
                  this.tState = STRING1;
                } else if (n === 0x75) {
                  this.unicode = "";
                  this.tState = STRING3;
                } else {
                  return this.charError(buffer, i);
                }
              } else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6) { // unicode hex codes
                n = buffer[i];
                // 0-9 A-F a-f
                if ((n >= 0x30 && n < 0x40) || (n > 0x40 && n <= 0x46) || (n > 0x60 && n <= 0x66)) {
                  this.unicode += String.fromCharCode(n);
                  if (this.tState++ === STRING6) {
                    this.appendStringBuf(Buffer(String.fromCharCode(parseInt(this.unicode, 16))));
                    this.unicode = undefined;
                    this.tState = STRING1;
                  }
                } else {
                  return this.charError(buffer, i);
                }
              } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {
                n = buffer[i];

                switch (n) {
                case 0x30: // 0
                case 0x31: // 1
                case 0x32: // 2
                case 0x33: // 3
                case 0x34: // 4
                case 0x35: // 5
                case 0x36: // 6
                case 0x37: // 7
                case 0x38: // 8
                case 0x39: // 9
                case 0x2e: // .
                case 0x65: // e
                case 0x45: // E
                case 0x2b: // +
                case 0x2d: // -
                  this.string += String.fromCharCode(n);
                  this.tState = NUMBER3;
                  break;
                default:
                  this.tState = START;
                  var result = Number(this.string);

                  if (isNaN(result)) {
                    return this.charError(buffer, i);
                  }

                  if ((this.string.match(/[0-9]+/) == this.string) && (result.toString() != this.string)) {
                    // Long string of digits which is an ID string and not valid and/or safe JavaScript integer Number
                    this.onToken(STRING, this.string);
                  } else {
                    this.onToken(NUMBER, result);
                  }

                  this.offset += this.string.length - 1;
                  this.string = undefined;
                  i--;
                  break;
                }
              } else if (this.tState === TRUE1) { // r
                if (buffer[i] === 0x72) { this.tState = TRUE2; } else { return this.charError(buffer, i); }
              } else if (this.tState === TRUE2) { // u
                if (buffer[i] === 0x75) { this.tState = TRUE3; } else { return this.charError(buffer, i); }
              } else if (this.tState === TRUE3) { // e
                if (buffer[i] === 0x65) { this.tState = START;
                  this.onToken(TRUE, true);
                  this.offset += 3; } else { return this.charError(buffer, i); }
              } else if (this.tState === FALSE1) { // a
                if (buffer[i] === 0x61) { this.tState = FALSE2; } else { return this.charError(buffer, i); }
              } else if (this.tState === FALSE2) { // l
                if (buffer[i] === 0x6c) { this.tState = FALSE3; } else { return this.charError(buffer, i); }
              } else if (this.tState === FALSE3) { // s
                if (buffer[i] === 0x73) { this.tState = FALSE4; } else { return this.charError(buffer, i); }
              } else if (this.tState === FALSE4) { // e
                if (buffer[i] === 0x65) { this.tState = START;
                  this.onToken(FALSE, false);
                  this.offset += 4; } else { return this.charError(buffer, i); }
              } else if (this.tState === NULL1) { // u
                if (buffer[i] === 0x75) { this.tState = NULL2; } else { return this.charError(buffer, i); }
              } else if (this.tState === NULL2) { // l
                if (buffer[i] === 0x6c) { this.tState = NULL3; } else { return this.charError(buffer, i); }
              } else if (this.tState === NULL3) { // l
                if (buffer[i] === 0x6c) { this.tState = START;
                  this.onToken(NULL, null);
                  this.offset += 3; } else { return this.charError(buffer, i); }
              }
            }
          };
          proto.onToken = function (token, value) {
            // Override this to get events
          };

          proto.parseError = function (token, value) {
            this.tState = STOP;
            this.onError(new Error("Unexpected " + Parser.toknam(token) + (value ? ("(" + JSON.stringify(value) + ")") : "") + " in state " + Parser.toknam(this.state)));
          };
          proto.push = function () {
            this.stack.push({ value: this.value, key: this.key, mode: this.mode });
          };
          proto.pop = function () {
            var value = this.value;
            var parent = this.stack.pop();
            this.value = parent.value;
            this.key = parent.key;
            this.mode = parent.mode;
            this.emit(value);
            if (!this.mode) { this.state = VALUE; }
          };
          proto.emit = function (value) {
            if (this.mode) { this.state = COMMA; }
            this.onValue(value);
          };
          proto.onValue = function (value) {
            // Override me
          };
          proto.onToken = function (token, value) {
            if (this.state === VALUE) {
              if (token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL) {
                if (this.value) {
                  this.value[this.key] = value;
                }
                this.emit(value);
              } else if (token === LEFT_BRACE) {
                this.push();
                if (this.value) {
                  this.value = this.value[this.key] = {};
                } else {
                  this.value = {};
                }
                this.key = undefined;
                this.state = KEY;
                this.mode = OBJECT;
              } else if (token === LEFT_BRACKET) {
                this.push();
                if (this.value) {
                  this.value = this.value[this.key] = [];
                } else {
                  this.value = [];
                }
                this.key = 0;
                this.mode = ARRAY;
                this.state = VALUE;
              } else if (token === RIGHT_BRACE) {
                if (this.mode === OBJECT) {
                  this.pop();
                } else {
                  return this.parseError(token, value);
                }
              } else if (token === RIGHT_BRACKET) {
                if (this.mode === ARRAY) {
                  this.pop();
                } else {
                  return this.parseError(token, value);
                }
              } else {
                return this.parseError(token, value);
              }
            } else if (this.state === KEY) {
              if (token === STRING) {
                this.key = value;
                this.state = COLON;
              } else if (token === RIGHT_BRACE) {
                this.pop();
              } else {
                return this.parseError(token, value);
              }
            } else if (this.state === COLON) {
              if (token === COLON) { this.state = VALUE; } else { return this.parseError(token, value); }
            } else if (this.state === COMMA) {
              if (token === COMMA) {
                if (this.mode === ARRAY) { this.key++;
                  this.state = VALUE; } else if (this.mode === OBJECT) { this.state = KEY; }

              } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) {
                this.pop();
              } else {
                return this.parseError(token, value);
              }
            } else {
              return this.parseError(token, value);
            }
          };

          Parser.C = C;

          module.exports = Parser;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(480).Buffer))

        /***/
      }),
      /* 535 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) {
          var Stream = __webpack_require__(515)

          // through
          //
          // a stream that does nothing but re-emit the input.
          // useful for aggregating a series of changing but not ending streams into one stream)

          exports = module.exports = through
          through.through = through

          //create a readable writable stream.

          function through(write, end, opts) {
            write = write || function (data) { this.queue(data) }
            end = end || function () { this.queue(null) }

            var ended = false,
              destroyed = false,
              buffer = [],
              _ended = false
            var stream = new Stream()
            stream.readable = stream.writable = true
            stream.paused = false

            //  stream.autoPause   = !(opts && opts.autoPause   === false)
            stream.autoDestroy = !(opts && opts.autoDestroy === false)

            stream.write = function (data) {
              write.call(this, data)
              return !stream.paused
            }

            function drain() {
              while (buffer.length && !stream.paused) {
                var data = buffer.shift()
                if (null === data)
                  return stream.emit('end')
                else
                  stream.emit('data', data)
              }
            }

            stream.queue = stream.push = function (data) {
              //    console.error(ended)
              if (_ended) return stream
              if (data === null) _ended = true
              buffer.push(data)
              drain()
              return stream
            }

            //this will be registered as the first 'end' listener
            //must call destroy next tick, to make sure we're after any
            //stream piped from here.
            //this is only a problem if end is not emitted synchronously.
            //a nicer way to do this is to make sure this is the last listener for 'end'

            stream.on('end', function () {
              stream.readable = false
              if (!stream.writable && stream.autoDestroy)
                process.nextTick(function () {
                  stream.destroy()
                })
            })

            function _end() {
              stream.writable = false
              end.call(stream)
              if (!stream.readable && stream.autoDestroy)
                stream.destroy()
            }

            stream.end = function (data) {
              if (ended) return
              ended = true
              if (arguments.length) stream.write(data)
              _end() // will emit or queue
              return stream
            }

            stream.destroy = function () {
              if (destroyed) return
              destroyed = true
              ended = true
              buffer.length = 0
              stream.writable = stream.readable = false
              stream.emit('close')
              return stream
            }

            stream.pause = function () {
              if (stream.paused) return
              stream.paused = true
              return stream
            }

            stream.resume = function () {
              if (stream.paused) {
                stream.paused = false
                stream.emit('resume')
              }
              drain()
                //may have become paused again,
                //as drain emits 'data'.
              if (!stream.paused)
                stream.emit('drain')
              return stream
            }
            return stream
          }


          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 536 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) {
          var Transform = __webpack_require__(518),
            inherits = __webpack_require__(522).inherits,
            xtend = __webpack_require__(506)

          function DestroyableTransform(opts) {
            Transform.call(this, opts)
            this._destroyed = false
          }

          inherits(DestroyableTransform, Transform)

          DestroyableTransform.prototype.destroy = function (err) {
            if (this._destroyed) return
            this._destroyed = true

            var self = this
            process.nextTick(function () {
              if (err)
                self.emit('error', err)
              self.emit('close')
            })
          }

          // a noop _transform function
          function noop(chunk, enc, callback) {
            callback(null, chunk)
          }


          // create a new export function, used by both the main export and
          // the .ctor export, contains common logic for dealing with arguments
          function through2(construct) {
            return function (options, transform, flush) {
              if (typeof options == 'function') {
                flush = transform
                transform = options
                options = {}
              }

              if (typeof transform != 'function')
                transform = noop

              if (typeof flush != 'function')
                flush = null

              return construct(options, transform, flush)
            }
          }


          // main export, just make me a transform stream!
          module.exports = through2(function (options, transform, flush) {
            var t2 = new DestroyableTransform(options)

            t2._transform = transform

            if (flush)
              t2._flush = flush

            return t2
          })


          // make me a reusable prototype that I can `new`, or implicitly `new`
          // with a constructor call
          module.exports.ctor = through2(function (options, transform, flush) {
            function Through2(override) {
              if (!(this instanceof Through2))
                return new Through2(override)

              this.options = xtend(options, override)

              DestroyableTransform.call(this, this.options)
            }

            inherits(Through2, DestroyableTransform)

            Through2.prototype._transform = transform

            if (flush)
              Through2.prototype._flush = flush

            return Through2
          })


          module.exports.obj = through2(function (options, transform, flush) {
            var t2 = new DestroyableTransform(xtend({ objectMode: true, highWaterMark: 16 }, options))

            t2._transform = transform

            if (flush)
              t2._flush = flush

            return t2
          })

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 537 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (Buffer) {
          'use strict';

          var Readable = __webpack_require__(515).Readable;
          var Guid = __webpack_require__(538);
          var querystring = __webpack_require__(471);
          var through2 = __webpack_require__(536);
          var EventEmitter = __webpack_require__(476).EventEmitter;

          var wsRequest = function wsRequest(client, args) {
            this.client = client;
            this.args = args;

            this.method = args.method;
            this.path = args.path;
            this.params = args.params;
            this.body = args.body;
            if (!this.body || typeof this.body !== 'object') {
              this.body = {};
            }

            var resultStream = this.init();

            return resultStream;
          };

          wsRequest.prototype.init = function init() {
            var that = this;

            this.id = Guid.raw();

            this.request = {
              id: this.id,
              path: this.client.appname + '/' + this.path + '?' + querystring.stringify(this.params),
              method: this.method,
              body: this.body,
              authorization: 'Basic ' + new Buffer(this.client.credentials).toString('base64')
            };

            this.resultStream = through2.obj();
            this.resultStream.writable = false;

            this.closeHandler = function () {
              that.wsClosed.apply(that);
            };
            this.errorHandler = function (err) {
              that.processError.apply(that, [err]);
            };
            this.messageHandler = function (dataObj) {
              that.processMessage.apply(that, [dataObj]);
            };

            this.client.ws.on('close', this.closeHandler);
            this.client.ws.on('error', this.errorHandler);
            this.client.ws.on('message', this.messageHandler);

            this.client.ws.send(this.request);

            this.resultStream.on('end', function () {
              that.resultStream.readable = false;
              that.stop.apply(that);
            });

            this.resultStream.stop = this.stop.bind(this);
            //this.resultStream.getId = this.getId.bind(this)
            this.resultStream.reconnect = this.reconnect.bind(this);

            return this.resultStream;
          };

          wsRequest.prototype.wsClosed = function wsClosed() {
            this.resultStream.push(null);
          };

          wsRequest.prototype.processError = function processError(err) {
            this.resultStream.emit('error', err);
          };

          wsRequest.prototype.processMessage = function processMessage(origDataObj) {
            var dataObj = JSON.parse(JSON.stringify(origDataObj));

            if (!dataObj.id && dataObj.message) {
              this.resultStream.emit('error', dataObj);
              return;
            }

            if (dataObj.id === this.id) {
              if (dataObj.message) {
                delete dataObj.id;
                this.resultStream.emit('error', dataObj);
                return;
              }

              if (dataObj.query_id) {
                this.query_id = dataObj.query_id;
              }

              if (dataObj.channel) {
                this.channel = dataObj.channel;
              }

              if (dataObj.body && dataObj.body !== "") {
                this.resultStream.push(dataObj.body);
              }

              return;
            }

            if (!dataObj.id && dataObj.channel && dataObj.channel === this.channel) {
              this.resultStream.push(dataObj.event);
              return;
            }
          };

          wsRequest.prototype.getId = function getId(callback) {
            if (this.query_id) {
              callback(this.query_id);
            } else {
              this.client.ws.on('message', function gid(data) {
                var dataObj = JSON.parse(data);
                if (dataObj.id === that.id) {
                  if (dataObj.query_id) {
                    this.client.ws.removeListener('message', gid);
                    callback(query_id);
                  }
                }
              });
            }
          };

          wsRequest.prototype.stop = function stop() {
            this.client.ws.removeListener('close', this.closeHandler);
            this.client.ws.removeListener('error', this.errorHandler);
            this.client.ws.removeListener('message', this.messageHandler);
            if (this.resultStream.readable) {
              this.resultStream.push(null);
            }
            var unsubRequest = JSON.parse(JSON.stringify(this.request));
            unsubRequest.unsubscribe = true;
            if (this.unsubscribed !== true) {
              this.client.ws.send(unsubRequest);
            }
            this.unsubscribed = true;
          };

          wsRequest.prototype.reconnect = function reconnect() {
            this.stop();
            return new wsRequest(this.client, this.args);
          };

          module.exports = wsRequest;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(480).Buffer))

        /***/
      }),
      /* 538 */
      /***/
      (function (module, exports) {

        (function () {
          var validator = new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$", "i");

          function gen(count) {
            var out = "";
            for (var i = 0; i < count; i++) {
              out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            }
            return out;
          }

          function Guid(guid) {
            if (!guid) throw new TypeError("Invalid argument; `value` has no value.");

            this.value = Guid.EMPTY;

            if (guid && guid instanceof Guid) {
              this.value = guid.toString();

            } else if (guid && Object.prototype.toString.call(guid) === "[object String]" && Guid.isGuid(guid)) {
              this.value = guid;
            }

            this.equals = function (other) {
              // Comparing string `value` against provided `guid` will auto-call
              // toString on `guid` for comparison
              return Guid.isGuid(other) && this.value == other;
            };

            this.isEmpty = function () {
              return this.value === Guid.EMPTY;
            };

            this.toString = function () {
              return this.value;
            };

            this.toJSON = function () {
              return this.value;
            };
          };

          Guid.EMPTY = "00000000-0000-0000-0000-000000000000";

          Guid.isGuid = function (value) {
            return value && (value instanceof Guid || validator.test(value.toString()));
          };

          Guid.create = function () {
            return new Guid([gen(2), gen(1), gen(1), gen(1), gen(3)].join("-"));
          };

          Guid.raw = function () {
            return [gen(2), gen(1), gen(1), gen(1), gen(3)].join("-");
          };

          if (typeof module != 'undefined' && module.exports) {
            module.exports = Guid;
          } else if (typeof window != 'undefined') {
            window.Guid = Guid;
          }
        })();


        /***/
      }),
      /* 539 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var helpers = __webpack_require__(540);

        var indexService = function indexService(client, args) {
          var valid = helpers.validate(args, {
            'type': 'string',
            'body': 'object'
          });
          if (valid !== true) {
            throw valid;
            return;
          }
          var type = args.type;
          var id = args.id;
          var body = args.body;
          delete args.type;
          delete args.id;
          delete args.body;

          var path;
          if (id) {
            path = type + '/' + id;
          } else {
            path = type;
          }

          return client.performStreamingRequest({
            method: 'POST',
            path: path,
            params: args,
            body: body
          });
        };

        module.exports = indexService;


        /***/
      }),
      /* 540 */
      /***/
      (function (module, exports) {

        'use strict';

        function validate(object, fields) {
          /*
	 example : fields : {
	 'body':'string'
	 }
	 */
          var invalid = [];
          var empty_for = {
            'object': null,
            'string': ''
          };

          var keys = Object.keys(fields); // getting the types from the fields json

          for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var key = _ref;

            var type = fields[key];
            if (typeof object[key] !== type || object[key] === empty_for[type]) {
              invalid.push(key);
            }
          }

          var missing = '';
          for (var i = 0; i < invalid.length; i++) {
            missing += invalid[i] + ', ';
          }
          if (invalid.length > 0) {
            return new Error('fields missing: ' + missing);
          }

          return true;
        }

        module.exports = {
          validate: validate
        };


        /***/
      }),
      /* 541 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var helpers = __webpack_require__(540);

        var getService = function getService(client, args) {
          var valid = helpers.validate(args, {
            'type': 'string',
            'id': 'string'
          });

          if (valid !== true) {
            throw valid;
            return;
          }
          var type = args.type;
          var id = args.id;
          delete args.type;
          delete args.id;

          var path = type + '/' + id;

          return client.performStreamingRequest({
            method: 'GET',
            path: path,
            params: args
          });
        };

        module.exports = getService;


        /***/
      }),
      /* 542 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var helpers = __webpack_require__(540);

        var updateService = function updateService(client, args) {
          var valid = helpers.validate(args, {
            'type': 'string',
            'id': 'string',
            'body': 'object'
          });
          if (valid !== true) {
            throw valid;
            return;
          }
          var type = args.type;
          var id = args.id;
          var body = args.body;
          delete args.type;
          delete args.id;
          delete args.body;

          var path = type + '/' + id + '/_update';

          return client.performStreamingRequest({
            method: 'POST',
            path: path,
            params: args,
            body: body
          });
        };

        module.exports = updateService;


        /***/
      }),
      /* 543 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var helpers = __webpack_require__(540);

        var deleteService = function deleteService(client, args) {
          var valid = helpers.validate(args, {
            'type': 'string',
            'id': 'string'
          });
          if (valid !== true) {
            throw valid;
            return;
          }
          var type = args.type;
          var id = args.id;
          delete args.type;
          delete args.id;

          var path = type + '/' + id;

          return client.performStreamingRequest({
            method: 'DELETE',
            path: path,
            params: args
          });
        };

        module.exports = deleteService;


        /***/
      }),
      /* 544 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var helpers = __webpack_require__(540);

        var bulkService = function bulkService(client, args) {
          var valid = helpers.validate(args, {
            'body': 'object'
          });
          if (valid !== true) {
            throw valid;
            return;
          }
          var type = args.type;
          var body = args.body;
          delete args.type;
          delete args.body;

          var path;
          if (type) {
            path = type + '/_bulk';
          } else {
            path = '/_bulk';
          }

          return client.performStreamingRequest({
            method: 'POST',
            path: path,
            params: args,
            body: body
          });
        };

        module.exports = bulkService;


        /***/
      }),
      /* 545 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var helpers = __webpack_require__(540);

        var searchService = function searchService(client, args) {
          var valid = helpers.validate(args, {
            'body': 'object'
          });
          if (valid !== true) {
            throw valid;
            return;
          }

          var type;
          if (args.type.constructor === Array) {
            type = args.type.join();
          } else {
            type = args.type;
          }

          var body = args.body;
          delete args.type;
          delete args.body;

          var path;
          if (type) {
            path = type + '/_search';
          } else {
            path = '/_search';
          }

          return client.performStreamingRequest({
            method: 'POST',
            path: path,
            params: args,
            body: body
          });
        };

        module.exports = searchService;


        /***/
      }),
      /* 546 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var through2 = __webpack_require__(536);

        var getTypesService = function getTypesService(client) {
          var resultStream = through2.obj(function (chunk, enc, callback) {
            var appname = Object.keys(chunk)[0];
            var types = Object.keys(chunk[appname]['mappings']).filter(function (type) {
              return type !== '_default_';
            });
            this.push(types);

            callback();
          });
          resultStream.writable = false;

          return client.performStreamingRequest({
            method: 'GET',
            path: '_mapping'
          }).pipe(resultStream);
        };

        module.exports = getTypesService;


        /***/
      }),
      /* 547 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var stringify = __webpack_require__(548);

        var helpers = __webpack_require__(540);

        var addWebhookService = function addWebhook(client, args, webhook) {
          var valid = helpers.validate(args, {
            'body': 'object'
          });
          if (valid !== true) {
            throw valid;
          }

          if (args.type === undefined || !(typeof args.type === 'string' || args.type.constructor === Array) || args.type === '' || args.type.length === 0) {
            throw new Error("fields missing: type");
          }

          valid = helpers.validate(args.body, {
            'query': 'object'
          });
          if (valid !== true) {
            throw valid;
          }

          if (args.type.constructor === Array) {
            this.type = args.type;
            this.type_string = args.type.join();
          } else {
            this.type = [args.type];
            this.type_string = args.type;
          }

          this.webhooks = [];
          this.client = client;
          this.query = args.body.query;

          if (typeof webhook === 'string') {
            var webhook_obj = {};
            webhook_obj.url = webhook;
            webhook_obj.method = 'GET';
            this.webhooks.push(webhook_obj);
          } else if (webhook.constructor === Array) {
            this.webhooks = webhook;
          } else if (webhook === Object(webhook)) {
            this.webhooks.push(webhook);
          } else {
            throw new Error('fields missing: second argument(webhook) is necessary');
          }

          this.populateBody();

          var encode64 = btoa(stringify(this.query));
          var path = '.percolator/webhooks-0-' + this.type_string + '-0-' + encode64;

          this.path = path;

          return this.performRequest('POST');
        };

        addWebhookService.prototype.populateBody = function populateBody() {
          this.body = {};
          this.body.webhooks = this.webhooks;
          this.body.query = this.query;
          this.body.type = this.type;
        };

        addWebhookService.prototype.performRequest = function performRequest(method) {
          var res = this.client.performStreamingRequest({
            method: method,
            path: this.path,
            body: this.body
          });

          res.change = this.change.bind(this);
          res.stop = this.stop.bind(this);

          return res;
        };

        addWebhookService.prototype.change = function change(args) {
          this.webhooks = [];

          if (typeof args === 'string') {
            var webhook = {};
            webhook.url = args;
            webhook.method = 'POST';
            this.webhooks.push(webhook);
          } else if (args.constructor === Array) {
            this.webhooks = args;
          } else if (args === Object(args)) {
            this.webhooks.push(args);
          } else {
            throw new Error('fields missing: one of webhook or url fields is required');
            return;
          }

          this.populateBody();

          return this.performRequest('POST');
        };

        addWebhookService.prototype.stop = function stop() {
          delete this.body;

          return this.performRequest('DELETE');
        };

        module.exports = addWebhookService;


        /***/
      }),
      /* 548 */
      /***/
      (function (module, exports, __webpack_require__) {

        var json = typeof JSON !== 'undefined' ? JSON : __webpack_require__(549);

        module.exports = function (obj, opts) {
          if (!opts) opts = {};
          if (typeof opts === 'function') opts = { cmp: opts };
          var space = opts.space || '';
          if (typeof space === 'number') space = Array(space + 1).join(' ');
          var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
          var replacer = opts.replacer || function (key, value) { return value; };

          var cmp = opts.cmp && (function (f) {
            return function (node) {
              return function (a, b) {
                var aobj = { key: a, value: node[a] };
                var bobj = { key: b, value: node[b] };
                return f(aobj, bobj);
              };
            };
          })(opts.cmp);

          var seen = [];
          return (function stringify(parent, key, node, level) {
            var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
            var colonSeparator = space ? ': ' : ':';

            if (node && node.toJSON && typeof node.toJSON === 'function') {
              node = node.toJSON();
            }

            node = replacer.call(parent, key, node);

            if (node === undefined) {
              return;
            }
            if (typeof node !== 'object' || node === null) {
              return json.stringify(node);
            }
            if (isArray(node)) {
              var out = [];
              for (var i = 0; i < node.length; i++) {
                var item = stringify(node, i, node[i], level + 1) || json.stringify(null);
                out.push(indent + space + item);
              }
              return '[' + out.join(',') + indent + ']';
            } else {
              if (seen.indexOf(node) !== -1) {
                if (cycles) return json.stringify('__cycle__');
                throw new TypeError('Converting circular structure to JSON');
              } else seen.push(node);

              var keys = objectKeys(node).sort(cmp && cmp(node));
              var out = [];
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var value = stringify(node, key, node[key], level + 1);

                if (!value) continue;

                var keyValue = json.stringify(key) +
                  colonSeparator +
                  value;;
                out.push(indent + space + keyValue);
              }
              seen.splice(seen.indexOf(node), 1);
              return '{' + out.join(',') + indent + '}';
            }
          })({ '': obj }, '', obj, 0);
        };

        var isArray = Array.isArray || function (x) {
          return {}.toString.call(x) === '[object Array]';
        };

        var objectKeys = Object.keys || function (obj) {
          var has = Object.prototype.hasOwnProperty || function () { return true };
          var keys = [];
          for (var key in obj) {
            if (has.call(obj, key)) keys.push(key);
          }
          return keys;
        };


        /***/
      }),
      /* 549 */
      /***/
      (function (module, exports, __webpack_require__) {

        exports.parse = __webpack_require__(550);
        exports.stringify = __webpack_require__(551);


        /***/
      }),
      /* 550 */
      /***/
      (function (module, exports) {

        var at, // The index of the current character
          ch, // The current character
          escapee = {
            '"': '"',
            '\\': '\\',
            '/': '/',
            b: '\b',
            f: '\f',
            n: '\n',
            r: '\r',
            t: '\t'
          },
          text,

          error = function (m) {
            // Call error when something is wrong.
            throw {
              name: 'SyntaxError',
              message: m,
              at: at,
              text: text
            };
          },

          next = function (c) {
            // If a c parameter is provided, verify that it matches the current character.
            if (c && c !== ch) {
              error("Expected '" + c + "' instead of '" + ch + "'");
            }

            // Get the next character. When there are no more characters,
            // return the empty string.

            ch = text.charAt(at);
            at += 1;
            return ch;
          },

          number = function () {
            // Parse a number value.
            var number,
              string = '';

            if (ch === '-') {
              string = '-';
              next('-');
            }
            while (ch >= '0' && ch <= '9') {
              string += ch;
              next();
            }
            if (ch === '.') {
              string += '.';
              while (next() && ch >= '0' && ch <= '9') {
                string += ch;
              }
            }
            if (ch === 'e' || ch === 'E') {
              string += ch;
              next();
              if (ch === '-' || ch === '+') {
                string += ch;
                next();
              }
              while (ch >= '0' && ch <= '9') {
                string += ch;
                next();
              }
            }
            number = +string;
            if (!isFinite(number)) {
              error("Bad number");
            } else {
              return number;
            }
          },

          string = function () {
            // Parse a string value.
            var hex,
              i,
              string = '',
              uffff;

            // When parsing for string values, we must look for " and \ characters.
            if (ch === '"') {
              while (next()) {
                if (ch === '"') {
                  next();
                  return string;
                } else if (ch === '\\') {
                  next();
                  if (ch === 'u') {
                    uffff = 0;
                    for (i = 0; i < 4; i += 1) {
                      hex = parseInt(next(), 16);
                      if (!isFinite(hex)) {
                        break;
                      }
                      uffff = uffff * 16 + hex;
                    }
                    string += String.fromCharCode(uffff);
                  } else if (typeof escapee[ch] === 'string') {
                    string += escapee[ch];
                  } else {
                    break;
                  }
                } else {
                  string += ch;
                }
              }
            }
            error("Bad string");
          },

          white = function () {

            // Skip whitespace.

            while (ch && ch <= ' ') {
              next();
            }
          },

          word = function () {

            // true, false, or null.

            switch (ch) {
            case 't':
              next('t');
              next('r');
              next('u');
              next('e');
              return true;
            case 'f':
              next('f');
              next('a');
              next('l');
              next('s');
              next('e');
              return false;
            case 'n':
              next('n');
              next('u');
              next('l');
              next('l');
              return null;
            }
            error("Unexpected '" + ch + "'");
          },

          value, // Place holder for the value function.

          array = function () {

            // Parse an array value.

            var array = [];

            if (ch === '[') {
              next('[');
              white();
              if (ch === ']') {
                next(']');
                return array; // empty array
              }
              while (ch) {
                array.push(value());
                white();
                if (ch === ']') {
                  next(']');
                  return array;
                }
                next(',');
                white();
              }
            }
            error("Bad array");
          },

          object = function () {

            // Parse an object value.

            var key,
              object = {};

            if (ch === '{') {
              next('{');
              white();
              if (ch === '}') {
                next('}');
                return object; // empty object
              }
              while (ch) {
                key = string();
                white();
                next(':');
                if (Object.hasOwnProperty.call(object, key)) {
                  error('Duplicate key "' + key + '"');
                }
                object[key] = value();
                white();
                if (ch === '}') {
                  next('}');
                  return object;
                }
                next(',');
                white();
              }
            }
            error("Bad object");
          };

        value = function () {

          // Parse a JSON value. It could be an object, an array, a string, a number,
          // or a word.

          white();
          switch (ch) {
          case '{':
            return object();
          case '[':
            return array();
          case '"':
            return string();
          case '-':
            return number();
          default:
            return ch >= '0' && ch <= '9' ? number() : word();
          }
        };

        // Return the json_parse function. It will have access to all of the above
        // functions and variables.

        module.exports = function (source, reviver) {
          var result;

          text = source;
          at = 0;
          ch = ' ';
          result = value();
          white();
          if (ch) {
            error("Syntax error");
          }

          // If there is a reviver function, we recursively walk the new structure,
          // passing each name/value pair to the reviver function for possible
          // transformation, starting with a temporary root object that holds the result
          // in an empty key. If there is not a reviver function, we simply return the
          // result.

          return typeof reviver === 'function' ? (function walk(holder, key) {
            var k, v, value = holder[key];
            if (value && typeof value === 'object') {
              for (k in value) {
                if (Object.prototype.hasOwnProperty.call(value, k)) {
                  v = walk(value, k);
                  if (v !== undefined) {
                    value[k] = v;
                  } else {
                    delete value[k];
                  }
                }
              }
            }
            return reviver.call(holder, key, value);
          }({ '': result }, '')) : result;
        };


        /***/
      }),
      /* 551 */
      /***/
      (function (module, exports) {

        var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          gap,
          indent,
          meta = { // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"': '\\"',
            '\\': '\\\\'
          },
          rep;

        function quote(string) {
          // If the string contains no control characters, no quote characters, and no
          // backslash characters, then we can safely slap some quotes around it.
          // Otherwise we must also replace the offending characters with safe escape
          // sequences.

          escapable.lastIndex = 0;
          return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c :
              '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
          }) + '"' : '"' + string + '"';
        }

        function str(key, holder) {
          // Produce a string from holder[key].
          var i, // The loop counter.
            k, // The member key.
            v, // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

          // If the value has a toJSON method, call it to obtain a replacement value.
          if (value && typeof value === 'object' &&
            typeof value.toJSON === 'function') {
            value = value.toJSON(key);
          }

          // If we were called with a replacer function, then call the replacer to
          // obtain a replacement value.
          if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
          }

          // What happens next depends on the value's type.
          switch (typeof value) {
          case 'string':
            return quote(value);

          case 'number':
            // JSON numbers must be finite. Encode non-finite numbers as null.
            return isFinite(value) ? String(value) : 'null';

          case 'boolean':
          case 'null':
            // If the value is a boolean or null, convert it to a string. Note:
            // typeof null does not produce 'null'. The case is included here in
            // the remote chance that this gets fixed someday.
            return String(value);

          case 'object':
            if (!value) return 'null';
            gap += indent;
            partial = [];

            // Array.isArray
            if (Object.prototype.toString.apply(value) === '[object Array]') {
              length = value.length;
              for (i = 0; i < length; i += 1) {
                partial[i] = str(i, value) || 'null';
              }

              // Join all of the elements together, separated with commas, and
              // wrap them in brackets.
              v = partial.length === 0 ? '[]' : gap ?
                '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                '[' + partial.join(',') + ']';
              gap = mind;
              return v;
            }

            // If the replacer is an array, use it to select the members to be
            // stringified.
            if (rep && typeof rep === 'object') {
              length = rep.length;
              for (i = 0; i < length; i += 1) {
                k = rep[i];
                if (typeof k === 'string') {
                  v = str(k, value);
                  if (v) {
                    partial.push(quote(k) + (gap ? ': ' : ':') + v);
                  }
                }
              }
            } else {
              // Otherwise, iterate through all of the keys in the object.
              for (k in value) {
                if (Object.prototype.hasOwnProperty.call(value, k)) {
                  v = str(k, value);
                  if (v) {
                    partial.push(quote(k) + (gap ? ': ' : ':') + v);
                  }
                }
              }
            }

            // Join all of the member texts together, separated with commas,
            // and wrap them in braces.

            v = partial.length === 0 ? '{}' : gap ?
              '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
              '{' + partial.join(',') + '}';
            gap = mind;
            return v;
          }
        }

        module.exports = function (value, replacer, space) {
          var i;
          gap = '';
          indent = '';

          // If the space parameter is a number, make an indent string containing that
          // many spaces.
          if (typeof space === 'number') {
            for (i = 0; i < space; i += 1) {
              indent += ' ';
            }
          }
          // If the space parameter is a string, it will be used as the indent string.
          else if (typeof space === 'string') {
            indent = space;
          }

          // If there is a replacer, it must be a function or an array.
          // Otherwise, throw an error.
          rep = replacer;
          if (replacer && typeof replacer !== 'function' &&
            (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
            throw new Error('JSON.stringify');
          }

          // Make a fake root object containing our value under the key of ''.
          // Return the result of stringifying the value.
          return str('', { '': value });
        };


        /***/
      }),
      /* 552 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var helpers = __webpack_require__(540);

        var streamDocumentService = function streamDocumentService(client, args) {
          var valid = helpers.validate(args, {
            'type': 'string',
            'id': 'string'
          });
          if (valid !== true) {
            throw valid;
            return;
          }
          var type = args.type;
          var id = args.id;
          delete args.type;
          delete args.id;
          delete args.stream;

          if (args.stream === true || args.stream === 'true') {
            args.stream = 'true';
          } else {
            delete args.stream;
            args.streamonly = 'true';
          }

          return client.performWsRequest({
            method: 'GET',
            path: type + '/' + id,
            params: args
          });
        };

        module.exports = streamDocumentService;


        /***/
      }),
      /* 553 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var helpers = __webpack_require__(540);

        var streamSearchService = function streamSearchService(client, args) {
          var valid = helpers.validate(args, {
            'body': 'object'
          });
          if (valid !== true) {
            throw valid;
            return;
          }

          if (args.type === undefined || !(typeof args.type === 'string' || args.type.constructor === Array) || args.type === '' || args.type.length === 0) {
            throw new Error("fields missing: type");
            return;
          }

          var type;
          if (args.type.constructor === Array) {
            type = args.type.join();
          } else {
            type = args.type;
          }

          var type = args.type;
          var body = args.body;
          delete args.type;
          delete args.body;
          delete args.stream;

          args.streamonly = 'true';

          return client.performWsRequest({
            method: 'POST',
            path: type + '/_search',
            params: args,
            body: body
          });
        };

        module.exports = streamSearchService;


        /***/
      }),
      /* 554 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SearchAsMove = undefined;

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _ItemCheckboxList = __webpack_require__(555);

        var _reactivebase = __webpack_require__(57);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var SearchAsMove = exports.SearchAsMove = function (_Component) {
          _inherits(SearchAsMove, _Component);

          function SearchAsMove(props, context) {
            _classCallCheck(this, SearchAsMove);

            var _this = _possibleConstructorReturn(this, (SearchAsMove.__proto__ || Object.getPrototypeOf(SearchAsMove)).call(this, props));

            _this.state = {
              items: []
            };
            _this.handleSelect = _this.handleSelect.bind(_this);
            _this.handleRemove = _this.handleRemove.bind(_this);
            return _this;
          }

          _createClass(SearchAsMove, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setState({
                items: [{
                  key: "Search as I move the map",
                  value: true,
                  status: this.props.searchAsMoveDefault
                }]
              });
              if (this.props.searchAsMoveDefault && this.props.searchAsMoveDefault === true) {
                this.handleSelect(this.props.searchAsMoveDefault);
              }
            }

            // Handler function when a value is selected

          }, {
            key: "handleSelect",
            value: function handleSelect(value) {
              var flag = value === true ? true : !!(value && value.length);
              this.props.searchAsMoveChange(flag);
            }

            // Handler function when a value is deselected or removed

          }, {
            key: "handleRemove",
            value: function handleRemove(value) {}
          }, {
            key: "render",
            value: function render() {
              var listComponent = void 0;
              listComponent = _react2.default.createElement(_ItemCheckboxList.ItemCheckboxList, {
                showTags: false,
                items: this.state.items,
                onSelect: this.handleSelect,
                onRemove: this.handleRemove,
                showCount: this.props.showCount
              });

              return _react2.default.createElement(
                "div", { className: "rbc-checkbox row clearfix" },
                listComponent
              );
            }
          }]);

          return SearchAsMove;
        }(_react.Component);

        SearchAsMove.propTypes = {};

        // Default props value
        SearchAsMove.defaultProps = {
          fieldName: "SearchAsMove",
          searchAsMoveDefault: false
        };

        /***/
      }),
      /* 555 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ItemCheckboxList = undefined;

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var ItemCheckboxList = exports.ItemCheckboxList = function (_Component) {
          _inherits(ItemCheckboxList, _Component);

          function ItemCheckboxList(props) {
            _classCallCheck(this, ItemCheckboxList);

            var _this = _possibleConstructorReturn(this, (ItemCheckboxList.__proto__ || Object.getPrototypeOf(ItemCheckboxList)).call(this, props));

            _this.state = {
              selectedItems: []
            };
            _this.handleListClick = _this.handleListClick.bind(_this);
            _this.handleTagClick = _this.handleTagClick.bind(_this);
            _this.handleListClickAll = _this.handleListClickAll.bind(_this);
            return _this;
          }

          _createClass(ItemCheckboxList, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              var _this2 = this;

              if (this.props.defaultSelected) {
                this.setState({
                  selectedItems: this.props.defaultSelected
                }, function () {
                  _this2.updateAction.bind(_this2);
                  _this2.props.onSelect(_this2.state.selectedItems);
                });
              }
            }

            // remove selected types if not in the list

          }, {
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
              var _this3 = this;

              var updated = null;
              if (this.state.selectedItems) {
                updated = JSON.parse(JSON.stringify(this.state.selectedItems));
              }
              if (updated && updated.length && this.props.items && this.props.items.length) {
                updated = updated.filter(function (item) {
                  var updatedFound = _this3.props.items.filter(function (propItem) {
                    return propItem.key === item;
                  });
                  return !!updatedFound.length;
                });
                if (updated.length !== this.state.selectedItems.length) {
                  var isExecutable = !updated.length;
                  this.props.onRemove(this.state.selectedItems, isExecutable);
                  this.setState({
                    selectedItems: updated
                  });
                  if (updated.length) {
                    this.props.onSelect(updated);
                  }
                }
              }
            }
          }, {
            key: "updateAction",
            value: function updateAction() {
              if (!this.state.selectedItems.length) {
                this.props.onSelect(null);
              }
            }

            // handler function for select all

          }, {
            key: "handleListClickAll",
            value: function handleListClickAll(value, selectedStatus) {
              var _this4 = this;

              this.props.selectAll(selectedStatus);
              var selectedItems = this.props.items.map(function (item) {
                return item.key;
              });
              selectedItems = selectedStatus ? selectedItems : [];
              this.setState({
                selectedItems: selectedItems
              }, function () {
                _this4.updateAction.bind(_this4);
                _this4.props.onSelect(_this4.state.selectedItems);
              });
            }

            // Handler function when a checkbox is clicked

          }, {
            key: "handleListClick",
            value: function handleListClick(value, selectedStatus) {
              // If the checkbox selectedStatus is true, then update selectedItems array
              if (selectedStatus) {
                this.props.onRemove(this.state.selectedItems, false);
                var updated = this.state.selectedItems;
                updated.push(value);
                this.setState({
                  selectedItems: updated
                }, this.updateAction.bind(this));
                // Pass the props to parent components to add to the Query
                if (this.state.selectedItems.length) {
                  this.props.onSelect(this.state.selectedItems);
                }
              }
              // If the checkbox selectedStatus is false
              // Call handleTagClick to remove it from the selected Items
              else {
                this.handleTagClick(value);
              }
            }

            // Handler function when a cancel button on tag is clicked to remove it

          }, {
            key: "handleTagClick",
            value: function handleTagClick(value) {
              // Pass the older value props to parent components to remove older list in terms query
              var isExecutable = this.state.selectedItems.length === 1;
              this.props.onRemove(this.state.selectedItems, isExecutable);
              var keyRef = value.toString().replace(/ /g, "_");
              var ref = "ref" + keyRef;
              var checkboxElement = this.refs[ref];
              checkboxElement.state.status = false;
              var updated = this.state.selectedItems;
              var index = updated.indexOf(value);
              updated.splice(index, 1);
              this.setState({
                selectedItems: updated
              }, this.updateAction.bind(this));
              // Pass the removed value props to parent components to add updated list in terms query
              if (this.state.selectedItems.length) {
                this.props.onSelect(this.state.selectedItems);
              }
            }
          }, {
            key: "render",
            value: function render() {
              var _this5 = this;

              var items = this.props.items;
              var selectedItems = this.state.selectedItems;
              var ListItemsArray = [];
              var TagItemsArray = [];
              // Build the array for the checkboxList items
              items.forEach(function (item, index) {
                try {
                  item.keyRef = item.key.replace(/ /g, "_");
                } catch (e) {
                  item.keyRef = index;
                  console.log(item, e);
                }
                ListItemsArray.push(_react2.default.createElement(ListItem, {
                  key: item.keyRef,
                  value: item.key,
                  doc_count: item.doc_count,
                  countField: _this5.props.showCount,
                  handleClick: _this5.handleListClick,
                  status: item.status || false,
                  ref: "ref" + item.keyRef
                }));
              });
              // include select all if set from parent
              if (this.props.includeSelectAll && items && items.length) {
                ListItemsArray.unshift(_react2.default.createElement(ListItem, {
                  key: "selectall",
                  value: "Select All",
                  countField: false,
                  handleClick: this.handleListClickAll,
                  status: this.props.defaultSelectall || false,
                  ref: "refselectall"
                }));
              }
              // Build the array of Tags for selected items
              if (this.props.showTags && selectedItems) {
                selectedItems.forEach(function (item) {
                  TagItemsArray.push(_react2.default.createElement(Tag, {
                    key: item,
                    value: item,
                    onClick: _this5.handleTagClick
                  }));
                });
              }
              return _react2.default.createElement(
                "div", { className: "rbc-list-container col s12 col-xs-12" },
                TagItemsArray.length ? _react2.default.createElement(
                  "div", { className: "row" },
                  TagItemsArray
                ) : null,
                _react2.default.createElement(
                  "div", { className: "row" },
                  ListItemsArray
                )
              );
            }
          }]);

          return ItemCheckboxList;
        }(_react.Component);

        ItemCheckboxList.defaultProps = {
          showTags: true
        };

        var ListItem = function (_Component2) {
          _inherits(ListItem, _Component2);

          function ListItem(props) {
            _classCallCheck(this, ListItem);

            var _this6 = _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).call(this, props));

            _this6.state = {
              initialStatus: _this6.props.status,
              status: _this6.props.status || false
            };
            return _this6;
          }

          _createClass(ListItem, [{
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
              if (this.props.status !== this.state.initialStatus) {
                this.setState({
                  status: this.props.status,
                  initialStatus: this.props.status
                });
              }
            }
          }, {
            key: "handleClick",
            value: function handleClick() {
              this.setState({
                status: !this.state.status
              });
              this.props.handleClick(this.props.value, !this.state.status);
            }
          }, {
            key: "handleCheckboxChange",
            value: function handleCheckboxChange(event) {
              this.setState({
                status: event.target.checked
              });
            }
          }, {
            key: "render",
            value: function render() {
              var count = void 0;
              // Check if the user has set to display countField
              if (this.props.countField) {
                count = _react2.default.createElement(
                  "span",
                  null,
                  " (",
                  this.props.doc_count,
                  ") "
                );
              }
              return _react2.default.createElement(
                "div", { onClick: this.handleClick.bind(this), className: "rbc-list-item rbc-checkbox-item col s12 col-xs-12" },
                _react2.default.createElement("input", {
                  type: "checkbox",
                  checked: this.state.status,
                  onChange: this.handleCheckboxChange.bind(this)
                }),
                _react2.default.createElement(
                  "label",
                  null,
                  " ",
                  this.props.value,
                  " ",
                  count
                )
              );
            }
          }]);

          return ListItem;
        }(_react.Component);

        var Tag = function (_Component3) {
          _inherits(Tag, _Component3);

          function Tag(props) {
            _classCallCheck(this, Tag);

            return _possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).call(this, props));
          }

          _createClass(Tag, [{
            key: "render",
            value: function render() {
              return _react2.default.createElement(
                "span", { onClick: this.props.onClick.bind(null, this.props.value), className: "tag-item col" },
                _react2.default.createElement(
                  "a", { href: "javascript:void(0)", className: "close" },
                  " x "
                ),
                _react2.default.createElement(
                  "span",
                  null,
                  this.props.value
                )
              );
            }
          }]);

          return Tag;
        }(_react.Component);

        /***/
      }),
      /* 556 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.MapStyles = exports.mapStylesCollection = undefined;

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactDom = __webpack_require__(30);

        var _reactivebase = __webpack_require__(57);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var mapStylesCollection = exports.mapStylesCollection = [{
          key: "Standard",
          value: __webpack_require__(557)
        }, {
          key: "Blue Essence",
          value: __webpack_require__(558)
        }, {
          key: "Blue Water",
          value: __webpack_require__(559)
        }, {
          key: "Flat Map",
          value: __webpack_require__(560)
        }, {
          key: "Light Monochrome",
          value: __webpack_require__(561)
        }, {
          key: "Midnight Commander",
          value: __webpack_require__(562)
        }, {
          key: "Unsaturated Browns",
          value: __webpack_require__(563)
        }];

        var MapStyles = exports.MapStyles = function (_Component) {
          _inherits(MapStyles, _Component);

          function MapStyles(props, context) {
            _classCallCheck(this, MapStyles);

            var _this = _possibleConstructorReturn(this, (MapStyles.__proto__ || Object.getPrototypeOf(MapStyles)).call(this, props));

            _this.state = {
              items: []
            };
            _this.handleSelect = _this.handleSelect.bind(_this);
            return _this;
          }

          _createClass(MapStyles, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              var _this2 = this;

              var selectedValue = 0;
              if (this.props.defaultSelected) {
                mapStylesCollection.forEach(function (style, index) {
                  if (style.key === _this2.props.defaultSelected) {
                    selectedValue = index;
                  }
                });
              }
              this.setState({
                items: mapStylesCollection,
                selectedValue: selectedValue
              }, this.themeChanged);
            }

            // Handler function when a value is selected

          }, {
            key: "handleSelect",
            value: function handleSelect(event) {
              var _this3 = this;

              this.setState({
                selectedValue: event.target.value
              }, function () {
                _this3.themeChanged(true);
              });
            }
          }, {
            key: "themeChanged",
            value: function themeChanged() {
              var isExecute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              var style = mapStylesCollection[this.state.selectedValue].value;
              this.props.mapStyleChange(style);
            }
          }, {
            key: "render",
            value: function render() {
              var options = this.state.items.map(function (item, index) {
                return _react2.default.createElement(
                  "option", { value: index, key: index },
                  item.key
                );
              });
              return _react2.default.createElement(
                "div", { className: "input-field col rbc-mapstyles pull-right right" },
                _react2.default.createElement(
                  "select", { className: "browser-default form-control", onChange: this.handleSelect, value: this.state.selectedValue, name: "mapStyles", id: "mapStyles" },
                  options
                )
              );
            }
          }]);

          return MapStyles;
        }(_react.Component);

        MapStyles.propTypes = {};

        // Default props value
        MapStyles.defaultProps = {
          fieldName: "MapStyles"
        };

        /***/
      }),
      /* 557 */
      /***/
      (function (module, exports) {

        "use strict";

        module.exports = [{ featureType: "water", stylers: [{ saturation: 43 }, { lightness: -11 }, { hue: "#0088ff" }] }, { featureType: "road", elementType: "geometry.fill", stylers: [{ hue: "#ff0000" }, { saturation: -100 }, { lightness: 99 }] }, { featureType: "road", elementType: "geometry.stroke", stylers: [{ color: "#808080" }, { lightness: 54 }] }, { featureType: "landscape.man_made", elementType: "geometry.fill", stylers: [{ color: "#ece2d9" }] }, { featureType: "poi.park", elementType: "geometry.fill", stylers: [{ color: "#ccdca1" }] }, { featureType: "road", elementType: "labels.text.fill", stylers: [{ color: "#767676" }] }, { featureType: "road", elementType: "labels.text.stroke", stylers: [{ color: "#ffffff" }] }, { featureType: "poi", stylers: [{ visibility: "off" }] }, { featureType: "landscape.natural", elementType: "geometry.fill", stylers: [{ visibility: "on" }, { color: "#b8cb93" }] }, { featureType: "poi.park", stylers: [{ visibility: "on" }] }, { featureType: "poi.sports_complex", stylers: [{ visibility: "on" }] }, { featureType: "poi.medical", stylers: [{ visibility: "on" }] }, { featureType: "poi.business", stylers: [{ visibility: "simplified" }] }];

        /***/
      }),
      /* 558 */
      /***/
      (function (module, exports) {

        "use strict";

        // https://snazzymaps.com/style/61/blue-essence
        module.exports = [{ featureType: "landscape.natural", elementType: "geometry.fill", stylers: [{ visibility: "on" }, { color: "#e0efef" }] }, { featureType: "poi", elementType: "geometry.fill", stylers: [{ visibility: "on" }, { hue: "#1900ff" }, { color: "#c0e8e8" }] }, { featureType: "road", elementType: "geometry", stylers: [{ lightness: 100 }, { visibility: "simplified" }] }, { featureType: "road", elementType: "labels", stylers: [{ visibility: "off" }] }, { featureType: "transit.line", elementType: "geometry", stylers: [{ visibility: "on" }, { lightness: 700 }] }, { featureType: "water", elementType: "all", stylers: [{ color: "#7dcdcd" }] }];

        /***/
      }),
      /* 559 */
      /***/
      (function (module, exports) {

        "use strict";

        // https://snazzymaps.com/style/25/blue-water
        module.exports = [{ featureType: "administrative", elementType: "labels.text.fill", stylers: [{ color: "#444444" }] }, { featureType: "landscape", elementType: "all", stylers: [{ color: "#f2f2f2" }] }, { featureType: "poi", elementType: "all", stylers: [{ visibility: "off" }] }, { featureType: "road", elementType: "all", stylers: [{ saturation: -100 }, { lightness: 45 }] }, { featureType: "road.highway", elementType: "all", stylers: [{ visibility: "simplified" }] }, { featureType: "road.arterial", elementType: "labels.icon", stylers: [{ visibility: "off" }] }, { featureType: "transit", elementType: "all", stylers: [{ visibility: "off" }] }, { featureType: "water", elementType: "all", stylers: [{ color: "#46bcec" }, { visibility: "on" }] }];

        /***/
      }),
      /* 560 */
      /***/
      (function (module, exports) {

        "use strict";

        // https://snazzymaps.com/style/53/flat-map
        module.exports = [{ featureType: "all", elementType: "labels", stylers: [{ visibility: "off" }] }, { featureType: "landscape", elementType: "all", stylers: [{ visibility: "on" }, { color: "#f3f4f4" }] }, { featureType: "landscape.man_made", elementType: "geometry", stylers: [{ weight: 0.9 }, { visibility: "off" }] }, { featureType: "poi.park", elementType: "geometry.fill", stylers: [{ visibility: "on" }, { color: "#83cead" }] }, { featureType: "road", elementType: "all", stylers: [{ visibility: "on" }, { color: "#ffffff" }] }, { featureType: "road", elementType: "labels", stylers: [{ visibility: "off" }] }, { featureType: "road.highway", elementType: "all", stylers: [{ visibility: "on" }, { color: "#fee379" }] }, { featureType: "road.arterial", elementType: "all", stylers: [{ visibility: "on" }, { color: "#fee379" }] }, { featureType: "water", elementType: "all", stylers: [{ visibility: "on" }, { color: "#7fc8ed" }] }];

        /***/
      }),
      /* 561 */
      /***/
      (function (module, exports) {

        "use strict";

        // https://snazzymaps.com/style/29/light-monochrome
        module.exports = [{ featureType: "administrative.locality", elementType: "all", stylers: [{ hue: "#2c2e33" }, { saturation: 7 }, { lightness: 19 }, { visibility: "on" }] }, { featureType: "landscape", elementType: "all", stylers: [{ hue: "#ffffff" }, { saturation: -100 }, { lightness: 100 }, { visibility: "simplified" }] }, { featureType: "poi", elementType: "all", stylers: [{ hue: "#ffffff" }, { saturation: -100 }, { lightness: 100 }, { visibility: "off" }] }, { featureType: "road", elementType: "geometry", stylers: [{ hue: "#bbc0c4" }, { saturation: -93 }, { lightness: 31 }, { visibility: "simplified" }] }, { featureType: "road", elementType: "labels", stylers: [{ hue: "#bbc0c4" }, { saturation: -93 }, { lightness: 31 }, { visibility: "on" }] }, { featureType: "road.arterial", elementType: "labels", stylers: [{ hue: "#bbc0c4" }, { saturation: -93 }, { lightness: -2 }, { visibility: "simplified" }] }, { featureType: "road.local", elementType: "geometry", stylers: [{ hue: "#e9ebed" }, { saturation: -90 }, { lightness: -8 }, { visibility: "simplified" }] }, { featureType: "transit", elementType: "all", stylers: [{ hue: "#e9ebed" }, { saturation: 10 }, { lightness: 69 }, { visibility: "on" }] }, { featureType: "water", elementType: "all", stylers: [{ hue: "#e9ebed" }, { saturation: -78 }, { lightness: 67 }, { visibility: "simplified" }] }];

        /***/
      }),
      /* 562 */
      /***/
      (function (module, exports) {

        "use strict";

        // https://snazzymaps.com/style/2/midnight-commander
        module.exports = [{ featureType: "all", elementType: "labels.text.fill", stylers: [{ color: "#ffffff" }] }, { featureType: "all", elementType: "labels.text.stroke", stylers: [{ color: "#000000" }, { lightness: 13 }] }, { featureType: "administrative", elementType: "geometry.fill", stylers: [{ color: "#000000" }] }, { featureType: "administrative", elementType: "geometry.stroke", stylers: [{ color: "#144b53" }, { lightness: 14 }, { weight: 1.4 }] }, { featureType: "landscape", elementType: "all", stylers: [{ color: "#08304b" }] }, { featureType: "poi", elementType: "geometry", stylers: [{ color: "#0c4152" }, { lightness: 5 }] }, { featureType: "road.highway", elementType: "geometry.fill", stylers: [{ color: "#000000" }] }, { featureType: "road.highway", elementType: "geometry.stroke", stylers: [{ color: "#0b434f" }, { lightness: 25 }] }, { featureType: "road.arterial", elementType: "geometry.fill", stylers: [{ color: "#000000" }] }, { featureType: "road.arterial", elementType: "geometry.stroke", stylers: [{ color: "#0b3d51" }, { lightness: 16 }] }, { featureType: "road.local", elementType: "geometry", stylers: [{ color: "#000000" }] }, { featureType: "transit", elementType: "all", stylers: [{ color: "#146474" }] }, { featureType: "water", elementType: "all", stylers: [{ color: "#021019" }] }];

        /***/
      }),
      /* 563 */
      /***/
      (function (module, exports) {

        "use strict";

        // https://snazzymaps.com/style/70/unsaturated-browns
        module.exports = [{ elementType: "geometry", stylers: [{ hue: "#ff4400" }, { saturation: -68 }, { lightness: -4 }, { gamma: 0.72 }] }, { featureType: "road", elementType: "labels.icon" }, { featureType: "landscape.man_made", elementType: "geometry", stylers: [{ hue: "#0077ff" }, { gamma: 3.1 }] }, { featureType: "water", stylers: [{ hue: "#00ccff" }, { gamma: 0.44 }, { saturation: -33 }] }, { featureType: "poi.park", stylers: [{ hue: "#44ff00" }, { saturation: -23 }] }, { featureType: "water", elementType: "labels.text.fill", stylers: [{ hue: "#007fff" }, { gamma: 0.77 }, { saturation: 65 }, { lightness: 99 }] }, { featureType: "water", elementType: "labels.text.stroke", stylers: [{ gamma: 0.11 }, { weight: 5.6 }, { saturation: 99 }, { hue: "#0091ff" }, { lightness: -86 }] }, { featureType: "transit.line", elementType: "geometry", stylers: [{ lightness: -48 }, { hue: "#ff5e00" }, { gamma: 1.2 }, { saturation: -23 }] }, { featureType: "transit", elementType: "labels.text.stroke", stylers: [{ saturation: -64 }, { hue: "#ff9100" }, { lightness: 16 }, { gamma: 0.47 }, { weight: 2.7 }] }];

        /***/
      }),
      /* 564 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Bearing = Bearing;
        exports.streamDataModify = streamDataModify;
        exports.setMarkersData = setMarkersData;
        exports.sortByDistance = sortByDistance;
        exports.findDistance = findDistance;
        exports.identifyGeoData = identifyGeoData;
        exports.afterChannelResponse = afterChannelResponse;
        var _ = __webpack_require__(69);

        function Bearing(lat1, lng1, lat2, lng2) {
          function _toRad(deg) {
            return deg * Math.PI / 180;
          }

          function _toDeg(rad) {
            return rad * 180 / Math.PI;
          }
          var dLon = _toRad(lng2 - lng1);
          var y = Math.sin(dLon) * Math.cos(_toRad(lat2));
          var x = Math.cos(_toRad(lat1)) * Math.sin(_toRad(lat2)) - Math.sin(_toRad(lat1)) * Math.cos(_toRad(lat2)) * Math.cos(dLon);
          var brng = _toDeg(Math.atan2(y, x));
          return (brng + 360) % 360;
        }

        // append stream boolean flag and also start time of stream
        function streamDataModify(rawData, res, appbaseField) {
          if (res.data) {
            res.data.stream = true;
            res.data.streamStart = new Date();
            if (res.data._deleted) {
              var hits = rawData.hits.hits.filter(function (hit) {
                return hit._id !== res.data._id;
              });
              rawData.hits.hits = hits;
            } else {
              var prevData = rawData.hits.hits.filter(function (hit) {
                return hit._id === res.data._id;
              });
              if (prevData && prevData.length) {
                var preCord = prevData[0]._source[appbaseField];
                var newCord = res.data._source[appbaseField];
                res.data.angleDeg = Bearing(preCord.lat, preCord.lon, newCord.lat, newCord.lon);
              }
              var _hits = rawData.hits.hits.filter(function (hit) {
                return hit._id !== res.data._id;
              });
              rawData.hits.hits = _hits;
              rawData.hits.hits.push(res.data);
            }
          }
          return {
            rawData: rawData,
            res: res,
            streamFlag: true
          };
        }

        // tranform the raw data to marker data
        function setMarkersData(data, appbaseField) {
          if (data && data.hits && data.hits.hits) {
            var markersData = data.hits.hits.map(function (hit, index) {
              hit._source.mapPoint = identifyGeoData(hit._source[appbaseField]);
              return hit;
            });
            markersData = markersData.filter(function (hit, index) {
              return hit._source.mapPoint && !(hit._source.mapPoint.lat === 0 && hit._source.mapPoint.lng === 0);
            });
            markersData = sortByDistance(markersData);
            markersData = markersData.map(function (marker) {
              marker.showInfo = false;
              return marker;
            });
            return markersData;
          }
          return [];
        }

        // centrialize the map
        // calculate the distance from each marker to other marker,
        // summation of all the distance and sort by distance in ascending order
        function sortByDistance(data) {
          var modifiedData = data.map(function (record) {
            record.distance = findDistance(data, record);
            return record;
          });
          modifiedData = _.orderBy(modifiedData, "distance");
          return modifiedData;
        }

        function findDistance(data, record) {
          record.distance = 0;
          var modifiednData = data.map(function (to) {
            record.distance += getDistance(record._source.mapPoint.lat, record._source.mapPoint.lng, to._source.mapPoint.lat, to._source.mapPoint.lng);
          });

          function getDistance(lat1, lon1, lat2, lon2) {
            var R = 6371; // Radius of the earth in km
            var dLat = deg2rad(lat2 - lat1); // deg2rad below
            var dLon = deg2rad(lon2 - lon1);
            var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            var d = R * c; // Distance in km
            return d;
          }

          function deg2rad(deg) {
            return deg * (Math.PI / 180);
          }
          return record.distance;
        }

        function identifyGeoData(input) {
          var type = Object.prototype.toString.call(input);
          var convertedGeo = null;
          if (type === "[object Object]" && input.hasOwnProperty("lat") && input.hasOwnProperty("lon")) {
            convertedGeo = {
              lat: Number(input.lat),
              lng: Number(input.lon)
            };
          } else if (type === "[object Array]" && input.length === 2) {
            convertedGeo = {
              lat: Number(input[1]),
              lng: Number(input[0])
            };
          }
          return convertedGeo;
        }

        function afterChannelResponse(res, rawData, appbaseField, oldMarkersData) {
          var data = res.data;
          var markersData = void 0;
          var response = {
            streamFlag: false,
            newData: [],
            currentData: []
          };
          if (res.mode === "streaming") {
            response.channelMethod = "streaming";
            var modData = streamDataModify(rawData, res, appbaseField);
            rawData = modData.rawData;
            res = modData.res;
            response.streamFlag = true;
            markersData = setMarkersData(rawData, appbaseField);
            response.currentData = oldMarkersData;
            res.data._source.mapPoint = identifyGeoData(res.data._source[appbaseField]);
            response.newData = res.data;
          } else if (res.mode === "historic") {
            response.channelMethod = "historic";
            response.queryStartTime = res.startTime;
            rawData = data;
            markersData = setMarkersData(data, appbaseField);
            response.newData = markersData;
          }
          response.rawData = rawData;
          response.markersData = markersData;
          return response;
        }

        var validation = exports.validation = {
          defaultZoom: function defaultZoom(props, propName, componentName) {
            if (props[propName] < 0 || props[propName] > 20) {
              return new Error("zoom value should be an integer between 0 and 20.");
            }
          },
          validCenter: function validCenter(props, propName, componentName) {
            if (isNaN(props[propName])) {
              return new Error(propName + " value must be number");
            }
            if (propName === "lat" && (props[propName] < -90 || props[propName] > 90)) {
              return new Error(propName + " value should be between -90 and 90.");
            } else if (propName === "lng" && (props[propName] < -180 || props[propName] > 180)) {
              return new Error(propName + " value should be between -180 and 180.");
            }
          },
          fromValidation: function fromValidation(props, propName, componentName) {
            if (props[propName] < 0) {
              return new Error(propName + " value should be greater than or equal to 0.");
            }
          },
          streamTTL: function streamTTL(props, propName, componentName) {
            if (props[propName] < 0 || props[propName] > 1000) {
              return new Error(propName + " should be a positive integer between 0 and 1000, counted in seconds for a streaming update to be visible.");
            }
          },
          popoverTTL: function popoverTTL(props, propName, componentName) {
            if (props[propName] < 0.1 || props[propName] > 60) {
              return new Error(propName + " should be a positive integer between 1 and 60, counted in seconds for a popover to be visible.");
            }
          }
        };

        var normalizeCenter = exports.normalizeCenter = function normalizeCenter(center) {
          if (center && center.lon) {
            center.lng = center.lon;
          }
          return center;
        };

        var normalizeProps = exports.normalizeProps = function normalizeProps(props) {
          var propsCopy = _.clone(props);
          if (propsCopy.defaultCenter) {
            propsCopy.defaultCenter = normalizeCenter(propsCopy.defaultCenter);
          }
          if (propsCopy.center) {
            propsCopy.center = normalizeCenter(propsCopy.center);
          }
          return propsCopy;
        };

        var mapPropsStyles = exports.mapPropsStyles = function mapPropsStyles(styles, comp, height) {
          var stylesCopy = JSON.parse(JSON.stringify(styles));
          var finalStyles = void 0;
          if (comp === "component") {
            finalStyles = stylesCopy;
          } else if (comp === "map") {
            finalStyles = {
              height: stylesCopy.height ? stylesCopy.height : height
            };
          }
          return finalStyles;
        };

        var setupOrReact = exports.setupOrReact = function setupOrReact(react, reactAnd) {
          if (react && react.or) {
            if (typeof react.or === "string") {
              react.or = [react.or];
              react.or = react.or.concat(reactAnd);
            } else if (_.isArray(react.or)) {
              react.or = react.or.concat(reactAnd);
            } else if (_.isObject(react.or)) {
              react.or = setupReact(react.or, reactAnd);
            }
          } else {
            react.or = reactAnd;
          }
          return react;
        };

        /***/
      }),
      /* 565 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactivebase = __webpack_require__(57);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _axios = __webpack_require__(566);

        var _axios2 = _interopRequireDefault(_axios);

        var _rcSlider = __webpack_require__(102);

        var _rcSlider2 = _interopRequireDefault(_rcSlider);

        var _reactSelect = __webpack_require__(88);

        var _reactSelect2 = _interopRequireDefault(_reactSelect);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint max-lines: 0 */


        var _ = __webpack_require__(69);

        var GeoDistanceSlider = function (_Component) {
          _inherits(GeoDistanceSlider, _Component);

          function GeoDistanceSlider(props) {
            _classCallCheck(this, GeoDistanceSlider);

            var _this = _possibleConstructorReturn(this, (GeoDistanceSlider.__proto__ || Object.getPrototypeOf(GeoDistanceSlider)).call(this, props));

            _this.urlParams = _reactivebase.AppbaseSensorHelper.URLParams.get(_this.props.componentId, false, true);
            _this.defaultSelected = _this.urlParams !== null ? _this.urlParams : _this.props.defaultSelected;
            var value = _this.defaultSelected && _this.defaultSelected.distance ? _this.defaultSelected.distance < _this.props.range.start ? _this.props.range.start : _this.defaultSelected.distance : _this.props.range.start;
            value = parseInt(value, 10);
            _this.defaultSelected.distance = parseInt(_this.defaultSelected.distance, 10);
            _this.state = {
              currentValue: "",
              currentDistance: value + _this.props.unit,
              userLocation: "",
              value: value
            };
            _this.type = "geo_distance";
            _this.locString = "";
            _this.result = {
              options: []
            };
            _this.sortInfo = {
              type: "_geo_distance",
              order: "asc",
              unit: "mi"
            };
            _this.handleChange = _this.handleChange.bind(_this);
            _this.loadOptions = _this.loadOptions.bind(_this);
            _this.customQuery = _this.customQuery.bind(_this);
            _this.getUserLocation = _this.getUserLocation.bind(_this);
            _this.setDefaultLocation = _this.setDefaultLocation.bind(_this);
            _this.handleValuesChange = _this.handleValuesChange.bind(_this);
            _this.handleResults = _this.handleResults.bind(_this);
            _this.unitFormatter = _this.unitFormatter.bind(_this);
            return _this;
          }

          _createClass(GeoDistanceSlider, [{
            key: "componentWillMount",
            value: function componentWillMount() {
              this.googleMaps = window.google.maps;
            }

            // Set query information

          }, {
            key: "componentDidMount",
            value: function componentDidMount() {
              this.getUserLocation();
              this.setQueryInfo();
              this.checkDefault();
              this.listenFilter();
            }
          }, {
            key: "componentWillUpdate",
            value: function componentWillUpdate() {
              if (!_.isEqual(this.defaultSelected, this.defaultSelected)) {
                this.defaultSelected = this.defaultSelected;
                this.checkDefault();
              }
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.channelId) {
                _reactivebase.AppbaseChannelManager.stopStream(this.channelId);
              }
              if (this.channelListener) {
                this.channelListener.remove();
              }
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this2 = this;

              this.filterListener = _reactivebase.AppbaseSensorHelper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this2.props.componentId) {
                  _this2.defaultValue = null;
                  _this2.changeValue(_this2.defaultValue);
                }
              });
            }
          }, {
            key: "checkDefault",
            value: function checkDefault() {
              this.urlParams = _reactivebase.AppbaseSensorHelper.URLParams.get(this.props.componentId, false, true);
              var defaultValue = this.urlParams !== null ? this.urlParams : this.props.defaultSelected;
              this.changeValue(defaultValue);
            }
          }, {
            key: "changeValue",
            value: function changeValue(defaultValue) {
              if (defaultValue && defaultValue.location) {
                var currentValue = defaultValue.location;
                this.result.options.push({
                  value: currentValue,
                  label: currentValue
                });
                this.setState({
                  currentValue: currentValue
                }, this.getCoordinates(currentValue, this.handleResults));
              } else if (defaultValue && defaultValue.distance) {
                this.getUserLocation(this.setDefaultLocation);
                this.handleResults(defaultValue.distance);
              } else if (defaultValue === null) {
                this.setState({
                  currentDistance: null,
                  currentValue: ""
                }, this.executeQuery);
              } else {
                this.getUserLocation(this.setDefaultLocation);
              }
            }
          }, {
            key: "getUserLocation",
            value: function getUserLocation(cb) {
              var _this3 = this;

              navigator.geolocation.getCurrentPosition(function (location) {
                _this3.locString = location.coords.latitude + ", " + location.coords.longitude;

                _axios2.default.get("https://maps.googleapis.com/maps/api/geocode/json?latlng=" + _this3.locString).then(function (res) {
                  var userLocation = res.data.results[0].formatted_address;
                  _this3.setState({
                    userLocation: userLocation
                  });
                }).then(function () {
                  if (cb) {
                    cb();
                  }
                });
              });
            }
          }, {
            key: "setDefaultLocation",
            value: function setDefaultLocation() {
              var _this4 = this;

              this.result.options.push({
                value: this.state.userLocation,
                label: "Use my current location"
              });
              if (this.props.autoLocation) {
                this.setState({
                  currentValue: this.state.userLocation
                }, function () {
                  _this4.executeQuery();
                });
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  appbaseField: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: "GeoDistanceSlider"
                }
              };
              _reactivebase.AppbaseSensorHelper.selectedSensor.setSensorInfo(obj);
            }

            // build query for this sensor only

          }, {
            key: "customQuery",
            value: function customQuery(value) {
              var query = null;
              if (value && value.currentValue !== "" && value.location !== "") {
                var _type;

                query = _defineProperty({}, this.type, (_type = {}, _defineProperty(_type, this.props.appbaseField, value.location), _defineProperty(_type, "distance", value.currentDistance), _type));
              }
              return query;
            }

            // get coordinates

          }, {
            key: "getCoordinates",
            value: function getCoordinates(value, cb) {
              var _this5 = this;

              if (value && value !== "") {
                _axios2.default.get("https://maps.googleapis.com/maps/api/geocode/json?address=" + value).then(function (res) {
                  var location = res.data.results[0].geometry.location;
                  _this5.locString = location.lat + ", " + location.lng;
                  if (cb) {
                    cb(_this5.defaultSelected.distance);
                  } else {
                    _this5.executeQuery();
                  }
                });
              } else {
                _reactivebase.AppbaseSensorHelper.selectedSensor.set(null, true);
              }
            }

            // execute query after changing location or distance

          }, {
            key: "executeQuery",
            value: function executeQuery() {
              if (this.state.currentValue !== "" && this.state.currentDistance && this.locString) {
                var _sortInfo$type;

                var obj = {
                  key: this.props.componentId,
                  value: {
                    currentValue: this.state.currentValue,
                    currentDistance: this.state.currentDistance,
                    location: this.locString
                  }
                };
                var sortObj = {
                  key: this.props.componentId,
                  value: _defineProperty({}, this.sortInfo.type, (_sortInfo$type = {}, _defineProperty(_sortInfo$type, this.props.appbaseField, this.locString), _defineProperty(_sortInfo$type, "order", this.sortInfo.order), _defineProperty(_sortInfo$type, "unit", this.sortInfo.unit), _sortInfo$type))
                };
                if (this.props.onValueChange) {
                  this.props.onValueChange(obj.value);
                }
                _reactivebase.AppbaseSensorHelper.selectedSensor.setSortInfo(sortObj);
                _reactivebase.AppbaseSensorHelper.URLParams.update(this.props.componentId, this.setURLValue(), this.props.URLParams);
                _reactivebase.AppbaseSensorHelper.selectedSensor.set(obj, true);
              } else if (this.state.currentDistance === null && this.state.currentValue === "") {
                var _obj = {
                  key: this.props.componentId,
                  value: null
                };
                _reactivebase.AppbaseSensorHelper.URLParams.update(this.props.componentId, null, this.props.URLParams);
                _reactivebase.AppbaseSensorHelper.selectedSensor.set(_obj, true);
              }
            }
          }, {
            key: "setURLValue",
            value: function setURLValue() {
              var distance = this.state.currentDistance.split(this.props.unit);
              distance = distance[0];
              return JSON.stringify({
                location: this.state.currentValue,
                distance: distance
              });
            }

            // handle the input change and pass the value inside sensor info

          }, {
            key: "handleChange",
            value: function handleChange(input, cb) {
              if (input) {
                var inputVal = input.value;
                this.setState({
                  currentValue: inputVal
                });
                this.getCoordinates(inputVal, cb);
              } else {
                this.setState({
                  currentValue: ""
                });
                var obj = {
                  key: this.props.componentId,
                  value: null
                };
                if (this.props.onValueChange) {
                  this.props.onValueChange(obj.value);
                }
                _reactivebase.AppbaseSensorHelper.selectedSensor.set(obj, true);
              }
            }
          }, {
            key: "unitFormatter",
            value: function unitFormatter(v) {
              return v + " " + this.props.unit;
            }

            // Handle function when value slider option is changing

          }, {
            key: "handleValuesChange",
            value: function handleValuesChange(component, value) {
              this.setState({
                value: value
              });
            }

            // Handle function when slider option change is completed

          }, {
            key: "handleResults",
            value: function handleResults(value) {
              var distValue = value + this.props.unit;
              this.setState({
                value: value,
                currentDistance: distValue
              }, this.executeQuery.bind(this));
            }
          }, {
            key: "loadOptions",
            value: function loadOptions(input, callback) {
              var _this6 = this;

              this.callback = callback;
              if (input) {
                var googleMaps = this.googleMaps || window.google.maps;
                this.autocompleteService = new googleMaps.places.AutocompleteService();
                var options = {
                  input: input
                };
                this.result = {
                  options: []
                };
                this.autocompleteService.getPlacePredictions(options, function (res) {
                  res.forEach(function (place) {
                    _this6.result.options.push({
                      label: place.description,
                      value: place.description
                    });
                  });
                  if (_this6.state.userLocation.length && _this6.result.options[0].label !== "Use my current location") {
                    _this6.result.options.unshift({
                      label: "Use my current location",
                      value: _this6.state.userLocation
                    });
                  }
                  _this6.callback(null, _this6.result);
                });
              } else {
                this.callback(null, this.result);
              }
            }
          }, {
            key: "renderValue",
            value: function renderValue(option) {
              return _react2.default.createElement(
                "span",
                null,
                option.value
              );
            }

            // render

          }, {
            key: "render",
            value: function render() {
              var title = null,
                marks = {};

              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title" },
                  this.props.title
                );
              }

              if (this.props.rangeLabels.start || this.props.rangeLabels.end) {
                var _marks;

                marks = (_marks = {}, _defineProperty(_marks, this.props.range.start, this.props.rangeLabels.start), _defineProperty(_marks, this.props.range.end, this.props.rangeLabels.end), _marks);
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-placeholder-active": this.props.placeholder,
                "rbc-placeholder-inactive": !this.props.placeholder,
                "rbc-labels-active": this.props.rangeLabels.start || this.props.rangeLabels.end,
                "rbc-labels-inactive": !this.props.rangeLabels.start && !this.props.rangeLabels.end
              });

              return _react2.default.createElement(
                "div", { className: "rbc rbc-geodistanceslider clearfix card thumbnail col s12 col-xs-12 " + cx, style: this.props.componentStyle },
                _react2.default.createElement(
                  "div", { className: "row" },
                  title,
                  _react2.default.createElement(
                    "div", { className: "rbc-search-container col s12 col-xs-12" },
                    _react2.default.createElement(_reactSelect2.default.Async, {
                      value: this.state.currentValue,
                      loadOptions: this.loadOptions,
                      placeholder: this.props.placeholder,
                      onChange: this.handleChange,
                      filterOption: function filterOption() {
                        return true;
                      },
                      valueRenderer: this.renderValue
                    })
                  ),
                  _react2.default.createElement(
                    "div", { className: "rbc-rangeslider-container col s12 col-xs-12" },
                    _react2.default.createElement(_rcSlider2.default, {
                      tipFormatter: this.unitFormatter,
                      value: this.state.value,
                      min: this.props.range.start,
                      max: this.props.range.end,
                      onChange: this.handleResults,
                      marks: marks,
                      step: this.props.stepValue
                    })
                  )
                )
              );
            }
          }]);

          return GeoDistanceSlider;
        }(_react.Component);

        exports.default = GeoDistanceSlider;


        GeoDistanceSlider.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          customQuery: _react2.default.PropTypes.func,
          defaultSelected: _react2.default.PropTypes.shape({
            distance: _react2.default.PropTypes.number,
            location: _react2.default.PropTypes.string
          }),
          placeholder: _react2.default.PropTypes.string,
          unit: _react2.default.PropTypes.oneOf(["mi", "miles", "yd", "yards", "ft", "feet", "in", "inch", "km", "kilometers", "m", "meters", "cm", "centimeters", "mm", "millimeters", "NM", "nmi", "nauticalmiles"]),
          stepValue: _reactivebase.AppbaseSensorHelper.stepValidation,
          range: _react2.default.PropTypes.shape({
            start: _reactivebase.AppbaseSensorHelper.validateThreshold,
            end: _reactivebase.AppbaseSensorHelper.validateThreshold
          }),
          rangeLabels: _react2.default.PropTypes.shape({
            start: _react2.default.PropTypes.string,
            end: _react2.default.PropTypes.string
          }),
          autoLocation: _react2.default.PropTypes.bool,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        GeoDistanceSlider.defaultProps = {
          stepValue: 1,
          unit: "mi",
          placeholder: "Search...",
          range: {
            start: 0,
            end: 10
          },
          rangeLabels: {
            start: null,
            end: null
          },
          autoLocation: true,
          componentStyle: {},
          URLParams: false,
          allowFilter: true
        };

        // context type
        GeoDistanceSlider.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        GeoDistanceSlider.types = {
          componentId: _reactivebase.TYPES.STRING,
          appbaseField: _reactivebase.TYPES.STRING,
          appbaseFieldType: _reactivebase.TYPES.GEO_POINT,
          title: _reactivebase.TYPES.STRING,
          range: _reactivebase.TYPES.OBJECT,
          rangeLabels: _reactivebase.TYPES.OBJECT,
          stepValue: _reactivebase.TYPES.NUMBER,
          unit: _reactivebase.TYPES.STRING,
          autoLocation: _reactivebase.TYPES.BOOLEAN,
          defaultSelected: _reactivebase.TYPES.OBJECT,
          placeholder: _reactivebase.TYPES.STRING,
          customQuery: _reactivebase.TYPES.FUNCTION,
          componentStyle: _reactivebase.TYPES.OBJECT,
          URLParams: _reactivebase.TYPES.BOOLEAN,
          allowFilter: _reactivebase.TYPES.BOOLEAN
        };

        /***/
      }),
      /* 566 */
      /***/
      (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(567);

        /***/
      }),
      /* 567 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var utils = __webpack_require__(568);
        var bind = __webpack_require__(569);
        var Axios = __webpack_require__(570);
        var defaults = __webpack_require__(571);

        /**
         * Create an instance of Axios
         *
         * @param {Object} defaultConfig The default config for the instance
         * @return {Axios} A new instance of Axios
         */
        function createInstance(defaultConfig) {
          var context = new Axios(defaultConfig);
          var instance = bind(Axios.prototype.request, context);

          // Copy axios.prototype to instance
          utils.extend(instance, Axios.prototype, context);

          // Copy context to instance
          utils.extend(instance, context);

          return instance;
        }

        // Create the default instance to be exported
        var axios = createInstance(defaults);

        // Expose Axios class to allow class inheritance
        axios.Axios = Axios;

        // Factory for creating new instances
        axios.create = function create(instanceConfig) {
          return createInstance(utils.merge(defaults, instanceConfig));
        };

        // Expose Cancel & CancelToken
        axios.Cancel = __webpack_require__(588);
        axios.CancelToken = __webpack_require__(589);
        axios.isCancel = __webpack_require__(585);

        // Expose all/spread
        axios.all = function all(promises) {
          return Promise.all(promises);
        };
        axios.spread = __webpack_require__(590);

        module.exports = axios;

        // Allow use of default import syntax in TypeScript
        module.exports.default = axios;


        /***/
      }),
      /* 568 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var bind = __webpack_require__(569);

        /*global toString:true*/

        // utils is a library of generic helper functions non-specific to axios

        var toString = Object.prototype.toString;

        /**
         * Determine if a value is an Array
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Array, otherwise false
         */
        function isArray(val) {
          return toString.call(val) === '[object Array]';
        }

        /**
         * Determine if a value is an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an ArrayBuffer, otherwise false
         */
        function isArrayBuffer(val) {
          return toString.call(val) === '[object ArrayBuffer]';
        }

        /**
         * Determine if a value is a FormData
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an FormData, otherwise false
         */
        function isFormData(val) {
          return (typeof FormData !== 'undefined') && (val instanceof FormData);
        }

        /**
         * Determine if a value is a view on an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
         */
        function isArrayBufferView(val) {
          var result;
          if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
            result = ArrayBuffer.isView(val);
          } else {
            result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
          }
          return result;
        }

        /**
         * Determine if a value is a String
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a String, otherwise false
         */
        function isString(val) {
          return typeof val === 'string';
        }

        /**
         * Determine if a value is a Number
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Number, otherwise false
         */
        function isNumber(val) {
          return typeof val === 'number';
        }

        /**
         * Determine if a value is undefined
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if the value is undefined, otherwise false
         */
        function isUndefined(val) {
          return typeof val === 'undefined';
        }

        /**
         * Determine if a value is an Object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Object, otherwise false
         */
        function isObject(val) {
          return val !== null && typeof val === 'object';
        }

        /**
         * Determine if a value is a Date
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Date, otherwise false
         */
        function isDate(val) {
          return toString.call(val) === '[object Date]';
        }

        /**
         * Determine if a value is a File
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a File, otherwise false
         */
        function isFile(val) {
          return toString.call(val) === '[object File]';
        }

        /**
         * Determine if a value is a Blob
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Blob, otherwise false
         */
        function isBlob(val) {
          return toString.call(val) === '[object Blob]';
        }

        /**
         * Determine if a value is a Function
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Function, otherwise false
         */
        function isFunction(val) {
          return toString.call(val) === '[object Function]';
        }

        /**
         * Determine if a value is a Stream
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Stream, otherwise false
         */
        function isStream(val) {
          return isObject(val) && isFunction(val.pipe);
        }

        /**
         * Determine if a value is a URLSearchParams object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a URLSearchParams object, otherwise false
         */
        function isURLSearchParams(val) {
          return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
        }

        /**
         * Trim excess whitespace off the beginning and end of a string
         *
         * @param {String} str The String to trim
         * @returns {String} The String freed of excess whitespace
         */
        function trim(str) {
          return str.replace(/^\s*/, '').replace(/\s*$/, '');
        }

        /**
         * Determine if we're running in a standard browser environment
         *
         * This allows axios to run in a web worker, and react-native.
         * Both environments support XMLHttpRequest, but not fully standard globals.
         *
         * web workers:
         *  typeof window -> undefined
         *  typeof document -> undefined
         *
         * react-native:
         *  typeof document.createElement -> undefined
         */
        function isStandardBrowserEnv() {
          return (
            typeof window !== 'undefined' &&
            typeof document !== 'undefined' &&
            typeof document.createElement === 'function'
          );
        }

        /**
         * Iterate over an Array or an Object invoking a function for each item.
         *
         * If `obj` is an Array callback will be called passing
         * the value, index, and complete array for each item.
         *
         * If 'obj' is an Object callback will be called passing
         * the value, key, and complete object for each property.
         *
         * @param {Object|Array} obj The object to iterate
         * @param {Function} fn The callback to invoke for each item
         */
        function forEach(obj, fn) {
          // Don't bother if no value provided
          if (obj === null || typeof obj === 'undefined') {
            return;
          }

          // Force an array if not already something iterable
          if (typeof obj !== 'object' && !isArray(obj)) {
            /*eslint no-param-reassign:0*/
            obj = [obj];
          }

          if (isArray(obj)) {
            // Iterate over array values
            for (var i = 0, l = obj.length; i < l; i++) {
              fn.call(null, obj[i], i, obj);
            }
          } else {
            // Iterate over object keys
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) {
                fn.call(null, obj[key], key, obj);
              }
            }
          }
        }

        /**
         * Accepts varargs expecting each argument to be an object, then
         * immutably merges the properties of each object and returns result.
         *
         * When multiple objects contain the same key the later object in
         * the arguments list will take precedence.
         *
         * Example:
         *
         * ```js
         * var result = merge({foo: 123}, {foo: 456});
         * console.log(result.foo); // outputs 456
         * ```
         *
         * @param {Object} obj1 Object to merge
         * @returns {Object} Result of all merge properties
         */
        function merge( /* obj1, obj2, obj3, ... */ ) {
          var result = {};

          function assignValue(val, key) {
            if (typeof result[key] === 'object' && typeof val === 'object') {
              result[key] = merge(result[key], val);
            } else {
              result[key] = val;
            }
          }

          for (var i = 0, l = arguments.length; i < l; i++) {
            forEach(arguments[i], assignValue);
          }
          return result;
        }

        /**
         * Extends object a by mutably adding to it the properties of object b.
         *
         * @param {Object} a The object to be extended
         * @param {Object} b The object to copy properties from
         * @param {Object} thisArg The object to bind function to
         * @return {Object} The resulting value of object a
         */
        function extend(a, b, thisArg) {
          forEach(b, function assignValue(val, key) {
            if (thisArg && typeof val === 'function') {
              a[key] = bind(val, thisArg);
            } else {
              a[key] = val;
            }
          });
          return a;
        }

        module.exports = {
          isArray: isArray,
          isArrayBuffer: isArrayBuffer,
          isFormData: isFormData,
          isArrayBufferView: isArrayBufferView,
          isString: isString,
          isNumber: isNumber,
          isObject: isObject,
          isUndefined: isUndefined,
          isDate: isDate,
          isFile: isFile,
          isBlob: isBlob,
          isFunction: isFunction,
          isStream: isStream,
          isURLSearchParams: isURLSearchParams,
          isStandardBrowserEnv: isStandardBrowserEnv,
          forEach: forEach,
          merge: merge,
          extend: extend,
          trim: trim
        };


        /***/
      }),
      /* 569 */
      /***/
      (function (module, exports) {

        'use strict';

        module.exports = function bind(fn, thisArg) {
          return function wrap() {
            var args = new Array(arguments.length);
            for (var i = 0; i < args.length; i++) {
              args[i] = arguments[i];
            }
            return fn.apply(thisArg, args);
          };
        };


        /***/
      }),
      /* 570 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var defaults = __webpack_require__(571);
        var utils = __webpack_require__(568);
        var InterceptorManager = __webpack_require__(582);
        var dispatchRequest = __webpack_require__(583);
        var isAbsoluteURL = __webpack_require__(586);
        var combineURLs = __webpack_require__(587);

        /**
         * Create a new instance of Axios
         *
         * @param {Object} instanceConfig The default config for the instance
         */
        function Axios(instanceConfig) {
          this.defaults = instanceConfig;
          this.interceptors = {
            request: new InterceptorManager(),
            response: new InterceptorManager()
          };
        }

        /**
         * Dispatch a request
         *
         * @param {Object} config The config specific for this request (merged with this.defaults)
         */
        Axios.prototype.request = function request(config) {
          /*eslint no-param-reassign:0*/
          // Allow for axios('example/url'[, config]) a la fetch API
          if (typeof config === 'string') {
            config = utils.merge({
              url: arguments[0]
            }, arguments[1]);
          }

          config = utils.merge(defaults, this.defaults, { method: 'get' }, config);

          // Support baseURL config
          if (config.baseURL && !isAbsoluteURL(config.url)) {
            config.url = combineURLs(config.baseURL, config.url);
          }

          // Hook up interceptors middleware
          var chain = [dispatchRequest, undefined];
          var promise = Promise.resolve(config);

          this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
            chain.unshift(interceptor.fulfilled, interceptor.rejected);
          });

          this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
            chain.push(interceptor.fulfilled, interceptor.rejected);
          });

          while (chain.length) {
            promise = promise.then(chain.shift(), chain.shift());
          }

          return promise;
        };

        // Provide aliases for supported request methods
        utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
          /*eslint func-names:0*/
          Axios.prototype[method] = function (url, config) {
            return this.request(utils.merge(config || {}, {
              method: method,
              url: url
            }));
          };
        });

        utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
          /*eslint func-names:0*/
          Axios.prototype[method] = function (url, data, config) {
            return this.request(utils.merge(config || {}, {
              method: method,
              url: url,
              data: data
            }));
          };
        });

        module.exports = Axios;


        /***/
      }),
      /* 571 */
      /***/
      (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (process) {
          'use strict';

          var utils = __webpack_require__(568);
          var normalizeHeaderName = __webpack_require__(572);

          var PROTECTION_PREFIX = /^\)\]\}',?\n/;
          var DEFAULT_CONTENT_TYPE = {
            'Content-Type': 'application/x-www-form-urlencoded'
          };

          function setContentTypeIfUnset(headers, value) {
            if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
              headers['Content-Type'] = value;
            }
          }

          function getDefaultAdapter() {
            var adapter;
            if (typeof XMLHttpRequest !== 'undefined') {
              // For browsers use XHR adapter
              adapter = __webpack_require__(573);
            } else if (typeof process !== 'undefined') {
              // For node use HTTP adapter
              adapter = __webpack_require__(573);
            }
            return adapter;
          }

          var defaults = {
            adapter: getDefaultAdapter(),

            transformRequest: [function transformRequest(data, headers) {
              normalizeHeaderName(headers, 'Content-Type');
              if (utils.isFormData(data) ||
                utils.isArrayBuffer(data) ||
                utils.isStream(data) ||
                utils.isFile(data) ||
                utils.isBlob(data)
              ) {
                return data;
              }
              if (utils.isArrayBufferView(data)) {
                return data.buffer;
              }
              if (utils.isURLSearchParams(data)) {
                setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                return data.toString();
              }
              if (utils.isObject(data)) {
                setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
                return JSON.stringify(data);
              }
              return data;
            }],

            transformResponse: [function transformResponse(data) {
              /*eslint no-param-reassign:0*/
              if (typeof data === 'string') {
                data = data.replace(PROTECTION_PREFIX, '');
                try {
                  data = JSON.parse(data);
                } catch (e) { /* Ignore */ }
              }
              return data;
            }],

            timeout: 0,

            xsrfCookieName: 'XSRF-TOKEN',
            xsrfHeaderName: 'X-XSRF-TOKEN',

            maxContentLength: -1,

            validateStatus: function validateStatus(status) {
              return status >= 200 && status < 300;
            }
          };

          defaults.headers = {
            common: {
              'Accept': 'application/json, text/plain, */*'
            }
          };

          utils.forEach(['delete', 'get', 'head'], function forEachMehtodNoData(method) {
            defaults.headers[method] = {};
          });

          utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
            defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
          });

          module.exports = defaults;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(478)))

        /***/
      }),
      /* 572 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var utils = __webpack_require__(568);

        module.exports = function normalizeHeaderName(headers, normalizedName) {
          utils.forEach(headers, function processHeader(value, name) {
            if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
              headers[normalizedName] = value;
              delete headers[name];
            }
          });
        };


        /***/
      }),
      /* 573 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var utils = __webpack_require__(568);
        var settle = __webpack_require__(574);
        var buildURL = __webpack_require__(577);
        var parseHeaders = __webpack_require__(578);
        var isURLSameOrigin = __webpack_require__(579);
        var createError = __webpack_require__(575);
        var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(580);

        module.exports = function xhrAdapter(config) {
          return new Promise(function dispatchXhrRequest(resolve, reject) {
            var requestData = config.data;
            var requestHeaders = config.headers;

            if (utils.isFormData(requestData)) {
              delete requestHeaders['Content-Type']; // Let the browser set it
            }

            var request = new XMLHttpRequest();
            var loadEvent = 'onreadystatechange';
            var xDomain = false;

            // For IE 8/9 CORS support
            // Only supports POST and GET calls and doesn't returns the response headers.
            // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
            if ((undefined) !== 'test' &&
              typeof window !== 'undefined' &&
              window.XDomainRequest && !('withCredentials' in request) &&
              !isURLSameOrigin(config.url)) {
              request = new window.XDomainRequest();
              loadEvent = 'onload';
              xDomain = true;
              request.onprogress = function handleProgress() {};
              request.ontimeout = function handleTimeout() {};
            }

            // HTTP basic authentication
            if (config.auth) {
              var username = config.auth.username || '';
              var password = config.auth.password || '';
              requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
            }

            request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

            // Set the request timeout in MS
            request.timeout = config.timeout;

            // Listen for ready state
            request[loadEvent] = function handleLoad() {
              if (!request || (request.readyState !== 4 && !xDomain)) {
                return;
              }

              // The request errored out and we didn't get a response, this will be
              // handled by onerror instead
              // With one exception: request that using file: protocol, most browsers
              // will return status as 0 even though it's a successful request
              if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                return;
              }

              // Prepare the response
              var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
              var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
              var response = {
                data: responseData,
                // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
                status: request.status === 1223 ? 204 : request.status,
                statusText: request.status === 1223 ? 'No Content' : request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
              };

              settle(resolve, reject, response);

              // Clean up request
              request = null;
            };

            // Handle low level network errors
            request.onerror = function handleError() {
              // Real errors are hidden from us by the browser
              // onerror should only fire if it's a network error
              reject(createError('Network Error', config));

              // Clean up request
              request = null;
            };

            // Handle timeout
            request.ontimeout = function handleTimeout() {
              reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED'));

              // Clean up request
              request = null;
            };

            // Add xsrf header
            // This is only done if running in a standard browser environment.
            // Specifically not if we're in a web worker, or react-native.
            if (utils.isStandardBrowserEnv()) {
              var cookies = __webpack_require__(581);

              // Add xsrf header
              var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
                cookies.read(config.xsrfCookieName) :
                undefined;

              if (xsrfValue) {
                requestHeaders[config.xsrfHeaderName] = xsrfValue;
              }
            }

            // Add headers to the request
            if ('setRequestHeader' in request) {
              utils.forEach(requestHeaders, function setRequestHeader(val, key) {
                if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
                  // Remove Content-Type if data is undefined
                  delete requestHeaders[key];
                } else {
                  // Otherwise add header to the request
                  request.setRequestHeader(key, val);
                }
              });
            }

            // Add withCredentials to request if needed
            if (config.withCredentials) {
              request.withCredentials = true;
            }

            // Add responseType to request if needed
            if (config.responseType) {
              try {
                request.responseType = config.responseType;
              } catch (e) {
                if (request.responseType !== 'json') {
                  throw e;
                }
              }
            }

            // Handle progress if needed
            if (typeof config.onDownloadProgress === 'function') {
              request.addEventListener('progress', config.onDownloadProgress);
            }

            // Not all browsers support upload events
            if (typeof config.onUploadProgress === 'function' && request.upload) {
              request.upload.addEventListener('progress', config.onUploadProgress);
            }

            if (config.cancelToken) {
              // Handle cancellation
              config.cancelToken.promise.then(function onCanceled(cancel) {
                if (!request) {
                  return;
                }

                request.abort();
                reject(cancel);
                // Clean up request
                request = null;
              });
            }

            if (requestData === undefined) {
              requestData = null;
            }

            // Send the request
            request.send(requestData);
          });
        };


        /***/
      }),
      /* 574 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var createError = __webpack_require__(575);

        /**
         * Resolve or reject a Promise based on response status.
         *
         * @param {Function} resolve A function that resolves the promise.
         * @param {Function} reject A function that rejects the promise.
         * @param {object} response The response.
         */
        module.exports = function settle(resolve, reject, response) {
          var validateStatus = response.config.validateStatus;
          // Note: status is not exposed by XDomainRequest
          if (!response.status || !validateStatus || validateStatus(response.status)) {
            resolve(response);
          } else {
            reject(createError(
              'Request failed with status code ' + response.status,
              response.config,
              null,
              response
            ));
          }
        };


        /***/
      }),
      /* 575 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var enhanceError = __webpack_require__(576);

        /**
         * Create an Error with the specified message, config, error code, and response.
         *
         * @param {string} message The error message.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         @ @param {Object} [response] The response.
         * @returns {Error} The created error.
         */
        module.exports = function createError(message, config, code, response) {
          var error = new Error(message);
          return enhanceError(error, config, code, response);
        };


        /***/
      }),
      /* 576 */
      /***/
      (function (module, exports) {

        'use strict';

        /**
         * Update an Error with the specified config, error code, and response.
         *
         * @param {Error} error The error to update.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         @ @param {Object} [response] The response.
         * @returns {Error} The error.
         */
        module.exports = function enhanceError(error, config, code, response) {
          error.config = config;
          if (code) {
            error.code = code;
          }
          error.response = response;
          return error;
        };


        /***/
      }),
      /* 577 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var utils = __webpack_require__(568);

        function encode(val) {
          return encodeURIComponent(val).
          replace(/%40/gi, '@').
          replace(/%3A/gi, ':').
          replace(/%24/g, '$').
          replace(/%2C/gi, ',').
          replace(/%20/g, '+').
          replace(/%5B/gi, '[').
          replace(/%5D/gi, ']');
        }

        /**
         * Build a URL by appending params to the end
         *
         * @param {string} url The base of the url (e.g., http://www.google.com)
         * @param {object} [params] The params to be appended
         * @returns {string} The formatted url
         */
        module.exports = function buildURL(url, params, paramsSerializer) {
          /*eslint no-param-reassign:0*/
          if (!params) {
            return url;
          }

          var serializedParams;
          if (paramsSerializer) {
            serializedParams = paramsSerializer(params);
          } else if (utils.isURLSearchParams(params)) {
            serializedParams = params.toString();
          } else {
            var parts = [];

            utils.forEach(params, function serialize(val, key) {
              if (val === null || typeof val === 'undefined') {
                return;
              }

              if (utils.isArray(val)) {
                key = key + '[]';
              }

              if (!utils.isArray(val)) {
                val = [val];
              }

              utils.forEach(val, function parseValue(v) {
                if (utils.isDate(v)) {
                  v = v.toISOString();
                } else if (utils.isObject(v)) {
                  v = JSON.stringify(v);
                }
                parts.push(encode(key) + '=' + encode(v));
              });
            });

            serializedParams = parts.join('&');
          }

          if (serializedParams) {
            url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
          }

          return url;
        };


        /***/
      }),
      /* 578 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var utils = __webpack_require__(568);

        /**
         * Parse headers into an object
         *
         * ```
         * Date: Wed, 27 Aug 2014 08:58:49 GMT
         * Content-Type: application/json
         * Connection: keep-alive
         * Transfer-Encoding: chunked
         * ```
         *
         * @param {String} headers Headers needing to be parsed
         * @returns {Object} Headers parsed into an object
         */
        module.exports = function parseHeaders(headers) {
          var parsed = {};
          var key;
          var val;
          var i;

          if (!headers) { return parsed; }

          utils.forEach(headers.split('\n'), function parser(line) {
            i = line.indexOf(':');
            key = utils.trim(line.substr(0, i)).toLowerCase();
            val = utils.trim(line.substr(i + 1));

            if (key) {
              parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
            }
          });

          return parsed;
        };


        /***/
      }),
      /* 579 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var utils = __webpack_require__(568);

        module.exports = (
          utils.isStandardBrowserEnv() ?

          // Standard browser envs have full support of the APIs needed to test
          // whether the request URL is of the same origin as current location.
          (function standardBrowserEnv() {
            var msie = /(msie|trident)/i.test(navigator.userAgent);
            var urlParsingNode = document.createElement('a');
            var originURL;

            /**
             * Parse a URL to discover it's components
             *
             * @param {String} url The URL to be parsed
             * @returns {Object}
             */
            function resolveURL(url) {
              var href = url;

              if (msie) {
                // IE needs attribute set twice to normalize properties
                urlParsingNode.setAttribute('href', href);
                href = urlParsingNode.href;
              }

              urlParsingNode.setAttribute('href', href);

              // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
              return {
                href: urlParsingNode.href,
                protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                host: urlParsingNode.host,
                search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                hostname: urlParsingNode.hostname,
                port: urlParsingNode.port,
                pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname : '/' + urlParsingNode.pathname
              };
            }

            originURL = resolveURL(window.location.href);

            /**
             * Determine if a URL shares the same origin as the current location
             *
             * @param {String} requestURL The URL to test
             * @returns {boolean} True if URL shares the same origin, otherwise false
             */
            return function isURLSameOrigin(requestURL) {
              var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
              return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
            };
          })() :

          // Non standard browser envs (web workers, react-native) lack needed support.
          (function nonStandardBrowserEnv() {
            return function isURLSameOrigin() {
              return true;
            };
          })()
        );


        /***/
      }),
      /* 580 */
      /***/
      (function (module, exports) {

        'use strict';

        // btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

        function E() {
          this.message = 'String contains an invalid character';
        }
        E.prototype = new Error;
        E.prototype.code = 5;
        E.prototype.name = 'InvalidCharacterError';

        function btoa(input) {
          var str = String(input);
          var output = '';
          for (
            // initialize result and counter
            var block, charCode, idx = 0, map = chars;
            // if the next str index does not exist:
            //   change the mapping table to "="
            //   check if d has no fractional digits
            str.charAt(idx | 0) || (map = '=', idx % 1);
            // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
            output += map.charAt(63 & block >> 8 - idx % 1 * 8)
          ) {
            charCode = str.charCodeAt(idx += 3 / 4);
            if (charCode > 0xFF) {
              throw new E();
            }
            block = block << 8 | charCode;
          }
          return output;
        }

        module.exports = btoa;


        /***/
      }),
      /* 581 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var utils = __webpack_require__(568);

        module.exports = (
          utils.isStandardBrowserEnv() ?

          // Standard browser envs support document.cookie
          (function standardBrowserEnv() {
            return {
              write: function write(name, value, expires, path, domain, secure) {
                var cookie = [];
                cookie.push(name + '=' + encodeURIComponent(value));

                if (utils.isNumber(expires)) {
                  cookie.push('expires=' + new Date(expires).toGMTString());
                }

                if (utils.isString(path)) {
                  cookie.push('path=' + path);
                }

                if (utils.isString(domain)) {
                  cookie.push('domain=' + domain);
                }

                if (secure === true) {
                  cookie.push('secure');
                }

                document.cookie = cookie.join('; ');
              },

              read: function read(name) {
                var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
                return (match ? decodeURIComponent(match[3]) : null);
              },

              remove: function remove(name) {
                this.write(name, '', Date.now() - 86400000);
              }
            };
          })() :

          // Non standard browser env (web workers, react-native) lack needed support.
          (function nonStandardBrowserEnv() {
            return {
              write: function write() {},
              read: function read() { return null; },
              remove: function remove() {}
            };
          })()
        );


        /***/
      }),
      /* 582 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var utils = __webpack_require__(568);

        function InterceptorManager() {
          this.handlers = [];
        }

        /**
         * Add a new interceptor to the stack
         *
         * @param {Function} fulfilled The function to handle `then` for a `Promise`
         * @param {Function} rejected The function to handle `reject` for a `Promise`
         *
         * @return {Number} An ID used to remove interceptor later
         */
        InterceptorManager.prototype.use = function use(fulfilled, rejected) {
          this.handlers.push({
            fulfilled: fulfilled,
            rejected: rejected
          });
          return this.handlers.length - 1;
        };

        /**
         * Remove an interceptor from the stack
         *
         * @param {Number} id The ID that was returned by `use`
         */
        InterceptorManager.prototype.eject = function eject(id) {
          if (this.handlers[id]) {
            this.handlers[id] = null;
          }
        };

        /**
         * Iterate over all the registered interceptors
         *
         * This method is particularly useful for skipping over any
         * interceptors that may have become `null` calling `eject`.
         *
         * @param {Function} fn The function to call for each interceptor
         */
        InterceptorManager.prototype.forEach = function forEach(fn) {
          utils.forEach(this.handlers, function forEachHandler(h) {
            if (h !== null) {
              fn(h);
            }
          });
        };

        module.exports = InterceptorManager;


        /***/
      }),
      /* 583 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var utils = __webpack_require__(568);
        var transformData = __webpack_require__(584);
        var isCancel = __webpack_require__(585);
        var defaults = __webpack_require__(571);

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        function throwIfCancellationRequested(config) {
          if (config.cancelToken) {
            config.cancelToken.throwIfRequested();
          }
        }

        /**
         * Dispatch a request to the server using the configured adapter.
         *
         * @param {object} config The config that is to be used for the request
         * @returns {Promise} The Promise to be fulfilled
         */
        module.exports = function dispatchRequest(config) {
          throwIfCancellationRequested(config);

          // Ensure headers exist
          config.headers = config.headers || {};

          // Transform request data
          config.data = transformData(
            config.data,
            config.headers,
            config.transformRequest
          );

          // Flatten headers
          config.headers = utils.merge(
            config.headers.common || {},
            config.headers[config.method] || {},
            config.headers || {}
          );

          utils.forEach(
            ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
            function cleanHeaderConfig(method) {
              delete config.headers[method];
            }
          );

          var adapter = config.adapter || defaults.adapter;

          return adapter(config).then(function onAdapterResolution(response) {
            throwIfCancellationRequested(config);

            // Transform response data
            response.data = transformData(
              response.data,
              response.headers,
              config.transformResponse
            );

            return response;
          }, function onAdapterRejection(reason) {
            if (!isCancel(reason)) {
              throwIfCancellationRequested(config);

              // Transform response data
              if (reason && reason.response) {
                reason.response.data = transformData(
                  reason.response.data,
                  reason.response.headers,
                  config.transformResponse
                );
              }
            }

            return Promise.reject(reason);
          });
        };


        /***/
      }),
      /* 584 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var utils = __webpack_require__(568);

        /**
         * Transform the data for a request or a response
         *
         * @param {Object|String} data The data to be transformed
         * @param {Array} headers The headers for the request or response
         * @param {Array|Function} fns A single function or Array of functions
         * @returns {*} The resulting transformed data
         */
        module.exports = function transformData(data, headers, fns) {
          /*eslint no-param-reassign:0*/
          utils.forEach(fns, function transform(fn) {
            data = fn(data, headers);
          });

          return data;
        };


        /***/
      }),
      /* 585 */
      /***/
      (function (module, exports) {

        'use strict';

        module.exports = function isCancel(value) {
          return !!(value && value.__CANCEL__);
        };


        /***/
      }),
      /* 586 */
      /***/
      (function (module, exports) {

        'use strict';

        /**
         * Determines whether the specified URL is absolute
         *
         * @param {string} url The URL to test
         * @returns {boolean} True if the specified URL is absolute, otherwise false
         */
        module.exports = function isAbsoluteURL(url) {
          // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
          // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
          // by any combination of letters, digits, plus, period, or hyphen.
          return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
        };


        /***/
      }),
      /* 587 */
      /***/
      (function (module, exports) {

        'use strict';

        /**
         * Creates a new URL by combining the specified URLs
         *
         * @param {string} baseURL The base URL
         * @param {string} relativeURL The relative URL
         * @returns {string} The combined URL
         */
        module.exports = function combineURLs(baseURL, relativeURL) {
          return baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '');
        };


        /***/
      }),
      /* 588 */
      /***/
      (function (module, exports) {

        'use strict';

        /**
         * A `Cancel` is an object that is thrown when an operation is canceled.
         *
         * @class
         * @param {string=} message The message.
         */
        function Cancel(message) {
          this.message = message;
        }

        Cancel.prototype.toString = function toString() {
          return 'Cancel' + (this.message ? ': ' + this.message : '');
        };

        Cancel.prototype.__CANCEL__ = true;

        module.exports = Cancel;


        /***/
      }),
      /* 589 */
      /***/
      (function (module, exports, __webpack_require__) {

        'use strict';

        var Cancel = __webpack_require__(588);

        /**
         * A `CancelToken` is an object that can be used to request cancellation of an operation.
         *
         * @class
         * @param {Function} executor The executor function.
         */
        function CancelToken(executor) {
          if (typeof executor !== 'function') {
            throw new TypeError('executor must be a function.');
          }

          var resolvePromise;
          this.promise = new Promise(function promiseExecutor(resolve) {
            resolvePromise = resolve;
          });

          var token = this;
          executor(function cancel(message) {
            if (token.reason) {
              // Cancellation has already been requested
              return;
            }

            token.reason = new Cancel(message);
            resolvePromise(token.reason);
          });
        }

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        CancelToken.prototype.throwIfRequested = function throwIfRequested() {
          if (this.reason) {
            throw this.reason;
          }
        };

        /**
         * Returns an object that contains a new `CancelToken` and a function that, when called,
         * cancels the `CancelToken`.
         */
        CancelToken.source = function source() {
          var cancel;
          var token = new CancelToken(function executor(c) {
            cancel = c;
          });
          return {
            token: token,
            cancel: cancel
          };
        };

        module.exports = CancelToken;


        /***/
      }),
      /* 590 */
      /***/
      (function (module, exports) {

        'use strict';

        /**
         * Syntactic sugar for invoking a function and expanding an array for arguments.
         *
         * Common use case would be to use `Function.prototype.apply`.
         *
         *  ```js
         *  function f(x, y, z) {}
         *  var args = [1, 2, 3];
         *  f.apply(null, args);
         *  ```
         *
         * With `spread` this example can be re-written.
         *
         *  ```js
         *  spread(function(x, y, z) {})([1, 2, 3]);
         *  ```
         *
         * @param {Function} callback
         * @returns {Function}
         */
        module.exports = function spread(callback) {
          return function wrap(arr) {
            return callback.apply(null, arr);
          };
        };


        /***/
      }),
      /* 591 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactivebase = __webpack_require__(57);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _axios = __webpack_require__(566);

        var _axios2 = _interopRequireDefault(_axios);

        var _reactSelect = __webpack_require__(88);

        var _reactSelect2 = _interopRequireDefault(_reactSelect);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var _ = __webpack_require__(69);

        var GeoDistanceDropdown = function (_Component) {
          _inherits(GeoDistanceDropdown, _Component);

          function GeoDistanceDropdown(props) {
            _classCallCheck(this, GeoDistanceDropdown);

            var _this = _possibleConstructorReturn(this, (GeoDistanceDropdown.__proto__ || Object.getPrototypeOf(GeoDistanceDropdown)).call(this, props));

            _this.state = {
              selected: {},
              currentValue: "",
              userLocation: ""
            };
            _this.type = "geo_distance_range";
            _this.locString = "";
            _this.unit = _this.props.unit;
            _this.result = {
              options: []
            };
            _this.sortInfo = {
              type: "_geo_distance",
              order: "asc",
              unit: _this.unit
            };
            _this.allowedUnit = ["mi", "miles", "yd", "yards", "ft", "feet", "in", "inch", "km", "kilometers", "m", "meters", "cm", "centimeters", "mm", "millimeters", "NM", "nmi", "nauticalmiles"];
            _this.urlParams = _reactivebase.AppbaseSensorHelper.URLParams.get(_this.props.componentId, false, true);
            _this.defaultSelected = _this.urlParams !== null ? _this.urlParams : _this.props.defaultSelected;
            if (_this.defaultSelected) {
              var selected = _this.props.data.filter(function (item) {
                return item.label === _this.defaultSelected;
              });
              if (selected[0]) {
                _this.state.selected = selected[0];
              }
            }
            _this.handleChange = _this.handleChange.bind(_this);
            _this.loadOptions = _this.loadOptions.bind(_this);
            _this.customQuery = _this.customQuery.bind(_this);
            _this.getUserLocation = _this.getUserLocation.bind(_this);
            _this.setDefaultLocation = _this.setDefaultLocation.bind(_this);
            _this.handleDistanceChange = _this.handleDistanceChange.bind(_this);
            return _this;
          }

          _createClass(GeoDistanceDropdown, [{
            key: "componentWillMount",
            value: function componentWillMount() {
              this.googleMaps = window.google.maps;
            }

            // Set query information

          }, {
            key: "componentDidMount",
            value: function componentDidMount() {
              this.unit = this.props.unit;
              this.getUserLocation();
              this.setQueryInfo();
              this.checkDefault();
              this.listenFilter();
            }
          }, {
            key: "componentWillUpdate",
            value: function componentWillUpdate() {
              var _this2 = this;

              var defaultValue = this.urlParams !== null ? this.urlParams : this.props.defaultSelected;
              if (!_.isEqual(this.defaultSelected, defaultValue)) {
                this.defaultSelected = defaultValue;
                this.checkDefault();
              }
              if (this.props.unit !== this.unit) {
                var selected = this.allowedUnit.filter(function (item) {
                  return item === _this2.props.unit;
                });
                if (selected[0]) {
                  this.unit = this.props.unit;
                  this.executeQuery();
                }
              }
            }

            // stop streaming request and remove listener when component will unmount

          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this3 = this;

              this.filterListener = _reactivebase.AppbaseSensorHelper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this3.props.componentId) {
                  _this3.defaultValue = null;
                  _this3.changeValue(_this3.defaultValue);
                }
              });
            }
          }, {
            key: "checkDefault",
            value: function checkDefault() {
              this.urlParams = _reactivebase.AppbaseSensorHelper.URLParams.get(this.props.componentId, false, true);
              var defaultValue = this.urlParams !== null ? this.urlParams : this.props.defaultSelected;
              this.changeValue(defaultValue);
            }
          }, {
            key: "changeValue",
            value: function changeValue(defaultValue) {
              if (defaultValue && defaultValue.location) {
                var currentValue = defaultValue.location;
                this.result.options.push({
                  value: currentValue,
                  label: currentValue
                });
                this.setState({
                  currentValue: currentValue
                }, this.getCoordinates(currentValue, this.handleResults));
              } else if (defaultValue && defaultValue.label) {
                this.getUserLocation(this.setDefaultLocation);
                this.handleResults(defaultValue.label);
              } else if (defaultValue === null) {
                this.setState({
                  selected: null,
                  currentValue: ""
                }, this.executeQuery);
              } else {
                this.getUserLocation(this.setDefaultLocation);
              }
            }
          }, {
            key: "handleResults",
            value: function handleResults(distance) {
              var selected = this.props.data.filter(function (item) {
                return item.label === distance;
              });
              if (selected[0]) {
                this.setState({
                  selected: selected[0]
                }, this.executeQuery);
              }
            }
          }, {
            key: "getUserLocation",
            value: function getUserLocation(cb) {
              var _this4 = this;

              navigator.geolocation.getCurrentPosition(function (location) {
                _this4.locString = location.coords.latitude + ", " + location.coords.longitude;

                _axios2.default.get("https://maps.googleapis.com/maps/api/geocode/json?latlng=" + _this4.locString).then(function (res) {
                  var userLocation = res.data.results[0].formatted_address;
                  _this4.setState({
                    userLocation: userLocation
                  });
                }).then(function () {
                  if (cb) {
                    cb();
                  }
                });
              });
            }
          }, {
            key: "setDefaultLocation",
            value: function setDefaultLocation() {
              var _this5 = this;

              this.result.options.push({
                value: this.state.userLocation,
                label: "Use my current location"
              });
              if (this.props.autoLocation) {
                this.setState({
                  currentValue: this.state.userLocation
                }, function () {
                  _this5.executeQuery();
                });
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  appbaseField: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: "GeoDistanceDropdown"
                }
              };
              _reactivebase.AppbaseSensorHelper.selectedSensor.setSensorInfo(obj);
            }

            // build query for this sensor only

          }, {
            key: "customQuery",
            value: function customQuery(value) {
              var query = null;
              if (value && value.start >= 0 && value.end >= 0 && value.location !== "") {
                var _type;

                query = _defineProperty({}, this.type, (_type = {}, _defineProperty(_type, this.props.appbaseField, value.location), _defineProperty(_type, "from", value.start + this.unit), _defineProperty(_type, "to", value.end + this.unit), _type));
              }
              return query;
            }

            // get coordinates

          }, {
            key: "getCoordinates",
            value: function getCoordinates(value, cb) {
              var _this6 = this;

              if (value && value !== "") {
                _axios2.default.get("https://maps.googleapis.com/maps/api/geocode/json?address=" + value).then(function (res) {
                  var location = res.data.results[0].geometry.location;
                  _this6.locString = location.lat + ", " + location.lng;
                  if (cb) {
                    cb.call(_this6, _this6.defaultSelected.label);
                  } else {
                    _this6.executeQuery();
                  }
                });
              } else {
                _reactivebase.AppbaseSensorHelper.selectedSensor.set(null, true);
              }
            }

            // execute query after changing location or distance

          }, {
            key: "executeQuery",
            value: function executeQuery() {
              if (this.state.currentValue !== "" && this.state.selected && this.locString) {
                var _sortInfo$type;

                var obj = {
                  key: this.props.componentId,
                  value: {
                    currentValue: this.state.currentValue,
                    start: this.state.selected.start,
                    end: this.state.selected.end,
                    location: this.locString,
                    unit: this.unit
                  }
                };
                var sortObj = {
                  key: this.props.componentId,
                  value: _defineProperty({}, this.sortInfo.type, (_sortInfo$type = {}, _defineProperty(_sortInfo$type, this.props.appbaseField, this.locString), _defineProperty(_sortInfo$type, "order", this.sortInfo.order), _defineProperty(_sortInfo$type, "unit", this.unit), _sortInfo$type))
                };
                if (this.props.onValueChange) {
                  this.props.onValueChange(obj.value);
                }
                _reactivebase.AppbaseSensorHelper.selectedSensor.setSortInfo(sortObj);
                _reactivebase.AppbaseSensorHelper.URLParams.update(this.props.componentId, this.setURLValue(), this.props.URLParams);
                _reactivebase.AppbaseSensorHelper.selectedSensor.set(obj, true);
              } else if (this.state.selected === null && this.state.currentValue === "") {
                var _obj = {
                  key: this.props.componentId,
                  value: null
                };
                _reactivebase.AppbaseSensorHelper.URLParams.update(this.props.componentId, null, this.props.URLParams);
                _reactivebase.AppbaseSensorHelper.selectedSensor.set(_obj, true);
              }
            }
          }, {
            key: "setURLValue",
            value: function setURLValue() {
              return JSON.stringify({
                location: this.state.currentValue,
                label: this.state.selected.label
              });
            }

            // handle the input change and pass the value inside sensor info

          }, {
            key: "handleChange",
            value: function handleChange(input) {
              if (input) {
                var inputVal = input.value;
                this.setState({
                  currentValue: inputVal
                });
                this.getCoordinates(inputVal);
              } else {
                this.setState({
                  currentValue: ""
                });
                var obj = {
                  key: this.props.componentId,
                  value: null
                };
                if (this.props.onValueChange) {
                  this.props.onValueChange(obj.value);
                }
                _reactivebase.AppbaseSensorHelper.URLParams.update(this.props.componentId, null, this.props.URLParams);
                _reactivebase.AppbaseSensorHelper.selectedSensor.set(obj, true);
              }
            }
          }, {
            key: "loadOptions",
            value: function loadOptions(input, callback) {
              var _this7 = this;

              this.callback = callback;
              if (input) {
                var googleMaps = this.googleMaps || window.google.maps;
                this.autocompleteService = new googleMaps.places.AutocompleteService();
                var options = {
                  input: input
                };
                this.result = {
                  options: []
                };
                this.autocompleteService.getPlacePredictions(options, function (res) {
                  res.forEach(function (place) {
                    _this7.result.options.push({
                      label: place.description,
                      value: place.description
                    });
                  });
                  if (_this7.state.userLocation.length && _this7.result.options[0].label !== "Use my current location") {
                    _this7.result.options.unshift({
                      label: "Use my current location",
                      value: _this7.state.userLocation
                    });
                  }
                  _this7.callback(null, _this7.result);
                });
              } else {
                this.callback(null, this.result);
              }
            }
          }, {
            key: "handleDistanceChange",
            value: function handleDistanceChange(input) {
              this.setState({
                selected: {
                  start: input.start,
                  end: input.end,
                  label: input.label
                }
              }, this.executeQuery.bind(this));
            }
          }, {
            key: "renderValue",
            value: function renderValue(option) {
              return _react2.default.createElement(
                "span",
                null,
                option.value
              );
            }

            // render

          }, {
            key: "render",
            value: function render() {
              var title = null;

              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-placeholder-active": this.props.placeholder,
                "rbc-placeholder-inactive": !this.props.placeholder
              });

              return _react2.default.createElement(
                "div", { className: "rbc rbc-geodistancedropdown clearfix card thumbnail col s12 col-xs-12 " + cx, style: this.props.componentStyle },
                _react2.default.createElement(
                  "div", { className: "row" },
                  title,
                  _react2.default.createElement(
                    "div", { className: "rbc-search-container col s12 col-xs-12" },
                    _react2.default.createElement(_reactSelect2.default.Async, {
                      value: this.state.currentValue,
                      loadOptions: this.loadOptions,
                      placeholder: this.props.placeholder,
                      onChange: this.handleChange,
                      filterOption: function filterOption() {
                        return true;
                      },
                      valueRenderer: this.renderValue
                    })
                  ),
                  _react2.default.createElement(
                    "div", { className: "col s12 col-xs-12" },
                    _react2.default.createElement(_reactSelect2.default, {
                      value: this.state.selected && this.state.selected.label ? this.state.selected : "",
                      options: this.props.data,
                      clearable: false,
                      searchable: false,
                      onChange: this.handleDistanceChange,
                      placeholder: this.props.placeholderDropdown
                    })
                  )
                )
              );
            }
          }]);

          return GeoDistanceDropdown;
        }(_react.Component);

        exports.default = GeoDistanceDropdown;


        GeoDistanceDropdown.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          customQuery: _react2.default.PropTypes.func,
          defaultSelected: _react2.default.PropTypes.shape({
            label: _react2.default.PropTypes.string,
            location: _react2.default.PropTypes.string
          }),
          placeholder: _react2.default.PropTypes.string,
          placeholderDropdown: _react2.default.PropTypes.string,
          autoLocation: _react2.default.PropTypes.bool,
          unit: _react2.default.PropTypes.oneOf(["mi", "miles", "yd", "yards", "ft", "feet", "in", "inch", "km", "kilometers", "m", "meters", "cm", "centimeters", "mm", "millimeters", "NM", "nmi", "nauticalmiles"]),
          data: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
            start: _reactivebase.AppbaseSensorHelper.validateThreshold,
            end: _reactivebase.AppbaseSensorHelper.validateThreshold,
            label: _react2.default.PropTypes.string.isRequired
          })),
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool
        };

        // Default props value
        GeoDistanceDropdown.defaultProps = {
          unit: "mi",
          placeholder: "Search...",
          placeholderDropdown: "Select Distance",
          autoLocation: true,
          componentStyle: {},
          URLParams: false,
          allowFilter: true
        };

        // context type
        GeoDistanceDropdown.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        GeoDistanceDropdown.types = {
          componentId: _reactivebase.TYPES.STRING,
          appbaseField: _reactivebase.TYPES.STRING,
          appbaseFieldType: _reactivebase.TYPES.GEO_POINT,
          title: _reactivebase.TYPES.STRING,
          data: _reactivebase.TYPES.ARRAY,
          unit: _reactivebase.TYPES.STRING,
          autoLocation: _reactivebase.TYPES.BOOLEAN,
          defaultSelected: _reactivebase.TYPES.OBJECT,
          placeholder: _reactivebase.TYPES.STRING,
          placeholderDropdown: _reactivebase.TYPES.STRING,
          customQuery: _reactivebase.TYPES.FUNCTION,
          componentStyle: _reactivebase.TYPES.OBJECT,
          URLParams: _reactivebase.TYPES.BOOLEAN,
          allowFilter: _reactivebase.TYPES.BOOLEAN
        };

        /***/
      }),
      /* 592 */
      /***/
      (function (module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _createClass = function () {
          function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        var _react = __webpack_require__(3);

        var _react2 = _interopRequireDefault(_react);

        var _reactivebase = __webpack_require__(57);

        var _classnames = __webpack_require__(56);

        var _classnames2 = _interopRequireDefault(_classnames);

        var _axios = __webpack_require__(566);

        var _axios2 = _interopRequireDefault(_axios);

        var _reactSelect = __webpack_require__(88);

        var _reactSelect2 = _interopRequireDefault(_reactSelect);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var PlacesSearch = function (_Component) {
          _inherits(PlacesSearch, _Component);

          function PlacesSearch(props) {
            _classCallCheck(this, PlacesSearch);

            var _this = _possibleConstructorReturn(this, (PlacesSearch.__proto__ || Object.getPrototypeOf(PlacesSearch)).call(this, props));

            _this.state = {
              userLocation: "",
              currentValue: "",
              currentDistance: 0,
              value: 0
            };
            _this.type = "match";
            _this.locString = "";
            _this.result = {
              options: []
            };
            _this.queryInfo = {
              type: "geo_distance",
              unit: "mi",
              start: 0,
              end: 10
            };
            _this.handleChange = _this.handleChange.bind(_this);
            _this.loadOptions = _this.loadOptions.bind(_this);
            _this.handleValuesChange = _this.handleValuesChange.bind(_this);
            _this.handleResults = _this.handleResults.bind(_this);
            _this.customQuery = _this.customQuery.bind(_this);
            _this.setDefaultLocation = _this.setDefaultLocation.bind(_this);
            _this.urlParams = _reactivebase.AppbaseSensorHelper.URLParams.get(_this.props.componentId);
            return _this;
          }

          _createClass(PlacesSearch, [{
            key: "componentWillMount",
            value: function componentWillMount() {
              this.googleMaps = window.google.maps;
            }
          }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              this.checkDefault(nextProps);
            }

            // Set query information

          }, {
            key: "componentDidMount",
            value: function componentDidMount() {
              this.setQueryInfo();
              this.getUserLocation(this.setDefaultLocation);
              this.checkDefault(this.props);
              this.listenFilter();
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this.filterListener) {
                this.filterListener.remove();
              }
            }
          }, {
            key: "listenFilter",
            value: function listenFilter() {
              var _this2 = this;

              this.filterListener = _reactivebase.AppbaseSensorHelper.sensorEmitter.addListener("clearFilter", function (data) {
                if (data === _this2.props.componentId) {
                  _this2.defaultValue = null;
                  _this2.changeValue(_this2.defaultValue);
                }
              });
            }
          }, {
            key: "getUserLocation",
            value: function getUserLocation(cb) {
              var _this3 = this;

              navigator.geolocation.getCurrentPosition(function (location) {
                _this3.locString = location.coords.latitude + ", " + location.coords.longitude;
                _axios2.default.get("https://maps.googleapis.com/maps/api/geocode/json?latlng=" + _this3.locString).then(function (res) {
                  var userLocation = res.data.results[0].formatted_address;
                  _this3.setState({
                    userLocation: userLocation
                  });
                }).then(function () {
                  if (cb) {
                    cb();
                  }
                });
              });
            }
          }, {
            key: "checkDefault",
            value: function checkDefault(props) {
              this.urlParams = _reactivebase.AppbaseSensorHelper.URLParams.get(props.componentId);
              this.defaultValue = this.urlParams !== null ? this.urlParams : props.defaultSelected;
              this.changeValue(this.defaultValue);
            }
          }, {
            key: "changeValue",
            value: function changeValue(defaultValue) {
              var _this4 = this;

              if (this.defaultSelected != defaultValue) {
                this.defaultSelected = defaultValue;
                if (this.defaultSelected !== null) {
                  var isExists = this.result.options.length ? this.result.options.every(function (item) {
                    return item.value !== _this4.defaultSelected && item.label !== _this4.defaultSelected;
                  }) : false;

                  if (!isExists) {
                    this.result.options.push({
                      value: this.defaultSelected,
                      label: this.defaultSelected
                    });
                  }
                }
                this.handleChange({
                  value: this.defaultSelected
                });
              }
            }
          }, {
            key: "setDefaultLocation",
            value: function setDefaultLocation() {
              var _this5 = this;

              this.result.options.push({
                value: this.state.userLocation,
                label: "Use my current location"
              });
              if (this.props.autoLocation && !this.props.URLParams) {
                this.setState({
                  currentValue: this.state.userLocation
                }, function () {
                  _this5.executeQuery();
                });
              }
            }

            // set the query type and input data

          }, {
            key: "setQueryInfo",
            value: function setQueryInfo() {
              var obj = {
                key: this.props.componentId,
                value: {
                  queryType: this.type,
                  inputData: this.props.appbaseField,
                  customQuery: this.props.customQuery ? this.props.customQuery : this.customQuery,
                  reactiveId: this.context.reactiveId,
                  allowFilter: this.props.allowFilter,
                  component: "PlacesSearch"
                }
              };
              _reactivebase.AppbaseSensorHelper.selectedSensor.setSensorInfo(obj);
            }

            // build query for this sensor only

          }, {
            key: "customQuery",
            value: function customQuery(value) {
              var query = null;
              if (value && value.location) {
                var _queryInfo$type;

                query = _defineProperty({}, this.queryInfo.type, (_queryInfo$type = {}, _defineProperty(_queryInfo$type, this.props.appbaseField, this.parseValue(value.location)), _defineProperty(_queryInfo$type, "distance", this.queryInfo.end + this.queryInfo.unit), _queryInfo$type));
              }
              return query;
            }
          }, {
            key: "parseValue",
            value: function parseValue(location) {
              location = location.split(',');
              return {
                lat: Number(location[0]),
                lon: Number(location[1])
              };
            }

            // get coordinates

          }, {
            key: "getCoordinates",
            value: function getCoordinates(value) {
              var _this6 = this;

              if (value && value !== "") {
                _axios2.default.get("https://maps.googleapis.com/maps/api/geocode/json?address=" + value).then(function (res) {
                  var location = res.data.results[0].geometry.location;
                  _this6.locString = location.lat + ", " + location.lng;
                  _this6.executeQuery();
                });
              } else {
                _reactivebase.AppbaseSensorHelper.selectedSensor.set(null, true);
              }
            }

            // execute query after changing location or distanc

          }, {
            key: "executeQuery",
            value: function executeQuery() {
              if (this.state.currentValue !== "" && this.locString) {
                var obj = {
                  key: this.props.componentId,
                  value: {
                    currentValue: this.state.currentValue,
                    location: this.locString
                  }
                };
                if (this.props.onValueChange) {
                  this.props.onValueChange(obj.value);
                }
                _reactivebase.AppbaseSensorHelper.URLParams.update(this.props.componentId, this.state.currentValue, this.props.URLParams);
                _reactivebase.AppbaseSensorHelper.selectedSensor.set(obj, true);
              }
            }

            // handle the input change and pass the value inside sensor info

          }, {
            key: "handleChange",
            value: function handleChange(input) {
              if (input && input.value) {
                var inputVal = input.value;
                this.setState({
                  currentValue: inputVal
                });
                this.getCoordinates(inputVal);
              } else {
                this.setState({
                  currentValue: ""
                });
                var obj = {
                  key: this.props.componentId,
                  value: null
                };
                if (this.props.onValueChange) {
                  this.props.onValueChange(obj.value);
                }
                _reactivebase.AppbaseSensorHelper.URLParams.update(this.props.componentId, null, this.props.URLParams);
                _reactivebase.AppbaseSensorHelper.selectedSensor.set(obj, true);
              }
            }

            // Handle function when value slider option is changing

          }, {
            key: "handleValuesChange",
            value: function handleValuesChange(component, value) {
              this.setState({
                value: value
              });
            }

            // Handle function when slider option change is completed

          }, {
            key: "handleResults",
            value: function handleResults(component, value) {
              value += this.props.unit;
              this.setState({
                currentDistance: value
              }, this.executeQuery.bind(this));
            }
          }, {
            key: "loadOptions",
            value: function loadOptions(input, callback) {
              var _this7 = this;

              this.callback = callback;
              if (input) {
                var googleMaps = this.googleMaps || window.google.maps;
                this.autocompleteService = new googleMaps.places.AutocompleteService();
                var options = {
                  input: input
                };
                this.result = {
                  options: []
                };
                this.autocompleteService.getPlacePredictions(options, function (res) {
                  res.map(function (place) {
                    _this7.result.options.push({
                      value: place.description,
                      label: place.description
                    });
                  });
                  if (_this7.state.userLocation.length && _this7.result.options[0].label !== "Use my current location") {
                    _this7.result.options.unshift({
                      label: "Use my current location",
                      value: _this7.state.userLocation
                    });
                  }
                  _this7.callback(null, _this7.result);
                });
              } else {
                this.callback(null, this.result);
              }
            }
          }, {
            key: "renderValue",
            value: function renderValue(option) {
              return _react2.default.createElement(
                "span",
                null,
                option.value
              );
            }

            // render

          }, {
            key: "render",
            value: function render() {
              var title = null;
              if (this.props.title) {
                title = _react2.default.createElement(
                  "h4", { className: "rbc-title" },
                  this.props.title
                );
              }

              var cx = (0, _classnames2.default)({
                "rbc-title-active": this.props.title,
                "rbc-title-inactive": !this.props.title,
                "rbc-placeholder-active": this.props.placeholder,
                "rbc-placeholder-inactive": !this.props.placeholder
              });

              return _react2.default.createElement(
                "div", { className: "rbc rbc-placessearch clearfix card thumbnail col s12 col-xs-12 " + cx, style: this.props.componentStyle },
                _react2.default.createElement(
                  "div", { className: "row" },
                  title,
                  _react2.default.createElement(
                    "div", { className: "col s12 col-xs-12" },
                    _react2.default.createElement(_reactSelect2.default.Async, {
                      value: this.state.currentValue,
                      loadOptions: this.loadOptions,
                      placeholder: this.props.placeholder,
                      onChange: this.handleChange,
                      valueRenderer: this.renderValue
                    })
                  )
                )
              );
            }
          }]);

          return PlacesSearch;
        }(_react.Component);

        exports.default = PlacesSearch;


        PlacesSearch.propTypes = {
          componentId: _react2.default.PropTypes.string.isRequired,
          appbaseField: _react2.default.PropTypes.string.isRequired,
          title: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.element]),
          customQuery: _react2.default.PropTypes.func,
          placeholder: _react2.default.PropTypes.string,
          autoLocation: _react2.default.PropTypes.bool,
          onValueChange: _react2.default.PropTypes.func,
          componentStyle: _react2.default.PropTypes.object,
          URLParams: _react2.default.PropTypes.bool,
          allowFilter: _react2.default.PropTypes.bool,
          unit: _react2.default.PropTypes.oneOf(["mi", "miles", "yd", "yards", "ft", "feet", "in", "inch", "km", "kilometers", "m", "meters", "cm", "centimeters", "mm", "millimeters", "NM", "nmi", "nauticalmiles"])
        };
        // Default props value
        PlacesSearch.defaultProps = {
          placeholder: "Search..",
          autoLocation: true,
          componentStyle: {},
          URLParams: false,
          allowFilter: true
        };

        // context type
        PlacesSearch.contextTypes = {
          appbaseRef: _react2.default.PropTypes.any.isRequired,
          type: _react2.default.PropTypes.any.isRequired,
          reactiveId: _react2.default.PropTypes.number
        };

        PlacesSearch.types = {
          componentId: _reactivebase.TYPES.STRING,
          appbaseField: _reactivebase.TYPES.STRING,
          title: _reactivebase.TYPES.STRING,
          customQuery: _reactivebase.TYPES.FUNCTION,
          placeholder: _reactivebase.TYPES.STRING,
          autoLocation: _reactivebase.TYPES.BOOLEAN,
          componentStyle: _reactivebase.TYPES.OBJECT,
          unit: _reactivebase.TYPES.STRING,
          URLParams: _reactivebase.TYPES.BOOLEAN,
          allowFilter: _reactivebase.TYPES.BOOLEAN
        };

        /***/
      })
      /******/
    ])
});;
